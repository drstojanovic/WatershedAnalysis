; ModuleID = 'pgi_cuda_runtime_cc60_90_.ll'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v32:32:32-v64:64:64-v128:128:128-n16:32:64"
target triple = "nvptx64-unknown"

%struct.Ebound = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.__pgi_PGI_Grid = type { i64, i32, i32 }
%struct.dcmplx2 = type { double, double }
%struct.cmplx2 = type { float, float }
%struct.F90_Desc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, [7 x %struct.F90_DescDim] }
%struct.F90_DescDim = type { i32, i32, i32, i32, i32, i32 }
%struct.F90_Desc_la = type { i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, [7 x %struct.F90_DescDim_la] }
%struct.F90_DescDim_la = type { i64, i64, i64, i64, i64, i64 }
%struct.dim3 = type { i32, i32, i32 }
%struct.CUstream_st = type opaque
%struct.cudaDeviceProp = type { [256 x i8], i64, i64, i32, i32, i64, i32, [3 x i32], [3 x i32], i32, i64, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [3 x i32], [2 x i32], [3 x i32], [3 x i32], i32, [2 x i32], [3 x i32], [2 x i32], i32, [2 x i32], [3 x i32], [2 x i32], [3 x i32], i32, [2 x i32], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.CUevent_st = type opaque
%struct.cudaFuncAttributes = type { i64, i64, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.__fcomplex = type { float, float }
%struct.__dcomplex = type { double, double }

@.str = private unnamed_addr constant [33 x i8] c"FATAL ERROR: VECTOR OUT OF RANGE\00", align 1
@.str1 = private unnamed_addr constant [44 x i8] c"FATAL ERROR: FORTRAN AUTO ALLOCATION FAILED\00", align 1
@.str2 = private unnamed_addr constant [36 x i8] c"FATAL ERROR: ARRAY IS NOT ALLOCATED\00", align 1
@.str3 = private unnamed_addr constant [53 x i8] c"FATAL ERROR: ARRAY (LEFT HAND SIDE) IS NOT ALLOCATED\00", align 1
@.str4 = private unnamed_addr constant [37 x i8] c"FATAL ERROR: NON-CONTIGUOUS ARGUMENT\00", align 1
@.str5 = private unnamed_addr constant [37 x i8] c"FATAL ERROR: NON-STRIDE-ONE ARGUMENT\00", align 1
@.str6 = private unnamed_addr constant [38 x i8] c"FATAL ERROR: ARRAY IS NOT CONFORMABLE\00", align 1
@"$str" = private addrspace(1) constant [15 x i8] c"FORTRAN STOP: \00"
@"$str1" = private addrspace(1) constant [3 x i8] c"%c\00"
@"$str2" = private addrspace(1) constant [3 x i8] c": \00"
@"$str3" = private addrspace(1) constant [5 x i8] c"%d: \00"
@"$str4" = private addrspace(1) constant [37 x i8] c"Block (%d,%d,%d), Thread (%d,%d,%d)\0A\00"
@"$str5" = private addrspace(1) constant [23 x i8] c"FORTRAN_STOP_STATEMENT\00"
@"$str6" = private addrspace(1) constant [10 x i8] c"stop08.cu\00"
@"$str7" = private addrspace(1) constant [14 x i8] c"pgf90_stop08a\00"
@"$str8" = private unnamed_addr constant [38 x i8] c"FATAL ERROR: Array is not conformable\00"
@"$str9" = private unnamed_addr constant [36 x i8] c"FATAL ERROR: Array is not allocated\00"
@"$strfatal" = private unnamed_addr constant [52 x i8] c"Fatal Error: %s: Block(%d,%d,%d) Thread (%d,%d,%d)\0A\00"
@nullstr = private addrspace(1) constant [1 x i8] zeroinitializer

define  i32 @__pgi_strlen(i8* %str, i32 %maxlen) nounwind alwaysinline {
entry:
  %str.addr = alloca i8*, align 8
  %maxlen.addr = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store i32 %maxlen, i32* %maxlen.addr, align 4
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8** %str.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32* %len, align 4
  %3 = load i32* %maxlen.addr, align 4
  %cmp = icmp ult i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i32* %len, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %len, align 4
  %6 = load i8** %str.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %6, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %7 = load i32* %len, align 4
  ret i32 %7
}

define  void @__pgi_itoa(i32 %inum, i8* %str) nounwind alwaysinline {
entry:
  %inum.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %tmp = alloca i8, align 1
  %remain = alloca i32, align 4
  store i32 %inum, i32* %inum.addr, align 4
  store i8* %str, i8** %str.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load i32* %inum.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i8** %str.addr, align 8
  %arrayidx = getelementptr inbounds i8* %2, i64 %idxprom
  store i8 48, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32* %inum.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32* %inum.addr, align 4
  %rem = urem i32 %4, 10
  store i32 %rem, i32* %remain, align 4
  %5 = load i32* %remain, align 4
  %add = add i32 %5, 48
  %conv = trunc i32 %add to i8
  %6 = load i32* %i, align 4
  %inc2 = add nsw i32 %6, 1
  store i32 %inc2, i32* %i, align 4
  %idxprom3 = sext i32 %6 to i64
  %7 = load i8** %str.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %7, i64 %idxprom3
  store i8 %conv, i8* %arrayidx4, align 1
  %8 = load i32* %inum.addr, align 4
  %div = udiv i32 %8, 10
  store i32 %div, i32* %inum.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load i32* %i, align 4
  %idxprom5 = sext i32 %9 to i64
  %10 = load i8** %str.addr, align 8
  %arrayidx6 = getelementptr inbounds i8* %10, i64 %idxprom5
  store i8 0, i8* %arrayidx6, align 1
  store i32 0, i32* %start, align 4
  %11 = load i32* %i, align 4
  %sub = sub nsw i32 %11, 1
  store i32 %sub, i32* %end, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body10, %while.end
  %12 = load i32* %start, align 4
  %13 = load i32* %end, align 4
  %cmp8 = icmp slt i32 %12, %13
  br i1 %cmp8, label %while.body10, label %while.end18

while.body10:                                     ; preds = %while.cond7
  %14 = load i8** %str.addr, align 8
  %15 = load i32* %start, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds i8* %14, i64 %idx.ext
  %16 = load i8* %add.ptr, align 1
  store i8 %16, i8* %tmp, align 1
  %17 = load i8** %str.addr, align 8
  %18 = load i32* %end, align 4
  %idx.ext11 = sext i32 %18 to i64
  %add.ptr12 = getelementptr inbounds i8* %17, i64 %idx.ext11
  %19 = load i8* %add.ptr12, align 1
  %20 = load i8** %str.addr, align 8
  %21 = load i32* %start, align 4
  %idx.ext13 = sext i32 %21 to i64
  %add.ptr14 = getelementptr inbounds i8* %20, i64 %idx.ext13
  store i8 %19, i8* %add.ptr14, align 1
  %22 = load i8* %tmp, align 1
  %23 = load i8** %str.addr, align 8
  %24 = load i32* %end, align 4
  %idx.ext15 = sext i32 %24 to i64
  %add.ptr16 = getelementptr inbounds i8* %23, i64 %idx.ext15
  store i8 %22, i8* %add.ptr16, align 1
  %25 = load i32* %start, align 4
  %inc17 = add nsw i32 %25, 1
  store i32 %inc17, i32* %start, align 4
  %26 = load i32* %end, align 4
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %end, align 4
  br label %while.cond7

while.end18:                                      ; preds = %while.cond7
  ret void
}

define  void @__pgi_error_msg(i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort, i8* %errmsg) nounwind alwaysinline {
entry:
  %inum.addr.i = alloca i32, align 4
  %str.addr.i107 = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %start.i = alloca i32, align 4
  %end.i = alloca i32, align 4
  %tmp.i = alloca i8, align 1
  %remain.i = alloca i32, align 4
  %str.addr.i94 = alloca i8*, align 8
  %maxlen.addr.i95 = alloca i32, align 4
  %len.i96 = alloca i32, align 4
  %str.addr.i81 = alloca i8*, align 8
  %maxlen.addr.i82 = alloca i32, align 4
  %len.i83 = alloca i32, align 4
  %str.addr.i68 = alloca i8*, align 8
  %maxlen.addr.i69 = alloca i32, align 4
  %len.i70 = alloca i32, align 4
  %str.addr.i = alloca i8*, align 8
  %maxlen.addr.i = alloca i32, align 4
  %len.i = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %errmsg.addr = alloca i8*, align 8
  %buf = alloca [1024 x i8], align 1
  %linenobuf = alloca [16 x i8], align 1
  %i = alloca i32, align 4
  %curr = alloca i32, align 4
  %fnamelen = alloca i32, align 4
  %funclen = alloca i32, align 4
  %linenolen = alloca i32, align 4
  %errmsglen = alloca i32, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i32 0, i32* %curr, align 4
  %0 = load i32* %__abort.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  store i8* %1, i8** %str.addr.i, align 8
  store i32 256, i32* %maxlen.addr.i, align 4
  store i32 0, i32* %len.i, align 4
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.end
  %2 = load i8** %str.addr.i, align 8
  %3 = load i8* %2, align 1
  %conv.i = sext i8 %3 to i32
  %tobool.i = icmp ne i32 %conv.i, 0
  br i1 %tobool.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %while.cond.i
  %4 = load i32* %len.i, align 4
  %5 = load i32* %maxlen.addr.i, align 4
  %cmp.i = icmp ult i32 %4, %5
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %while.cond.i
  %6 = phi i1 [ false, %while.cond.i ], [ %cmp.i, %land.rhs.i ]
  br i1 %6, label %while.body.i, label %__pgi_strlen.exit

while.body.i:                                     ; preds = %land.end.i
  %7 = load i32* %len.i, align 4
  %inc.i = add i32 %7, 1
  store i32 %inc.i, i32* %len.i, align 4
  %8 = load i8** %str.addr.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8* %8, i32 1
  store i8* %incdec.ptr.i, i8** %str.addr.i, align 8
  br label %while.cond.i

__pgi_strlen.exit:                                ; preds = %land.end.i
  %9 = load i32* %len.i, align 4
  store i32 %9, i32* %fnamelen, align 4
  %10 = load i8** %__function.addr, align 8
  store i8* %10, i8** %str.addr.i68, align 8
  store i32 256, i32* %maxlen.addr.i69, align 4
  store i32 0, i32* %len.i70, align 4
  br label %while.cond.i73

while.cond.i73:                                   ; preds = %while.body.i79, %__pgi_strlen.exit
  %11 = load i8** %str.addr.i68, align 8
  %12 = load i8* %11, align 1
  %conv.i71 = sext i8 %12 to i32
  %tobool.i72 = icmp ne i32 %conv.i71, 0
  br i1 %tobool.i72, label %land.rhs.i75, label %land.end.i76

land.rhs.i75:                                     ; preds = %while.cond.i73
  %13 = load i32* %len.i70, align 4
  %14 = load i32* %maxlen.addr.i69, align 4
  %cmp.i74 = icmp ult i32 %13, %14
  br label %land.end.i76

land.end.i76:                                     ; preds = %land.rhs.i75, %while.cond.i73
  %15 = phi i1 [ false, %while.cond.i73 ], [ %cmp.i74, %land.rhs.i75 ]
  br i1 %15, label %while.body.i79, label %__pgi_strlen.exit80

while.body.i79:                                   ; preds = %land.end.i76
  %16 = load i32* %len.i70, align 4
  %inc.i77 = add i32 %16, 1
  store i32 %inc.i77, i32* %len.i70, align 4
  %17 = load i8** %str.addr.i68, align 8
  %incdec.ptr.i78 = getelementptr inbounds i8* %17, i32 1
  store i8* %incdec.ptr.i78, i8** %str.addr.i68, align 8
  br label %while.cond.i73

__pgi_strlen.exit80:                              ; preds = %land.end.i76
  %18 = load i32* %len.i70, align 4
  store i32 %18, i32* %funclen, align 4
  %19 = load i32* %__lineno.addr, align 4
  %arraydecay = getelementptr inbounds [16 x i8]* %linenobuf, i32 0, i32 0
  store i32 %19, i32* %inum.addr.i, align 4
  store i8* %arraydecay, i8** %str.addr.i107, align 8
  store i32 0, i32* %i.i, align 4
  %20 = load i32* %inum.addr.i, align 4
  %cmp.i108 = icmp eq i32 %20, 0
  br i1 %cmp.i108, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %__pgi_strlen.exit80
  %21 = load i32* %i.i, align 4
  %inc.i109 = add nsw i32 %21, 1
  store i32 %inc.i109, i32* %i.i, align 4
  %idxprom.i = sext i32 %21 to i64
  %22 = load i8** %str.addr.i107, align 8
  %arrayidx.i = getelementptr inbounds i8* %22, i64 %idxprom.i
  store i8 48, i8* %arrayidx.i, align 1
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %__pgi_strlen.exit80
  br label %while.cond.i111

while.cond.i111:                                  ; preds = %while.body.i113, %if.end.i
  %23 = load i32* %inum.addr.i, align 4
  %tobool.i110 = icmp ne i32 %23, 0
  br i1 %tobool.i110, label %while.body.i113, label %while.end.i

while.body.i113:                                  ; preds = %while.cond.i111
  %24 = load i32* %inum.addr.i, align 4
  %rem.i = urem i32 %24, 10
  store i32 %rem.i, i32* %remain.i, align 4
  %25 = load i32* %remain.i, align 4
  %add.i = add i32 %25, 48
  %conv.i112 = trunc i32 %add.i to i8
  %26 = load i32* %i.i, align 4
  %inc2.i = add nsw i32 %26, 1
  store i32 %inc2.i, i32* %i.i, align 4
  %idxprom3.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107, align 8
  %arrayidx4.i = getelementptr inbounds i8* %27, i64 %idxprom3.i
  store i8 %conv.i112, i8* %arrayidx4.i, align 1
  %28 = load i32* %inum.addr.i, align 4
  %div.i = udiv i32 %28, 10
  store i32 %div.i, i32* %inum.addr.i, align 4
  br label %while.cond.i111

while.end.i:                                      ; preds = %while.cond.i111
  %29 = load i32* %i.i, align 4
  %idxprom5.i = sext i32 %29 to i64
  %30 = load i8** %str.addr.i107, align 8
  %arrayidx6.i = getelementptr inbounds i8* %30, i64 %idxprom5.i
  store i8 0, i8* %arrayidx6.i, align 1
  store i32 0, i32* %start.i, align 4
  %31 = load i32* %i.i, align 4
  %sub.i = sub nsw i32 %31, 1
  store i32 %sub.i, i32* %end.i, align 4
  br label %while.cond7.i

while.cond7.i:                                    ; preds = %while.body10.i, %while.end.i
  %32 = load i32* %start.i, align 4
  %33 = load i32* %end.i, align 4
  %cmp8.i = icmp slt i32 %32, %33
  br i1 %cmp8.i, label %while.body10.i, label %__pgi_itoa.exit

while.body10.i:                                   ; preds = %while.cond7.i
  %34 = load i8** %str.addr.i107, align 8
  %35 = load i32* %start.i, align 4
  %idx.ext.i = sext i32 %35 to i64
  %add.ptr.i = getelementptr inbounds i8* %34, i64 %idx.ext.i
  %36 = load i8* %add.ptr.i, align 1
  store i8 %36, i8* %tmp.i, align 1
  %37 = load i8** %str.addr.i107, align 8
  %38 = load i32* %end.i, align 4
  %idx.ext11.i = sext i32 %38 to i64
  %add.ptr12.i = getelementptr inbounds i8* %37, i64 %idx.ext11.i
  %39 = load i8* %add.ptr12.i, align 1
  %40 = load i8** %str.addr.i107, align 8
  %41 = load i32* %start.i, align 4
  %idx.ext13.i = sext i32 %41 to i64
  %add.ptr14.i = getelementptr inbounds i8* %40, i64 %idx.ext13.i
  store i8 %39, i8* %add.ptr14.i, align 1
  %42 = load i8* %tmp.i, align 1
  %43 = load i8** %str.addr.i107, align 8
  %44 = load i32* %end.i, align 4
  %idx.ext15.i = sext i32 %44 to i64
  %add.ptr16.i = getelementptr inbounds i8* %43, i64 %idx.ext15.i
  store i8 %42, i8* %add.ptr16.i, align 1
  %45 = load i32* %start.i, align 4
  %inc17.i = add nsw i32 %45, 1
  store i32 %inc17.i, i32* %start.i, align 4
  %46 = load i32* %end.i, align 4
  %dec.i = add nsw i32 %46, -1
  store i32 %dec.i, i32* %end.i, align 4
  br label %while.cond7.i

__pgi_itoa.exit:                                  ; preds = %while.cond7.i
  %arraydecay2 = getelementptr inbounds [16 x i8]* %linenobuf, i32 0, i32 0
  store i8* %arraydecay2, i8** %str.addr.i94, align 8
  store i32 16, i32* %maxlen.addr.i95, align 4
  store i32 0, i32* %len.i96, align 4
  br label %while.cond.i99

while.cond.i99:                                   ; preds = %while.body.i105, %__pgi_itoa.exit
  %47 = load i8** %str.addr.i94, align 8
  %48 = load i8* %47, align 1
  %conv.i97 = sext i8 %48 to i32
  %tobool.i98 = icmp ne i32 %conv.i97, 0
  br i1 %tobool.i98, label %land.rhs.i101, label %land.end.i102

land.rhs.i101:                                    ; preds = %while.cond.i99
  %49 = load i32* %len.i96, align 4
  %50 = load i32* %maxlen.addr.i95, align 4
  %cmp.i100 = icmp ult i32 %49, %50
  br label %land.end.i102

land.end.i102:                                    ; preds = %land.rhs.i101, %while.cond.i99
  %51 = phi i1 [ false, %while.cond.i99 ], [ %cmp.i100, %land.rhs.i101 ]
  br i1 %51, label %while.body.i105, label %__pgi_strlen.exit106

while.body.i105:                                  ; preds = %land.end.i102
  %52 = load i32* %len.i96, align 4
  %inc.i103 = add i32 %52, 1
  store i32 %inc.i103, i32* %len.i96, align 4
  %53 = load i8** %str.addr.i94, align 8
  %incdec.ptr.i104 = getelementptr inbounds i8* %53, i32 1
  store i8* %incdec.ptr.i104, i8** %str.addr.i94, align 8
  br label %while.cond.i99

__pgi_strlen.exit106:                             ; preds = %land.end.i102
  %54 = load i32* %len.i96, align 4
  store i32 %54, i32* %linenolen, align 4
  %55 = load i8** %errmsg.addr, align 8
  store i8* %55, i8** %str.addr.i81, align 8
  store i32 256, i32* %maxlen.addr.i82, align 4
  store i32 0, i32* %len.i83, align 4
  br label %while.cond.i86

while.cond.i86:                                   ; preds = %while.body.i92, %__pgi_strlen.exit106
  %56 = load i8** %str.addr.i81, align 8
  %57 = load i8* %56, align 1
  %conv.i84 = sext i8 %57 to i32
  %tobool.i85 = icmp ne i32 %conv.i84, 0
  br i1 %tobool.i85, label %land.rhs.i88, label %land.end.i89

land.rhs.i88:                                     ; preds = %while.cond.i86
  %58 = load i32* %len.i83, align 4
  %59 = load i32* %maxlen.addr.i82, align 4
  %cmp.i87 = icmp ult i32 %58, %59
  br label %land.end.i89

land.end.i89:                                     ; preds = %land.rhs.i88, %while.cond.i86
  %60 = phi i1 [ false, %while.cond.i86 ], [ %cmp.i87, %land.rhs.i88 ]
  br i1 %60, label %while.body.i92, label %__pgi_strlen.exit93

while.body.i92:                                   ; preds = %land.end.i89
  %61 = load i32* %len.i83, align 4
  %inc.i90 = add i32 %61, 1
  store i32 %inc.i90, i32* %len.i83, align 4
  %62 = load i8** %str.addr.i81, align 8
  %incdec.ptr.i91 = getelementptr inbounds i8* %62, i32 1
  store i8* %incdec.ptr.i91, i8** %str.addr.i81, align 8
  br label %while.cond.i86

__pgi_strlen.exit93:                              ; preds = %land.end.i89
  %63 = load i32* %len.i83, align 4
  store i32 %63, i32* %errmsglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %__pgi_strlen.exit93
  %64 = load i32* %i, align 4
  %65 = load i32* %fnamelen, align 4
  %cmp = icmp ult i32 %64, %65
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %66 = load i32* %i, align 4
  %idxprom = zext i32 %66 to i64
  %67 = load i8** %__filename.addr, align 8
  %arrayidx = getelementptr inbounds i8* %67, i64 %idxprom
  %68 = load i8* %arrayidx, align 1
  %69 = load i32* %i, align 4
  %idxprom5 = zext i32 %69 to i64
  %arrayidx6 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom5
  store i8 %68, i8* %arrayidx6, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %70 = load i32* %i, align 4
  %inc = add i32 %70, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %71 = load i32* %curr, align 4
  %72 = load i32* %i, align 4
  %add = add i32 %71, %72
  store i32 %add, i32* %curr, align 4
  %73 = load i32* %curr, align 4
  %inc7 = add i32 %73, 1
  store i32 %inc7, i32* %curr, align 4
  %idxprom8 = zext i32 %73 to i64
  %arrayidx9 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom8
  store i8 58, i8* %arrayidx9, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc18, %for.end
  %74 = load i32* %i, align 4
  %75 = load i32* %linenolen, align 4
  %cmp11 = icmp ult i32 %74, %75
  br i1 %cmp11, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond10
  %76 = load i32* %i, align 4
  %idxprom13 = zext i32 %76 to i64
  %arrayidx14 = getelementptr inbounds [16 x i8]* %linenobuf, i32 0, i64 %idxprom13
  %77 = load i8* %arrayidx14, align 1
  %78 = load i32* %curr, align 4
  %79 = load i32* %i, align 4
  %add15 = add i32 %78, %79
  %idxprom16 = zext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom16
  store i8 %77, i8* %arrayidx17, align 1
  br label %for.inc18

for.inc18:                                        ; preds = %for.body12
  %80 = load i32* %i, align 4
  %inc19 = add i32 %80, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond10

for.end20:                                        ; preds = %for.cond10
  %81 = load i32* %curr, align 4
  %82 = load i32* %i, align 4
  %add21 = add i32 %81, %82
  store i32 %add21, i32* %curr, align 4
  %83 = load i32* %curr, align 4
  %inc22 = add i32 %83, 1
  store i32 %inc22, i32* %curr, align 4
  %idxprom23 = zext i32 %83 to i64
  %arrayidx24 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom23
  store i8 32, i8* %arrayidx24, align 1
  %84 = load i32* %curr, align 4
  %inc25 = add i32 %84, 1
  store i32 %inc25, i32* %curr, align 4
  %idxprom26 = zext i32 %84 to i64
  %arrayidx27 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom26
  store i8 45, i8* %arrayidx27, align 1
  %85 = load i32* %curr, align 4
  %inc28 = add i32 %85, 1
  store i32 %inc28, i32* %curr, align 4
  %idxprom29 = zext i32 %85 to i64
  %arrayidx30 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom29
  store i8 32, i8* %arrayidx30, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %for.end20
  %86 = load i32* %i, align 4
  %87 = load i32* %funclen, align 4
  %cmp32 = icmp ult i32 %86, %87
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %88 = load i32* %i, align 4
  %idxprom34 = zext i32 %88 to i64
  %89 = load i8** %__function.addr, align 8
  %arrayidx35 = getelementptr inbounds i8* %89, i64 %idxprom34
  %90 = load i8* %arrayidx35, align 1
  %91 = load i32* %curr, align 4
  %92 = load i32* %i, align 4
  %add36 = add i32 %91, %92
  %idxprom37 = zext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom37
  store i8 %90, i8* %arrayidx38, align 1
  br label %for.inc39

for.inc39:                                        ; preds = %for.body33
  %93 = load i32* %i, align 4
  %inc40 = add i32 %93, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond31

for.end41:                                        ; preds = %for.cond31
  %94 = load i32* %curr, align 4
  %95 = load i32* %i, align 4
  %add42 = add i32 %94, %95
  store i32 %add42, i32* %curr, align 4
  %96 = load i32* %curr, align 4
  %inc43 = add i32 %96, 1
  store i32 %inc43, i32* %curr, align 4
  %idxprom44 = zext i32 %96 to i64
  %arrayidx45 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom44
  store i8 58, i8* %arrayidx45, align 1
  %97 = load i32* %curr, align 4
  %inc46 = add i32 %97, 1
  store i32 %inc46, i32* %curr, align 4
  %idxprom47 = zext i32 %97 to i64
  %arrayidx48 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom47
  store i8 32, i8* %arrayidx48, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc57, %for.end41
  %98 = load i32* %i, align 4
  %99 = load i32* %errmsglen, align 4
  %cmp50 = icmp ult i32 %98, %99
  br i1 %cmp50, label %for.body51, label %for.end59

for.body51:                                       ; preds = %for.cond49
  %100 = load i32* %i, align 4
  %idxprom52 = zext i32 %100 to i64
  %101 = load i8** %errmsg.addr, align 8
  %arrayidx53 = getelementptr inbounds i8* %101, i64 %idxprom52
  %102 = load i8* %arrayidx53, align 1
  %103 = load i32* %curr, align 4
  %104 = load i32* %i, align 4
  %add54 = add i32 %103, %104
  %idxprom55 = zext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom55
  store i8 %102, i8* %arrayidx56, align 1
  br label %for.inc57

for.inc57:                                        ; preds = %for.body51
  %105 = load i32* %i, align 4
  %inc58 = add i32 %105, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond49

for.end59:                                        ; preds = %for.cond49
  %106 = load i32* %curr, align 4
  %107 = load i32* %i, align 4
  %add60 = add i32 %106, %107
  store i32 %add60, i32* %curr, align 4
  %108 = load i32* %curr, align 4
  %inc61 = add i32 %108, 1
  store i32 %inc61, i32* %curr, align 4
  %idxprom62 = zext i32 %108 to i64
  %arrayidx63 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom62
  store i8 10, i8* %arrayidx63, align 1
  %109 = load i32* %curr, align 4
  %inc64 = add i32 %109, 1
  store i32 %inc64, i32* %curr, align 4
  %idxprom65 = zext i32 %109 to i64
  %arrayidx66 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom65
  store i8 0, i8* %arrayidx66, align 1
  %arraydecay67 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67)
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %return

return:                                           ; preds = %for.end59, %if.then
  ret void
}

define  void @__pgi_simple_error_msg(i8* %errmsg) nounwind alwaysinline {
entry:
  %str.addr.i = alloca i8*, align 8
  %maxlen.addr.i = alloca i32, align 4
  %len.i = alloca i32, align 4
  %errmsg.addr = alloca i8*, align 8
  %buf = alloca [1024 x i8], align 1
  %i = alloca i32, align 4
  %errmsglen = alloca i32, align 4
  store i8* %errmsg, i8** %errmsg.addr, align 8
  %0 = load i8** %errmsg.addr, align 8
  store i8* %0, i8** %str.addr.i, align 8
  store i32 256, i32* %maxlen.addr.i, align 4
  store i32 0, i32* %len.i, align 4
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %entry
  %1 = load i8** %str.addr.i, align 8
  %2 = load i8* %1, align 1
  %conv.i = sext i8 %2 to i32
  %tobool.i = icmp ne i32 %conv.i, 0
  br i1 %tobool.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %while.cond.i
  %3 = load i32* %len.i, align 4
  %4 = load i32* %maxlen.addr.i, align 4
  %cmp.i = icmp ult i32 %3, %4
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %while.cond.i
  %5 = phi i1 [ false, %while.cond.i ], [ %cmp.i, %land.rhs.i ]
  br i1 %5, label %while.body.i, label %__pgi_strlen.exit

while.body.i:                                     ; preds = %land.end.i
  %6 = load i32* %len.i, align 4
  %inc.i = add i32 %6, 1
  store i32 %inc.i, i32* %len.i, align 4
  %7 = load i8** %str.addr.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr.i, i8** %str.addr.i, align 8
  br label %while.cond.i

__pgi_strlen.exit:                                ; preds = %land.end.i
  %8 = load i32* %len.i, align 4
  store i32 %8, i32* %errmsglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %__pgi_strlen.exit
  %9 = load i32* %i, align 4
  %10 = load i32* %errmsglen, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i8** %errmsg.addr, align 8
  %arrayidx = getelementptr inbounds i8* %12, i64 %idxprom
  %13 = load i8* %arrayidx, align 1
  %14 = load i32* %i, align 4
  %idxprom1 = sext i32 %14 to i64
  %arrayidx2 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom1
  store i8 %13, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32* %i, align 4
  %inc3 = add nsw i32 %16, 1
  store i32 %inc3, i32* %i, align 4
  %idxprom4 = sext i32 %16 to i64
  %arrayidx5 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom4
  store i8 10, i8* %arrayidx5, align 1
  %17 = load i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  %idxprom7 = sext i32 %17 to i64
  %arrayidx8 = getelementptr inbounds [1024 x i8]* %buf, i32 0, i64 %idxprom7
  store i8 0, i8* %arrayidx8, align 1
  %arraydecay = getelementptr inbounds [1024 x i8]* %buf, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay)
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !1
  ret void
}

define  void @__pgi_throw_out_of_range(i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %__filename.addr, align 8
  %1 = load i32* %__lineno.addr, align 4
  %2 = load i8** %__function.addr, align 8
  %3 = load i32* %__abort.addr, align 4
  store i8* %0, i8** %__filename.addr.i, align 8
  store i32 %1, i32* %__lineno.addr.i, align 4
  store i8* %2, i8** %__function.addr.i, align 8
  store i32 %3, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([33 x i8]* @.str, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %4 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %4, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %entry
  %5 = load i8** %__filename.addr.i, align 8
  store i8* %5, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %6 = load i8** %str.addr.i.i, align 8
  %7 = load i8* %6, align 1
  %conv.i.i = sext i8 %7 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %8 = load i32* %len.i.i, align 4
  %9 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %8, %9
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %10 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %10, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %11 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %11, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %12 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %12, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %13 = load i32* %len.i.i, align 4
  store i32 %13, i32* %fnamelen.i, align 4
  %14 = load i8** %__function.addr.i, align 8
  store i8* %14, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %15 = load i8** %str.addr.i68.i, align 8
  %16 = load i8* %15, align 1
  %conv.i71.i = sext i8 %16 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %17 = load i32* %len.i70.i, align 4
  %18 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %17, %18
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %19 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %19, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %20 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %20, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %21 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %22 = load i32* %len.i70.i, align 4
  store i32 %22, i32* %funclen.i, align 4
  %23 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %23, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %24 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %24, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %25 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %25, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %25 to i64
  %26 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %26, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %27 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %27, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %28 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %28, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %29 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %29, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %30 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %30, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %30 to i64
  %31 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %31, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %32 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %32, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %33 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %33 to i64
  %34 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %34, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %35 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %35, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %36 = load i32* %start.i.i, align 4
  %37 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %36, %37
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %38 = load i8** %str.addr.i107.i, align 8
  %39 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %39 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %38, i64 %idx.ext.i.i
  %40 = load i8* %add.ptr.i.i, align 1
  store i8 %40, i8* %tmp.i.i, align 1
  %41 = load i8** %str.addr.i107.i, align 8
  %42 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %42 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %41, i64 %idx.ext11.i.i
  %43 = load i8* %add.ptr12.i.i, align 1
  %44 = load i8** %str.addr.i107.i, align 8
  %45 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %45 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %44, i64 %idx.ext13.i.i
  store i8 %43, i8* %add.ptr14.i.i, align 1
  %46 = load i8* %tmp.i.i, align 1
  %47 = load i8** %str.addr.i107.i, align 8
  %48 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %48 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %47, i64 %idx.ext15.i.i
  store i8 %46, i8* %add.ptr16.i.i, align 1
  %49 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %49, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %50 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %50, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %51 = load i8** %str.addr.i94.i, align 8
  %52 = load i8* %51, align 1
  %conv.i97.i = sext i8 %52 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %53 = load i32* %len.i96.i, align 4
  %54 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %53, %54
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %55 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %55, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %56 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %56, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %57 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %57, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %58 = load i32* %len.i96.i, align 4
  store i32 %58, i32* %linenolen.i, align 4
  %59 = load i8** %errmsg.addr.i, align 8
  store i8* %59, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %60 = load i8** %str.addr.i81.i, align 8
  %61 = load i8* %60, align 1
  %conv.i84.i = sext i8 %61 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %62 = load i32* %len.i83.i, align 4
  %63 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %62, %63
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %64 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %64, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %65 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %65, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %66 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %67 = load i32* %len.i83.i, align 4
  store i32 %67, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %68 = load i32* %i.i, align 4
  %69 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %68, %69
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %70 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %70 to i64
  %71 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %71, i64 %idxprom.i
  %72 = load i8* %arrayidx.i, align 1
  %73 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %73 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %72, i8* %arrayidx6.i, align 1
  %74 = load i32* %i.i, align 4
  %inc.i = add i32 %74, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %75 = load i32* %curr.i, align 4
  %76 = load i32* %i.i, align 4
  %add.i = add i32 %75, %76
  store i32 %add.i, i32* %curr.i, align 4
  %77 = load i32* %curr.i, align 4
  %inc7.i = add i32 %77, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %77 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %78 = load i32* %i.i, align 4
  %79 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %78, %79
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %80 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %80 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %81 = load i8* %arrayidx14.i, align 1
  %82 = load i32* %curr.i, align 4
  %83 = load i32* %i.i, align 4
  %add15.i = add i32 %82, %83
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %81, i8* %arrayidx17.i, align 1
  %84 = load i32* %i.i, align 4
  %inc19.i = add i32 %84, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %85 = load i32* %curr.i, align 4
  %86 = load i32* %i.i, align 4
  %add21.i = add i32 %85, %86
  store i32 %add21.i, i32* %curr.i, align 4
  %87 = load i32* %curr.i, align 4
  %inc22.i = add i32 %87, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %87 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %88 = load i32* %curr.i, align 4
  %inc25.i = add i32 %88, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %88 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc28.i = add i32 %89, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %89 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %90 = load i32* %i.i, align 4
  %91 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %90, %91
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %92 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %92 to i64
  %93 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %93, i64 %idxprom34.i
  %94 = load i8* %arrayidx35.i, align 1
  %95 = load i32* %curr.i, align 4
  %96 = load i32* %i.i, align 4
  %add36.i = add i32 %95, %96
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %94, i8* %arrayidx38.i, align 1
  %97 = load i32* %i.i, align 4
  %inc40.i = add i32 %97, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %98 = load i32* %curr.i, align 4
  %99 = load i32* %i.i, align 4
  %add42.i = add i32 %98, %99
  store i32 %add42.i, i32* %curr.i, align 4
  %100 = load i32* %curr.i, align 4
  %inc43.i = add i32 %100, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %100 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %101 = load i32* %curr.i, align 4
  %inc46.i = add i32 %101, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %101 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %102 = load i32* %i.i, align 4
  %103 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %102, %103
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %104 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %104 to i64
  %105 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %105, i64 %idxprom52.i
  %106 = load i8* %arrayidx53.i, align 1
  %107 = load i32* %curr.i, align 4
  %108 = load i32* %i.i, align 4
  %add54.i = add i32 %107, %108
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %106, i8* %arrayidx56.i, align 1
  %109 = load i32* %i.i, align 4
  %inc58.i = add i32 %109, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %110 = load i32* %curr.i, align 4
  %111 = load i32* %i.i, align 4
  %add60.i = add i32 %110, %111
  store i32 %add60.i, i32* %curr.i, align 4
  %112 = load i32* %curr.i, align 4
  %inc61.i = add i32 %112, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %112 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %113 = load i32* %curr.i, align 4
  %inc64.i = add i32 %113, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %113 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  ret void
}

define  i32 @__pgi_boundcheck(i32 %value, i32 %lb, i32 %extent, i32 %linenum, i32 %ssnum, i32 %n1, i32 %n2, i32 %n3, i32 %ref, i8* %E_param) nounwind alwaysinline {
entry:
  %value.addr = alloca i32, align 4
  %lb.addr = alloca i32, align 4
  %extent.addr = alloca i32, align 4
  %linenum.addr = alloca i32, align 4
  %ssnum.addr = alloca i32, align 4
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %n3.addr = alloca i32, align 4
  %ref.addr = alloca i32, align 4
  %E_param.addr = alloca i8*, align 8
  %E = alloca %struct.Ebound*, align 8
  store i32 %value, i32* %value.addr, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %extent, i32* %extent.addr, align 4
  store i32 %linenum, i32* %linenum.addr, align 4
  store i32 %ssnum, i32* %ssnum.addr, align 4
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i32 %n3, i32* %n3.addr, align 4
  store i32 %ref, i32* %ref.addr, align 4
  store i8* %E_param, i8** %E_param.addr, align 8
  %0 = load i8** %E_param.addr, align 8
  %1 = bitcast i8* %0 to %struct.Ebound*
  store %struct.Ebound* %1, %struct.Ebound** %E, align 8
  %2 = load i32* %value.addr, align 4
  ret i32 %2
}

define  double @__pgi_dsign(double %a, double %b) nounwind alwaysinline {
entry:
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %r = alloca double, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load double* %b.addr, align 8
  %cmp = fcmp olt double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast double* %a.addr to i32*
  %arrayidx = getelementptr inbounds i32* %1, i64 1
  %2 = load i32* %arrayidx, align 4
  %or = or i32 %2, -2147483648
  %3 = bitcast double* %r to i32*
  %arrayidx1 = getelementptr inbounds i32* %3, i64 1
  store i32 %or, i32* %arrayidx1, align 4
  br label %if.end18

if.else:                                          ; preds = %entry
  %4 = load double* %b.addr, align 8
  %cmp2 = fcmp ogt double %4, 0.000000e+00
  br i1 %cmp2, label %if.then3, label %if.else6

if.then3:                                         ; preds = %if.else
  %5 = bitcast double* %a.addr to i32*
  %arrayidx4 = getelementptr inbounds i32* %5, i64 1
  %6 = load i32* %arrayidx4, align 4
  %and = and i32 %6, 2147483647
  %7 = bitcast double* %r to i32*
  %arrayidx5 = getelementptr inbounds i32* %7, i64 1
  store i32 %and, i32* %arrayidx5, align 4
  br label %if.end17

if.else6:                                         ; preds = %if.else
  %8 = bitcast double* %b.addr to i32*
  %arrayidx7 = getelementptr inbounds i32* %8, i64 1
  %9 = load i32* %arrayidx7, align 4
  %and8 = and i32 %9, -2147483648
  %tobool = icmp ne i32 %and8, 0
  br i1 %tobool, label %if.then9, label %if.else13

if.then9:                                         ; preds = %if.else6
  %10 = bitcast double* %a.addr to i32*
  %arrayidx10 = getelementptr inbounds i32* %10, i64 1
  %11 = load i32* %arrayidx10, align 4
  %or11 = or i32 %11, -2147483648
  %12 = bitcast double* %r to i32*
  %arrayidx12 = getelementptr inbounds i32* %12, i64 1
  store i32 %or11, i32* %arrayidx12, align 4
  br label %if.end

if.else13:                                        ; preds = %if.else6
  %13 = bitcast double* %a.addr to i32*
  %arrayidx14 = getelementptr inbounds i32* %13, i64 1
  %14 = load i32* %arrayidx14, align 4
  %and15 = and i32 %14, 2147483647
  %15 = bitcast double* %r to i32*
  %arrayidx16 = getelementptr inbounds i32* %15, i64 1
  store i32 %and15, i32* %arrayidx16, align 4
  br label %if.end

if.end:                                           ; preds = %if.else13, %if.then9
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then3
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %16 = bitcast double* %a.addr to i32*
  %arrayidx19 = getelementptr inbounds i32* %16, i64 0
  %17 = load i32* %arrayidx19, align 4
  %18 = bitcast double* %r to i32*
  %arrayidx20 = getelementptr inbounds i32* %18, i64 0
  store i32 %17, i32* %arrayidx20, align 4
  %19 = load double* %r, align 8
  ret double %19
}

define  float @__pgi_sign(float %a, float %b) nounwind alwaysinline {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  %r = alloca float, align 4
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load float* %b.addr, align 4
  %cmp = fcmp olt float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast float* %a.addr to i32*
  %arrayidx = getelementptr inbounds i32* %1, i64 0
  %2 = load i32* %arrayidx, align 4
  %or = or i32 %2, -2147483648
  %3 = bitcast float* %r to i32*
  %arrayidx1 = getelementptr inbounds i32* %3, i64 0
  store i32 %or, i32* %arrayidx1, align 4
  br label %if.end18

if.else:                                          ; preds = %entry
  %4 = load float* %b.addr, align 4
  %cmp2 = fcmp ogt float %4, 0.000000e+00
  br i1 %cmp2, label %if.then3, label %if.else6

if.then3:                                         ; preds = %if.else
  %5 = bitcast float* %a.addr to i32*
  %arrayidx4 = getelementptr inbounds i32* %5, i64 0
  %6 = load i32* %arrayidx4, align 4
  %and = and i32 %6, 2147483647
  %7 = bitcast float* %r to i32*
  %arrayidx5 = getelementptr inbounds i32* %7, i64 0
  store i32 %and, i32* %arrayidx5, align 4
  br label %if.end17

if.else6:                                         ; preds = %if.else
  %8 = bitcast float* %b.addr to i32*
  %arrayidx7 = getelementptr inbounds i32* %8, i64 0
  %9 = load i32* %arrayidx7, align 4
  %and8 = and i32 %9, -2147483648
  %tobool = icmp ne i32 %and8, 0
  br i1 %tobool, label %if.then9, label %if.else13

if.then9:                                         ; preds = %if.else6
  %10 = bitcast float* %a.addr to i32*
  %arrayidx10 = getelementptr inbounds i32* %10, i64 0
  %11 = load i32* %arrayidx10, align 4
  %or11 = or i32 %11, -2147483648
  %12 = bitcast float* %r to i32*
  %arrayidx12 = getelementptr inbounds i32* %12, i64 0
  store i32 %or11, i32* %arrayidx12, align 4
  br label %if.end

if.else13:                                        ; preds = %if.else6
  %13 = bitcast float* %a.addr to i32*
  %arrayidx14 = getelementptr inbounds i32* %13, i64 0
  %14 = load i32* %arrayidx14, align 4
  %and15 = and i32 %14, 2147483647
  %15 = bitcast float* %r to i32*
  %arrayidx16 = getelementptr inbounds i32* %15, i64 0
  store i32 %and15, i32* %arrayidx16, align 4
  br label %if.end

if.end:                                           ; preds = %if.else13, %if.then9
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then3
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %16 = load float* %r, align 4
  ret float %16
}

define  i32 @__pgi_imax(i32 %a, i32 %b) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = load i32* %b.addr, align 4
  %call = call  i32 @__nv_max(i32 %0, i32 %1)
  ret i32 %call
}

declare  i32 @__nv_max(i32, i32)

define  i32 @__pgi_imin(i32 %a, i32 %b) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = load i32* %b.addr, align 4
  %call = call  i32 @__nv_min(i32 %0, i32 %1)
  ret i32 %call
}

declare  i32 @__nv_min(i32, i32)

define  i32 @__pgi_uimax(i32 %a, i32 %b) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = load i32* %b.addr, align 4
  %call = call  i32 @__nv_max(i32 %0, i32 %1)
  ret i32 %call
}

define  i32 @__pgi_uimin(i32 %a, i32 %b) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = load i32* %b.addr, align 4
  %call = call  i32 @__nv_min(i32 %0, i32 %1)
  ret i32 %call
}

define  i32 @__pgi_nint(float %a) nounwind alwaysinline {
entry:
  %a.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  %0 = load float* %a.addr, align 4
  %1 = load float* %a.addr, align 4
  %cmp = fcmp oge float %1, 0.000000e+00
  %cond = select i1 %cmp, float 5.000000e-01, float -5.000000e-01
  %add = fadd float %0, %cond
  %conv = fptosi float %add to i32
  ret i32 %conv
}

define  i64 @__pgi_llnint(float %a) nounwind alwaysinline {
entry:
  %a.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  %0 = load float* %a.addr, align 4
  %1 = load float* %a.addr, align 4
  %cmp = fcmp oge float %1, 0.000000e+00
  %cond = select i1 %cmp, float 5.000000e-01, float -5.000000e-01
  %add = fadd float %0, %cond
  %conv = fptosi float %add to i64
  ret i64 %conv
}

define  i32 @__pgi_ishft(i32 %m, i32 %a) nounwind alwaysinline {
entry:
  %m.addr = alloca i32, align 4
  %a.addr = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32* %m.addr, align 4
  %cmp = icmp sge i32 %0, 32
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32* %a.addr, align 4
  br label %cond.end9

cond.false:                                       ; preds = %entry
  %2 = load i32* %m.addr, align 4
  %cmp1 = icmp sle i32 %2, -32
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %cond.false
  %3 = load i32* %a.addr, align 4
  br label %cond.end7

cond.false3:                                      ; preds = %cond.false
  %4 = load i32* %m.addr, align 4
  %cmp4 = icmp sge i32 %4, 0
  br i1 %cmp4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %cond.false3
  %5 = load i32* %a.addr, align 4
  %6 = load i32* %m.addr, align 4
  %shl = shl i32 %5, %6
  br label %cond.end

cond.false6:                                      ; preds = %cond.false3
  %7 = load i32* %a.addr, align 4
  %8 = load i32* %m.addr, align 4
  %sub = sub nsw i32 0, %8
  %shr = ashr i32 %7, %sub
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i32 [ %shl, %cond.true5 ], [ %shr, %cond.false6 ]
  br label %cond.end7

cond.end7:                                        ; preds = %cond.end, %cond.true2
  %cond8 = phi i32 [ %3, %cond.true2 ], [ %cond, %cond.end ]
  br label %cond.end9

cond.end9:                                        ; preds = %cond.end7, %cond.true
  %cond10 = phi i32 [ %1, %cond.true ], [ %cond8, %cond.end7 ]
  ret i32 %cond10
}

define  i64 @__pgi_kishft(i64 %a, i32 %m) nounwind alwaysinline {
entry:
  %a.addr = alloca i64, align 8
  %m.addr = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32* %m.addr, align 4
  %cmp = icmp sge i32 %0, 64
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64* %a.addr, align 8
  br label %cond.end10

cond.false:                                       ; preds = %entry
  %2 = load i32* %m.addr, align 4
  %cmp1 = icmp sle i32 %2, -64
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %cond.false
  %3 = load i64* %a.addr, align 8
  br label %cond.end8

cond.false3:                                      ; preds = %cond.false
  %4 = load i32* %m.addr, align 4
  %cmp4 = icmp sge i32 %4, 0
  br i1 %cmp4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %cond.false3
  %5 = load i64* %a.addr, align 8
  %6 = load i32* %m.addr, align 4
  %sh_prom = zext i32 %6 to i64
  %shl = shl i64 %5, %sh_prom
  br label %cond.end

cond.false6:                                      ; preds = %cond.false3
  %7 = load i64* %a.addr, align 8
  %8 = load i32* %m.addr, align 4
  %sub = sub nsw i32 0, %8
  %sh_prom7 = zext i32 %sub to i64
  %shr = ashr i64 %7, %sh_prom7
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %shl, %cond.true5 ], [ %shr, %cond.false6 ]
  br label %cond.end8

cond.end8:                                        ; preds = %cond.end, %cond.true2
  %cond9 = phi i64 [ %3, %cond.true2 ], [ %cond, %cond.end ]
  br label %cond.end10

cond.end10:                                       ; preds = %cond.end8, %cond.true
  %cond11 = phi i64 [ %1, %cond.true ], [ %cond9, %cond.end8 ]
  ret i64 %cond11
}

define  i32 @__pgi_ishftc(i32 %val, i32 %sc, i32 %rc) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %sc.addr = alloca i32, align 4
  %rc.addr = alloca i32, align 4
  %mask = alloca i32, align 4
  %field = alloca i32, align 4
  %tmp1 = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  store i32 %sc, i32* %sc.addr, align 4
  store i32 %rc, i32* %rc.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %rc.addr, align 4
  %cmp = icmp sle i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32* %val.addr, align 4
  store i32 %1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32* %rc.addr, align 4
  %sub = sub nsw i32 32, %2
  %3 = load i32* %mask, align 4
  %shr = lshr i32 %3, %sub
  store i32 %shr, i32* %mask, align 4
  %4 = load i32* %val.addr, align 4
  %5 = load i32* %mask, align 4
  %and = and i32 %4, %5
  store i32 %and, i32* %field, align 4
  %6 = load i32* %sc.addr, align 4
  %cmp1 = icmp sge i32 %6, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %7 = load i32* %sc.addr, align 4
  store i32 %7, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %8 = load i32* %n, align 4
  %9 = load i32* %rc.addr, align 4
  %cmp3 = icmp sge i32 %8, %9
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32* %rc.addr, align 4
  %11 = load i32* %n, align 4
  %sub4 = sub nsw i32 %11, %10
  store i32 %sub4, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32* %n, align 4
  %cmp5 = icmp eq i32 %12, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  %13 = load i32* %val.addr, align 4
  store i32 %13, i32* %retval
  br label %return

if.end7:                                          ; preds = %for.end
  %14 = load i32* %field, align 4
  %15 = load i32* %n, align 4
  %shl = shl i32 %14, %15
  store i32 %shl, i32* %tmp1, align 4
  %16 = load i32* %field, align 4
  %17 = load i32* %rc.addr, align 4
  %18 = load i32* %n, align 4
  %sub8 = sub nsw i32 %17, %18
  %shr9 = lshr i32 %16, %sub8
  store i32 %shr9, i32* %tmp2, align 4
  br label %if.end23

if.else:                                          ; preds = %if.end
  %19 = load i32* %sc.addr, align 4
  %sub10 = sub nsw i32 0, %19
  store i32 %sub10, i32* %n, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc14, %if.else
  %20 = load i32* %n, align 4
  %21 = load i32* %rc.addr, align 4
  %cmp12 = icmp sge i32 %20, %21
  br i1 %cmp12, label %for.body13, label %for.end16

for.body13:                                       ; preds = %for.cond11
  br label %for.inc14

for.inc14:                                        ; preds = %for.body13
  %22 = load i32* %rc.addr, align 4
  %23 = load i32* %n, align 4
  %sub15 = sub nsw i32 %23, %22
  store i32 %sub15, i32* %n, align 4
  br label %for.cond11

for.end16:                                        ; preds = %for.cond11
  %24 = load i32* %n, align 4
  %cmp17 = icmp eq i32 %24, 0
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %for.end16
  %25 = load i32* %val.addr, align 4
  store i32 %25, i32* %retval
  br label %return

if.end19:                                         ; preds = %for.end16
  %26 = load i32* %field, align 4
  %27 = load i32* %n, align 4
  %shr20 = lshr i32 %26, %27
  store i32 %shr20, i32* %tmp1, align 4
  %28 = load i32* %field, align 4
  %29 = load i32* %rc.addr, align 4
  %30 = load i32* %n, align 4
  %sub21 = sub nsw i32 %29, %30
  %shl22 = shl i32 %28, %sub21
  store i32 %shl22, i32* %tmp2, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.end19, %if.end7
  %31 = load i32* %val.addr, align 4
  %32 = load i32* %field, align 4
  %xor = xor i32 %31, %32
  %33 = load i32* %tmp1, align 4
  %34 = load i32* %tmp2, align 4
  %or = or i32 %33, %34
  %35 = load i32* %mask, align 4
  %and24 = and i32 %or, %35
  %or25 = or i32 %xor, %and24
  store i32 %or25, i32* %retval
  br label %return

return:                                           ; preds = %if.end23, %if.then18, %if.then6, %if.then
  %36 = load i32* %retval
  ret i32 %36
}

define  i32 @__pgi_shfli2(i32 %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %srcLane.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %srcLane.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !2
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  i32 @__pgi_shfli3(i32 %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load i32* %var.addr, align 4
  %3 = load i32* %srcLane.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !3
  store i32 %6, i32* %ret, align 4
  %7 = load i32* %ret, align 4
  ret i32 %7
}

define  i64 @__pgi_shflk2(i64 %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %srcLane.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !4
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %srcLane.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !5
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %srcLane.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !6
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !7
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  i64 @__pgi_shflk3(i64 %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load i64* %var.addr, align 8
  %3 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %2) nounwind, !srcloc !8
  %asmresult = extractvalue { i32, i32 } %3, 0
  %asmresult1 = extractvalue { i32, i32 } %3, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %4 = load i32* %lo, align 4
  %5 = load i32* %srcLane.addr, align 4
  %6 = load i32* %c, align 4
  %7 = load i32* %mask, align 4
  %8 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %4, i32 %5, i32 %6, i32 %7) nounwind, !srcloc !9
  store i32 %8, i32* %lo, align 4
  %9 = load i32* %hi, align 4
  %10 = load i32* %srcLane.addr, align 4
  %11 = load i32* %c, align 4
  %12 = load i32* %mask, align 4
  %13 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %9, i32 %10, i32 %11, i32 %12) nounwind, !srcloc !10
  store i32 %13, i32* %hi, align 4
  %14 = load i32* %lo, align 4
  %15 = load i32* %hi, align 4
  %16 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %14, i32 %15) nounwind, !srcloc !11
  store i64 %16, i64* %ret, align 8
  %17 = load i64* %ret, align 8
  ret i64 %17
}

define  i8* @__pgi_shflp2(i8* %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %var.addr = alloca i8*, align 8
  %srcLane.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i8* %var, i8** %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load i8** %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i8* %1) nounwind, !srcloc !12
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %srcLane.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !13
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %srcLane.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !14
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i8* asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !15
  store i8* %15, i8** %ret, align 8
  %16 = load i8** %ret, align 8
  ret i8* %16
}

define  float @__pgi_shflf2(float %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %srcLane.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %srcLane.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call float asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !16
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  float @__pgi_shflf3(float %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load float* %var.addr, align 4
  %3 = load i32* %srcLane.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call float asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !17
  store float %6, float* %ret, align 4
  %7 = load float* %ret, align 4
  ret float %7
}

define  double @__pgi_shfld2(double %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %srcLane.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !18
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %srcLane.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !19
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %srcLane.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !20
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !21
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  double @__pgi_shfld3(double %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load double* %var.addr, align 8
  %3 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %2) nounwind, !srcloc !22
  %asmresult = extractvalue { i32, i32 } %3, 0
  %asmresult1 = extractvalue { i32, i32 } %3, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %4 = load i32* %lo, align 4
  %5 = load i32* %srcLane.addr, align 4
  %6 = load i32* %c, align 4
  %7 = load i32* %mask, align 4
  %8 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %4, i32 %5, i32 %6, i32 %7) nounwind, !srcloc !23
  store i32 %8, i32* %lo, align 4
  %9 = load i32* %hi, align 4
  %10 = load i32* %srcLane.addr, align 4
  %11 = load i32* %c, align 4
  %12 = load i32* %mask, align 4
  %13 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %9, i32 %10, i32 %11, i32 %12) nounwind, !srcloc !24
  store i32 %13, i32* %hi, align 4
  %14 = load i32* %lo, align 4
  %15 = load i32* %hi, align 4
  %16 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %14, i32 %15) nounwind, !srcloc !25
  store double %16, double* %ret, align 8
  %17 = load double* %ret, align 8
  ret double %17
}

define  i32 @__pgi_shfl_upi2(i32 %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask, align 4
  %4 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !26
  store i32 %4, i32* %ret, align 4
  %5 = load i32* %ret, align 4
  ret i32 %5
}

define  i32 @__pgi_shfl_upi3(i32 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !27
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  float @__pgi_shfl_upf2(float %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 0, i32* %c, align 4
  %0 = load float* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask, align 4
  %4 = call float asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !28
  store float %4, float* %ret, align 4
  %5 = load float* %ret, align 4
  ret float %5
}

define  float @__pgi_shfl_upf3(float %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call float asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !29
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  i64 @__pgi_shfl_upk2(i64 %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 0, i32* %c, align 4
  %0 = load i64* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %0) nounwind, !srcloc !30
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !31
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask, align 4
  %11 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !32
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %12, i32 %13) nounwind, !srcloc !33
  store i64 %14, i64* %ret, align 8
  %15 = load i64* %ret, align 8
  ret i64 %15
}

define  i64 @__pgi_shfl_upk3(i64 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !34
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !35
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !36
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !37
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  double @__pgi_shfl_upd2(double %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 0, i32* %c, align 4
  %0 = load double* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %0) nounwind, !srcloc !38
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !39
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask, align 4
  %11 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !40
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %12, i32 %13) nounwind, !srcloc !41
  store double %14, double* %ret, align 8
  %15 = load double* %ret, align 8
  ret double %15
}

define  double @__pgi_shfl_upd3(double %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !42
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !43
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !44
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !45
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  i32 @__pgi_shfl_downi2(i32 %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask, align 4
  %4 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !46
  store i32 %4, i32* %ret, align 4
  %5 = load i32* %ret, align 4
  ret i32 %5
}

define  i32 @__pgi_shfl_downi3(i32 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !47
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  float @__pgi_shfl_downf2(float %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load float* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask, align 4
  %4 = call float asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !48
  store float %4, float* %ret, align 4
  %5 = load float* %ret, align 4
  ret float %5
}

define  float @__pgi_shfl_downf3(float %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call float asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !49
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  i64 @__pgi_shfl_downk2(i64 %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i64* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %0) nounwind, !srcloc !50
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !51
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask, align 4
  %11 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !52
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %12, i32 %13) nounwind, !srcloc !53
  store i64 %14, i64* %ret, align 8
  %15 = load i64* %ret, align 8
  ret i64 %15
}

define  i64 @__pgi_shfl_downk3(i64 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !54
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !55
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !56
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !57
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  double @__pgi_shfl_downd2(double %var, i32 %delta) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 31, i32* %c, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load double* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %0) nounwind, !srcloc !58
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !59
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask, align 4
  %11 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !60
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %12, i32 %13) nounwind, !srcloc !61
  store double %14, double* %ret, align 8
  %15 = load double* %ret, align 8
  ret double %15
}

define  double @__pgi_shfl_downd3(double %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !62
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !63
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !64
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !65
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  i32 @__pgi_shfl_xori2(i32 %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %laneMask.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %var.addr, align 4
  %1 = load i32* %laneMask.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask, align 4
  %4 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !66
  store i32 %4, i32* %ret, align 4
  %5 = load i32* %ret, align 4
  ret i32 %5
}

define  i32 @__pgi_shfl_xori3(i32 %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i32, align 4
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %laneMask.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !67
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  float @__pgi_shfl_xorf2(float %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %laneMask.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load float* %var.addr, align 4
  %1 = load i32* %laneMask.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask, align 4
  %4 = call float asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !68
  store float %4, float* %ret, align 4
  %5 = load float* %ret, align 4
  ret float %5
}

define  float @__pgi_shfl_xorf3(float %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca float, align 4
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  %mask = alloca i32, align 4
  store float %var, float* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %laneMask.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask, align 4
  %5 = call float asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !69
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  i64 @__pgi_shfl_xork2(i64 %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %laneMask.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load i64* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %0) nounwind, !srcloc !70
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %laneMask.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !71
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %laneMask.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask, align 4
  %11 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !72
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %12, i32 %13) nounwind, !srcloc !73
  store i64 %14, i64* %ret, align 8
  %15 = load i64* %ret, align 8
  ret i64 %15
}

define  i64 @__pgi_shfl_xork3(i64 %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca i64, align 8
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !74
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %laneMask.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !75
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %laneMask.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !76
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !77
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  double @__pgi_shfl_xord2(double %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %laneMask.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 -1, i32* %mask, align 4
  store i32 31, i32* %c, align 4
  %0 = load double* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %0) nounwind, !srcloc !78
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %laneMask.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask, align 4
  %6 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !79
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %laneMask.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask, align 4
  %11 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !80
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %12, i32 %13) nounwind, !srcloc !81
  store double %14, double* %ret, align 8
  %15 = load double* %ret, align 8
  ret double %15
}

define  double @__pgi_shfl_xord3(double %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %var.addr = alloca double, align 8
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %mask = alloca i32, align 4
  store double %var, double* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 -1, i32* %mask, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !82
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %laneMask.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask, align 4
  %7 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !83
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %laneMask.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask, align 4
  %12 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !84
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !85
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  i32 @__pgi_shfl_synci2(i32 %mask, i32 %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %srcLane.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %srcLane.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !86
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  i32 @__pgi_shfl_synci3(i32 %mask, i32 %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load i32* %var.addr, align 4
  %3 = load i32* %srcLane.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !87
  store i32 %6, i32* %ret, align 4
  %7 = load i32* %ret, align 4
  ret i32 %7
}

define  i64 @__pgi_shfl_synck2(i32 %mask, i64 %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %srcLane.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !88
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %srcLane.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !89
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %srcLane.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !90
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !91
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  i64 @__pgi_shfl_synck3(i32 %mask, i64 %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load i64* %var.addr, align 8
  %3 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %2) nounwind, !srcloc !92
  %asmresult = extractvalue { i32, i32 } %3, 0
  %asmresult1 = extractvalue { i32, i32 } %3, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %4 = load i32* %lo, align 4
  %5 = load i32* %srcLane.addr, align 4
  %6 = load i32* %c, align 4
  %7 = load i32* %mask.addr, align 4
  %8 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %4, i32 %5, i32 %6, i32 %7) nounwind, !srcloc !93
  store i32 %8, i32* %lo, align 4
  %9 = load i32* %hi, align 4
  %10 = load i32* %srcLane.addr, align 4
  %11 = load i32* %c, align 4
  %12 = load i32* %mask.addr, align 4
  %13 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %9, i32 %10, i32 %11, i32 %12) nounwind, !srcloc !94
  store i32 %13, i32* %hi, align 4
  %14 = load i32* %lo, align 4
  %15 = load i32* %hi, align 4
  %16 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %14, i32 %15) nounwind, !srcloc !95
  store i64 %16, i64* %ret, align 8
  %17 = load i64* %ret, align 8
  ret i64 %17
}

define  i8* @__pgi_shfl_syncp2(i32 %mask, i8* %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i8*, align 8
  %srcLane.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i8* %var, i8** %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load i8** %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i8* %1) nounwind, !srcloc !96
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %srcLane.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !97
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %srcLane.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !98
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i8* asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !99
  store i8* %15, i8** %ret, align 8
  %16 = load i8** %ret, align 8
  ret i8* %16
}

define  float @__pgi_shfl_syncf2(i32 %mask, float %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %srcLane.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %srcLane.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call float asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !100
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  float @__pgi_shfl_syncf3(i32 %mask, float %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load float* %var.addr, align 4
  %3 = load i32* %srcLane.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call float asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !101
  store float %6, float* %ret, align 4
  %7 = load float* %ret, align 4
  ret float %7
}

define  double @__pgi_shfl_syncd2(i32 %mask, double %var, i32 %srcLane) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %srcLane.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !102
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %srcLane.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !103
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %srcLane.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !104
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !105
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  double @__pgi_shfl_syncd3(i32 %mask, double %var, i32 %srcLane, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %srcLane.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %srcLane, i32* %srcLane.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %srcLane.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %srcLane.addr, align 4
  %2 = load double* %var.addr, align 8
  %3 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %2) nounwind, !srcloc !106
  %asmresult = extractvalue { i32, i32 } %3, 0
  %asmresult1 = extractvalue { i32, i32 } %3, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %4 = load i32* %lo, align 4
  %5 = load i32* %srcLane.addr, align 4
  %6 = load i32* %c, align 4
  %7 = load i32* %mask.addr, align 4
  %8 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %4, i32 %5, i32 %6, i32 %7) nounwind, !srcloc !107
  store i32 %8, i32* %lo, align 4
  %9 = load i32* %hi, align 4
  %10 = load i32* %srcLane.addr, align 4
  %11 = load i32* %c, align 4
  %12 = load i32* %mask.addr, align 4
  %13 = call i32 asm sideeffect "shfl.sync.idx.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %9, i32 %10, i32 %11, i32 %12) nounwind, !srcloc !108
  store i32 %13, i32* %hi, align 4
  %14 = load i32* %lo, align 4
  %15 = load i32* %hi, align 4
  %16 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %14, i32 %15) nounwind, !srcloc !109
  store double %16, double* %ret, align 8
  %17 = load double* %ret, align 8
  ret double %17
}

define  i32 @__pgi_shfl_up_synci2(i32 %mask, i32 %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask.addr, align 4
  %4 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !110
  store i32 %4, i32* %ret, align 4
  %5 = load i32* %ret, align 4
  ret i32 %5
}

define  i32 @__pgi_shfl_up_synci3(i32 %mask, i32 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !111
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  float @__pgi_shfl_up_syncf2(i32 %mask, float %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load float* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask.addr, align 4
  %4 = call float asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !112
  store float %4, float* %ret, align 4
  %5 = load float* %ret, align 4
  ret float %5
}

define  float @__pgi_shfl_up_syncf3(i32 %mask, float %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call float asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !113
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  i64 @__pgi_shfl_up_synck2(i32 %mask, i64 %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load i64* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %0) nounwind, !srcloc !114
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !115
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask.addr, align 4
  %11 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !116
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %12, i32 %13) nounwind, !srcloc !117
  store i64 %14, i64* %ret, align 8
  %15 = load i64* %ret, align 8
  ret i64 %15
}

define  i64 @__pgi_shfl_up_synck3(i32 %mask, i64 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !118
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !119
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !120
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !121
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  double @__pgi_shfl_up_syncd2(i32 %mask, double %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load double* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %0) nounwind, !srcloc !122
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !123
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask.addr, align 4
  %11 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !124
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %12, i32 %13) nounwind, !srcloc !125
  store double %14, double* %ret, align 8
  %15 = load double* %ret, align 8
  ret double %15
}

define  double @__pgi_shfl_up_syncd3(i32 %mask, double %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  store i32 %shl, i32* %c, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !126
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !127
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.up.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !128
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !129
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  i32 @__pgi_shfl_down_synci2(i32 %mask, i32 %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask.addr, align 4
  %4 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !130
  store i32 %4, i32* %ret, align 4
  %5 = load i32* %ret, align 4
  ret i32 %5
}

define  i32 @__pgi_shfl_down_synci3(i32 %mask, i32 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !131
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  float @__pgi_shfl_down_syncf2(i32 %mask, float %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load float* %var.addr, align 4
  %1 = load i32* %delta.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask.addr, align 4
  %4 = call float asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !132
  store float %4, float* %ret, align 4
  %5 = load float* %ret, align 4
  ret float %5
}

define  float @__pgi_shfl_down_syncf3(i32 %mask, float %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %delta.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call float asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !133
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  i64 @__pgi_shfl_down_synck2(i32 %mask, i64 %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i64* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %0) nounwind, !srcloc !134
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !135
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask.addr, align 4
  %11 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !136
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %12, i32 %13) nounwind, !srcloc !137
  store i64 %14, i64* %ret, align 8
  %15 = load i64* %ret, align 8
  ret i64 %15
}

define  i64 @__pgi_shfl_down_synck3(i32 %mask, i64 %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !138
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !139
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !140
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !141
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  double @__pgi_shfl_down_syncd2(i32 %mask, double %var, i32 %delta) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load double* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %0) nounwind, !srcloc !142
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %delta.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !143
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %delta.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask.addr, align 4
  %11 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !144
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %12, i32 %13) nounwind, !srcloc !145
  store double %14, double* %ret, align 8
  %15 = load double* %ret, align 8
  ret double %15
}

define  double @__pgi_shfl_down_syncd3(i32 %mask, double %var, i32 %delta, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !146
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %delta.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !147
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %delta.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.down.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !148
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !149
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  i32 @__pgi_shfl_xor_synci2(i32 %mask, i32 %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %laneMask.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i32* %var.addr, align 4
  %1 = load i32* %laneMask.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask.addr, align 4
  %4 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !150
  store i32 %4, i32* %ret, align 4
  %5 = load i32* %ret, align 4
  ret i32 %5
}

define  i32 @__pgi_shfl_xor_synci3(i32 %mask, i32 %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i32, align 4
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 %var, i32* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i32* %var.addr, align 4
  %2 = load i32* %laneMask.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !151
  store i32 %5, i32* %ret, align 4
  %6 = load i32* %ret, align 4
  ret i32 %6
}

define  float @__pgi_shfl_xor_syncf2(i32 %mask, float %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %laneMask.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load float* %var.addr, align 4
  %1 = load i32* %laneMask.addr, align 4
  %2 = load i32* %c, align 4
  %3 = load i32* %mask.addr, align 4
  %4 = call float asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %0, i32 %1, i32 %2, i32 %3) nounwind, !srcloc !152
  store float %4, float* %ret, align 4
  %5 = load float* %ret, align 4
  ret float %5
}

define  float @__pgi_shfl_xor_syncf3(i32 %mask, float %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca float, align 4
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca float, align 4
  %c = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store float %var, float* %var.addr, align 4
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load float* %var.addr, align 4
  %2 = load i32* %laneMask.addr, align 4
  %3 = load i32* %c, align 4
  %4 = load i32* %mask.addr, align 4
  %5 = call float asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=f,f,r,r,r"(float %1, i32 %2, i32 %3, i32 %4) nounwind, !srcloc !153
  store float %5, float* %ret, align 4
  %6 = load float* %ret, align 4
  ret float %6
}

define  i64 @__pgi_shfl_xor_synck2(i32 %mask, i64 %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %laneMask.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load i64* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %0) nounwind, !srcloc !154
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %laneMask.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !155
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %laneMask.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask.addr, align 4
  %11 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !156
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %12, i32 %13) nounwind, !srcloc !157
  store i64 %14, i64* %ret, align 8
  %15 = load i64* %ret, align 8
  ret i64 %15
}

define  i64 @__pgi_shfl_xor_synck3(i32 %mask, i64 %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca i64, align 8
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca i64, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i64 %var, i64* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load i64* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,l"(i64 %1) nounwind, !srcloc !158
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %laneMask.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !159
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %laneMask.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !160
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call i64 asm sideeffect "mov.b64 $0, {$1,$2};", "=l,r,r"(i32 %13, i32 %14) nounwind, !srcloc !161
  store i64 %15, i64* %ret, align 8
  %16 = load i64* %ret, align 8
  ret i64 %16
}

define  double @__pgi_shfl_xor_syncd2(i32 %mask, double %var, i32 %laneMask) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %laneMask.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 31, i32* %c, align 4
  %0 = load double* %var.addr, align 8
  %1 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %0) nounwind, !srcloc !162
  %asmresult = extractvalue { i32, i32 } %1, 0
  %asmresult1 = extractvalue { i32, i32 } %1, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %2 = load i32* %lo, align 4
  %3 = load i32* %laneMask.addr, align 4
  %4 = load i32* %c, align 4
  %5 = load i32* %mask.addr, align 4
  %6 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %2, i32 %3, i32 %4, i32 %5) nounwind, !srcloc !163
  store i32 %6, i32* %lo, align 4
  %7 = load i32* %hi, align 4
  %8 = load i32* %laneMask.addr, align 4
  %9 = load i32* %c, align 4
  %10 = load i32* %mask.addr, align 4
  %11 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %7, i32 %8, i32 %9, i32 %10) nounwind, !srcloc !164
  store i32 %11, i32* %hi, align 4
  %12 = load i32* %lo, align 4
  %13 = load i32* %hi, align 4
  %14 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %12, i32 %13) nounwind, !srcloc !165
  store double %14, double* %ret, align 8
  %15 = load double* %ret, align 8
  ret double %15
}

define  double @__pgi_shfl_xor_syncd3(i32 %mask, double %var, i32 %laneMask, i32 %width) nounwind alwaysinline {
entry:
  %mask.addr = alloca i32, align 4
  %var.addr = alloca double, align 8
  %laneMask.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %c = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store double %var, double* %var.addr, align 8
  store i32 %laneMask, i32* %laneMask.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %0 = load i32* %width.addr, align 4
  %sub = sub nsw i32 32, %0
  %shl = shl i32 %sub, 8
  %or = or i32 %shl, 31
  store i32 %or, i32* %c, align 4
  %1 = load double* %var.addr, align 8
  %2 = call { i32, i32 } asm sideeffect "mov.b64 {$0,$1}, $2;", "=r,=r,d"(double %1) nounwind, !srcloc !166
  %asmresult = extractvalue { i32, i32 } %2, 0
  %asmresult1 = extractvalue { i32, i32 } %2, 1
  store i32 %asmresult, i32* %lo, align 4
  store i32 %asmresult1, i32* %hi, align 4
  %3 = load i32* %lo, align 4
  %4 = load i32* %laneMask.addr, align 4
  %5 = load i32* %c, align 4
  %6 = load i32* %mask.addr, align 4
  %7 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %3, i32 %4, i32 %5, i32 %6) nounwind, !srcloc !167
  store i32 %7, i32* %lo, align 4
  %8 = load i32* %hi, align 4
  %9 = load i32* %laneMask.addr, align 4
  %10 = load i32* %c, align 4
  %11 = load i32* %mask.addr, align 4
  %12 = call i32 asm sideeffect "shfl.sync.bfly.b32 $0, $1, $2, $3, $4;", "=r,r,r,r,r"(i32 %8, i32 %9, i32 %10, i32 %11) nounwind, !srcloc !168
  store i32 %12, i32* %hi, align 4
  %13 = load i32* %lo, align 4
  %14 = load i32* %hi, align 4
  %15 = call double asm sideeffect "mov.b64 $0, {$1,$2};", "=d,r,r"(i32 %13, i32 %14) nounwind, !srcloc !169
  store double %15, double* %ret, align 8
  %16 = load double* %ret, align 8
  ret double %16
}

define  void @__pgi_grid_this_grid_(i8* %gg) nounwind alwaysinline {
entry:
  %gg.addr = alloca i8*, align 8
  %__T1 = alloca i32, align 4
  %g = alloca %struct.__pgi_PGI_Grid*, align 8
  store i8* %gg, i8** %gg.addr, align 8
  %0 = load i8** %gg.addr, align 8
  %1 = bitcast i8* %0 to %struct.__pgi_PGI_Grid*
  store %struct.__pgi_PGI_Grid* %1, %struct.__pgi_PGI_Grid** %g, align 8
  %2 = load %struct.__pgi_PGI_Grid** %g, align 8
  %3 = bitcast %struct.__pgi_PGI_Grid* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %call = call  i64 @cudaCGGetIntrinsicHandle(i32 1)
  %4 = load %struct.__pgi_PGI_Grid** %g, align 8
  %handle = getelementptr inbounds %struct.__pgi_PGI_Grid* %4, i32 0, i32 0
  store i64 %call, i64* %handle, align 8
  %call1 = call  i32 @__pgi_numthreads(i32 3)
  %call2 = call  i32 @__pgi_numblocks(i32 3)
  %mul = mul nsw i32 %call1, %call2
  %call3 = call  i32 @__pgi_numthreads(i32 2)
  %call4 = call  i32 @__pgi_numblocks(i32 2)
  %mul5 = mul nsw i32 %call3, %call4
  %mul6 = mul nsw i32 %mul, %mul5
  %call7 = call  i32 @__pgi_numthreads(i32 1)
  %call8 = call  i32 @__pgi_numblocks(i32 1)
  %mul9 = mul nsw i32 %call7, %call8
  %mul10 = mul nsw i32 %mul6, %mul9
  %5 = load %struct.__pgi_PGI_Grid** %g, align 8
  %size = getelementptr inbounds %struct.__pgi_PGI_Grid* %5, i32 0, i32 1
  store i32 %mul10, i32* %size, align 4
  %call11 = call  i32 @__pgi_blockidx(i32 3)
  %call12 = call  i32 @__pgi_numblocks(i32 2)
  %mul13 = mul nsw i32 %call11, %call12
  %call14 = call  i32 @__pgi_numblocks(i32 1)
  %mul15 = mul nsw i32 %mul13, %call14
  %call16 = call  i32 @__pgi_blockidx(i32 2)
  %call17 = call  i32 @__pgi_numblocks(i32 1)
  %mul18 = mul nsw i32 %call16, %call17
  %add = add nsw i32 %mul15, %mul18
  %call19 = call  i32 @__pgi_blockidx(i32 1)
  %add20 = add nsw i32 %add, %call19
  store i32 %add20, i32* %__T1, align 4
  %6 = load i32* %__T1, align 4
  %call21 = call  i32 @__pgi_numthreads(i32 1)
  %call22 = call  i32 @__pgi_numthreads(i32 2)
  %mul23 = mul nsw i32 %call21, %call22
  %call24 = call  i32 @__pgi_numthreads(i32 3)
  %mul25 = mul nsw i32 %mul23, %call24
  %mul26 = mul nsw i32 %6, %mul25
  %call27 = call  i32 @__pgi_threadidx(i32 3)
  %call28 = call  i32 @__pgi_numthreads(i32 2)
  %mul29 = mul nsw i32 %call27, %call28
  %call30 = call  i32 @__pgi_numthreads(i32 1)
  %mul31 = mul nsw i32 %mul29, %call30
  %add32 = add nsw i32 %mul26, %mul31
  %call33 = call  i32 @__pgi_threadidx(i32 2)
  %call34 = call  i32 @__pgi_numthreads(i32 1)
  %mul35 = mul nsw i32 %call33, %call34
  %add36 = add nsw i32 %add32, %mul35
  %call37 = call  i32 @__pgi_threadidx(i32 1)
  %add38 = add nsw i32 %add36, %call37
  %add39 = add nsw i32 %add38, 1
  %7 = load %struct.__pgi_PGI_Grid** %g, align 8
  %rank = getelementptr inbounds %struct.__pgi_PGI_Grid* %7, i32 0, i32 2
  store i32 %add39, i32* %rank, align 4
  ret void
}

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

declare  i64 @cudaCGGetIntrinsicHandle(i32)

define  void @__pgi_grid_syncthreads_grid(i8* %gg) nounwind alwaysinline {
entry:
  %gg.addr = alloca i8*, align 8
  %g = alloca %struct.__pgi_PGI_Grid*, align 8
  %__T2 = alloca i64, align 8
  store i8* %gg, i8** %gg.addr, align 8
  %0 = load i8** %gg.addr, align 8
  %1 = bitcast i8* %0 to %struct.__pgi_PGI_Grid*
  store %struct.__pgi_PGI_Grid* %1, %struct.__pgi_PGI_Grid** %g, align 8
  %2 = load %struct.__pgi_PGI_Grid** %g, align 8
  %handle = getelementptr inbounds %struct.__pgi_PGI_Grid* %2, i32 0, i32 0
  %3 = load i64* %handle, align 8
  store i64 %3, i64* %__T2, align 8
  %4 = load i64* %__T2, align 8
  %call = call  i32 @cudaCGSynchronize(i64 %4, i32 0)
  ret void
}

declare  i32 @cudaCGSynchronize(i64, i32)

define  void @__pgi_cg_this_thread_block_(i8* %tg) nounwind alwaysinline {
entry:
  %tg.addr = alloca i8*, align 8
  %__T1 = alloca i32, align 4
  %g = alloca %struct.__pgi_PGI_Grid*, align 8
  store i8* %tg, i8** %tg.addr, align 8
  %0 = load i8** %tg.addr, align 8
  %1 = bitcast i8* %0 to %struct.__pgi_PGI_Grid*
  store %struct.__pgi_PGI_Grid* %1, %struct.__pgi_PGI_Grid** %g, align 8
  %2 = load %struct.__pgi_PGI_Grid** %g, align 8
  %3 = bitcast %struct.__pgi_PGI_Grid* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %call = call  i32 @__pgi_numthreads(i32 3)
  %call1 = call  i32 @__pgi_numthreads(i32 2)
  %mul = mul nsw i32 %call, %call1
  %call2 = call  i32 @__pgi_numthreads(i32 1)
  %mul3 = mul nsw i32 %mul, %call2
  %4 = load %struct.__pgi_PGI_Grid** %g, align 8
  %size = getelementptr inbounds %struct.__pgi_PGI_Grid* %4, i32 0, i32 1
  store i32 %mul3, i32* %size, align 4
  %call4 = call  i32 @__pgi_threadidx(i32 3)
  %call5 = call  i32 @__pgi_numthreads(i32 2)
  %mul6 = mul nsw i32 %call4, %call5
  %call7 = call  i32 @__pgi_numthreads(i32 1)
  %mul8 = mul nsw i32 %mul6, %call7
  %call9 = call  i32 @__pgi_threadidx(i32 2)
  %call10 = call  i32 @__pgi_numthreads(i32 1)
  %mul11 = mul nsw i32 %call9, %call10
  %add = add nsw i32 %mul8, %mul11
  %call12 = call  i32 @__pgi_threadidx(i32 1)
  %add13 = add nsw i32 %add, %call12
  %add14 = add nsw i32 %add13, 1
  %5 = load %struct.__pgi_PGI_Grid** %g, align 8
  %rank = getelementptr inbounds %struct.__pgi_PGI_Grid* %5, i32 0, i32 2
  store i32 %add14, i32* %rank, align 4
  ret void
}

define  void @__pgi_cg_syncthreads_thread_block(i8* %tg) nounwind alwaysinline {
entry:
  %tg.addr = alloca i8*, align 8
  %csize = alloca i32, align 4
  %g = alloca %struct.__pgi_PGI_Grid*, align 8
  store i8* %tg, i8** %tg.addr, align 8
  %0 = load i8** %tg.addr, align 8
  %1 = bitcast i8* %0 to %struct.__pgi_PGI_Grid*
  store %struct.__pgi_PGI_Grid* %1, %struct.__pgi_PGI_Grid** %g, align 8
  %call = call  i32 @__pgi_numthreads(i32 3)
  %call1 = call  i32 @__pgi_numthreads(i32 2)
  %mul = mul nsw i32 %call, %call1
  %call2 = call  i32 @__pgi_numthreads(i32 1)
  %mul3 = mul nsw i32 %mul, %call2
  store i32 %mul3, i32* %csize, align 4
  %2 = load %struct.__pgi_PGI_Grid** %g, align 8
  %size = getelementptr inbounds %struct.__pgi_PGI_Grid* %2, i32 0, i32 1
  %3 = load i32* %size, align 4
  %4 = load i32* %csize, align 4
  %cmp = icmp eq i32 %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @llvm.cuda.syncthreads()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @llvm.cuda.syncthreads() nounwind

define  void @__pgi_cg_this_warp_(i8* %wg) nounwind alwaysinline {
entry:
  %wg.addr = alloca i8*, align 8
  %g = alloca %struct.__pgi_PGI_Grid*, align 8
  store i8* %wg, i8** %wg.addr, align 8
  %0 = load i8** %wg.addr, align 8
  %1 = bitcast i8* %0 to %struct.__pgi_PGI_Grid*
  store %struct.__pgi_PGI_Grid* %1, %struct.__pgi_PGI_Grid** %g, align 8
  %2 = load %struct.__pgi_PGI_Grid** %g, align 8
  %3 = bitcast %struct.__pgi_PGI_Grid* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %4 = load %struct.__pgi_PGI_Grid** %g, align 8
  %size = getelementptr inbounds %struct.__pgi_PGI_Grid* %4, i32 0, i32 1
  store i32 32, i32* %size, align 4
  %call = call  i32 @__pgi_threadidx(i32 1)
  %and = and i32 %call, 31
  %add = add nsw i32 %and, 1
  %5 = load %struct.__pgi_PGI_Grid** %g, align 8
  %rank = getelementptr inbounds %struct.__pgi_PGI_Grid* %5, i32 0, i32 2
  store i32 %add, i32* %rank, align 4
  ret void
}

define  void @__pgi_cg_syncthreads_warp(i8* %wg) nounwind alwaysinline {
entry:
  %wg.addr = alloca i8*, align 8
  %g = alloca %struct.__pgi_PGI_Grid*, align 8
  %mask = alloca i32, align 4
  store i8* %wg, i8** %wg.addr, align 8
  %0 = load i8** %wg.addr, align 8
  %1 = bitcast i8* %0 to %struct.__pgi_PGI_Grid*
  store %struct.__pgi_PGI_Grid* %1, %struct.__pgi_PGI_Grid** %g, align 8
  store i32 -1, i32* %mask, align 4
  %2 = load %struct.__pgi_PGI_Grid** %g, align 8
  %size = getelementptr inbounds %struct.__pgi_PGI_Grid* %2, i32 0, i32 1
  %3 = load i32* %size, align 4
  %cmp = icmp eq i32 %3, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* %mask, align 4
  call void asm sideeffect "bar.warp.sync $0;", "r"(i32 %4) nounwind, !srcloc !170
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define  i64 @__pgi_kishftc(i64 %val, i32 %sc, i32 %rc) nounwind alwaysinline {
entry:
  %retval = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %sc.addr = alloca i32, align 4
  %rc.addr = alloca i32, align 4
  %mask = alloca i64, align 8
  %field = alloca i64, align 8
  %tmp1 = alloca i64, align 8
  %tmp2 = alloca i64, align 8
  %n = alloca i32, align 4
  store i64 %val, i64* %val.addr, align 8
  store i32 %sc, i32* %sc.addr, align 4
  store i32 %rc, i32* %rc.addr, align 4
  store i64 -1, i64* %mask, align 8
  %0 = load i32* %rc.addr, align 4
  %cmp = icmp sle i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64* %val.addr, align 8
  store i64 %1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32* %rc.addr, align 4
  %sub = sub nsw i32 64, %2
  %3 = load i64* %mask, align 8
  %sh_prom = zext i32 %sub to i64
  %shr = lshr i64 %3, %sh_prom
  store i64 %shr, i64* %mask, align 8
  %4 = load i64* %val.addr, align 8
  %5 = load i64* %mask, align 8
  %and = and i64 %4, %5
  store i64 %and, i64* %field, align 8
  %6 = load i32* %sc.addr, align 4
  %cmp1 = icmp sge i32 %6, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %7 = load i32* %sc.addr, align 4
  store i32 %7, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %8 = load i32* %n, align 4
  %9 = load i32* %rc.addr, align 4
  %cmp3 = icmp sge i32 %8, %9
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32* %rc.addr, align 4
  %11 = load i32* %n, align 4
  %sub4 = sub nsw i32 %11, %10
  store i32 %sub4, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32* %n, align 4
  %cmp5 = icmp eq i32 %12, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  %13 = load i64* %val.addr, align 8
  store i64 %13, i64* %retval
  br label %return

if.end7:                                          ; preds = %for.end
  %14 = load i64* %field, align 8
  %15 = load i32* %n, align 4
  %sh_prom8 = zext i32 %15 to i64
  %shl = shl i64 %14, %sh_prom8
  store i64 %shl, i64* %tmp1, align 8
  %16 = load i64* %field, align 8
  %17 = load i32* %rc.addr, align 4
  %18 = load i32* %n, align 4
  %sub9 = sub nsw i32 %17, %18
  %sh_prom10 = zext i32 %sub9 to i64
  %shr11 = lshr i64 %16, %sh_prom10
  store i64 %shr11, i64* %tmp2, align 8
  br label %if.end27

if.else:                                          ; preds = %if.end
  %19 = load i32* %sc.addr, align 4
  %sub12 = sub nsw i32 0, %19
  store i32 %sub12, i32* %n, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc16, %if.else
  %20 = load i32* %n, align 4
  %21 = load i32* %rc.addr, align 4
  %cmp14 = icmp sge i32 %20, %21
  br i1 %cmp14, label %for.body15, label %for.end18

for.body15:                                       ; preds = %for.cond13
  br label %for.inc16

for.inc16:                                        ; preds = %for.body15
  %22 = load i32* %rc.addr, align 4
  %23 = load i32* %n, align 4
  %sub17 = sub nsw i32 %23, %22
  store i32 %sub17, i32* %n, align 4
  br label %for.cond13

for.end18:                                        ; preds = %for.cond13
  %24 = load i32* %n, align 4
  %cmp19 = icmp eq i32 %24, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.end18
  %25 = load i64* %val.addr, align 8
  store i64 %25, i64* %retval
  br label %return

if.end21:                                         ; preds = %for.end18
  %26 = load i64* %field, align 8
  %27 = load i32* %n, align 4
  %sh_prom22 = zext i32 %27 to i64
  %shr23 = lshr i64 %26, %sh_prom22
  store i64 %shr23, i64* %tmp1, align 8
  %28 = load i64* %field, align 8
  %29 = load i32* %rc.addr, align 4
  %30 = load i32* %n, align 4
  %sub24 = sub nsw i32 %29, %30
  %sh_prom25 = zext i32 %sub24 to i64
  %shl26 = shl i64 %28, %sh_prom25
  store i64 %shl26, i64* %tmp2, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.end21, %if.end7
  %31 = load i64* %val.addr, align 8
  %32 = load i64* %field, align 8
  %xor = xor i64 %31, %32
  %33 = load i64* %tmp1, align 8
  %34 = load i64* %tmp2, align 8
  %or = or i64 %33, %34
  %35 = load i64* %mask, align 8
  %and28 = and i64 %or, %35
  %or29 = or i64 %xor, %and28
  store i64 %or29, i64* %retval
  br label %return

return:                                           ; preds = %if.end27, %if.then20, %if.then6, %if.then
  %36 = load i64* %retval
  ret i64 %36
}

define  void @__pgi_sincosf(float %x, i8* %y, i8* %z) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca i8*, align 8
  %z.addr = alloca i8*, align 8
  store float %x, float* %x.addr, align 4
  store i8* %y, i8** %y.addr, align 8
  store i8* %z, i8** %z.addr, align 8
  %0 = load float* %x.addr, align 4
  %1 = load i8** %y.addr, align 8
  %2 = bitcast i8* %1 to float*
  %3 = load i8** %z.addr, align 8
  %4 = bitcast i8* %3 to float*
  call  void @__nv_sincosf(float %0, float* %2, float* %4)
  ret void
}

declare  void @__nv_sincosf(float, float*, float*)

define  void @__pgi_sincos(double %x, i8* %y, i8* %z) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca i8*, align 8
  %z.addr = alloca i8*, align 8
  store double %x, double* %x.addr, align 8
  store i8* %y, i8** %y.addr, align 8
  store i8* %z, i8** %z.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load i8** %y.addr, align 8
  %2 = bitcast i8* %1 to double*
  %3 = load i8** %z.addr, align 8
  %4 = bitcast i8* %3 to double*
  call  void @__nv_sincos(double %0, double* %2, double* %4)
  ret void
}

declare  void @__nv_sincos(double, double*, double*)

define  i64 @__pgi_c_devloc(i8* %x) nounwind alwaysinline {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  %0 = load i8** %x.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  ret i64 %1
}

define  i64 @__pgi_bktest(i64 %val, i32 %bit) nounwind alwaysinline {
entry:
  %val.addr = alloca i64, align 8
  %bit.addr = alloca i32, align 4
  store i64 %val, i64* %val.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  %0 = load i64* %val.addr, align 8
  %1 = load i32* %bit.addr, align 4
  %sub = sub nsw i32 63, %1
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 %0, %sh_prom
  %shr = ashr i64 %shl, 63
  ret i64 %shr
}

define  i64 @__pgi_kibclr(i64 %val, i32 %bit) nounwind alwaysinline {
entry:
  %val.addr = alloca i64, align 8
  %bit.addr = alloca i32, align 4
  store i64 %val, i64* %val.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  %0 = load i64* %val.addr, align 8
  %1 = load i32* %bit.addr, align 4
  %sh_prom = zext i32 %1 to i64
  %shl = shl i64 1, %sh_prom
  %neg = xor i64 %shl, -1
  %and = and i64 %0, %neg
  ret i64 %and
}

define  i64 @__pgi_kibset(i64 %val, i32 %bit) nounwind alwaysinline {
entry:
  %val.addr = alloca i64, align 8
  %bit.addr = alloca i32, align 4
  store i64 %val, i64* %val.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  %0 = load i64* %val.addr, align 8
  %1 = load i32* %bit.addr, align 4
  %sh_prom = zext i32 %1 to i64
  %shl = shl i64 1, %sh_prom
  %or = or i64 %0, %shl
  ret i64 %or
}

define  i64 @__pgi_kibits(i64 %val, i32 %bit, i32 %numbits) nounwind alwaysinline {
entry:
  %val.addr = alloca i64, align 8
  %bit.addr = alloca i32, align 4
  %numbits.addr = alloca i32, align 4
  store i64 %val, i64* %val.addr, align 8
  store i32 %bit, i32* %bit.addr, align 4
  store i32 %numbits, i32* %numbits.addr, align 4
  %0 = load i64* %val.addr, align 8
  %1 = load i32* %bit.addr, align 4
  %sh_prom = zext i32 %1 to i64
  %shr = ashr i64 %0, %sh_prom
  %2 = load i32* %numbits.addr, align 4
  %sub = sub nsw i32 64, %2
  %sh_prom1 = zext i32 %sub to i64
  %shr2 = lshr i64 -1, %sh_prom1
  %and = and i64 %shr, %shr2
  ret i64 %and
}

define  float @__pgi_rpowk(i64 %i, float %x) nounwind alwaysinline {
entry:
  %i.addr = alloca i64, align 8
  %x.addr = alloca float, align 4
  %k = alloca i64, align 8
  %f = alloca float, align 4
  store i64 %i, i64* %i.addr, align 8
  store float %x, float* %x.addr, align 4
  store float 1.000000e+00, float* %f, align 4
  %0 = load i64* %i.addr, align 8
  store i64 %0, i64* %k, align 8
  %1 = load i64* %k, align 8
  %cmp = icmp slt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64* %k, align 8
  %sub = sub nsw i64 0, %2
  store i64 %sub, i64* %k, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end5, %if.end
  %3 = load i64* %k, align 8
  %and = and i64 %3, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %for.cond
  %4 = load float* %x.addr, align 4
  %5 = load float* %f, align 4
  %mul = fmul float %5, %4
  store float %mul, float* %f, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %for.cond
  %6 = load i64* %k, align 8
  %shr = ashr i64 %6, 1
  store i64 %shr, i64* %k, align 8
  %7 = load i64* %k, align 8
  %cmp3 = icmp eq i64 %7, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  br label %for.end

if.end5:                                          ; preds = %if.end2
  %8 = load float* %x.addr, align 4
  %9 = load float* %x.addr, align 4
  %mul6 = fmul float %9, %8
  store float %mul6, float* %x.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then4
  %10 = load i64* %i.addr, align 8
  %cmp7 = icmp slt i64 %10, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %for.end
  %11 = load float* %f, align 4
  %div = fdiv float 1.000000e+00, %11
  store float %div, float* %f, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %for.end
  %12 = load float* %f, align 4
  ret float %12
}

define  double @__pgi_dpowk(i64 %i, double %x) nounwind alwaysinline {
entry:
  %i.addr = alloca i64, align 8
  %x.addr = alloca double, align 8
  %k = alloca i64, align 8
  %f = alloca double, align 8
  store i64 %i, i64* %i.addr, align 8
  store double %x, double* %x.addr, align 8
  store double 1.000000e+00, double* %f, align 8
  %0 = load i64* %i.addr, align 8
  store i64 %0, i64* %k, align 8
  %1 = load i64* %k, align 8
  %cmp = icmp slt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64* %k, align 8
  %sub = sub nsw i64 0, %2
  store i64 %sub, i64* %k, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end5, %if.end
  %3 = load i64* %k, align 8
  %and = and i64 %3, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %for.cond
  %4 = load double* %x.addr, align 8
  %5 = load double* %f, align 8
  %mul = fmul double %5, %4
  store double %mul, double* %f, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %for.cond
  %6 = load i64* %k, align 8
  %shr = ashr i64 %6, 1
  store i64 %shr, i64* %k, align 8
  %7 = load i64* %k, align 8
  %cmp3 = icmp eq i64 %7, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  br label %for.end

if.end5:                                          ; preds = %if.end2
  %8 = load double* %x.addr, align 8
  %9 = load double* %x.addr, align 8
  %mul6 = fmul double %9, %8
  store double %mul6, double* %x.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then4
  %10 = load i64* %i.addr, align 8
  %cmp7 = icmp slt i64 %10, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %for.end
  %11 = load double* %f, align 8
  %div = fdiv double 1.000000e+00, %11
  store double %div, double* %f, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %for.end
  %12 = load double* %f, align 8
  ret double %12
}

define  void @__pgi_cddiv(i8* %res, double %real1, double %imag1, double %real2, double %imag2) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %real2.addr = alloca double, align 8
  %imag2.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %r = alloca double, align 8
  %d = alloca double, align 8
  %r_mag = alloca double, align 8
  %i_mag = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %real2, double* %real2.addr, align 8
  store double %imag2, double* %imag2.addr, align 8
  %0 = load double* %real2.addr, align 8
  store double %0, double* %r_mag, align 8
  %1 = load double* %r_mag, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load double* %r_mag, align 8
  %sub = fsub double -0.000000e+00, %2
  store double %sub, double* %r_mag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load double* %imag2.addr, align 8
  store double %3, double* %i_mag, align 8
  %4 = load double* %i_mag, align 8
  %cmp1 = fcmp olt double %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load double* %i_mag, align 8
  %sub3 = fsub double -0.000000e+00, %5
  store double %sub3, double* %i_mag, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load double* %r_mag, align 8
  %7 = load double* %i_mag, align 8
  %cmp5 = fcmp ole double %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load double* %real2.addr, align 8
  %9 = load double* %imag2.addr, align 8
  %div = fdiv double %8, %9
  store double %div, double* %r, align 8
  %10 = load double* %imag2.addr, align 8
  %11 = load double* %r, align 8
  %12 = load double* %r, align 8
  %mul = fmul double %11, %12
  %add = fadd double 1.000000e+00, %mul
  %mul7 = fmul double %10, %add
  %div8 = fdiv double 1.000000e+00, %mul7
  store double %div8, double* %d, align 8
  %13 = load double* %real1.addr, align 8
  %14 = load double* %r, align 8
  %mul9 = fmul double %13, %14
  %15 = load double* %imag1.addr, align 8
  %add10 = fadd double %mul9, %15
  %16 = load double* %d, align 8
  %mul11 = fmul double %add10, %16
  store double %mul11, double* %x, align 8
  %17 = load double* %imag1.addr, align 8
  %18 = load double* %r, align 8
  %mul12 = fmul double %17, %18
  %19 = load double* %real1.addr, align 8
  %sub13 = fsub double %mul12, %19
  %20 = load double* %d, align 8
  %mul14 = fmul double %sub13, %20
  store double %mul14, double* %y, align 8
  br label %if.end26

if.else:                                          ; preds = %if.end4
  %21 = load double* %imag2.addr, align 8
  %22 = load double* %real2.addr, align 8
  %div15 = fdiv double %21, %22
  store double %div15, double* %r, align 8
  %23 = load double* %real2.addr, align 8
  %24 = load double* %r, align 8
  %25 = load double* %r, align 8
  %mul16 = fmul double %24, %25
  %add17 = fadd double 1.000000e+00, %mul16
  %mul18 = fmul double %23, %add17
  %div19 = fdiv double 1.000000e+00, %mul18
  store double %div19, double* %d, align 8
  %26 = load double* %real1.addr, align 8
  %27 = load double* %imag1.addr, align 8
  %28 = load double* %r, align 8
  %mul20 = fmul double %27, %28
  %add21 = fadd double %26, %mul20
  %29 = load double* %d, align 8
  %mul22 = fmul double %add21, %29
  store double %mul22, double* %x, align 8
  %30 = load double* %imag1.addr, align 8
  %31 = load double* %real1.addr, align 8
  %32 = load double* %r, align 8
  %mul23 = fmul double %31, %32
  %sub24 = fsub double %30, %mul23
  %33 = load double* %d, align 8
  %mul25 = fmul double %sub24, %33
  store double %mul25, double* %y, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then6
  %34 = load double* %x, align 8
  %35 = load i8** %res.addr, align 8
  %36 = bitcast i8* %35 to double*
  %arrayidx = getelementptr inbounds double* %36, i64 0
  store double %34, double* %arrayidx, align 8
  %37 = load double* %y, align 8
  %38 = load i8** %res.addr, align 8
  %39 = bitcast i8* %38 to double*
  %arrayidx27 = getelementptr inbounds double* %39, i64 1
  store double %37, double* %arrayidx27, align 8
  ret void
}

define  void @__pgi_cddivd(i8* %res, double %real1, double %imag1, double %d) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %d.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %d.addr, align 8
  %div = fdiv double %0, %1
  store double %div, double* %x, align 8
  %2 = load double* %imag1.addr, align 8
  %3 = load double* %d.addr, align 8
  %div1 = fdiv double %2, %3
  store double %div1, double* %y, align 8
  %4 = load double* %x, align 8
  %5 = load i8** %res.addr, align 8
  %6 = bitcast i8* %5 to double*
  %arrayidx = getelementptr inbounds double* %6, i64 0
  store double %4, double* %arrayidx, align 8
  %7 = load double* %y, align 8
  %8 = load i8** %res.addr, align 8
  %9 = bitcast i8* %8 to double*
  %arrayidx2 = getelementptr inbounds double* %9, i64 1
  store double %7, double* %arrayidx2, align 8
  ret void
}

define  void @__pgi_cdpowi(i8* %res, double %real, double %imag, i32 %i) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %r.i = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real.addr = alloca double, align 8
  %imag.addr = alloca double, align 8
  %i.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %fr = alloca double, align 8
  %fi = alloca double, align 8
  %gr = alloca double, align 8
  %gi = alloca double, align 8
  %tr = alloca double, align 8
  %ti = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real, double* %real.addr, align 8
  store double %imag, double* %imag.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  store double 1.000000e+00, double* %fr, align 8
  store double 0.000000e+00, double* %fi, align 8
  %0 = load double* %real.addr, align 8
  store double %0, double* %gr, align 8
  %1 = load double* %imag.addr, align 8
  store double %1, double* %gi, align 8
  %2 = load i32* %i.addr, align 4
  store i32 %2, i32* %k, align 4
  %3 = load i32* %i.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* %i.addr, align 4
  %sub = sub nsw i32 0, %4
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load i32* %k, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32* %k, align 4
  %and = and i32 %6, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %while.body
  %7 = load double* %fr, align 8
  %8 = load double* %gr, align 8
  %mul = fmul double %7, %8
  %9 = load double* %fi, align 8
  %10 = load double* %gi, align 8
  %mul3 = fmul double %9, %10
  %sub4 = fsub double %mul, %mul3
  store double %sub4, double* %tr, align 8
  %11 = load double* %fr, align 8
  %12 = load double* %gi, align 8
  %mul5 = fmul double %11, %12
  %13 = load double* %fi, align 8
  %14 = load double* %gr, align 8
  %mul6 = fmul double %13, %14
  %add = fadd double %mul5, %mul6
  store double %add, double* %ti, align 8
  %15 = load double* %tr, align 8
  store double %15, double* %fr, align 8
  %16 = load double* %ti, align 8
  store double %16, double* %fi, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %while.body
  %17 = load i32* %k, align 4
  %shr = lshr i32 %17, 1
  store i32 %shr, i32* %k, align 4
  %18 = load double* %gr, align 8
  %19 = load double* %gr, align 8
  %mul8 = fmul double %18, %19
  %20 = load double* %gi, align 8
  %21 = load double* %gi, align 8
  %mul9 = fmul double %20, %21
  %sub10 = fsub double %mul8, %mul9
  store double %sub10, double* %tr, align 8
  %22 = load double* %gr, align 8
  %mul11 = fmul double 2.000000e+00, %22
  %23 = load double* %gi, align 8
  %mul12 = fmul double %mul11, %23
  store double %mul12, double* %ti, align 8
  %24 = load double* %tr, align 8
  store double %24, double* %gr, align 8
  %25 = load double* %ti, align 8
  store double %25, double* %gi, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load i32* %i.addr, align 4
  %cmp13 = icmp slt i32 %26, 0
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.end
  %27 = load i8** %res.addr, align 8
  %28 = load double* %fr, align 8
  %29 = load double* %fi, align 8
  store i8* %27, i8** %res.addr.i, align 8
  store double 1.000000e+00, double* %real1.addr.i, align 8
  store double 0.000000e+00, double* %imag1.addr.i, align 8
  store double %28, double* %real2.addr.i, align 8
  store double %29, double* %imag2.addr.i, align 8
  %30 = load double* %real2.addr.i, align 8
  store double %30, double* %r_mag.i, align 8
  %31 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %31, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then14
  %32 = load double* %r_mag.i, align 8
  %sub.i = fsub double -0.000000e+00, %32
  store double %sub.i, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then14
  %33 = load double* %imag2.addr.i, align 8
  store double %33, double* %i_mag.i, align 8
  %34 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %34, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %35 = load double* %i_mag.i, align 8
  %sub3.i = fsub double -0.000000e+00, %35
  store double %sub3.i, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %36 = load double* %r_mag.i, align 8
  %37 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %36, %37
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %38 = load double* %real2.addr.i, align 8
  %39 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %38, %39
  store double %div.i, double* %r.i, align 8
  %40 = load double* %imag2.addr.i, align 8
  %41 = load double* %r.i, align 8
  %42 = load double* %r.i, align 8
  %mul.i = fmul double %41, %42
  %add.i = fadd double 1.000000e+00, %mul.i
  %mul7.i = fmul double %40, %add.i
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %43 = load double* %real1.addr.i, align 8
  %44 = load double* %r.i, align 8
  %mul9.i = fmul double %43, %44
  %45 = load double* %imag1.addr.i, align 8
  %add10.i = fadd double %mul9.i, %45
  %46 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %46
  store double %mul11.i, double* %x.i, align 8
  %47 = load double* %imag1.addr.i, align 8
  %48 = load double* %r.i, align 8
  %mul12.i = fmul double %47, %48
  %49 = load double* %real1.addr.i, align 8
  %sub13.i = fsub double %mul12.i, %49
  %50 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %50
  store double %mul14.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %51 = load double* %imag2.addr.i, align 8
  %52 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %51, %52
  store double %div15.i, double* %r.i, align 8
  %53 = load double* %real2.addr.i, align 8
  %54 = load double* %r.i, align 8
  %55 = load double* %r.i, align 8
  %mul16.i = fmul double %54, %55
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %53, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %56 = load double* %real1.addr.i, align 8
  %57 = load double* %imag1.addr.i, align 8
  %58 = load double* %r.i, align 8
  %mul20.i = fmul double %57, %58
  %add21.i = fadd double %56, %mul20.i
  %59 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %59
  store double %mul22.i, double* %x.i, align 8
  %60 = load double* %imag1.addr.i, align 8
  %61 = load double* %real1.addr.i, align 8
  %62 = load double* %r.i, align 8
  %mul23.i = fmul double %61, %62
  %sub24.i = fsub double %60, %mul23.i
  %63 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %63
  store double %mul25.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %64 = load double* %x.i, align 8
  %65 = load i8** %res.addr.i, align 8
  %66 = bitcast i8* %65 to double*
  store double %64, double* %66, align 8
  %67 = load double* %y.i, align 8
  %68 = load i8** %res.addr.i, align 8
  %69 = bitcast i8* %68 to double*
  %arrayidx27.i = getelementptr inbounds double* %69, i64 1
  store double %67, double* %arrayidx27.i, align 8
  br label %if.end16

if.else:                                          ; preds = %while.end
  %70 = load double* %fr, align 8
  %71 = load i8** %res.addr, align 8
  %72 = bitcast i8* %71 to double*
  %arrayidx = getelementptr inbounds double* %72, i64 0
  store double %70, double* %arrayidx, align 8
  %73 = load double* %fi, align 8
  %74 = load i8** %res.addr, align 8
  %75 = bitcast i8* %74 to double*
  %arrayidx15 = getelementptr inbounds double* %75, i64 1
  store double %73, double* %arrayidx15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else, %__pgi_cddiv.exit
  ret void
}

define  void @__pgi_cdpowk(i8* %res, double %real, double %imag, i64 %i) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %r.i = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real.addr = alloca double, align 8
  %imag.addr = alloca double, align 8
  %i.addr = alloca i64, align 8
  %k = alloca i64, align 8
  %fr = alloca double, align 8
  %fi = alloca double, align 8
  %gr = alloca double, align 8
  %gi = alloca double, align 8
  %tr = alloca double, align 8
  %ti = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real, double* %real.addr, align 8
  store double %imag, double* %imag.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  store double 1.000000e+00, double* %fr, align 8
  store double 0.000000e+00, double* %fi, align 8
  %0 = load double* %real.addr, align 8
  store double %0, double* %gr, align 8
  %1 = load double* %imag.addr, align 8
  store double %1, double* %gi, align 8
  %2 = load i64* %i.addr, align 8
  store i64 %2, i64* %k, align 8
  %3 = load i64* %i.addr, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64* %i.addr, align 8
  %sub = sub nsw i64 0, %4
  store i64 %sub, i64* %k, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load i64* %k, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64* %k, align 8
  %and = and i64 %6, 1
  %tobool1 = icmp ne i64 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %while.body
  %7 = load double* %fr, align 8
  %8 = load double* %gr, align 8
  %mul = fmul double %7, %8
  %9 = load double* %fi, align 8
  %10 = load double* %gi, align 8
  %mul3 = fmul double %9, %10
  %sub4 = fsub double %mul, %mul3
  store double %sub4, double* %tr, align 8
  %11 = load double* %fr, align 8
  %12 = load double* %gi, align 8
  %mul5 = fmul double %11, %12
  %13 = load double* %fi, align 8
  %14 = load double* %gr, align 8
  %mul6 = fmul double %13, %14
  %add = fadd double %mul5, %mul6
  store double %add, double* %ti, align 8
  %15 = load double* %tr, align 8
  store double %15, double* %fr, align 8
  %16 = load double* %ti, align 8
  store double %16, double* %fi, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %while.body
  %17 = load i64* %k, align 8
  %shr = lshr i64 %17, 1
  store i64 %shr, i64* %k, align 8
  %18 = load double* %gr, align 8
  %19 = load double* %gr, align 8
  %mul8 = fmul double %18, %19
  %20 = load double* %gi, align 8
  %21 = load double* %gi, align 8
  %mul9 = fmul double %20, %21
  %sub10 = fsub double %mul8, %mul9
  store double %sub10, double* %tr, align 8
  %22 = load double* %gr, align 8
  %mul11 = fmul double 2.000000e+00, %22
  %23 = load double* %gi, align 8
  %mul12 = fmul double %mul11, %23
  store double %mul12, double* %ti, align 8
  %24 = load double* %tr, align 8
  store double %24, double* %gr, align 8
  %25 = load double* %ti, align 8
  store double %25, double* %gi, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load i64* %i.addr, align 8
  %cmp13 = icmp slt i64 %26, 0
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.end
  %27 = load i8** %res.addr, align 8
  %28 = load double* %fr, align 8
  %29 = load double* %fi, align 8
  store i8* %27, i8** %res.addr.i, align 8
  store double 1.000000e+00, double* %real1.addr.i, align 8
  store double 0.000000e+00, double* %imag1.addr.i, align 8
  store double %28, double* %real2.addr.i, align 8
  store double %29, double* %imag2.addr.i, align 8
  %30 = load double* %real2.addr.i, align 8
  store double %30, double* %r_mag.i, align 8
  %31 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %31, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then14
  %32 = load double* %r_mag.i, align 8
  %sub.i = fsub double -0.000000e+00, %32
  store double %sub.i, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then14
  %33 = load double* %imag2.addr.i, align 8
  store double %33, double* %i_mag.i, align 8
  %34 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %34, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %35 = load double* %i_mag.i, align 8
  %sub3.i = fsub double -0.000000e+00, %35
  store double %sub3.i, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %36 = load double* %r_mag.i, align 8
  %37 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %36, %37
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %38 = load double* %real2.addr.i, align 8
  %39 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %38, %39
  store double %div.i, double* %r.i, align 8
  %40 = load double* %imag2.addr.i, align 8
  %41 = load double* %r.i, align 8
  %42 = load double* %r.i, align 8
  %mul.i = fmul double %41, %42
  %add.i = fadd double 1.000000e+00, %mul.i
  %mul7.i = fmul double %40, %add.i
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %43 = load double* %real1.addr.i, align 8
  %44 = load double* %r.i, align 8
  %mul9.i = fmul double %43, %44
  %45 = load double* %imag1.addr.i, align 8
  %add10.i = fadd double %mul9.i, %45
  %46 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %46
  store double %mul11.i, double* %x.i, align 8
  %47 = load double* %imag1.addr.i, align 8
  %48 = load double* %r.i, align 8
  %mul12.i = fmul double %47, %48
  %49 = load double* %real1.addr.i, align 8
  %sub13.i = fsub double %mul12.i, %49
  %50 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %50
  store double %mul14.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %51 = load double* %imag2.addr.i, align 8
  %52 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %51, %52
  store double %div15.i, double* %r.i, align 8
  %53 = load double* %real2.addr.i, align 8
  %54 = load double* %r.i, align 8
  %55 = load double* %r.i, align 8
  %mul16.i = fmul double %54, %55
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %53, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %56 = load double* %real1.addr.i, align 8
  %57 = load double* %imag1.addr.i, align 8
  %58 = load double* %r.i, align 8
  %mul20.i = fmul double %57, %58
  %add21.i = fadd double %56, %mul20.i
  %59 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %59
  store double %mul22.i, double* %x.i, align 8
  %60 = load double* %imag1.addr.i, align 8
  %61 = load double* %real1.addr.i, align 8
  %62 = load double* %r.i, align 8
  %mul23.i = fmul double %61, %62
  %sub24.i = fsub double %60, %mul23.i
  %63 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %63
  store double %mul25.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %64 = load double* %x.i, align 8
  %65 = load i8** %res.addr.i, align 8
  %66 = bitcast i8* %65 to double*
  store double %64, double* %66, align 8
  %67 = load double* %y.i, align 8
  %68 = load i8** %res.addr.i, align 8
  %69 = bitcast i8* %68 to double*
  %arrayidx27.i = getelementptr inbounds double* %69, i64 1
  store double %67, double* %arrayidx27.i, align 8
  br label %if.end16

if.else:                                          ; preds = %while.end
  %70 = load double* %fr, align 8
  %71 = load i8** %res.addr, align 8
  %72 = bitcast i8* %71 to double*
  %arrayidx = getelementptr inbounds double* %72, i64 0
  store double %70, double* %arrayidx, align 8
  %73 = load double* %fi, align 8
  %74 = load i8** %res.addr, align 8
  %75 = bitcast i8* %74 to double*
  %arrayidx15 = getelementptr inbounds double* %75, i64 1
  store double %73, double* %arrayidx15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else, %__pgi_cddiv.exit
  ret void
}

define  void @__pgi_zcddiv(double %real1, double %imag1, double %real2, double %imag2, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %real2.addr = alloca double, align 8
  %imag2.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %r = alloca double, align 8
  %d = alloca double, align 8
  %r_mag = alloca double, align 8
  %i_mag = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %real2, double* %real2.addr, align 8
  store double %imag2, double* %imag2.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real2.addr, align 8
  store double %0, double* %r_mag, align 8
  %1 = load double* %r_mag, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load double* %r_mag, align 8
  %sub = fsub double -0.000000e+00, %2
  store double %sub, double* %r_mag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load double* %imag2.addr, align 8
  store double %3, double* %i_mag, align 8
  %4 = load double* %i_mag, align 8
  %cmp1 = fcmp olt double %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load double* %i_mag, align 8
  %sub3 = fsub double -0.000000e+00, %5
  store double %sub3, double* %i_mag, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load double* %r_mag, align 8
  %7 = load double* %i_mag, align 8
  %cmp5 = fcmp ole double %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load double* %real2.addr, align 8
  %9 = load double* %imag2.addr, align 8
  %div = fdiv double %8, %9
  store double %div, double* %r, align 8
  %10 = load double* %imag2.addr, align 8
  %11 = load double* %r, align 8
  %12 = load double* %r, align 8
  %mul = fmul double %11, %12
  %add = fadd double 1.000000e+00, %mul
  %mul7 = fmul double %10, %add
  %div8 = fdiv double 1.000000e+00, %mul7
  store double %div8, double* %d, align 8
  %13 = load double* %real1.addr, align 8
  %14 = load double* %r, align 8
  %mul9 = fmul double %13, %14
  %15 = load double* %imag1.addr, align 8
  %add10 = fadd double %mul9, %15
  %16 = load double* %d, align 8
  %mul11 = fmul double %add10, %16
  store double %mul11, double* %x, align 8
  %17 = load double* %imag1.addr, align 8
  %18 = load double* %r, align 8
  %mul12 = fmul double %17, %18
  %19 = load double* %real1.addr, align 8
  %sub13 = fsub double %mul12, %19
  %20 = load double* %d, align 8
  %mul14 = fmul double %sub13, %20
  store double %mul14, double* %y, align 8
  br label %if.end26

if.else:                                          ; preds = %if.end4
  %21 = load double* %imag2.addr, align 8
  %22 = load double* %real2.addr, align 8
  %div15 = fdiv double %21, %22
  store double %div15, double* %r, align 8
  %23 = load double* %real2.addr, align 8
  %24 = load double* %r, align 8
  %25 = load double* %r, align 8
  %mul16 = fmul double %24, %25
  %add17 = fadd double 1.000000e+00, %mul16
  %mul18 = fmul double %23, %add17
  %div19 = fdiv double 1.000000e+00, %mul18
  store double %div19, double* %d, align 8
  %26 = load double* %real1.addr, align 8
  %27 = load double* %imag1.addr, align 8
  %28 = load double* %r, align 8
  %mul20 = fmul double %27, %28
  %add21 = fadd double %26, %mul20
  %29 = load double* %d, align 8
  %mul22 = fmul double %add21, %29
  store double %mul22, double* %x, align 8
  %30 = load double* %imag1.addr, align 8
  %31 = load double* %real1.addr, align 8
  %32 = load double* %r, align 8
  %mul23 = fmul double %31, %32
  %sub24 = fsub double %30, %mul23
  %33 = load double* %d, align 8
  %mul25 = fmul double %sub24, %33
  store double %mul25, double* %y, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then6
  %34 = load double* %x, align 8
  %35 = load i8** %res.addr, align 8
  %36 = bitcast i8* %35 to double*
  %arrayidx = getelementptr inbounds double* %36, i64 0
  store double %34, double* %arrayidx, align 8
  %37 = load double* %y, align 8
  %38 = load i8** %res.addr, align 8
  %39 = bitcast i8* %38 to double*
  %arrayidx27 = getelementptr inbounds double* %39, i64 1
  store double %37, double* %arrayidx27, align 8
  ret void
}

define  void @__pgi_zcddivd(double %real1, double %imag1, double %d, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %d.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %d, double* %d.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %d.addr, align 8
  %div = fdiv double %0, %1
  store double %div, double* %x, align 8
  %2 = load double* %imag1.addr, align 8
  %3 = load double* %d.addr, align 8
  %div1 = fdiv double %2, %3
  store double %div1, double* %y, align 8
  %4 = load double* %x, align 8
  %5 = load i8** %res.addr, align 8
  %6 = bitcast i8* %5 to double*
  %arrayidx = getelementptr inbounds double* %6, i64 0
  store double %4, double* %arrayidx, align 8
  %7 = load double* %y, align 8
  %8 = load i8** %res.addr, align 8
  %9 = bitcast i8* %8 to double*
  %arrayidx2 = getelementptr inbounds double* %9, i64 1
  store double %7, double* %arrayidx2, align 8
  ret void
}

define  void @__pgi_zcdpowi(double %real, double %imag, i32 %i, i8* %res) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %r.i = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %real.addr = alloca double, align 8
  %imag.addr = alloca double, align 8
  %i.addr = alloca i32, align 4
  %res.addr = alloca i8*, align 8
  %k = alloca i32, align 4
  %fr = alloca double, align 8
  %fi = alloca double, align 8
  %gr = alloca double, align 8
  %gi = alloca double, align 8
  %tr = alloca double, align 8
  %ti = alloca double, align 8
  store double %real, double* %real.addr, align 8
  store double %imag, double* %imag.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  store i8* %res, i8** %res.addr, align 8
  store double 1.000000e+00, double* %fr, align 8
  store double 0.000000e+00, double* %fi, align 8
  %0 = load double* %real.addr, align 8
  store double %0, double* %gr, align 8
  %1 = load double* %imag.addr, align 8
  store double %1, double* %gi, align 8
  %2 = load i32* %i.addr, align 4
  store i32 %2, i32* %k, align 4
  %3 = load i32* %i.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* %i.addr, align 4
  %sub = sub nsw i32 0, %4
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load i32* %k, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32* %k, align 4
  %and = and i32 %6, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %while.body
  %7 = load double* %fr, align 8
  %8 = load double* %gr, align 8
  %mul = fmul double %7, %8
  %9 = load double* %fi, align 8
  %10 = load double* %gi, align 8
  %mul3 = fmul double %9, %10
  %sub4 = fsub double %mul, %mul3
  store double %sub4, double* %tr, align 8
  %11 = load double* %fr, align 8
  %12 = load double* %gi, align 8
  %mul5 = fmul double %11, %12
  %13 = load double* %fi, align 8
  %14 = load double* %gr, align 8
  %mul6 = fmul double %13, %14
  %add = fadd double %mul5, %mul6
  store double %add, double* %ti, align 8
  %15 = load double* %tr, align 8
  store double %15, double* %fr, align 8
  %16 = load double* %ti, align 8
  store double %16, double* %fi, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %while.body
  %17 = load i32* %k, align 4
  %shr = lshr i32 %17, 1
  store i32 %shr, i32* %k, align 4
  %18 = load double* %gr, align 8
  %19 = load double* %gr, align 8
  %mul8 = fmul double %18, %19
  %20 = load double* %gi, align 8
  %21 = load double* %gi, align 8
  %mul9 = fmul double %20, %21
  %sub10 = fsub double %mul8, %mul9
  store double %sub10, double* %tr, align 8
  %22 = load double* %gr, align 8
  %mul11 = fmul double 2.000000e+00, %22
  %23 = load double* %gi, align 8
  %mul12 = fmul double %mul11, %23
  store double %mul12, double* %ti, align 8
  %24 = load double* %tr, align 8
  store double %24, double* %gr, align 8
  %25 = load double* %ti, align 8
  store double %25, double* %gi, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load i32* %i.addr, align 4
  %cmp13 = icmp slt i32 %26, 0
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.end
  %27 = load i8** %res.addr, align 8
  %28 = load double* %fr, align 8
  %29 = load double* %fi, align 8
  store i8* %27, i8** %res.addr.i, align 8
  store double 1.000000e+00, double* %real1.addr.i, align 8
  store double 0.000000e+00, double* %imag1.addr.i, align 8
  store double %28, double* %real2.addr.i, align 8
  store double %29, double* %imag2.addr.i, align 8
  %30 = load double* %real2.addr.i, align 8
  store double %30, double* %r_mag.i, align 8
  %31 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %31, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then14
  %32 = load double* %r_mag.i, align 8
  %sub.i = fsub double -0.000000e+00, %32
  store double %sub.i, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then14
  %33 = load double* %imag2.addr.i, align 8
  store double %33, double* %i_mag.i, align 8
  %34 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %34, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %35 = load double* %i_mag.i, align 8
  %sub3.i = fsub double -0.000000e+00, %35
  store double %sub3.i, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %36 = load double* %r_mag.i, align 8
  %37 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %36, %37
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %38 = load double* %real2.addr.i, align 8
  %39 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %38, %39
  store double %div.i, double* %r.i, align 8
  %40 = load double* %imag2.addr.i, align 8
  %41 = load double* %r.i, align 8
  %42 = load double* %r.i, align 8
  %mul.i = fmul double %41, %42
  %add.i = fadd double 1.000000e+00, %mul.i
  %mul7.i = fmul double %40, %add.i
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %43 = load double* %real1.addr.i, align 8
  %44 = load double* %r.i, align 8
  %mul9.i = fmul double %43, %44
  %45 = load double* %imag1.addr.i, align 8
  %add10.i = fadd double %mul9.i, %45
  %46 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %46
  store double %mul11.i, double* %x.i, align 8
  %47 = load double* %imag1.addr.i, align 8
  %48 = load double* %r.i, align 8
  %mul12.i = fmul double %47, %48
  %49 = load double* %real1.addr.i, align 8
  %sub13.i = fsub double %mul12.i, %49
  %50 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %50
  store double %mul14.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %51 = load double* %imag2.addr.i, align 8
  %52 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %51, %52
  store double %div15.i, double* %r.i, align 8
  %53 = load double* %real2.addr.i, align 8
  %54 = load double* %r.i, align 8
  %55 = load double* %r.i, align 8
  %mul16.i = fmul double %54, %55
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %53, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %56 = load double* %real1.addr.i, align 8
  %57 = load double* %imag1.addr.i, align 8
  %58 = load double* %r.i, align 8
  %mul20.i = fmul double %57, %58
  %add21.i = fadd double %56, %mul20.i
  %59 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %59
  store double %mul22.i, double* %x.i, align 8
  %60 = load double* %imag1.addr.i, align 8
  %61 = load double* %real1.addr.i, align 8
  %62 = load double* %r.i, align 8
  %mul23.i = fmul double %61, %62
  %sub24.i = fsub double %60, %mul23.i
  %63 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %63
  store double %mul25.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %64 = load double* %x.i, align 8
  %65 = load i8** %res.addr.i, align 8
  %66 = bitcast i8* %65 to double*
  store double %64, double* %66, align 8
  %67 = load double* %y.i, align 8
  %68 = load i8** %res.addr.i, align 8
  %69 = bitcast i8* %68 to double*
  %arrayidx27.i = getelementptr inbounds double* %69, i64 1
  store double %67, double* %arrayidx27.i, align 8
  br label %if.end16

if.else:                                          ; preds = %while.end
  %70 = load double* %fr, align 8
  %71 = load i8** %res.addr, align 8
  %72 = bitcast i8* %71 to double*
  %arrayidx = getelementptr inbounds double* %72, i64 0
  store double %70, double* %arrayidx, align 8
  %73 = load double* %fi, align 8
  %74 = load i8** %res.addr, align 8
  %75 = bitcast i8* %74 to double*
  %arrayidx15 = getelementptr inbounds double* %75, i64 1
  store double %73, double* %arrayidx15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else, %__pgi_cddiv.exit
  ret void
}

define  void @__pgi_zcdpowk(double %real, double %imag, i64 %i, i8* %res) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %r.i = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %real.addr = alloca double, align 8
  %imag.addr = alloca double, align 8
  %i.addr = alloca i64, align 8
  %res.addr = alloca i8*, align 8
  %k = alloca i64, align 8
  %fr = alloca double, align 8
  %fi = alloca double, align 8
  %gr = alloca double, align 8
  %gi = alloca double, align 8
  %tr = alloca double, align 8
  %ti = alloca double, align 8
  store double %real, double* %real.addr, align 8
  store double %imag, double* %imag.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  store double 1.000000e+00, double* %fr, align 8
  store double 0.000000e+00, double* %fi, align 8
  %0 = load double* %real.addr, align 8
  store double %0, double* %gr, align 8
  %1 = load double* %imag.addr, align 8
  store double %1, double* %gi, align 8
  %2 = load i64* %i.addr, align 8
  store i64 %2, i64* %k, align 8
  %3 = load i64* %i.addr, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64* %i.addr, align 8
  %sub = sub nsw i64 0, %4
  store i64 %sub, i64* %k, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load i64* %k, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64* %k, align 8
  %and = and i64 %6, 1
  %tobool1 = icmp ne i64 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %while.body
  %7 = load double* %fr, align 8
  %8 = load double* %gr, align 8
  %mul = fmul double %7, %8
  %9 = load double* %fi, align 8
  %10 = load double* %gi, align 8
  %mul3 = fmul double %9, %10
  %sub4 = fsub double %mul, %mul3
  store double %sub4, double* %tr, align 8
  %11 = load double* %fr, align 8
  %12 = load double* %gi, align 8
  %mul5 = fmul double %11, %12
  %13 = load double* %fi, align 8
  %14 = load double* %gr, align 8
  %mul6 = fmul double %13, %14
  %add = fadd double %mul5, %mul6
  store double %add, double* %ti, align 8
  %15 = load double* %tr, align 8
  store double %15, double* %fr, align 8
  %16 = load double* %ti, align 8
  store double %16, double* %fi, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %while.body
  %17 = load i64* %k, align 8
  %shr = lshr i64 %17, 1
  store i64 %shr, i64* %k, align 8
  %18 = load double* %gr, align 8
  %19 = load double* %gr, align 8
  %mul8 = fmul double %18, %19
  %20 = load double* %gi, align 8
  %21 = load double* %gi, align 8
  %mul9 = fmul double %20, %21
  %sub10 = fsub double %mul8, %mul9
  store double %sub10, double* %tr, align 8
  %22 = load double* %gr, align 8
  %mul11 = fmul double 2.000000e+00, %22
  %23 = load double* %gi, align 8
  %mul12 = fmul double %mul11, %23
  store double %mul12, double* %ti, align 8
  %24 = load double* %tr, align 8
  store double %24, double* %gr, align 8
  %25 = load double* %ti, align 8
  store double %25, double* %gi, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load i64* %i.addr, align 8
  %cmp13 = icmp slt i64 %26, 0
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.end
  %27 = load i8** %res.addr, align 8
  %28 = load double* %fr, align 8
  %29 = load double* %fi, align 8
  store i8* %27, i8** %res.addr.i, align 8
  store double 1.000000e+00, double* %real1.addr.i, align 8
  store double 0.000000e+00, double* %imag1.addr.i, align 8
  store double %28, double* %real2.addr.i, align 8
  store double %29, double* %imag2.addr.i, align 8
  %30 = load double* %real2.addr.i, align 8
  store double %30, double* %r_mag.i, align 8
  %31 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %31, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then14
  %32 = load double* %r_mag.i, align 8
  %sub.i = fsub double -0.000000e+00, %32
  store double %sub.i, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then14
  %33 = load double* %imag2.addr.i, align 8
  store double %33, double* %i_mag.i, align 8
  %34 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %34, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %35 = load double* %i_mag.i, align 8
  %sub3.i = fsub double -0.000000e+00, %35
  store double %sub3.i, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %36 = load double* %r_mag.i, align 8
  %37 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %36, %37
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %38 = load double* %real2.addr.i, align 8
  %39 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %38, %39
  store double %div.i, double* %r.i, align 8
  %40 = load double* %imag2.addr.i, align 8
  %41 = load double* %r.i, align 8
  %42 = load double* %r.i, align 8
  %mul.i = fmul double %41, %42
  %add.i = fadd double 1.000000e+00, %mul.i
  %mul7.i = fmul double %40, %add.i
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %43 = load double* %real1.addr.i, align 8
  %44 = load double* %r.i, align 8
  %mul9.i = fmul double %43, %44
  %45 = load double* %imag1.addr.i, align 8
  %add10.i = fadd double %mul9.i, %45
  %46 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %46
  store double %mul11.i, double* %x.i, align 8
  %47 = load double* %imag1.addr.i, align 8
  %48 = load double* %r.i, align 8
  %mul12.i = fmul double %47, %48
  %49 = load double* %real1.addr.i, align 8
  %sub13.i = fsub double %mul12.i, %49
  %50 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %50
  store double %mul14.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %51 = load double* %imag2.addr.i, align 8
  %52 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %51, %52
  store double %div15.i, double* %r.i, align 8
  %53 = load double* %real2.addr.i, align 8
  %54 = load double* %r.i, align 8
  %55 = load double* %r.i, align 8
  %mul16.i = fmul double %54, %55
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %53, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %56 = load double* %real1.addr.i, align 8
  %57 = load double* %imag1.addr.i, align 8
  %58 = load double* %r.i, align 8
  %mul20.i = fmul double %57, %58
  %add21.i = fadd double %56, %mul20.i
  %59 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %59
  store double %mul22.i, double* %x.i, align 8
  %60 = load double* %imag1.addr.i, align 8
  %61 = load double* %real1.addr.i, align 8
  %62 = load double* %r.i, align 8
  %mul23.i = fmul double %61, %62
  %sub24.i = fsub double %60, %mul23.i
  %63 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %63
  store double %mul25.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %64 = load double* %x.i, align 8
  %65 = load i8** %res.addr.i, align 8
  %66 = bitcast i8* %65 to double*
  store double %64, double* %66, align 8
  %67 = load double* %y.i, align 8
  %68 = load i8** %res.addr.i, align 8
  %69 = bitcast i8* %68 to double*
  %arrayidx27.i = getelementptr inbounds double* %69, i64 1
  store double %67, double* %arrayidx27.i, align 8
  br label %if.end16

if.else:                                          ; preds = %while.end
  %70 = load double* %fr, align 8
  %71 = load i8** %res.addr, align 8
  %72 = bitcast i8* %71 to double*
  %arrayidx = getelementptr inbounds double* %72, i64 0
  store double %70, double* %arrayidx, align 8
  %73 = load double* %fi, align 8
  %74 = load i8** %res.addr, align 8
  %75 = bitcast i8* %74 to double*
  %arrayidx15 = getelementptr inbounds double* %75, i64 1
  store double %73, double* %arrayidx15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else, %__pgi_cddiv.exit
  ret void
}

define  i32 @__pgi_dnint(double %a) nounwind alwaysinline {
entry:
  %a.addr = alloca double, align 8
  store double %a, double* %a.addr, align 8
  %0 = load double* %a.addr, align 8
  %1 = load double* %a.addr, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %cond = select i1 %cmp, double 5.000000e-01, double -5.000000e-01
  %add = fadd double %0, %cond
  %conv = fptosi double %add to i32
  ret i32 %conv
}

define  i64 @__pgi_lldnint(double %a) nounwind alwaysinline {
entry:
  %a.addr = alloca double, align 8
  store double %a, double* %a.addr, align 8
  %0 = load double* %a.addr, align 8
  %1 = load double* %a.addr, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  %cond = select i1 %cmp, double 5.000000e-01, double -5.000000e-01
  %add = fadd double %0, %cond
  %conv = fptosi double %add to i64
  ret i64 %conv
}

define  void @__pgi_cdiv(i8* %res, float %real1, float %imag1, float %real2, float %imag2) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %real2.addr = alloca float, align 4
  %imag2.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %r = alloca float, align 4
  %d = alloca float, align 4
  %r_mag = alloca float, align 4
  %i_mag = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  store float %real2, float* %real2.addr, align 4
  store float %imag2, float* %imag2.addr, align 4
  %0 = load float* %real2.addr, align 4
  store float %0, float* %r_mag, align 4
  %1 = load float* %r_mag, align 4
  %cmp = fcmp olt float %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load float* %r_mag, align 4
  %sub = fsub float -0.000000e+00, %2
  store float %sub, float* %r_mag, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load float* %imag2.addr, align 4
  store float %3, float* %i_mag, align 4
  %4 = load float* %i_mag, align 4
  %cmp1 = fcmp olt float %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load float* %i_mag, align 4
  %sub3 = fsub float -0.000000e+00, %5
  store float %sub3, float* %i_mag, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load float* %r_mag, align 4
  %7 = load float* %i_mag, align 4
  %cmp5 = fcmp ole float %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load float* %real2.addr, align 4
  %9 = load float* %imag2.addr, align 4
  %div = fdiv float %8, %9
  store float %div, float* %r, align 4
  %10 = load float* %imag2.addr, align 4
  %11 = load float* %r, align 4
  %12 = load float* %r, align 4
  %mul = fmul float %11, %12
  %add = fadd float 1.000000e+00, %mul
  %mul7 = fmul float %10, %add
  %div8 = fdiv float 1.000000e+00, %mul7
  store float %div8, float* %d, align 4
  %13 = load float* %real1.addr, align 4
  %14 = load float* %r, align 4
  %mul9 = fmul float %13, %14
  %15 = load float* %imag1.addr, align 4
  %add10 = fadd float %mul9, %15
  %16 = load float* %d, align 4
  %mul11 = fmul float %add10, %16
  store float %mul11, float* %x, align 4
  %17 = load float* %imag1.addr, align 4
  %18 = load float* %r, align 4
  %mul12 = fmul float %17, %18
  %19 = load float* %real1.addr, align 4
  %sub13 = fsub float %mul12, %19
  %20 = load float* %d, align 4
  %mul14 = fmul float %sub13, %20
  store float %mul14, float* %y, align 4
  br label %if.end26

if.else:                                          ; preds = %if.end4
  %21 = load float* %imag2.addr, align 4
  %22 = load float* %real2.addr, align 4
  %div15 = fdiv float %21, %22
  store float %div15, float* %r, align 4
  %23 = load float* %real2.addr, align 4
  %24 = load float* %r, align 4
  %25 = load float* %r, align 4
  %mul16 = fmul float %24, %25
  %add17 = fadd float 1.000000e+00, %mul16
  %mul18 = fmul float %23, %add17
  %div19 = fdiv float 1.000000e+00, %mul18
  store float %div19, float* %d, align 4
  %26 = load float* %real1.addr, align 4
  %27 = load float* %imag1.addr, align 4
  %28 = load float* %r, align 4
  %mul20 = fmul float %27, %28
  %add21 = fadd float %26, %mul20
  %29 = load float* %d, align 4
  %mul22 = fmul float %add21, %29
  store float %mul22, float* %x, align 4
  %30 = load float* %imag1.addr, align 4
  %31 = load float* %real1.addr, align 4
  %32 = load float* %r, align 4
  %mul23 = fmul float %31, %32
  %sub24 = fsub float %30, %mul23
  %33 = load float* %d, align 4
  %mul25 = fmul float %sub24, %33
  store float %mul25, float* %y, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then6
  %34 = load float* %x, align 4
  %35 = load i8** %res.addr, align 8
  %36 = bitcast i8* %35 to float*
  %arrayidx = getelementptr inbounds float* %36, i64 0
  store float %34, float* %arrayidx, align 4
  %37 = load float* %y, align 4
  %38 = load i8** %res.addr, align 8
  %39 = bitcast i8* %38 to float*
  %arrayidx27 = getelementptr inbounds float* %39, i64 1
  store float %37, float* %arrayidx27, align 4
  ret void
}

define  float @__pgi_cdiv_real(float %real1, float %imag1, float %real2, float %imag2) nounwind alwaysinline {
entry:
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %real2.addr = alloca float, align 4
  %imag2.addr = alloca float, align 4
  %x = alloca float, align 4
  %r = alloca float, align 4
  %d = alloca float, align 4
  %r_mag = alloca float, align 4
  %i_mag = alloca float, align 4
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  store float %real2, float* %real2.addr, align 4
  store float %imag2, float* %imag2.addr, align 4
  %0 = load float* %real2.addr, align 4
  store float %0, float* %r_mag, align 4
  %1 = load float* %r_mag, align 4
  %cmp = fcmp olt float %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load float* %r_mag, align 4
  %sub = fsub float -0.000000e+00, %2
  store float %sub, float* %r_mag, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load float* %imag2.addr, align 4
  store float %3, float* %i_mag, align 4
  %4 = load float* %i_mag, align 4
  %cmp1 = fcmp olt float %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load float* %i_mag, align 4
  %sub3 = fsub float -0.000000e+00, %5
  store float %sub3, float* %i_mag, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load float* %r_mag, align 4
  %7 = load float* %i_mag, align 4
  %cmp5 = fcmp ole float %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load float* %real2.addr, align 4
  %9 = load float* %imag2.addr, align 4
  %div = fdiv float %8, %9
  store float %div, float* %r, align 4
  %10 = load float* %imag2.addr, align 4
  %11 = load float* %r, align 4
  %12 = load float* %r, align 4
  %mul = fmul float %11, %12
  %add = fadd float 1.000000e+00, %mul
  %mul7 = fmul float %10, %add
  %div8 = fdiv float 1.000000e+00, %mul7
  store float %div8, float* %d, align 4
  %13 = load float* %real1.addr, align 4
  %14 = load float* %r, align 4
  %mul9 = fmul float %13, %14
  %15 = load float* %imag1.addr, align 4
  %add10 = fadd float %mul9, %15
  %16 = load float* %d, align 4
  %mul11 = fmul float %add10, %16
  store float %mul11, float* %x, align 4
  br label %if.end20

if.else:                                          ; preds = %if.end4
  %17 = load float* %imag2.addr, align 4
  %18 = load float* %real2.addr, align 4
  %div12 = fdiv float %17, %18
  store float %div12, float* %r, align 4
  %19 = load float* %real2.addr, align 4
  %20 = load float* %r, align 4
  %21 = load float* %r, align 4
  %mul13 = fmul float %20, %21
  %add14 = fadd float 1.000000e+00, %mul13
  %mul15 = fmul float %19, %add14
  %div16 = fdiv float 1.000000e+00, %mul15
  store float %div16, float* %d, align 4
  %22 = load float* %real1.addr, align 4
  %23 = load float* %imag1.addr, align 4
  %24 = load float* %r, align 4
  %mul17 = fmul float %23, %24
  %add18 = fadd float %22, %mul17
  %25 = load float* %d, align 4
  %mul19 = fmul float %add18, %25
  store float %mul19, float* %x, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then6
  %26 = load float* %x, align 4
  ret float %26
}

define  float @__pgi_cdiv_imag(float %real1, float %imag1, float %real2, float %imag2) nounwind alwaysinline {
entry:
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %real2.addr = alloca float, align 4
  %imag2.addr = alloca float, align 4
  %y = alloca float, align 4
  %r = alloca float, align 4
  %d = alloca float, align 4
  %r_mag = alloca float, align 4
  %i_mag = alloca float, align 4
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  store float %real2, float* %real2.addr, align 4
  store float %imag2, float* %imag2.addr, align 4
  %0 = load float* %real2.addr, align 4
  store float %0, float* %r_mag, align 4
  %1 = load float* %r_mag, align 4
  %cmp = fcmp olt float %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load float* %r_mag, align 4
  %sub = fsub float -0.000000e+00, %2
  store float %sub, float* %r_mag, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load float* %imag2.addr, align 4
  store float %3, float* %i_mag, align 4
  %4 = load float* %i_mag, align 4
  %cmp1 = fcmp olt float %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load float* %i_mag, align 4
  %sub3 = fsub float -0.000000e+00, %5
  store float %sub3, float* %i_mag, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load float* %r_mag, align 4
  %7 = load float* %i_mag, align 4
  %cmp5 = fcmp ole float %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load float* %real2.addr, align 4
  %9 = load float* %imag2.addr, align 4
  %div = fdiv float %8, %9
  store float %div, float* %r, align 4
  %10 = load float* %imag2.addr, align 4
  %11 = load float* %r, align 4
  %12 = load float* %r, align 4
  %mul = fmul float %11, %12
  %add = fadd float 1.000000e+00, %mul
  %mul7 = fmul float %10, %add
  %div8 = fdiv float 1.000000e+00, %mul7
  store float %div8, float* %d, align 4
  %13 = load float* %imag1.addr, align 4
  %14 = load float* %r, align 4
  %mul9 = fmul float %13, %14
  %15 = load float* %real1.addr, align 4
  %sub10 = fsub float %mul9, %15
  %16 = load float* %d, align 4
  %mul11 = fmul float %sub10, %16
  store float %mul11, float* %y, align 4
  br label %if.end20

if.else:                                          ; preds = %if.end4
  %17 = load float* %imag2.addr, align 4
  %18 = load float* %real2.addr, align 4
  %div12 = fdiv float %17, %18
  store float %div12, float* %r, align 4
  %19 = load float* %real2.addr, align 4
  %20 = load float* %r, align 4
  %21 = load float* %r, align 4
  %mul13 = fmul float %20, %21
  %add14 = fadd float 1.000000e+00, %mul13
  %mul15 = fmul float %19, %add14
  %div16 = fdiv float 1.000000e+00, %mul15
  store float %div16, float* %d, align 4
  %22 = load float* %imag1.addr, align 4
  %23 = load float* %real1.addr, align 4
  %24 = load float* %r, align 4
  %mul17 = fmul float %23, %24
  %sub18 = fsub float %22, %mul17
  %25 = load float* %d, align 4
  %mul19 = fmul float %sub18, %25
  store float %mul19, float* %y, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then6
  %26 = load float* %y, align 4
  ret float %26
}

define  void @__pgi_cdsqrt(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %a = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %imag1.addr, align 8
  %call = call  double @__nv_hypot(double %0, double %1)
  store double %call, double* %a, align 8
  %2 = load double* %a, align 8
  %cmp = fcmp oeq double %2, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %x, align 8
  store double 0.000000e+00, double* %y, align 8
  br label %if.end14

if.else:                                          ; preds = %entry
  %3 = load double* %real1.addr, align 8
  %cmp1 = fcmp ogt double %3, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.else5

if.then2:                                         ; preds = %if.else
  %4 = load double* %a, align 8
  %5 = load double* %real1.addr, align 8
  %add = fadd double %4, %5
  %mul = fmul double 5.000000e-01, %add
  %call3 = call  double @__nv_sqrt(double %mul)
  store double %call3, double* %x, align 8
  %6 = load double* %imag1.addr, align 8
  %7 = load double* %x, align 8
  %div = fdiv double %6, %7
  %mul4 = fmul double 5.000000e-01, %div
  store double %mul4, double* %y, align 8
  br label %if.end13

if.else5:                                         ; preds = %if.else
  %8 = load double* %a, align 8
  %9 = load double* %real1.addr, align 8
  %sub = fsub double %8, %9
  %mul6 = fmul double 5.000000e-01, %sub
  %call7 = call  double @__nv_sqrt(double %mul6)
  store double %call7, double* %y, align 8
  %10 = load double* %imag1.addr, align 8
  %cmp8 = fcmp olt double %10, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.else5
  %11 = load double* %y, align 8
  %sub10 = fsub double -0.000000e+00, %11
  store double %sub10, double* %y, align 8
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.else5
  %12 = load double* %imag1.addr, align 8
  %13 = load double* %y, align 8
  %div11 = fdiv double %12, %13
  %mul12 = fmul double 5.000000e-01, %div11
  store double %mul12, double* %x, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then2
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  %14 = load double* %x, align 8
  %15 = load i8** %res.addr, align 8
  %16 = bitcast i8* %15 to double*
  %arrayidx = getelementptr inbounds double* %16, i64 0
  store double %14, double* %arrayidx, align 8
  %17 = load double* %y, align 8
  %18 = load i8** %res.addr, align 8
  %19 = bitcast i8* %18 to double*
  %arrayidx15 = getelementptr inbounds double* %19, i64 1
  store double %17, double* %arrayidx15, align 8
  ret void
}

declare  double @__nv_hypot(double, double)

declare  double @__nv_sqrt(double)

define  void @__pgi_cdexp(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %real1.addr, align 8
  %call = call  double @__nv_exp(double %0)
  store double %call, double* %x, align 8
  %1 = load double* %imag1.addr, align 8
  call  void @__nv_sincos(double %1, double* %z, double* %y)
  %2 = load double* %x, align 8
  %3 = load double* %y, align 8
  %mul = fmul double %3, %2
  store double %mul, double* %y, align 8
  %4 = load double* %x, align 8
  %5 = load double* %z, align 8
  %mul1 = fmul double %5, %4
  store double %mul1, double* %z, align 8
  %6 = load double* %y, align 8
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to double*
  %arrayidx = getelementptr inbounds double* %8, i64 0
  store double %6, double* %arrayidx, align 8
  %9 = load double* %z, align 8
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to double*
  %arrayidx2 = getelementptr inbounds double* %11, i64 1
  store double %9, double* %arrayidx2, align 8
  ret void
}

declare  double @__nv_exp(double)

define  void @__pgi_cdlog(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %imag1.addr, align 8
  %1 = load double* %real1.addr, align 8
  %call = call  double @__nv_atan2(double %0, double %1)
  store double %call, double* %x, align 8
  %2 = load double* %real1.addr, align 8
  %3 = load double* %imag1.addr, align 8
  %call1 = call  double @__nv_hypot(double %2, double %3)
  %call2 = call  double @__nv_log(double %call1)
  store double %call2, double* %y, align 8
  %4 = load double* %y, align 8
  %5 = load i8** %res.addr, align 8
  %6 = bitcast i8* %5 to double*
  %arrayidx = getelementptr inbounds double* %6, i64 0
  store double %4, double* %arrayidx, align 8
  %7 = load double* %x, align 8
  %8 = load i8** %res.addr, align 8
  %9 = bitcast i8* %8 to double*
  %arrayidx3 = getelementptr inbounds double* %9, i64 1
  store double %7, double* %arrayidx3, align 8
  ret void
}

declare  double @__nv_atan2(double, double)

declare  double @__nv_log(double)

define  void @__pgi_cdcos(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %real1.addr, align 8
  %call = call  double @__nv_cos(double %0)
  store double %call, double* %x, align 8
  %1 = load double* %real1.addr, align 8
  %call1 = call  double @__nv_sin(double %1)
  store double %call1, double* %y, align 8
  %2 = load double* %x, align 8
  %3 = load double* %imag1.addr, align 8
  %call2 = call  double @__nv_cosh(double %3)
  %mul = fmul double %2, %call2
  store double %mul, double* %x, align 8
  %4 = load double* %y, align 8
  %sub = fsub double -0.000000e+00, %4
  %5 = load double* %imag1.addr, align 8
  %call3 = call  double @__nv_sinh(double %5)
  %mul4 = fmul double %sub, %call3
  store double %mul4, double* %y, align 8
  %6 = load double* %x, align 8
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to double*
  %arrayidx = getelementptr inbounds double* %8, i64 0
  store double %6, double* %arrayidx, align 8
  %9 = load double* %y, align 8
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to double*
  %arrayidx5 = getelementptr inbounds double* %11, i64 1
  store double %9, double* %arrayidx5, align 8
  ret void
}

declare  double @__nv_cos(double)

declare  double @__nv_sin(double)

declare  double @__nv_cosh(double)

declare  double @__nv_sinh(double)

define  void @__pgi_cdsin(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %real1.addr, align 8
  %call = call  double @__nv_sin(double %0)
  store double %call, double* %x, align 8
  %1 = load double* %real1.addr, align 8
  %call1 = call  double @__nv_cos(double %1)
  store double %call1, double* %y, align 8
  %2 = load double* %x, align 8
  %3 = load double* %imag1.addr, align 8
  %call2 = call  double @__nv_cosh(double %3)
  %mul = fmul double %2, %call2
  store double %mul, double* %x, align 8
  %4 = load double* %y, align 8
  %5 = load double* %imag1.addr, align 8
  %call3 = call  double @__nv_sinh(double %5)
  %mul4 = fmul double %4, %call3
  store double %mul4, double* %y, align 8
  %6 = load double* %x, align 8
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to double*
  %arrayidx = getelementptr inbounds double* %8, i64 0
  store double %6, double* %arrayidx, align 8
  %9 = load double* %y, align 8
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to double*
  %arrayidx5 = getelementptr inbounds double* %11, i64 1
  store double %9, double* %arrayidx5, align 8
  ret void
}

define  void @__pgi_cdpowcd(i8* %res, double %real1, double %imag1, double %real2, double %imag2) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %real2.addr = alloca double, align 8
  %imag2.addr = alloca double, align 8
  %logr = alloca double, align 8
  %logi = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %w = alloca double, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %real2, double* %real2.addr, align 8
  store double %imag2, double* %imag2.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %imag1.addr, align 8
  %call = call  double @__nv_hypot(double %0, double %1)
  %call1 = call  double @__nv_log(double %call)
  store double %call1, double* %logr, align 8
  %2 = load double* %imag1.addr, align 8
  %3 = load double* %real1.addr, align 8
  %call2 = call  double @__nv_atan2(double %2, double %3)
  store double %call2, double* %logi, align 8
  %4 = load double* %logr, align 8
  %5 = load double* %real2.addr, align 8
  %mul = fmul double %4, %5
  %6 = load double* %logi, align 8
  %7 = load double* %imag2.addr, align 8
  %mul3 = fmul double %6, %7
  %sub = fsub double %mul, %mul3
  %call4 = call  double @__nv_exp(double %sub)
  store double %call4, double* %x, align 8
  %8 = load double* %logr, align 8
  %9 = load double* %imag2.addr, align 8
  %mul5 = fmul double %8, %9
  %10 = load double* %logi, align 8
  %11 = load double* %real2.addr, align 8
  %mul6 = fmul double %10, %11
  %add = fadd double %mul5, %mul6
  store double %add, double* %y, align 8
  %12 = load double* %x, align 8
  %13 = load double* %y, align 8
  %call7 = call  double @__nv_cos(double %13)
  %mul8 = fmul double %12, %call7
  store double %mul8, double* %z, align 8
  %14 = load double* %x, align 8
  %15 = load double* %y, align 8
  %call9 = call  double @__nv_sin(double %15)
  %mul10 = fmul double %14, %call9
  store double %mul10, double* %w, align 8
  %16 = load double* %z, align 8
  %17 = load i8** %res.addr, align 8
  %18 = bitcast i8* %17 to double*
  %arrayidx = getelementptr inbounds double* %18, i64 0
  store double %16, double* %arrayidx, align 8
  %19 = load double* %w, align 8
  %20 = load i8** %res.addr, align 8
  %21 = bitcast i8* %20 to double*
  %arrayidx11 = getelementptr inbounds double* %21, i64 1
  store double %19, double* %arrayidx11, align 8
  ret void
}

define  void @__pgi_zcdsqrt(double %real1, double %imag1, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %a = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %imag1.addr, align 8
  %call = call  double @__nv_hypot(double %0, double %1)
  store double %call, double* %a, align 8
  %2 = load double* %a, align 8
  %cmp = fcmp oeq double %2, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %x, align 8
  store double 0.000000e+00, double* %y, align 8
  br label %if.end14

if.else:                                          ; preds = %entry
  %3 = load double* %real1.addr, align 8
  %cmp1 = fcmp ogt double %3, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.else5

if.then2:                                         ; preds = %if.else
  %4 = load double* %a, align 8
  %5 = load double* %real1.addr, align 8
  %add = fadd double %4, %5
  %mul = fmul double 5.000000e-01, %add
  %call3 = call  double @__nv_sqrt(double %mul)
  store double %call3, double* %x, align 8
  %6 = load double* %imag1.addr, align 8
  %7 = load double* %x, align 8
  %div = fdiv double %6, %7
  %mul4 = fmul double 5.000000e-01, %div
  store double %mul4, double* %y, align 8
  br label %if.end13

if.else5:                                         ; preds = %if.else
  %8 = load double* %a, align 8
  %9 = load double* %real1.addr, align 8
  %sub = fsub double %8, %9
  %mul6 = fmul double 5.000000e-01, %sub
  %call7 = call  double @__nv_sqrt(double %mul6)
  store double %call7, double* %y, align 8
  %10 = load double* %imag1.addr, align 8
  %cmp8 = fcmp olt double %10, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.else5
  %11 = load double* %y, align 8
  %sub10 = fsub double -0.000000e+00, %11
  store double %sub10, double* %y, align 8
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.else5
  %12 = load double* %imag1.addr, align 8
  %13 = load double* %y, align 8
  %div11 = fdiv double %12, %13
  %mul12 = fmul double 5.000000e-01, %div11
  store double %mul12, double* %x, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then2
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  %14 = load double* %x, align 8
  %15 = load i8** %res.addr, align 8
  %16 = bitcast i8* %15 to double*
  %arrayidx = getelementptr inbounds double* %16, i64 0
  store double %14, double* %arrayidx, align 8
  %17 = load double* %y, align 8
  %18 = load i8** %res.addr, align 8
  %19 = bitcast i8* %18 to double*
  %arrayidx15 = getelementptr inbounds double* %19, i64 1
  store double %17, double* %arrayidx15, align 8
  ret void
}

define  void @__pgi_zcdexp(double %real1, double %imag1, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real1.addr, align 8
  %call = call  double @__nv_exp(double %0)
  store double %call, double* %x, align 8
  %1 = load double* %imag1.addr, align 8
  call  void @__nv_sincos(double %1, double* %z, double* %y)
  %2 = load double* %x, align 8
  %3 = load double* %y, align 8
  %mul = fmul double %3, %2
  store double %mul, double* %y, align 8
  %4 = load double* %x, align 8
  %5 = load double* %z, align 8
  %mul1 = fmul double %5, %4
  store double %mul1, double* %z, align 8
  %6 = load double* %y, align 8
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to double*
  %arrayidx = getelementptr inbounds double* %8, i64 0
  store double %6, double* %arrayidx, align 8
  %9 = load double* %z, align 8
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to double*
  %arrayidx2 = getelementptr inbounds double* %11, i64 1
  store double %9, double* %arrayidx2, align 8
  ret void
}

define  void @__pgi_zcdlog(double %real1, double %imag1, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %imag1.addr, align 8
  %1 = load double* %real1.addr, align 8
  %call = call  double @__nv_atan2(double %0, double %1)
  store double %call, double* %x, align 8
  %2 = load double* %real1.addr, align 8
  %3 = load double* %imag1.addr, align 8
  %call1 = call  double @__nv_hypot(double %2, double %3)
  %call2 = call  double @__nv_log(double %call1)
  store double %call2, double* %y, align 8
  %4 = load double* %y, align 8
  %5 = load i8** %res.addr, align 8
  %6 = bitcast i8* %5 to double*
  %arrayidx = getelementptr inbounds double* %6, i64 0
  store double %4, double* %arrayidx, align 8
  %7 = load double* %x, align 8
  %8 = load i8** %res.addr, align 8
  %9 = bitcast i8* %8 to double*
  %arrayidx3 = getelementptr inbounds double* %9, i64 1
  store double %7, double* %arrayidx3, align 8
  ret void
}

define  void @__pgi_zcdcos(double %real1, double %imag1, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real1.addr, align 8
  %call = call  double @__nv_cos(double %0)
  store double %call, double* %x, align 8
  %1 = load double* %real1.addr, align 8
  %call1 = call  double @__nv_sin(double %1)
  store double %call1, double* %y, align 8
  %2 = load double* %x, align 8
  %3 = load double* %imag1.addr, align 8
  %call2 = call  double @__nv_cosh(double %3)
  %mul = fmul double %2, %call2
  store double %mul, double* %x, align 8
  %4 = load double* %y, align 8
  %sub = fsub double -0.000000e+00, %4
  %5 = load double* %imag1.addr, align 8
  %call3 = call  double @__nv_sinh(double %5)
  %mul4 = fmul double %sub, %call3
  store double %mul4, double* %y, align 8
  %6 = load double* %x, align 8
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to double*
  %arrayidx = getelementptr inbounds double* %8, i64 0
  store double %6, double* %arrayidx, align 8
  %9 = load double* %y, align 8
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to double*
  %arrayidx5 = getelementptr inbounds double* %11, i64 1
  store double %9, double* %arrayidx5, align 8
  ret void
}

define  void @__pgi_zcdsin(double %real1, double %imag1, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real1.addr, align 8
  %call = call  double @__nv_sin(double %0)
  store double %call, double* %x, align 8
  %1 = load double* %real1.addr, align 8
  %call1 = call  double @__nv_cos(double %1)
  store double %call1, double* %y, align 8
  %2 = load double* %x, align 8
  %3 = load double* %imag1.addr, align 8
  %call2 = call  double @__nv_cosh(double %3)
  %mul = fmul double %2, %call2
  store double %mul, double* %x, align 8
  %4 = load double* %y, align 8
  %5 = load double* %imag1.addr, align 8
  %call3 = call  double @__nv_sinh(double %5)
  %mul4 = fmul double %4, %call3
  store double %mul4, double* %y, align 8
  %6 = load double* %x, align 8
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to double*
  %arrayidx = getelementptr inbounds double* %8, i64 0
  store double %6, double* %arrayidx, align 8
  %9 = load double* %y, align 8
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to double*
  %arrayidx5 = getelementptr inbounds double* %11, i64 1
  store double %9, double* %arrayidx5, align 8
  ret void
}

define  void @__pgi_zcdpowcd(double %real1, double %imag1, double %real2, double %imag2, i8* %res) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %real2.addr = alloca double, align 8
  %imag2.addr = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %logr = alloca double, align 8
  %logi = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %w = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %real2, double* %real2.addr, align 8
  store double %imag2, double* %imag2.addr, align 8
  store i8* %res, i8** %res.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %imag1.addr, align 8
  %call = call  double @__nv_hypot(double %0, double %1)
  %call1 = call  double @__nv_log(double %call)
  store double %call1, double* %logr, align 8
  %2 = load double* %imag1.addr, align 8
  %3 = load double* %real1.addr, align 8
  %call2 = call  double @__nv_atan2(double %2, double %3)
  store double %call2, double* %logi, align 8
  %4 = load double* %logr, align 8
  %5 = load double* %real2.addr, align 8
  %mul = fmul double %4, %5
  %6 = load double* %logi, align 8
  %7 = load double* %imag2.addr, align 8
  %mul3 = fmul double %6, %7
  %sub = fsub double %mul, %mul3
  %call4 = call  double @__nv_exp(double %sub)
  store double %call4, double* %x, align 8
  %8 = load double* %logr, align 8
  %9 = load double* %imag2.addr, align 8
  %mul5 = fmul double %8, %9
  %10 = load double* %logi, align 8
  %11 = load double* %real2.addr, align 8
  %mul6 = fmul double %10, %11
  %add = fadd double %mul5, %mul6
  store double %add, double* %y, align 8
  %12 = load double* %x, align 8
  %13 = load double* %y, align 8
  %call7 = call  double @__nv_cos(double %13)
  %mul8 = fmul double %12, %call7
  store double %mul8, double* %z, align 8
  %14 = load double* %x, align 8
  %15 = load double* %y, align 8
  %call9 = call  double @__nv_sin(double %15)
  %mul10 = fmul double %14, %call9
  store double %mul10, double* %w, align 8
  %16 = load double* %z, align 8
  %17 = load i8** %res.addr, align 8
  %18 = bitcast i8* %17 to double*
  %arrayidx = getelementptr inbounds double* %18, i64 0
  store double %16, double* %arrayidx, align 8
  %19 = load double* %w, align 8
  %20 = load i8** %res.addr, align 8
  %21 = bitcast i8* %20 to double*
  %arrayidx11 = getelementptr inbounds double* %21, i64 1
  store double %19, double* %arrayidx11, align 8
  ret void
}

define  double @__pgi_dcdiv_real(double %real1, double %imag1, double %real2, double %imag2) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %real2.addr = alloca double, align 8
  %imag2.addr = alloca double, align 8
  %x = alloca double, align 8
  %r = alloca double, align 8
  %d = alloca double, align 8
  %r_mag = alloca double, align 8
  %i_mag = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %real2, double* %real2.addr, align 8
  store double %imag2, double* %imag2.addr, align 8
  %0 = load double* %real2.addr, align 8
  store double %0, double* %r_mag, align 8
  %1 = load double* %r_mag, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load double* %r_mag, align 8
  %sub = fsub double -0.000000e+00, %2
  store double %sub, double* %r_mag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load double* %imag2.addr, align 8
  store double %3, double* %i_mag, align 8
  %4 = load double* %i_mag, align 8
  %cmp1 = fcmp olt double %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load double* %i_mag, align 8
  %sub3 = fsub double -0.000000e+00, %5
  store double %sub3, double* %i_mag, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load double* %r_mag, align 8
  %7 = load double* %i_mag, align 8
  %cmp5 = fcmp ole double %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load double* %real2.addr, align 8
  %9 = load double* %imag2.addr, align 8
  %div = fdiv double %8, %9
  store double %div, double* %r, align 8
  %10 = load double* %imag2.addr, align 8
  %11 = load double* %r, align 8
  %12 = load double* %r, align 8
  %mul = fmul double %11, %12
  %add = fadd double 1.000000e+00, %mul
  %mul7 = fmul double %10, %add
  %div8 = fdiv double 1.000000e+00, %mul7
  store double %div8, double* %d, align 8
  %13 = load double* %real1.addr, align 8
  %14 = load double* %r, align 8
  %mul9 = fmul double %13, %14
  %15 = load double* %imag1.addr, align 8
  %add10 = fadd double %mul9, %15
  %16 = load double* %d, align 8
  %mul11 = fmul double %add10, %16
  store double %mul11, double* %x, align 8
  br label %if.end20

if.else:                                          ; preds = %if.end4
  %17 = load double* %imag2.addr, align 8
  %18 = load double* %real2.addr, align 8
  %div12 = fdiv double %17, %18
  store double %div12, double* %r, align 8
  %19 = load double* %real2.addr, align 8
  %20 = load double* %r, align 8
  %21 = load double* %r, align 8
  %mul13 = fmul double %20, %21
  %add14 = fadd double 1.000000e+00, %mul13
  %mul15 = fmul double %19, %add14
  %div16 = fdiv double 1.000000e+00, %mul15
  store double %div16, double* %d, align 8
  %22 = load double* %real1.addr, align 8
  %23 = load double* %imag1.addr, align 8
  %24 = load double* %r, align 8
  %mul17 = fmul double %23, %24
  %add18 = fadd double %22, %mul17
  %25 = load double* %d, align 8
  %mul19 = fmul double %add18, %25
  store double %mul19, double* %x, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then6
  %26 = load double* %x, align 8
  ret double %26
}

define  double @__pgi_dcdiv_imag(double %real1, double %imag1, double %real2, double %imag2) nounwind alwaysinline {
entry:
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %real2.addr = alloca double, align 8
  %imag2.addr = alloca double, align 8
  %y = alloca double, align 8
  %r = alloca double, align 8
  %d = alloca double, align 8
  %r_mag = alloca double, align 8
  %i_mag = alloca double, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  store double %real2, double* %real2.addr, align 8
  store double %imag2, double* %imag2.addr, align 8
  %0 = load double* %real2.addr, align 8
  store double %0, double* %r_mag, align 8
  %1 = load double* %r_mag, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load double* %r_mag, align 8
  %sub = fsub double -0.000000e+00, %2
  store double %sub, double* %r_mag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load double* %imag2.addr, align 8
  store double %3, double* %i_mag, align 8
  %4 = load double* %i_mag, align 8
  %cmp1 = fcmp olt double %4, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load double* %i_mag, align 8
  %sub3 = fsub double -0.000000e+00, %5
  store double %sub3, double* %i_mag, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %6 = load double* %r_mag, align 8
  %7 = load double* %i_mag, align 8
  %cmp5 = fcmp ole double %6, %7
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  %8 = load double* %real2.addr, align 8
  %9 = load double* %imag2.addr, align 8
  %div = fdiv double %8, %9
  store double %div, double* %r, align 8
  %10 = load double* %imag2.addr, align 8
  %11 = load double* %r, align 8
  %12 = load double* %r, align 8
  %mul = fmul double %11, %12
  %add = fadd double 1.000000e+00, %mul
  %mul7 = fmul double %10, %add
  %div8 = fdiv double 1.000000e+00, %mul7
  store double %div8, double* %d, align 8
  %13 = load double* %imag1.addr, align 8
  %14 = load double* %r, align 8
  %mul9 = fmul double %13, %14
  %15 = load double* %real1.addr, align 8
  %sub10 = fsub double %mul9, %15
  %16 = load double* %d, align 8
  %mul11 = fmul double %sub10, %16
  store double %mul11, double* %y, align 8
  br label %if.end20

if.else:                                          ; preds = %if.end4
  %17 = load double* %imag2.addr, align 8
  %18 = load double* %real2.addr, align 8
  %div12 = fdiv double %17, %18
  store double %div12, double* %r, align 8
  %19 = load double* %real2.addr, align 8
  %20 = load double* %r, align 8
  %21 = load double* %r, align 8
  %mul13 = fmul double %20, %21
  %add14 = fadd double 1.000000e+00, %mul13
  %mul15 = fmul double %19, %add14
  %div16 = fdiv double 1.000000e+00, %mul15
  store double %div16, double* %d, align 8
  %22 = load double* %imag1.addr, align 8
  %23 = load double* %real1.addr, align 8
  %24 = load double* %r, align 8
  %mul17 = fmul double %23, %24
  %sub18 = fsub double %22, %mul17
  %25 = load double* %d, align 8
  %mul19 = fmul double %sub18, %25
  store double %mul19, double* %y, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then6
  %26 = load double* %y, align 8
  ret double %26
}

define  void @__pgi_cdacos(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i13 = alloca i8*, align 8
  %real1.addr.i14 = alloca double, align 8
  %imag1.addr.i15 = alloca double, align 8
  %x.i16 = alloca double, align 8
  %y.i17 = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %a.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %real1.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double* %imag1.addr, align 8
  %3 = load double* %imag1.addr, align 8
  %mul1 = fmul double %2, %3
  %sub = fsub double %mul, %mul1
  store double %sub, double* %x, align 8
  %4 = load double* %real1.addr, align 8
  %5 = load double* %imag1.addr, align 8
  %mul2 = fmul double %4, %5
  %6 = load double* %imag1.addr, align 8
  %7 = load double* %real1.addr, align 8
  %mul3 = fmul double %6, %7
  %add = fadd double %mul2, %mul3
  store double %add, double* %y, align 8
  %8 = load double* %x, align 8
  %sub4 = fsub double 1.000000e+00, %8
  store double %sub4, double* %x, align 8
  %9 = load double* %y, align 8
  %sub5 = fsub double -0.000000e+00, %9
  store double %sub5, double* %y, align 8
  %10 = bitcast %struct.dcmplx2* %tmp to i8*
  %11 = load double* %x, align 8
  %12 = load double* %y, align 8
  store i8* %10, i8** %res.addr.i, align 8
  store double %11, double* %real1.addr.i, align 8
  store double %12, double* %imag1.addr.i, align 8
  %13 = load double* %real1.addr.i, align 8
  %14 = load double* %imag1.addr.i, align 8
  %call.i = call  double @__nv_hypot(double %13, double %14) nounwind
  store double %call.i, double* %a.i, align 8
  %15 = load double* %a.i, align 8
  %cmp.i = fcmp oeq double %15, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  store double 0.000000e+00, double* %x.i, align 8
  store double 0.000000e+00, double* %y.i, align 8
  br label %__pgi_cdsqrt.exit

if.else.i:                                        ; preds = %entry
  %16 = load double* %real1.addr.i, align 8
  %cmp1.i = fcmp ogt double %16, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.else5.i

if.then2.i:                                       ; preds = %if.else.i
  %17 = load double* %a.i, align 8
  %18 = load double* %real1.addr.i, align 8
  %add.i = fadd double %17, %18
  %mul.i = fmul double 5.000000e-01, %add.i
  %call3.i = call  double @__nv_sqrt(double %mul.i) nounwind
  store double %call3.i, double* %x.i, align 8
  %19 = load double* %imag1.addr.i, align 8
  %20 = load double* %x.i, align 8
  %div.i = fdiv double %19, %20
  %mul4.i = fmul double 5.000000e-01, %div.i
  store double %mul4.i, double* %y.i, align 8
  br label %if.end13.i

if.else5.i:                                       ; preds = %if.else.i
  %21 = load double* %a.i, align 8
  %22 = load double* %real1.addr.i, align 8
  %sub.i = fsub double %21, %22
  %mul6.i = fmul double 5.000000e-01, %sub.i
  %call7.i = call  double @__nv_sqrt(double %mul6.i) nounwind
  store double %call7.i, double* %y.i, align 8
  %23 = load double* %imag1.addr.i, align 8
  %cmp8.i = fcmp olt double %23, 0.000000e+00
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.else5.i
  %24 = load double* %y.i, align 8
  %sub10.i = fsub double -0.000000e+00, %24
  store double %sub10.i, double* %y.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.else5.i
  %25 = load double* %imag1.addr.i, align 8
  %26 = load double* %y.i, align 8
  %div11.i = fdiv double %25, %26
  %mul12.i = fmul double 5.000000e-01, %div11.i
  store double %mul12.i, double* %x.i, align 8
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.end.i, %if.then2.i
  br label %__pgi_cdsqrt.exit

__pgi_cdsqrt.exit:                                ; preds = %if.end13.i, %if.then.i
  %27 = load double* %x.i, align 8
  %28 = load i8** %res.addr.i, align 8
  %29 = bitcast i8* %28 to double*
  store double %27, double* %29, align 8
  %30 = load double* %y.i, align 8
  %31 = load i8** %res.addr.i, align 8
  %32 = bitcast i8* %31 to double*
  %arrayidx15.i = getelementptr inbounds double* %32, i64 1
  store double %30, double* %arrayidx15.i, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %33 = load double* %i, align 8
  %sub6 = fsub double -0.000000e+00, %33
  store double %sub6, double* %x, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %34 = load double* %r, align 8
  store double %34, double* %y, align 8
  %35 = load double* %real1.addr, align 8
  %36 = load double* %x, align 8
  %add7 = fadd double %35, %36
  store double %add7, double* %x, align 8
  %37 = load double* %imag1.addr, align 8
  %38 = load double* %y, align 8
  %add8 = fadd double %37, %38
  store double %add8, double* %y, align 8
  %39 = bitcast %struct.dcmplx2* %tmp to i8*
  %40 = load double* %x, align 8
  %41 = load double* %y, align 8
  store i8* %39, i8** %res.addr.i13, align 8
  store double %40, double* %real1.addr.i14, align 8
  store double %41, double* %imag1.addr.i15, align 8
  %42 = load double* %imag1.addr.i15, align 8
  %43 = load double* %real1.addr.i14, align 8
  %call.i18 = call  double @__nv_atan2(double %42, double %43) nounwind
  store double %call.i18, double* %x.i16, align 8
  %44 = load double* %real1.addr.i14, align 8
  %45 = load double* %imag1.addr.i15, align 8
  %call1.i = call  double @__nv_hypot(double %44, double %45) nounwind
  %call2.i = call  double @__nv_log(double %call1.i) nounwind
  store double %call2.i, double* %y.i17, align 8
  %46 = load double* %y.i17, align 8
  %47 = load i8** %res.addr.i13, align 8
  %48 = bitcast i8* %47 to double*
  store double %46, double* %48, align 8
  %49 = load double* %x.i16, align 8
  %50 = load i8** %res.addr.i13, align 8
  %51 = bitcast i8* %50 to double*
  %arrayidx3.i = getelementptr inbounds double* %51, i64 1
  store double %49, double* %arrayidx3.i, align 8
  %i9 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %52 = load double* %i9, align 8
  store double %52, double* %x, align 8
  %r10 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %53 = load double* %r10, align 8
  %sub11 = fsub double -0.000000e+00, %53
  store double %sub11, double* %y, align 8
  %54 = load double* %x, align 8
  %55 = load i8** %res.addr, align 8
  %56 = bitcast i8* %55 to double*
  %arrayidx = getelementptr inbounds double* %56, i64 0
  store double %54, double* %arrayidx, align 8
  %57 = load double* %y, align 8
  %58 = load i8** %res.addr, align 8
  %59 = bitcast i8* %58 to double*
  %arrayidx12 = getelementptr inbounds double* %59, i64 1
  store double %57, double* %arrayidx12, align 8
  ret void
}

define  void @__pgi_cdasin(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i13 = alloca i8*, align 8
  %real1.addr.i14 = alloca double, align 8
  %imag1.addr.i15 = alloca double, align 8
  %x.i16 = alloca double, align 8
  %y.i17 = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %a.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %real1.addr, align 8
  %1 = load double* %real1.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double* %imag1.addr, align 8
  %3 = load double* %imag1.addr, align 8
  %mul1 = fmul double %2, %3
  %sub = fsub double %mul, %mul1
  store double %sub, double* %x, align 8
  %4 = load double* %real1.addr, align 8
  %5 = load double* %imag1.addr, align 8
  %mul2 = fmul double %4, %5
  %6 = load double* %imag1.addr, align 8
  %7 = load double* %real1.addr, align 8
  %mul3 = fmul double %6, %7
  %add = fadd double %mul2, %mul3
  store double %add, double* %y, align 8
  %8 = load double* %x, align 8
  %sub4 = fsub double 1.000000e+00, %8
  store double %sub4, double* %x, align 8
  %9 = load double* %y, align 8
  %sub5 = fsub double -0.000000e+00, %9
  store double %sub5, double* %y, align 8
  %10 = bitcast %struct.dcmplx2* %tmp to i8*
  %11 = load double* %x, align 8
  %12 = load double* %y, align 8
  store i8* %10, i8** %res.addr.i, align 8
  store double %11, double* %real1.addr.i, align 8
  store double %12, double* %imag1.addr.i, align 8
  %13 = load double* %real1.addr.i, align 8
  %14 = load double* %imag1.addr.i, align 8
  %call.i = call  double @__nv_hypot(double %13, double %14) nounwind
  store double %call.i, double* %a.i, align 8
  %15 = load double* %a.i, align 8
  %cmp.i = fcmp oeq double %15, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  store double 0.000000e+00, double* %x.i, align 8
  store double 0.000000e+00, double* %y.i, align 8
  br label %__pgi_cdsqrt.exit

if.else.i:                                        ; preds = %entry
  %16 = load double* %real1.addr.i, align 8
  %cmp1.i = fcmp ogt double %16, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.else5.i

if.then2.i:                                       ; preds = %if.else.i
  %17 = load double* %a.i, align 8
  %18 = load double* %real1.addr.i, align 8
  %add.i = fadd double %17, %18
  %mul.i = fmul double 5.000000e-01, %add.i
  %call3.i = call  double @__nv_sqrt(double %mul.i) nounwind
  store double %call3.i, double* %x.i, align 8
  %19 = load double* %imag1.addr.i, align 8
  %20 = load double* %x.i, align 8
  %div.i = fdiv double %19, %20
  %mul4.i = fmul double 5.000000e-01, %div.i
  store double %mul4.i, double* %y.i, align 8
  br label %if.end13.i

if.else5.i:                                       ; preds = %if.else.i
  %21 = load double* %a.i, align 8
  %22 = load double* %real1.addr.i, align 8
  %sub.i = fsub double %21, %22
  %mul6.i = fmul double 5.000000e-01, %sub.i
  %call7.i = call  double @__nv_sqrt(double %mul6.i) nounwind
  store double %call7.i, double* %y.i, align 8
  %23 = load double* %imag1.addr.i, align 8
  %cmp8.i = fcmp olt double %23, 0.000000e+00
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.else5.i
  %24 = load double* %y.i, align 8
  %sub10.i = fsub double -0.000000e+00, %24
  store double %sub10.i, double* %y.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.else5.i
  %25 = load double* %imag1.addr.i, align 8
  %26 = load double* %y.i, align 8
  %div11.i = fdiv double %25, %26
  %mul12.i = fmul double 5.000000e-01, %div11.i
  store double %mul12.i, double* %x.i, align 8
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.end.i, %if.then2.i
  br label %__pgi_cdsqrt.exit

__pgi_cdsqrt.exit:                                ; preds = %if.end13.i, %if.then.i
  %27 = load double* %x.i, align 8
  %28 = load i8** %res.addr.i, align 8
  %29 = bitcast i8* %28 to double*
  store double %27, double* %29, align 8
  %30 = load double* %y.i, align 8
  %31 = load i8** %res.addr.i, align 8
  %32 = bitcast i8* %31 to double*
  %arrayidx15.i = getelementptr inbounds double* %32, i64 1
  store double %30, double* %arrayidx15.i, align 8
  %33 = load double* %imag1.addr, align 8
  %sub6 = fsub double -0.000000e+00, %33
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %34 = load double* %r, align 8
  %add7 = fadd double %sub6, %34
  store double %add7, double* %x, align 8
  %35 = load double* %real1.addr, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %36 = load double* %i, align 8
  %add8 = fadd double %35, %36
  store double %add8, double* %y, align 8
  %37 = bitcast %struct.dcmplx2* %tmp to i8*
  %38 = load double* %x, align 8
  %39 = load double* %y, align 8
  store i8* %37, i8** %res.addr.i13, align 8
  store double %38, double* %real1.addr.i14, align 8
  store double %39, double* %imag1.addr.i15, align 8
  %40 = load double* %imag1.addr.i15, align 8
  %41 = load double* %real1.addr.i14, align 8
  %call.i18 = call  double @__nv_atan2(double %40, double %41) nounwind
  store double %call.i18, double* %x.i16, align 8
  %42 = load double* %real1.addr.i14, align 8
  %43 = load double* %imag1.addr.i15, align 8
  %call1.i = call  double @__nv_hypot(double %42, double %43) nounwind
  %call2.i = call  double @__nv_log(double %call1.i) nounwind
  store double %call2.i, double* %y.i17, align 8
  %44 = load double* %y.i17, align 8
  %45 = load i8** %res.addr.i13, align 8
  %46 = bitcast i8* %45 to double*
  store double %44, double* %46, align 8
  %47 = load double* %x.i16, align 8
  %48 = load i8** %res.addr.i13, align 8
  %49 = bitcast i8* %48 to double*
  %arrayidx3.i = getelementptr inbounds double* %49, i64 1
  store double %47, double* %arrayidx3.i, align 8
  %i9 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %50 = load double* %i9, align 8
  store double %50, double* %x, align 8
  %r10 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %51 = load double* %r10, align 8
  %sub11 = fsub double -0.000000e+00, %51
  store double %sub11, double* %y, align 8
  %52 = load double* %x, align 8
  %53 = load i8** %res.addr, align 8
  %54 = bitcast i8* %53 to double*
  %arrayidx = getelementptr inbounds double* %54, i64 0
  store double %52, double* %arrayidx, align 8
  %55 = load double* %y, align 8
  %56 = load i8** %res.addr, align 8
  %57 = bitcast i8* %56 to double*
  %arrayidx12 = getelementptr inbounds double* %57, i64 1
  store double %55, double* %arrayidx12, align 8
  ret void
}

define  void @__pgi_cdatan(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i10 = alloca i8*, align 8
  %real1.addr.i11 = alloca double, align 8
  %imag1.addr.i12 = alloca double, align 8
  %x.i13 = alloca double, align 8
  %y.i14 = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %x1 = alloca double, align 8
  %y1 = alloca double, align 8
  %x2 = alloca double, align 8
  %y2 = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = load double* %imag1.addr, align 8
  %sub = fsub double -0.000000e+00, %0
  store double %sub, double* %x, align 8
  %1 = load double* %real1.addr, align 8
  store double %1, double* %y, align 8
  %2 = load double* %x, align 8
  %sub1 = fsub double 1.000000e+00, %2
  store double %sub1, double* %x1, align 8
  %3 = load double* %y, align 8
  %sub2 = fsub double -0.000000e+00, %3
  store double %sub2, double* %y1, align 8
  %4 = bitcast %struct.dcmplx2* %tmp to i8*
  %5 = load double* %x1, align 8
  %6 = load double* %y1, align 8
  store i8* %4, i8** %res.addr.i, align 8
  store double %5, double* %real1.addr.i, align 8
  store double %6, double* %imag1.addr.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %8 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_atan2(double %7, double %8) nounwind
  store double %call.i, double* %x.i, align 8
  %9 = load double* %real1.addr.i, align 8
  %10 = load double* %imag1.addr.i, align 8
  %call1.i = call  double @__nv_hypot(double %9, double %10) nounwind
  %call2.i = call  double @__nv_log(double %call1.i) nounwind
  store double %call2.i, double* %y.i, align 8
  %11 = load double* %y.i, align 8
  %12 = load i8** %res.addr.i, align 8
  %13 = bitcast i8* %12 to double*
  store double %11, double* %13, align 8
  %14 = load double* %x.i, align 8
  %15 = load i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to double*
  %arrayidx3.i = getelementptr inbounds double* %16, i64 1
  store double %14, double* %arrayidx3.i, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %17 = load double* %r, align 8
  store double %17, double* %x1, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %18 = load double* %i, align 8
  store double %18, double* %y1, align 8
  %19 = load double* %x, align 8
  %add = fadd double 1.000000e+00, %19
  store double %add, double* %x2, align 8
  %20 = load double* %y, align 8
  store double %20, double* %y2, align 8
  %21 = bitcast %struct.dcmplx2* %tmp to i8*
  %22 = load double* %x2, align 8
  %23 = load double* %y2, align 8
  store i8* %21, i8** %res.addr.i10, align 8
  store double %22, double* %real1.addr.i11, align 8
  store double %23, double* %imag1.addr.i12, align 8
  %24 = load double* %imag1.addr.i12, align 8
  %25 = load double* %real1.addr.i11, align 8
  %call.i15 = call  double @__nv_atan2(double %24, double %25) nounwind
  store double %call.i15, double* %x.i13, align 8
  %26 = load double* %real1.addr.i11, align 8
  %27 = load double* %imag1.addr.i12, align 8
  %call1.i16 = call  double @__nv_hypot(double %26, double %27) nounwind
  %call2.i17 = call  double @__nv_log(double %call1.i16) nounwind
  store double %call2.i17, double* %y.i14, align 8
  %28 = load double* %y.i14, align 8
  %29 = load i8** %res.addr.i10, align 8
  %30 = bitcast i8* %29 to double*
  store double %28, double* %30, align 8
  %31 = load double* %x.i13, align 8
  %32 = load i8** %res.addr.i10, align 8
  %33 = bitcast i8* %32 to double*
  %arrayidx3.i18 = getelementptr inbounds double* %33, i64 1
  store double %31, double* %arrayidx3.i18, align 8
  %r3 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %34 = load double* %r3, align 8
  store double %34, double* %x2, align 8
  %i4 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %35 = load double* %i4, align 8
  store double %35, double* %y2, align 8
  %36 = load double* %y1, align 8
  %37 = load double* %y2, align 8
  %sub5 = fsub double %36, %37
  %mul = fmul double %sub5, 5.000000e-01
  %sub6 = fsub double -0.000000e+00, %mul
  store double %sub6, double* %x, align 8
  %38 = load double* %x1, align 8
  %39 = load double* %x2, align 8
  %sub7 = fsub double %38, %39
  %mul8 = fmul double %sub7, 5.000000e-01
  store double %mul8, double* %y, align 8
  %40 = load double* %x, align 8
  %41 = load i8** %res.addr, align 8
  %42 = bitcast i8* %41 to double*
  %arrayidx = getelementptr inbounds double* %42, i64 0
  store double %40, double* %arrayidx, align 8
  %43 = load double* %y, align 8
  %44 = load i8** %res.addr, align 8
  %45 = bitcast i8* %44 to double*
  %arrayidx9 = getelementptr inbounds double* %45, i64 1
  store double %43, double* %arrayidx9, align 8
  ret void
}

define  void @__pgi_cdtan(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i18 = alloca i8*, align 8
  %real1.addr.i19 = alloca double, align 8
  %imag1.addr.i20 = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i21 = alloca double, align 8
  %y.i22 = alloca double, align 8
  %r.i = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %res.addr.i6 = alloca i8*, align 8
  %real1.addr.i7 = alloca double, align 8
  %imag1.addr.i8 = alloca double, align 8
  %x.i9 = alloca double, align 8
  %y.i10 = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %x1 = alloca double, align 8
  %y1 = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = bitcast %struct.dcmplx2* %tmp to i8*
  %1 = load double* %real1.addr, align 8
  %2 = load double* %imag1.addr, align 8
  store i8* %0, i8** %res.addr.i, align 8
  store double %1, double* %real1.addr.i, align 8
  store double %2, double* %imag1.addr.i, align 8
  %3 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_sin(double %3) nounwind
  store double %call.i, double* %x.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %call1.i = call  double @__nv_cos(double %4) nounwind
  store double %call1.i, double* %y.i, align 8
  %5 = load double* %x.i, align 8
  %6 = load double* %imag1.addr.i, align 8
  %call2.i = call  double @__nv_cosh(double %6) nounwind
  %mul.i = fmul double %5, %call2.i
  store double %mul.i, double* %x.i, align 8
  %7 = load double* %y.i, align 8
  %8 = load double* %imag1.addr.i, align 8
  %call3.i = call  double @__nv_sinh(double %8) nounwind
  %mul4.i = fmul double %7, %call3.i
  store double %mul4.i, double* %y.i, align 8
  %9 = load double* %x.i, align 8
  %10 = load i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to double*
  store double %9, double* %11, align 8
  %12 = load double* %y.i, align 8
  %13 = load i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to double*
  %arrayidx5.i = getelementptr inbounds double* %14, i64 1
  store double %12, double* %arrayidx5.i, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %15 = load double* %r, align 8
  store double %15, double* %x, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %16 = load double* %i, align 8
  store double %16, double* %y, align 8
  %17 = bitcast %struct.dcmplx2* %tmp to i8*
  %18 = load double* %real1.addr, align 8
  %19 = load double* %imag1.addr, align 8
  store i8* %17, i8** %res.addr.i6, align 8
  store double %18, double* %real1.addr.i7, align 8
  store double %19, double* %imag1.addr.i8, align 8
  %20 = load double* %real1.addr.i7, align 8
  %call.i11 = call  double @__nv_cos(double %20) nounwind
  store double %call.i11, double* %x.i9, align 8
  %21 = load double* %real1.addr.i7, align 8
  %call1.i12 = call  double @__nv_sin(double %21) nounwind
  store double %call1.i12, double* %y.i10, align 8
  %22 = load double* %x.i9, align 8
  %23 = load double* %imag1.addr.i8, align 8
  %call2.i13 = call  double @__nv_cosh(double %23) nounwind
  %mul.i14 = fmul double %22, %call2.i13
  store double %mul.i14, double* %x.i9, align 8
  %24 = load double* %y.i10, align 8
  %sub.i = fsub double -0.000000e+00, %24
  %25 = load double* %imag1.addr.i8, align 8
  %call3.i15 = call  double @__nv_sinh(double %25) nounwind
  %mul4.i16 = fmul double %sub.i, %call3.i15
  store double %mul4.i16, double* %y.i10, align 8
  %26 = load double* %x.i9, align 8
  %27 = load i8** %res.addr.i6, align 8
  %28 = bitcast i8* %27 to double*
  store double %26, double* %28, align 8
  %29 = load double* %y.i10, align 8
  %30 = load i8** %res.addr.i6, align 8
  %31 = bitcast i8* %30 to double*
  %arrayidx5.i17 = getelementptr inbounds double* %31, i64 1
  store double %29, double* %arrayidx5.i17, align 8
  %r1 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %32 = load double* %r1, align 8
  store double %32, double* %x1, align 8
  %i2 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %33 = load double* %i2, align 8
  store double %33, double* %y1, align 8
  %34 = bitcast %struct.dcmplx2* %tmp to i8*
  %35 = load double* %x, align 8
  %36 = load double* %y, align 8
  %37 = load double* %x1, align 8
  %38 = load double* %y1, align 8
  store i8* %34, i8** %res.addr.i18, align 8
  store double %35, double* %real1.addr.i19, align 8
  store double %36, double* %imag1.addr.i20, align 8
  store double %37, double* %real2.addr.i, align 8
  store double %38, double* %imag2.addr.i, align 8
  %39 = load double* %real2.addr.i, align 8
  store double %39, double* %r_mag.i, align 8
  %40 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %40, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %41 = load double* %r_mag.i, align 8
  %sub.i23 = fsub double -0.000000e+00, %41
  store double %sub.i23, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %42 = load double* %imag2.addr.i, align 8
  store double %42, double* %i_mag.i, align 8
  %43 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %43, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %44 = load double* %i_mag.i, align 8
  %sub3.i = fsub double -0.000000e+00, %44
  store double %sub3.i, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %45 = load double* %r_mag.i, align 8
  %46 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %45, %46
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %47 = load double* %real2.addr.i, align 8
  %48 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %47, %48
  store double %div.i, double* %r.i, align 8
  %49 = load double* %imag2.addr.i, align 8
  %50 = load double* %r.i, align 8
  %51 = load double* %r.i, align 8
  %mul.i24 = fmul double %50, %51
  %add.i = fadd double 1.000000e+00, %mul.i24
  %mul7.i = fmul double %49, %add.i
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %52 = load double* %real1.addr.i19, align 8
  %53 = load double* %r.i, align 8
  %mul9.i = fmul double %52, %53
  %54 = load double* %imag1.addr.i20, align 8
  %add10.i = fadd double %mul9.i, %54
  %55 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %55
  store double %mul11.i, double* %x.i21, align 8
  %56 = load double* %imag1.addr.i20, align 8
  %57 = load double* %r.i, align 8
  %mul12.i = fmul double %56, %57
  %58 = load double* %real1.addr.i19, align 8
  %sub13.i = fsub double %mul12.i, %58
  %59 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %59
  store double %mul14.i, double* %y.i22, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %60 = load double* %imag2.addr.i, align 8
  %61 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %60, %61
  store double %div15.i, double* %r.i, align 8
  %62 = load double* %real2.addr.i, align 8
  %63 = load double* %r.i, align 8
  %64 = load double* %r.i, align 8
  %mul16.i = fmul double %63, %64
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %62, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %65 = load double* %real1.addr.i19, align 8
  %66 = load double* %imag1.addr.i20, align 8
  %67 = load double* %r.i, align 8
  %mul20.i = fmul double %66, %67
  %add21.i = fadd double %65, %mul20.i
  %68 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %68
  store double %mul22.i, double* %x.i21, align 8
  %69 = load double* %imag1.addr.i20, align 8
  %70 = load double* %real1.addr.i19, align 8
  %71 = load double* %r.i, align 8
  %mul23.i = fmul double %70, %71
  %sub24.i = fsub double %69, %mul23.i
  %72 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %72
  store double %mul25.i, double* %y.i22, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %73 = load double* %x.i21, align 8
  %74 = load i8** %res.addr.i18, align 8
  %75 = bitcast i8* %74 to double*
  store double %73, double* %75, align 8
  %76 = load double* %y.i22, align 8
  %77 = load i8** %res.addr.i18, align 8
  %78 = bitcast i8* %77 to double*
  %arrayidx27.i = getelementptr inbounds double* %78, i64 1
  store double %76, double* %arrayidx27.i, align 8
  %r3 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %79 = load double* %r3, align 8
  store double %79, double* %x, align 8
  %i4 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %80 = load double* %i4, align 8
  store double %80, double* %y, align 8
  %81 = load double* %x, align 8
  %82 = load i8** %res.addr, align 8
  %83 = bitcast i8* %82 to double*
  %arrayidx = getelementptr inbounds double* %83, i64 0
  store double %81, double* %arrayidx, align 8
  %84 = load double* %y, align 8
  %85 = load i8** %res.addr, align 8
  %86 = bitcast i8* %85 to double*
  %arrayidx5 = getelementptr inbounds double* %86, i64 1
  store double %84, double* %arrayidx5, align 8
  ret void
}

define  void @__pgi_cdcosh(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i7 = alloca i8*, align 8
  %real1.addr.i8 = alloca double, align 8
  %imag1.addr.i9 = alloca double, align 8
  %x.i10 = alloca double, align 8
  %y.i11 = alloca double, align 8
  %z.i12 = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %z.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = bitcast %struct.dcmplx2* %tmp to i8*
  %1 = load double* %real1.addr, align 8
  %2 = load double* %imag1.addr, align 8
  store i8* %0, i8** %res.addr.i, align 8
  store double %1, double* %real1.addr.i, align 8
  store double %2, double* %imag1.addr.i, align 8
  %3 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_exp(double %3) nounwind
  store double %call.i, double* %x.i, align 8
  %4 = load double* %imag1.addr.i, align 8
  call  void @__nv_sincos(double %4, double* %z.i, double* %y.i) nounwind
  %5 = load double* %x.i, align 8
  %6 = load double* %y.i, align 8
  %mul.i = fmul double %6, %5
  store double %mul.i, double* %y.i, align 8
  %7 = load double* %x.i, align 8
  %8 = load double* %z.i, align 8
  %mul1.i = fmul double %8, %7
  store double %mul1.i, double* %z.i, align 8
  %9 = load double* %y.i, align 8
  %10 = load i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to double*
  store double %9, double* %11, align 8
  %12 = load double* %z.i, align 8
  %13 = load i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to double*
  %arrayidx2.i = getelementptr inbounds double* %14, i64 1
  store double %12, double* %arrayidx2.i, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %15 = load double* %r, align 8
  store double %15, double* %x, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %16 = load double* %i, align 8
  store double %16, double* %y, align 8
  %17 = bitcast %struct.dcmplx2* %tmp to i8*
  %18 = load double* %real1.addr, align 8
  %sub = fsub double -0.000000e+00, %18
  %19 = load double* %imag1.addr, align 8
  %sub1 = fsub double -0.000000e+00, %19
  store i8* %17, i8** %res.addr.i7, align 8
  store double %sub, double* %real1.addr.i8, align 8
  store double %sub1, double* %imag1.addr.i9, align 8
  %20 = load double* %real1.addr.i8, align 8
  %call.i13 = call  double @__nv_exp(double %20) nounwind
  store double %call.i13, double* %x.i10, align 8
  %21 = load double* %imag1.addr.i9, align 8
  call  void @__nv_sincos(double %21, double* %z.i12, double* %y.i11) nounwind
  %22 = load double* %x.i10, align 8
  %23 = load double* %y.i11, align 8
  %mul.i14 = fmul double %23, %22
  store double %mul.i14, double* %y.i11, align 8
  %24 = load double* %x.i10, align 8
  %25 = load double* %z.i12, align 8
  %mul1.i15 = fmul double %25, %24
  store double %mul1.i15, double* %z.i12, align 8
  %26 = load double* %y.i11, align 8
  %27 = load i8** %res.addr.i7, align 8
  %28 = bitcast i8* %27 to double*
  store double %26, double* %28, align 8
  %29 = load double* %z.i12, align 8
  %30 = load i8** %res.addr.i7, align 8
  %31 = bitcast i8* %30 to double*
  %arrayidx2.i16 = getelementptr inbounds double* %31, i64 1
  store double %29, double* %arrayidx2.i16, align 8
  %r2 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %32 = load double* %r2, align 8
  %33 = load double* %x, align 8
  %add = fadd double %33, %32
  store double %add, double* %x, align 8
  %i3 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %34 = load double* %i3, align 8
  %35 = load double* %y, align 8
  %add4 = fadd double %35, %34
  store double %add4, double* %y, align 8
  %36 = load double* %x, align 8
  %mul = fmul double %36, 5.000000e-01
  store double %mul, double* %x, align 8
  %37 = load double* %y, align 8
  %mul5 = fmul double %37, 5.000000e-01
  store double %mul5, double* %y, align 8
  %38 = load double* %x, align 8
  %39 = load i8** %res.addr, align 8
  %40 = bitcast i8* %39 to double*
  %arrayidx = getelementptr inbounds double* %40, i64 0
  store double %38, double* %arrayidx, align 8
  %41 = load double* %y, align 8
  %42 = load i8** %res.addr, align 8
  %43 = bitcast i8* %42 to double*
  %arrayidx6 = getelementptr inbounds double* %43, i64 1
  store double %41, double* %arrayidx6, align 8
  ret void
}

define  void @__pgi_cdsinh(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i8 = alloca i8*, align 8
  %real1.addr.i9 = alloca double, align 8
  %imag1.addr.i10 = alloca double, align 8
  %x.i11 = alloca double, align 8
  %y.i12 = alloca double, align 8
  %z.i13 = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %z.i = alloca double, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = bitcast %struct.dcmplx2* %tmp to i8*
  %1 = load double* %real1.addr, align 8
  %2 = load double* %imag1.addr, align 8
  store i8* %0, i8** %res.addr.i, align 8
  store double %1, double* %real1.addr.i, align 8
  store double %2, double* %imag1.addr.i, align 8
  %3 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_exp(double %3) nounwind
  store double %call.i, double* %x.i, align 8
  %4 = load double* %imag1.addr.i, align 8
  call  void @__nv_sincos(double %4, double* %z.i, double* %y.i) nounwind
  %5 = load double* %x.i, align 8
  %6 = load double* %y.i, align 8
  %mul.i = fmul double %6, %5
  store double %mul.i, double* %y.i, align 8
  %7 = load double* %x.i, align 8
  %8 = load double* %z.i, align 8
  %mul1.i = fmul double %8, %7
  store double %mul1.i, double* %z.i, align 8
  %9 = load double* %y.i, align 8
  %10 = load i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to double*
  store double %9, double* %11, align 8
  %12 = load double* %z.i, align 8
  %13 = load i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to double*
  %arrayidx2.i = getelementptr inbounds double* %14, i64 1
  store double %12, double* %arrayidx2.i, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %15 = load double* %r, align 8
  store double %15, double* %x, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %16 = load double* %i, align 8
  store double %16, double* %y, align 8
  %17 = bitcast %struct.dcmplx2* %tmp to i8*
  %18 = load double* %real1.addr, align 8
  %sub = fsub double -0.000000e+00, %18
  %19 = load double* %imag1.addr, align 8
  %sub1 = fsub double -0.000000e+00, %19
  store i8* %17, i8** %res.addr.i8, align 8
  store double %sub, double* %real1.addr.i9, align 8
  store double %sub1, double* %imag1.addr.i10, align 8
  %20 = load double* %real1.addr.i9, align 8
  %call.i14 = call  double @__nv_exp(double %20) nounwind
  store double %call.i14, double* %x.i11, align 8
  %21 = load double* %imag1.addr.i10, align 8
  call  void @__nv_sincos(double %21, double* %z.i13, double* %y.i12) nounwind
  %22 = load double* %x.i11, align 8
  %23 = load double* %y.i12, align 8
  %mul.i15 = fmul double %23, %22
  store double %mul.i15, double* %y.i12, align 8
  %24 = load double* %x.i11, align 8
  %25 = load double* %z.i13, align 8
  %mul1.i16 = fmul double %25, %24
  store double %mul1.i16, double* %z.i13, align 8
  %26 = load double* %y.i12, align 8
  %27 = load i8** %res.addr.i8, align 8
  %28 = bitcast i8* %27 to double*
  store double %26, double* %28, align 8
  %29 = load double* %z.i13, align 8
  %30 = load i8** %res.addr.i8, align 8
  %31 = bitcast i8* %30 to double*
  %arrayidx2.i17 = getelementptr inbounds double* %31, i64 1
  store double %29, double* %arrayidx2.i17, align 8
  %r2 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %32 = load double* %r2, align 8
  %33 = load double* %x, align 8
  %sub3 = fsub double %33, %32
  store double %sub3, double* %x, align 8
  %i4 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %34 = load double* %i4, align 8
  %35 = load double* %y, align 8
  %sub5 = fsub double %35, %34
  store double %sub5, double* %y, align 8
  %36 = load double* %x, align 8
  %mul = fmul double %36, 5.000000e-01
  store double %mul, double* %x, align 8
  %37 = load double* %y, align 8
  %mul6 = fmul double %37, 5.000000e-01
  store double %mul6, double* %y, align 8
  %38 = load double* %x, align 8
  %39 = load i8** %res.addr, align 8
  %40 = bitcast i8* %39 to double*
  %arrayidx = getelementptr inbounds double* %40, i64 0
  store double %38, double* %arrayidx, align 8
  %41 = load double* %y, align 8
  %42 = load i8** %res.addr, align 8
  %43 = bitcast i8* %42 to double*
  %arrayidx7 = getelementptr inbounds double* %43, i64 1
  store double %41, double* %arrayidx7, align 8
  ret void
}

define  void @__pgi_cdtanh(i8* %res, double %real1, double %imag1) nounwind alwaysinline {
entry:
  %res.addr.i28 = alloca i8*, align 8
  %real1.addr.i29 = alloca double, align 8
  %imag1.addr.i30 = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i31 = alloca double, align 8
  %y.i32 = alloca double, align 8
  %r.i33 = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %res.addr.i7.i = alloca i8*, align 8
  %real1.addr.i8.i = alloca double, align 8
  %imag1.addr.i9.i = alloca double, align 8
  %x.i10.i = alloca double, align 8
  %y.i11.i = alloca double, align 8
  %z.i12.i = alloca double, align 8
  %res.addr.i.i6 = alloca i8*, align 8
  %real1.addr.i.i7 = alloca double, align 8
  %imag1.addr.i.i8 = alloca double, align 8
  %x.i.i9 = alloca double, align 8
  %y.i.i10 = alloca double, align 8
  %z.i.i11 = alloca double, align 8
  %res.addr.i12 = alloca i8*, align 8
  %real1.addr.i13 = alloca double, align 8
  %imag1.addr.i14 = alloca double, align 8
  %x.i15 = alloca double, align 8
  %y.i16 = alloca double, align 8
  %tmp.i17 = alloca %struct.dcmplx2, align 8
  %res.addr.i8.i = alloca i8*, align 8
  %real1.addr.i9.i = alloca double, align 8
  %imag1.addr.i10.i = alloca double, align 8
  %x.i11.i = alloca double, align 8
  %y.i12.i = alloca double, align 8
  %z.i13.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %z.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca double, align 8
  %imag1.addr = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %x1 = alloca double, align 8
  %y1 = alloca double, align 8
  %tmp = alloca %struct.dcmplx2, align 8
  store i8* %res, i8** %res.addr, align 8
  store double %real1, double* %real1.addr, align 8
  store double %imag1, double* %imag1.addr, align 8
  %0 = bitcast %struct.dcmplx2* %tmp to i8*
  %1 = load double* %real1.addr, align 8
  %2 = load double* %imag1.addr, align 8
  store i8* %0, i8** %res.addr.i, align 8
  store double %1, double* %real1.addr.i, align 8
  store double %2, double* %imag1.addr.i, align 8
  %3 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %4 = load double* %real1.addr.i, align 8
  %5 = load double* %imag1.addr.i, align 8
  store i8* %3, i8** %res.addr.i.i, align 8
  store double %4, double* %real1.addr.i.i, align 8
  store double %5, double* %imag1.addr.i.i, align 8
  %6 = load double* %real1.addr.i.i, align 8
  %call.i.i = call  double @__nv_exp(double %6) nounwind
  store double %call.i.i, double* %x.i.i, align 8
  %7 = load double* %imag1.addr.i.i, align 8
  call  void @__nv_sincos(double %7, double* %z.i.i, double* %y.i.i) nounwind
  %8 = load double* %x.i.i, align 8
  %9 = load double* %y.i.i, align 8
  %mul.i.i = fmul double %9, %8
  store double %mul.i.i, double* %y.i.i, align 8
  %10 = load double* %x.i.i, align 8
  %11 = load double* %z.i.i, align 8
  %mul1.i.i = fmul double %11, %10
  store double %mul1.i.i, double* %z.i.i, align 8
  %12 = load double* %y.i.i, align 8
  %13 = load i8** %res.addr.i.i, align 8
  %14 = bitcast i8* %13 to double*
  store double %12, double* %14, align 8
  %15 = load double* %z.i.i, align 8
  %16 = load i8** %res.addr.i.i, align 8
  %17 = bitcast i8* %16 to double*
  %arrayidx2.i.i = getelementptr inbounds double* %17, i64 1
  store double %15, double* %arrayidx2.i.i, align 8
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %18 = load double* %r.i, align 8
  store double %18, double* %x.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %19 = load double* %i.i, align 8
  store double %19, double* %y.i, align 8
  %20 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %21 = load double* %real1.addr.i, align 8
  %sub.i = fsub double -0.000000e+00, %21
  %22 = load double* %imag1.addr.i, align 8
  %sub1.i = fsub double -0.000000e+00, %22
  store i8* %20, i8** %res.addr.i8.i, align 8
  store double %sub.i, double* %real1.addr.i9.i, align 8
  store double %sub1.i, double* %imag1.addr.i10.i, align 8
  %23 = load double* %real1.addr.i9.i, align 8
  %call.i14.i = call  double @__nv_exp(double %23) nounwind
  store double %call.i14.i, double* %x.i11.i, align 8
  %24 = load double* %imag1.addr.i10.i, align 8
  call  void @__nv_sincos(double %24, double* %z.i13.i, double* %y.i12.i) nounwind
  %25 = load double* %x.i11.i, align 8
  %26 = load double* %y.i12.i, align 8
  %mul.i15.i = fmul double %26, %25
  store double %mul.i15.i, double* %y.i12.i, align 8
  %27 = load double* %x.i11.i, align 8
  %28 = load double* %z.i13.i, align 8
  %mul1.i16.i = fmul double %28, %27
  store double %mul1.i16.i, double* %z.i13.i, align 8
  %29 = load double* %y.i12.i, align 8
  %30 = load i8** %res.addr.i8.i, align 8
  %31 = bitcast i8* %30 to double*
  store double %29, double* %31, align 8
  %32 = load double* %z.i13.i, align 8
  %33 = load i8** %res.addr.i8.i, align 8
  %34 = bitcast i8* %33 to double*
  %arrayidx2.i17.i = getelementptr inbounds double* %34, i64 1
  store double %32, double* %arrayidx2.i17.i, align 8
  %r2.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %35 = load double* %r2.i, align 8
  %36 = load double* %x.i, align 8
  %sub3.i = fsub double %36, %35
  store double %sub3.i, double* %x.i, align 8
  %i4.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %37 = load double* %i4.i, align 8
  %38 = load double* %y.i, align 8
  %sub5.i = fsub double %38, %37
  store double %sub5.i, double* %y.i, align 8
  %39 = load double* %x.i, align 8
  %mul.i = fmul double %39, 5.000000e-01
  store double %mul.i, double* %x.i, align 8
  %40 = load double* %y.i, align 8
  %mul6.i = fmul double %40, 5.000000e-01
  store double %mul6.i, double* %y.i, align 8
  %41 = load double* %x.i, align 8
  %42 = load i8** %res.addr.i, align 8
  %43 = bitcast i8* %42 to double*
  store double %41, double* %43, align 8
  %44 = load double* %y.i, align 8
  %45 = load i8** %res.addr.i, align 8
  %46 = bitcast i8* %45 to double*
  %arrayidx7.i = getelementptr inbounds double* %46, i64 1
  store double %44, double* %arrayidx7.i, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %47 = load double* %r, align 8
  store double %47, double* %x, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %48 = load double* %i, align 8
  store double %48, double* %y, align 8
  %49 = bitcast %struct.dcmplx2* %tmp to i8*
  %50 = load double* %real1.addr, align 8
  %51 = load double* %imag1.addr, align 8
  store i8* %49, i8** %res.addr.i12, align 8
  store double %50, double* %real1.addr.i13, align 8
  store double %51, double* %imag1.addr.i14, align 8
  %52 = bitcast %struct.dcmplx2* %tmp.i17 to i8*
  %53 = load double* %real1.addr.i13, align 8
  %54 = load double* %imag1.addr.i14, align 8
  store i8* %52, i8** %res.addr.i.i6, align 8
  store double %53, double* %real1.addr.i.i7, align 8
  store double %54, double* %imag1.addr.i.i8, align 8
  %55 = load double* %real1.addr.i.i7, align 8
  %call.i.i18 = call  double @__nv_exp(double %55) nounwind
  store double %call.i.i18, double* %x.i.i9, align 8
  %56 = load double* %imag1.addr.i.i8, align 8
  call  void @__nv_sincos(double %56, double* %z.i.i11, double* %y.i.i10) nounwind
  %57 = load double* %x.i.i9, align 8
  %58 = load double* %y.i.i10, align 8
  %mul.i.i19 = fmul double %58, %57
  store double %mul.i.i19, double* %y.i.i10, align 8
  %59 = load double* %x.i.i9, align 8
  %60 = load double* %z.i.i11, align 8
  %mul1.i.i20 = fmul double %60, %59
  store double %mul1.i.i20, double* %z.i.i11, align 8
  %61 = load double* %y.i.i10, align 8
  %62 = load i8** %res.addr.i.i6, align 8
  %63 = bitcast i8* %62 to double*
  store double %61, double* %63, align 8
  %64 = load double* %z.i.i11, align 8
  %65 = load i8** %res.addr.i.i6, align 8
  %66 = bitcast i8* %65 to double*
  %arrayidx2.i.i21 = getelementptr inbounds double* %66, i64 1
  store double %64, double* %arrayidx2.i.i21, align 8
  %r.i22 = getelementptr inbounds %struct.dcmplx2* %tmp.i17, i32 0, i32 0
  %67 = load double* %r.i22, align 8
  store double %67, double* %x.i15, align 8
  %i.i23 = getelementptr inbounds %struct.dcmplx2* %tmp.i17, i32 0, i32 1
  %68 = load double* %i.i23, align 8
  store double %68, double* %y.i16, align 8
  %69 = bitcast %struct.dcmplx2* %tmp.i17 to i8*
  %70 = load double* %real1.addr.i13, align 8
  %sub.i24 = fsub double -0.000000e+00, %70
  %71 = load double* %imag1.addr.i14, align 8
  %sub1.i25 = fsub double -0.000000e+00, %71
  store i8* %69, i8** %res.addr.i7.i, align 8
  store double %sub.i24, double* %real1.addr.i8.i, align 8
  store double %sub1.i25, double* %imag1.addr.i9.i, align 8
  %72 = load double* %real1.addr.i8.i, align 8
  %call.i13.i = call  double @__nv_exp(double %72) nounwind
  store double %call.i13.i, double* %x.i10.i, align 8
  %73 = load double* %imag1.addr.i9.i, align 8
  call  void @__nv_sincos(double %73, double* %z.i12.i, double* %y.i11.i) nounwind
  %74 = load double* %x.i10.i, align 8
  %75 = load double* %y.i11.i, align 8
  %mul.i14.i = fmul double %75, %74
  store double %mul.i14.i, double* %y.i11.i, align 8
  %76 = load double* %x.i10.i, align 8
  %77 = load double* %z.i12.i, align 8
  %mul1.i15.i = fmul double %77, %76
  store double %mul1.i15.i, double* %z.i12.i, align 8
  %78 = load double* %y.i11.i, align 8
  %79 = load i8** %res.addr.i7.i, align 8
  %80 = bitcast i8* %79 to double*
  store double %78, double* %80, align 8
  %81 = load double* %z.i12.i, align 8
  %82 = load i8** %res.addr.i7.i, align 8
  %83 = bitcast i8* %82 to double*
  %arrayidx2.i16.i = getelementptr inbounds double* %83, i64 1
  store double %81, double* %arrayidx2.i16.i, align 8
  %r2.i26 = getelementptr inbounds %struct.dcmplx2* %tmp.i17, i32 0, i32 0
  %84 = load double* %r2.i26, align 8
  %85 = load double* %x.i15, align 8
  %add.i = fadd double %85, %84
  store double %add.i, double* %x.i15, align 8
  %i3.i = getelementptr inbounds %struct.dcmplx2* %tmp.i17, i32 0, i32 1
  %86 = load double* %i3.i, align 8
  %87 = load double* %y.i16, align 8
  %add4.i = fadd double %87, %86
  store double %add4.i, double* %y.i16, align 8
  %88 = load double* %x.i15, align 8
  %mul.i27 = fmul double %88, 5.000000e-01
  store double %mul.i27, double* %x.i15, align 8
  %89 = load double* %y.i16, align 8
  %mul5.i = fmul double %89, 5.000000e-01
  store double %mul5.i, double* %y.i16, align 8
  %90 = load double* %x.i15, align 8
  %91 = load i8** %res.addr.i12, align 8
  %92 = bitcast i8* %91 to double*
  store double %90, double* %92, align 8
  %93 = load double* %y.i16, align 8
  %94 = load i8** %res.addr.i12, align 8
  %95 = bitcast i8* %94 to double*
  %arrayidx6.i = getelementptr inbounds double* %95, i64 1
  store double %93, double* %arrayidx6.i, align 8
  %r1 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %96 = load double* %r1, align 8
  store double %96, double* %x1, align 8
  %i2 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %97 = load double* %i2, align 8
  store double %97, double* %y1, align 8
  %98 = bitcast %struct.dcmplx2* %tmp to i8*
  %99 = load double* %x, align 8
  %100 = load double* %y, align 8
  %101 = load double* %x1, align 8
  %102 = load double* %y1, align 8
  store i8* %98, i8** %res.addr.i28, align 8
  store double %99, double* %real1.addr.i29, align 8
  store double %100, double* %imag1.addr.i30, align 8
  store double %101, double* %real2.addr.i, align 8
  store double %102, double* %imag2.addr.i, align 8
  %103 = load double* %real2.addr.i, align 8
  store double %103, double* %r_mag.i, align 8
  %104 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %104, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %105 = load double* %r_mag.i, align 8
  %sub.i34 = fsub double -0.000000e+00, %105
  store double %sub.i34, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %106 = load double* %imag2.addr.i, align 8
  store double %106, double* %i_mag.i, align 8
  %107 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %107, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %108 = load double* %i_mag.i, align 8
  %sub3.i35 = fsub double -0.000000e+00, %108
  store double %sub3.i35, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %109 = load double* %r_mag.i, align 8
  %110 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %109, %110
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %111 = load double* %real2.addr.i, align 8
  %112 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %111, %112
  store double %div.i, double* %r.i33, align 8
  %113 = load double* %imag2.addr.i, align 8
  %114 = load double* %r.i33, align 8
  %115 = load double* %r.i33, align 8
  %mul.i36 = fmul double %114, %115
  %add.i37 = fadd double 1.000000e+00, %mul.i36
  %mul7.i = fmul double %113, %add.i37
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %116 = load double* %real1.addr.i29, align 8
  %117 = load double* %r.i33, align 8
  %mul9.i = fmul double %116, %117
  %118 = load double* %imag1.addr.i30, align 8
  %add10.i = fadd double %mul9.i, %118
  %119 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %119
  store double %mul11.i, double* %x.i31, align 8
  %120 = load double* %imag1.addr.i30, align 8
  %121 = load double* %r.i33, align 8
  %mul12.i = fmul double %120, %121
  %122 = load double* %real1.addr.i29, align 8
  %sub13.i = fsub double %mul12.i, %122
  %123 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %123
  store double %mul14.i, double* %y.i32, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %124 = load double* %imag2.addr.i, align 8
  %125 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %124, %125
  store double %div15.i, double* %r.i33, align 8
  %126 = load double* %real2.addr.i, align 8
  %127 = load double* %r.i33, align 8
  %128 = load double* %r.i33, align 8
  %mul16.i = fmul double %127, %128
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %126, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %129 = load double* %real1.addr.i29, align 8
  %130 = load double* %imag1.addr.i30, align 8
  %131 = load double* %r.i33, align 8
  %mul20.i = fmul double %130, %131
  %add21.i = fadd double %129, %mul20.i
  %132 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %132
  store double %mul22.i, double* %x.i31, align 8
  %133 = load double* %imag1.addr.i30, align 8
  %134 = load double* %real1.addr.i29, align 8
  %135 = load double* %r.i33, align 8
  %mul23.i = fmul double %134, %135
  %sub24.i = fsub double %133, %mul23.i
  %136 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %136
  store double %mul25.i, double* %y.i32, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %137 = load double* %x.i31, align 8
  %138 = load i8** %res.addr.i28, align 8
  %139 = bitcast i8* %138 to double*
  store double %137, double* %139, align 8
  %140 = load double* %y.i32, align 8
  %141 = load i8** %res.addr.i28, align 8
  %142 = bitcast i8* %141 to double*
  %arrayidx27.i = getelementptr inbounds double* %142, i64 1
  store double %140, double* %arrayidx27.i, align 8
  %r3 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 0
  %143 = load double* %r3, align 8
  store double %143, double* %x, align 8
  %i4 = getelementptr inbounds %struct.dcmplx2* %tmp, i32 0, i32 1
  %144 = load double* %i4, align 8
  store double %144, double* %y, align 8
  %145 = load double* %x, align 8
  %146 = load i8** %res.addr, align 8
  %147 = bitcast i8* %146 to double*
  %arrayidx = getelementptr inbounds double* %147, i64 0
  store double %145, double* %arrayidx, align 8
  %148 = load double* %y, align 8
  %149 = load i8** %res.addr, align 8
  %150 = bitcast i8* %149 to double*
  %arrayidx5 = getelementptr inbounds double* %150, i64 1
  store double %148, double* %arrayidx5, align 8
  ret void
}

define  double @__pgi_wrap_bessel_jn(i32 %n, double %x) nounwind alwaysinline {
entry:
  %retval = alloca double, align 8
  %n.addr = alloca i32, align 4
  %x.addr = alloca double, align 8
  %nn = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %x, double* %x.addr, align 8
  %0 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else5

if.then:                                          ; preds = %entry
  %1 = load i32* %n.addr, align 4
  %sub = sub nsw i32 0, %1
  store i32 %sub, i32* %nn, align 4
  %2 = load i32* %nn, align 4
  %div = sdiv i32 %2, 2
  %mul = mul nsw i32 %div, 2
  %3 = load i32* %nn, align 4
  %cmp1 = icmp eq i32 %mul, %3
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %4 = load i32* %nn, align 4
  %5 = load double* %x.addr, align 8
  %call = call  double @__nv_jn(i32 %4, double %5)
  store double %call, double* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %6 = load i32* %nn, align 4
  %7 = load double* %x.addr, align 8
  %call3 = call  double @__nv_jn(i32 %6, double %7)
  %sub4 = fsub double -0.000000e+00, %call3
  store double %sub4, double* %retval
  br label %return

if.else5:                                         ; preds = %entry
  %8 = load i32* %n.addr, align 4
  %9 = load double* %x.addr, align 8
  %call6 = call  double @__nv_jn(i32 %8, double %9)
  store double %call6, double* %retval
  br label %return

return:                                           ; preds = %if.else5, %if.else, %if.then2
  %10 = load double* %retval
  ret double %10
}

declare  double @__nv_jn(i32, double)

define  void @__pgi_csqrt(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %a = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %real1.addr, align 4
  %1 = load float* %imag1.addr, align 4
  %call = call  float @__nv_hypotf(float %0, float %1)
  store float %call, float* %a, align 4
  %2 = load float* %a, align 4
  %cmp = fcmp oeq float %2, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store float 0.000000e+00, float* %x, align 4
  store float 0.000000e+00, float* %y, align 4
  br label %if.end14

if.else:                                          ; preds = %entry
  %3 = load float* %real1.addr, align 4
  %cmp1 = fcmp ogt float %3, 0.000000e+00
  br i1 %cmp1, label %if.then2, label %if.else5

if.then2:                                         ; preds = %if.else
  %4 = load float* %a, align 4
  %5 = load float* %real1.addr, align 4
  %add = fadd float %4, %5
  %mul = fmul float 5.000000e-01, %add
  %call3 = call  float @__nv_sqrtf(float %mul)
  store float %call3, float* %x, align 4
  %6 = load float* %imag1.addr, align 4
  %7 = load float* %x, align 4
  %div = fdiv float %6, %7
  %mul4 = fmul float 5.000000e-01, %div
  store float %mul4, float* %y, align 4
  br label %if.end13

if.else5:                                         ; preds = %if.else
  %8 = load float* %a, align 4
  %9 = load float* %real1.addr, align 4
  %sub = fsub float %8, %9
  %mul6 = fmul float 5.000000e-01, %sub
  %call7 = call  float @__nv_sqrtf(float %mul6)
  store float %call7, float* %y, align 4
  %10 = load float* %imag1.addr, align 4
  %cmp8 = fcmp olt float %10, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.else5
  %11 = load float* %y, align 4
  %sub10 = fsub float -0.000000e+00, %11
  store float %sub10, float* %y, align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.else5
  %12 = load float* %imag1.addr, align 4
  %13 = load float* %y, align 4
  %div11 = fdiv float %12, %13
  %mul12 = fmul float 5.000000e-01, %div11
  store float %mul12, float* %x, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then2
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  %14 = load float* %x, align 4
  %15 = load i8** %res.addr, align 8
  %16 = bitcast i8* %15 to float*
  %arrayidx = getelementptr inbounds float* %16, i64 0
  store float %14, float* %arrayidx, align 4
  %17 = load float* %y, align 4
  %18 = load i8** %res.addr, align 8
  %19 = bitcast i8* %18 to float*
  %arrayidx15 = getelementptr inbounds float* %19, i64 1
  store float %17, float* %arrayidx15, align 4
  ret void
}

declare  float @__nv_hypotf(float, float)

declare  float @__nv_sqrtf(float)

define  void @__pgi_cexp(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %real1.addr, align 4
  %call = call  float @__nv_expf(float %0)
  store float %call, float* %x, align 4
  %1 = load float* %imag1.addr, align 4
  call  void @__nv_sincosf(float %1, float* %z, float* %y)
  %2 = load float* %x, align 4
  %3 = load float* %y, align 4
  %mul = fmul float %3, %2
  store float %mul, float* %y, align 4
  %4 = load float* %x, align 4
  %5 = load float* %z, align 4
  %mul1 = fmul float %5, %4
  store float %mul1, float* %z, align 4
  %6 = load float* %y, align 4
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to float*
  %arrayidx = getelementptr inbounds float* %8, i64 0
  store float %6, float* %arrayidx, align 4
  %9 = load float* %z, align 4
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to float*
  %arrayidx2 = getelementptr inbounds float* %11, i64 1
  store float %9, float* %arrayidx2, align 4
  ret void
}

declare  float @__nv_expf(float)

define  void @__pgi_clog(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %imag1.addr, align 4
  %1 = load float* %real1.addr, align 4
  %call = call  float @__nv_atan2f(float %0, float %1)
  store float %call, float* %x, align 4
  %2 = load float* %real1.addr, align 4
  %3 = load float* %imag1.addr, align 4
  %call1 = call  float @__nv_hypotf(float %2, float %3)
  %call2 = call  float @__nv_logf(float %call1)
  store float %call2, float* %y, align 4
  %4 = load float* %y, align 4
  %5 = load i8** %res.addr, align 8
  %6 = bitcast i8* %5 to float*
  %arrayidx = getelementptr inbounds float* %6, i64 0
  store float %4, float* %arrayidx, align 4
  %7 = load float* %x, align 4
  %8 = load i8** %res.addr, align 8
  %9 = bitcast i8* %8 to float*
  %arrayidx3 = getelementptr inbounds float* %9, i64 1
  store float %7, float* %arrayidx3, align 4
  ret void
}

declare  float @__nv_atan2f(float, float)

declare  float @__nv_logf(float)

define  void @__pgi_cacos(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i13 = alloca i8*, align 8
  %real1.addr.i14 = alloca float, align 4
  %imag1.addr.i15 = alloca float, align 4
  %x.i16 = alloca float, align 4
  %y.i17 = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %a.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %real1.addr, align 4
  %1 = load float* %real1.addr, align 4
  %mul = fmul float %0, %1
  %2 = load float* %imag1.addr, align 4
  %3 = load float* %imag1.addr, align 4
  %mul1 = fmul float %2, %3
  %sub = fsub float %mul, %mul1
  store float %sub, float* %x, align 4
  %4 = load float* %real1.addr, align 4
  %5 = load float* %imag1.addr, align 4
  %mul2 = fmul float %4, %5
  %6 = load float* %imag1.addr, align 4
  %7 = load float* %real1.addr, align 4
  %mul3 = fmul float %6, %7
  %add = fadd float %mul2, %mul3
  store float %add, float* %y, align 4
  %8 = load float* %x, align 4
  %sub4 = fsub float 1.000000e+00, %8
  store float %sub4, float* %x, align 4
  %9 = load float* %y, align 4
  %sub5 = fsub float -0.000000e+00, %9
  store float %sub5, float* %y, align 4
  %10 = bitcast %struct.cmplx2* %tmp to i8*
  %11 = load float* %x, align 4
  %12 = load float* %y, align 4
  store i8* %10, i8** %res.addr.i, align 8
  store float %11, float* %real1.addr.i, align 4
  store float %12, float* %imag1.addr.i, align 4
  %13 = load float* %real1.addr.i, align 4
  %14 = load float* %imag1.addr.i, align 4
  %call.i = call  float @__nv_hypotf(float %13, float %14) nounwind
  store float %call.i, float* %a.i, align 4
  %15 = load float* %a.i, align 4
  %cmp.i = fcmp oeq float %15, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  store float 0.000000e+00, float* %x.i, align 4
  store float 0.000000e+00, float* %y.i, align 4
  br label %__pgi_csqrt.exit

if.else.i:                                        ; preds = %entry
  %16 = load float* %real1.addr.i, align 4
  %cmp1.i = fcmp ogt float %16, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.else5.i

if.then2.i:                                       ; preds = %if.else.i
  %17 = load float* %a.i, align 4
  %18 = load float* %real1.addr.i, align 4
  %add.i = fadd float %17, %18
  %mul.i = fmul float 5.000000e-01, %add.i
  %call3.i = call  float @__nv_sqrtf(float %mul.i) nounwind
  store float %call3.i, float* %x.i, align 4
  %19 = load float* %imag1.addr.i, align 4
  %20 = load float* %x.i, align 4
  %div.i = fdiv float %19, %20
  %mul4.i = fmul float 5.000000e-01, %div.i
  store float %mul4.i, float* %y.i, align 4
  br label %if.end13.i

if.else5.i:                                       ; preds = %if.else.i
  %21 = load float* %a.i, align 4
  %22 = load float* %real1.addr.i, align 4
  %sub.i = fsub float %21, %22
  %mul6.i = fmul float 5.000000e-01, %sub.i
  %call7.i = call  float @__nv_sqrtf(float %mul6.i) nounwind
  store float %call7.i, float* %y.i, align 4
  %23 = load float* %imag1.addr.i, align 4
  %cmp8.i = fcmp olt float %23, 0.000000e+00
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.else5.i
  %24 = load float* %y.i, align 4
  %sub10.i = fsub float -0.000000e+00, %24
  store float %sub10.i, float* %y.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.else5.i
  %25 = load float* %imag1.addr.i, align 4
  %26 = load float* %y.i, align 4
  %div11.i = fdiv float %25, %26
  %mul12.i = fmul float 5.000000e-01, %div11.i
  store float %mul12.i, float* %x.i, align 4
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.end.i, %if.then2.i
  br label %__pgi_csqrt.exit

__pgi_csqrt.exit:                                 ; preds = %if.end13.i, %if.then.i
  %27 = load float* %x.i, align 4
  %28 = load i8** %res.addr.i, align 8
  %29 = bitcast i8* %28 to float*
  store float %27, float* %29, align 4
  %30 = load float* %y.i, align 4
  %31 = load i8** %res.addr.i, align 8
  %32 = bitcast i8* %31 to float*
  %arrayidx15.i = getelementptr inbounds float* %32, i64 1
  store float %30, float* %arrayidx15.i, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %33 = load float* %i, align 4
  %sub6 = fsub float -0.000000e+00, %33
  store float %sub6, float* %x, align 4
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %34 = load float* %r, align 4
  store float %34, float* %y, align 4
  %35 = load float* %real1.addr, align 4
  %36 = load float* %x, align 4
  %add7 = fadd float %35, %36
  store float %add7, float* %x, align 4
  %37 = load float* %imag1.addr, align 4
  %38 = load float* %y, align 4
  %add8 = fadd float %37, %38
  store float %add8, float* %y, align 4
  %39 = bitcast %struct.cmplx2* %tmp to i8*
  %40 = load float* %x, align 4
  %41 = load float* %y, align 4
  store i8* %39, i8** %res.addr.i13, align 8
  store float %40, float* %real1.addr.i14, align 4
  store float %41, float* %imag1.addr.i15, align 4
  %42 = load float* %imag1.addr.i15, align 4
  %43 = load float* %real1.addr.i14, align 4
  %call.i18 = call  float @__nv_atan2f(float %42, float %43) nounwind
  store float %call.i18, float* %x.i16, align 4
  %44 = load float* %real1.addr.i14, align 4
  %45 = load float* %imag1.addr.i15, align 4
  %call1.i = call  float @__nv_hypotf(float %44, float %45) nounwind
  %call2.i = call  float @__nv_logf(float %call1.i) nounwind
  store float %call2.i, float* %y.i17, align 4
  %46 = load float* %y.i17, align 4
  %47 = load i8** %res.addr.i13, align 8
  %48 = bitcast i8* %47 to float*
  store float %46, float* %48, align 4
  %49 = load float* %x.i16, align 4
  %50 = load i8** %res.addr.i13, align 8
  %51 = bitcast i8* %50 to float*
  %arrayidx3.i = getelementptr inbounds float* %51, i64 1
  store float %49, float* %arrayidx3.i, align 4
  %i9 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %52 = load float* %i9, align 4
  store float %52, float* %x, align 4
  %r10 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %53 = load float* %r10, align 4
  %sub11 = fsub float -0.000000e+00, %53
  store float %sub11, float* %y, align 4
  %54 = load float* %x, align 4
  %55 = load i8** %res.addr, align 8
  %56 = bitcast i8* %55 to float*
  %arrayidx = getelementptr inbounds float* %56, i64 0
  store float %54, float* %arrayidx, align 4
  %57 = load float* %y, align 4
  %58 = load i8** %res.addr, align 8
  %59 = bitcast i8* %58 to float*
  %arrayidx12 = getelementptr inbounds float* %59, i64 1
  store float %57, float* %arrayidx12, align 4
  ret void
}

define  void @__pgi_casin(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i13 = alloca i8*, align 8
  %real1.addr.i14 = alloca float, align 4
  %imag1.addr.i15 = alloca float, align 4
  %x.i16 = alloca float, align 4
  %y.i17 = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %a.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %real1.addr, align 4
  %1 = load float* %real1.addr, align 4
  %mul = fmul float %0, %1
  %2 = load float* %imag1.addr, align 4
  %3 = load float* %imag1.addr, align 4
  %mul1 = fmul float %2, %3
  %sub = fsub float %mul, %mul1
  store float %sub, float* %x, align 4
  %4 = load float* %real1.addr, align 4
  %5 = load float* %imag1.addr, align 4
  %mul2 = fmul float %4, %5
  %6 = load float* %imag1.addr, align 4
  %7 = load float* %real1.addr, align 4
  %mul3 = fmul float %6, %7
  %add = fadd float %mul2, %mul3
  store float %add, float* %y, align 4
  %8 = load float* %x, align 4
  %sub4 = fsub float 1.000000e+00, %8
  store float %sub4, float* %x, align 4
  %9 = load float* %y, align 4
  %sub5 = fsub float -0.000000e+00, %9
  store float %sub5, float* %y, align 4
  %10 = bitcast %struct.cmplx2* %tmp to i8*
  %11 = load float* %x, align 4
  %12 = load float* %y, align 4
  store i8* %10, i8** %res.addr.i, align 8
  store float %11, float* %real1.addr.i, align 4
  store float %12, float* %imag1.addr.i, align 4
  %13 = load float* %real1.addr.i, align 4
  %14 = load float* %imag1.addr.i, align 4
  %call.i = call  float @__nv_hypotf(float %13, float %14) nounwind
  store float %call.i, float* %a.i, align 4
  %15 = load float* %a.i, align 4
  %cmp.i = fcmp oeq float %15, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  store float 0.000000e+00, float* %x.i, align 4
  store float 0.000000e+00, float* %y.i, align 4
  br label %__pgi_csqrt.exit

if.else.i:                                        ; preds = %entry
  %16 = load float* %real1.addr.i, align 4
  %cmp1.i = fcmp ogt float %16, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.else5.i

if.then2.i:                                       ; preds = %if.else.i
  %17 = load float* %a.i, align 4
  %18 = load float* %real1.addr.i, align 4
  %add.i = fadd float %17, %18
  %mul.i = fmul float 5.000000e-01, %add.i
  %call3.i = call  float @__nv_sqrtf(float %mul.i) nounwind
  store float %call3.i, float* %x.i, align 4
  %19 = load float* %imag1.addr.i, align 4
  %20 = load float* %x.i, align 4
  %div.i = fdiv float %19, %20
  %mul4.i = fmul float 5.000000e-01, %div.i
  store float %mul4.i, float* %y.i, align 4
  br label %if.end13.i

if.else5.i:                                       ; preds = %if.else.i
  %21 = load float* %a.i, align 4
  %22 = load float* %real1.addr.i, align 4
  %sub.i = fsub float %21, %22
  %mul6.i = fmul float 5.000000e-01, %sub.i
  %call7.i = call  float @__nv_sqrtf(float %mul6.i) nounwind
  store float %call7.i, float* %y.i, align 4
  %23 = load float* %imag1.addr.i, align 4
  %cmp8.i = fcmp olt float %23, 0.000000e+00
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.else5.i
  %24 = load float* %y.i, align 4
  %sub10.i = fsub float -0.000000e+00, %24
  store float %sub10.i, float* %y.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.else5.i
  %25 = load float* %imag1.addr.i, align 4
  %26 = load float* %y.i, align 4
  %div11.i = fdiv float %25, %26
  %mul12.i = fmul float 5.000000e-01, %div11.i
  store float %mul12.i, float* %x.i, align 4
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.end.i, %if.then2.i
  br label %__pgi_csqrt.exit

__pgi_csqrt.exit:                                 ; preds = %if.end13.i, %if.then.i
  %27 = load float* %x.i, align 4
  %28 = load i8** %res.addr.i, align 8
  %29 = bitcast i8* %28 to float*
  store float %27, float* %29, align 4
  %30 = load float* %y.i, align 4
  %31 = load i8** %res.addr.i, align 8
  %32 = bitcast i8* %31 to float*
  %arrayidx15.i = getelementptr inbounds float* %32, i64 1
  store float %30, float* %arrayidx15.i, align 4
  %33 = load float* %imag1.addr, align 4
  %sub6 = fsub float -0.000000e+00, %33
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %34 = load float* %r, align 4
  %add7 = fadd float %sub6, %34
  store float %add7, float* %x, align 4
  %35 = load float* %real1.addr, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %36 = load float* %i, align 4
  %add8 = fadd float %35, %36
  store float %add8, float* %y, align 4
  %37 = bitcast %struct.cmplx2* %tmp to i8*
  %38 = load float* %x, align 4
  %39 = load float* %y, align 4
  store i8* %37, i8** %res.addr.i13, align 8
  store float %38, float* %real1.addr.i14, align 4
  store float %39, float* %imag1.addr.i15, align 4
  %40 = load float* %imag1.addr.i15, align 4
  %41 = load float* %real1.addr.i14, align 4
  %call.i18 = call  float @__nv_atan2f(float %40, float %41) nounwind
  store float %call.i18, float* %x.i16, align 4
  %42 = load float* %real1.addr.i14, align 4
  %43 = load float* %imag1.addr.i15, align 4
  %call1.i = call  float @__nv_hypotf(float %42, float %43) nounwind
  %call2.i = call  float @__nv_logf(float %call1.i) nounwind
  store float %call2.i, float* %y.i17, align 4
  %44 = load float* %y.i17, align 4
  %45 = load i8** %res.addr.i13, align 8
  %46 = bitcast i8* %45 to float*
  store float %44, float* %46, align 4
  %47 = load float* %x.i16, align 4
  %48 = load i8** %res.addr.i13, align 8
  %49 = bitcast i8* %48 to float*
  %arrayidx3.i = getelementptr inbounds float* %49, i64 1
  store float %47, float* %arrayidx3.i, align 4
  %i9 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %50 = load float* %i9, align 4
  store float %50, float* %x, align 4
  %r10 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %51 = load float* %r10, align 4
  %sub11 = fsub float -0.000000e+00, %51
  store float %sub11, float* %y, align 4
  %52 = load float* %x, align 4
  %53 = load i8** %res.addr, align 8
  %54 = bitcast i8* %53 to float*
  %arrayidx = getelementptr inbounds float* %54, i64 0
  store float %52, float* %arrayidx, align 4
  %55 = load float* %y, align 4
  %56 = load i8** %res.addr, align 8
  %57 = bitcast i8* %56 to float*
  %arrayidx12 = getelementptr inbounds float* %57, i64 1
  store float %55, float* %arrayidx12, align 4
  ret void
}

define  void @__pgi_catan(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i10 = alloca i8*, align 8
  %real1.addr.i11 = alloca float, align 4
  %imag1.addr.i12 = alloca float, align 4
  %x.i13 = alloca float, align 4
  %y.i14 = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %x1 = alloca float, align 4
  %y1 = alloca float, align 4
  %x2 = alloca float, align 4
  %y2 = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %imag1.addr, align 4
  %sub = fsub float -0.000000e+00, %0
  store float %sub, float* %x, align 4
  %1 = load float* %real1.addr, align 4
  store float %1, float* %y, align 4
  %2 = load float* %x, align 4
  %sub1 = fsub float 1.000000e+00, %2
  store float %sub1, float* %x1, align 4
  %3 = load float* %y, align 4
  %sub2 = fsub float -0.000000e+00, %3
  store float %sub2, float* %y1, align 4
  %4 = bitcast %struct.cmplx2* %tmp to i8*
  %5 = load float* %x1, align 4
  %6 = load float* %y1, align 4
  store i8* %4, i8** %res.addr.i, align 8
  store float %5, float* %real1.addr.i, align 4
  store float %6, float* %imag1.addr.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %8 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_atan2f(float %7, float %8) nounwind
  store float %call.i, float* %x.i, align 4
  %9 = load float* %real1.addr.i, align 4
  %10 = load float* %imag1.addr.i, align 4
  %call1.i = call  float @__nv_hypotf(float %9, float %10) nounwind
  %call2.i = call  float @__nv_logf(float %call1.i) nounwind
  store float %call2.i, float* %y.i, align 4
  %11 = load float* %y.i, align 4
  %12 = load i8** %res.addr.i, align 8
  %13 = bitcast i8* %12 to float*
  store float %11, float* %13, align 4
  %14 = load float* %x.i, align 4
  %15 = load i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to float*
  %arrayidx3.i = getelementptr inbounds float* %16, i64 1
  store float %14, float* %arrayidx3.i, align 4
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %17 = load float* %r, align 4
  store float %17, float* %x1, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %18 = load float* %i, align 4
  store float %18, float* %y1, align 4
  %19 = load float* %x, align 4
  %add = fadd float 1.000000e+00, %19
  store float %add, float* %x2, align 4
  %20 = load float* %y, align 4
  store float %20, float* %y2, align 4
  %21 = bitcast %struct.cmplx2* %tmp to i8*
  %22 = load float* %x2, align 4
  %23 = load float* %y2, align 4
  store i8* %21, i8** %res.addr.i10, align 8
  store float %22, float* %real1.addr.i11, align 4
  store float %23, float* %imag1.addr.i12, align 4
  %24 = load float* %imag1.addr.i12, align 4
  %25 = load float* %real1.addr.i11, align 4
  %call.i15 = call  float @__nv_atan2f(float %24, float %25) nounwind
  store float %call.i15, float* %x.i13, align 4
  %26 = load float* %real1.addr.i11, align 4
  %27 = load float* %imag1.addr.i12, align 4
  %call1.i16 = call  float @__nv_hypotf(float %26, float %27) nounwind
  %call2.i17 = call  float @__nv_logf(float %call1.i16) nounwind
  store float %call2.i17, float* %y.i14, align 4
  %28 = load float* %y.i14, align 4
  %29 = load i8** %res.addr.i10, align 8
  %30 = bitcast i8* %29 to float*
  store float %28, float* %30, align 4
  %31 = load float* %x.i13, align 4
  %32 = load i8** %res.addr.i10, align 8
  %33 = bitcast i8* %32 to float*
  %arrayidx3.i18 = getelementptr inbounds float* %33, i64 1
  store float %31, float* %arrayidx3.i18, align 4
  %r3 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %34 = load float* %r3, align 4
  store float %34, float* %x2, align 4
  %i4 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %35 = load float* %i4, align 4
  store float %35, float* %y2, align 4
  %36 = load float* %y1, align 4
  %37 = load float* %y2, align 4
  %sub5 = fsub float %36, %37
  %mul = fmul float %sub5, 5.000000e-01
  %sub6 = fsub float -0.000000e+00, %mul
  store float %sub6, float* %x, align 4
  %38 = load float* %x1, align 4
  %39 = load float* %x2, align 4
  %sub7 = fsub float %38, %39
  %mul8 = fmul float %sub7, 5.000000e-01
  store float %mul8, float* %y, align 4
  %40 = load float* %x, align 4
  %41 = load i8** %res.addr, align 8
  %42 = bitcast i8* %41 to float*
  %arrayidx = getelementptr inbounds float* %42, i64 0
  store float %40, float* %arrayidx, align 4
  %43 = load float* %y, align 4
  %44 = load i8** %res.addr, align 8
  %45 = bitcast i8* %44 to float*
  %arrayidx9 = getelementptr inbounds float* %45, i64 1
  store float %43, float* %arrayidx9, align 4
  ret void
}

define  void @__pgi_ccos(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %real1.addr, align 4
  %call = call  float @__nv_cosf(float %0)
  store float %call, float* %x, align 4
  %1 = load float* %real1.addr, align 4
  %call1 = call  float @__nv_sinf(float %1)
  store float %call1, float* %y, align 4
  %2 = load float* %x, align 4
  %3 = load float* %imag1.addr, align 4
  %call2 = call  float @__nv_coshf(float %3)
  %mul = fmul float %2, %call2
  store float %mul, float* %x, align 4
  %4 = load float* %y, align 4
  %sub = fsub float -0.000000e+00, %4
  %5 = load float* %imag1.addr, align 4
  %call3 = call  float @__nv_sinhf(float %5)
  %mul4 = fmul float %sub, %call3
  store float %mul4, float* %y, align 4
  %6 = load float* %x, align 4
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to float*
  %arrayidx = getelementptr inbounds float* %8, i64 0
  store float %6, float* %arrayidx, align 4
  %9 = load float* %y, align 4
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to float*
  %arrayidx5 = getelementptr inbounds float* %11, i64 1
  store float %9, float* %arrayidx5, align 4
  ret void
}

declare  float @__nv_cosf(float)

declare  float @__nv_sinf(float)

declare  float @__nv_coshf(float)

declare  float @__nv_sinhf(float)

define  void @__pgi_csin(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = load float* %real1.addr, align 4
  %call = call  float @__nv_sinf(float %0)
  store float %call, float* %x, align 4
  %1 = load float* %real1.addr, align 4
  %call1 = call  float @__nv_cosf(float %1)
  store float %call1, float* %y, align 4
  %2 = load float* %x, align 4
  %3 = load float* %imag1.addr, align 4
  %call2 = call  float @__nv_coshf(float %3)
  %mul = fmul float %2, %call2
  store float %mul, float* %x, align 4
  %4 = load float* %y, align 4
  %5 = load float* %imag1.addr, align 4
  %call3 = call  float @__nv_sinhf(float %5)
  %mul4 = fmul float %4, %call3
  store float %mul4, float* %y, align 4
  %6 = load float* %x, align 4
  %7 = load i8** %res.addr, align 8
  %8 = bitcast i8* %7 to float*
  %arrayidx = getelementptr inbounds float* %8, i64 0
  store float %6, float* %arrayidx, align 4
  %9 = load float* %y, align 4
  %10 = load i8** %res.addr, align 8
  %11 = bitcast i8* %10 to float*
  %arrayidx5 = getelementptr inbounds float* %11, i64 1
  store float %9, float* %arrayidx5, align 4
  ret void
}

define  void @__pgi_ctan(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i18 = alloca i8*, align 8
  %real1.addr.i19 = alloca float, align 4
  %imag1.addr.i20 = alloca float, align 4
  %real2.addr.i = alloca float, align 4
  %imag2.addr.i = alloca float, align 4
  %x.i21 = alloca float, align 4
  %y.i22 = alloca float, align 4
  %r.i = alloca float, align 4
  %d.i = alloca float, align 4
  %r_mag.i = alloca float, align 4
  %i_mag.i = alloca float, align 4
  %res.addr.i6 = alloca i8*, align 8
  %real1.addr.i7 = alloca float, align 4
  %imag1.addr.i8 = alloca float, align 4
  %x.i9 = alloca float, align 4
  %y.i10 = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %x1 = alloca float, align 4
  %y1 = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = bitcast %struct.cmplx2* %tmp to i8*
  %1 = load float* %real1.addr, align 4
  %2 = load float* %imag1.addr, align 4
  store i8* %0, i8** %res.addr.i, align 8
  store float %1, float* %real1.addr.i, align 4
  store float %2, float* %imag1.addr.i, align 4
  %3 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_sinf(float %3) nounwind
  store float %call.i, float* %x.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %call1.i = call  float @__nv_cosf(float %4) nounwind
  store float %call1.i, float* %y.i, align 4
  %5 = load float* %x.i, align 4
  %6 = load float* %imag1.addr.i, align 4
  %call2.i = call  float @__nv_coshf(float %6) nounwind
  %mul.i = fmul float %5, %call2.i
  store float %mul.i, float* %x.i, align 4
  %7 = load float* %y.i, align 4
  %8 = load float* %imag1.addr.i, align 4
  %call3.i = call  float @__nv_sinhf(float %8) nounwind
  %mul4.i = fmul float %7, %call3.i
  store float %mul4.i, float* %y.i, align 4
  %9 = load float* %x.i, align 4
  %10 = load i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to float*
  store float %9, float* %11, align 4
  %12 = load float* %y.i, align 4
  %13 = load i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to float*
  %arrayidx5.i = getelementptr inbounds float* %14, i64 1
  store float %12, float* %arrayidx5.i, align 4
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %15 = load float* %r, align 4
  store float %15, float* %x, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %16 = load float* %i, align 4
  store float %16, float* %y, align 4
  %17 = bitcast %struct.cmplx2* %tmp to i8*
  %18 = load float* %real1.addr, align 4
  %19 = load float* %imag1.addr, align 4
  store i8* %17, i8** %res.addr.i6, align 8
  store float %18, float* %real1.addr.i7, align 4
  store float %19, float* %imag1.addr.i8, align 4
  %20 = load float* %real1.addr.i7, align 4
  %call.i11 = call  float @__nv_cosf(float %20) nounwind
  store float %call.i11, float* %x.i9, align 4
  %21 = load float* %real1.addr.i7, align 4
  %call1.i12 = call  float @__nv_sinf(float %21) nounwind
  store float %call1.i12, float* %y.i10, align 4
  %22 = load float* %x.i9, align 4
  %23 = load float* %imag1.addr.i8, align 4
  %call2.i13 = call  float @__nv_coshf(float %23) nounwind
  %mul.i14 = fmul float %22, %call2.i13
  store float %mul.i14, float* %x.i9, align 4
  %24 = load float* %y.i10, align 4
  %sub.i = fsub float -0.000000e+00, %24
  %25 = load float* %imag1.addr.i8, align 4
  %call3.i15 = call  float @__nv_sinhf(float %25) nounwind
  %mul4.i16 = fmul float %sub.i, %call3.i15
  store float %mul4.i16, float* %y.i10, align 4
  %26 = load float* %x.i9, align 4
  %27 = load i8** %res.addr.i6, align 8
  %28 = bitcast i8* %27 to float*
  store float %26, float* %28, align 4
  %29 = load float* %y.i10, align 4
  %30 = load i8** %res.addr.i6, align 8
  %31 = bitcast i8* %30 to float*
  %arrayidx5.i17 = getelementptr inbounds float* %31, i64 1
  store float %29, float* %arrayidx5.i17, align 4
  %r1 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %32 = load float* %r1, align 4
  store float %32, float* %x1, align 4
  %i2 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %33 = load float* %i2, align 4
  store float %33, float* %y1, align 4
  %34 = bitcast %struct.cmplx2* %tmp to i8*
  %35 = load float* %x, align 4
  %36 = load float* %y, align 4
  %37 = load float* %x1, align 4
  %38 = load float* %y1, align 4
  store i8* %34, i8** %res.addr.i18, align 8
  store float %35, float* %real1.addr.i19, align 4
  store float %36, float* %imag1.addr.i20, align 4
  store float %37, float* %real2.addr.i, align 4
  store float %38, float* %imag2.addr.i, align 4
  %39 = load float* %real2.addr.i, align 4
  store float %39, float* %r_mag.i, align 4
  %40 = load float* %r_mag.i, align 4
  %cmp.i = fcmp olt float %40, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %41 = load float* %r_mag.i, align 4
  %sub.i23 = fsub float -0.000000e+00, %41
  store float %sub.i23, float* %r_mag.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %42 = load float* %imag2.addr.i, align 4
  store float %42, float* %i_mag.i, align 4
  %43 = load float* %i_mag.i, align 4
  %cmp1.i = fcmp olt float %43, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %44 = load float* %i_mag.i, align 4
  %sub3.i = fsub float -0.000000e+00, %44
  store float %sub3.i, float* %i_mag.i, align 4
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %45 = load float* %r_mag.i, align 4
  %46 = load float* %i_mag.i, align 4
  %cmp5.i = fcmp ole float %45, %46
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %47 = load float* %real2.addr.i, align 4
  %48 = load float* %imag2.addr.i, align 4
  %div.i = fdiv float %47, %48
  store float %div.i, float* %r.i, align 4
  %49 = load float* %imag2.addr.i, align 4
  %50 = load float* %r.i, align 4
  %51 = load float* %r.i, align 4
  %mul.i24 = fmul float %50, %51
  %add.i = fadd float 1.000000e+00, %mul.i24
  %mul7.i = fmul float %49, %add.i
  %div8.i = fdiv float 1.000000e+00, %mul7.i
  store float %div8.i, float* %d.i, align 4
  %52 = load float* %real1.addr.i19, align 4
  %53 = load float* %r.i, align 4
  %mul9.i = fmul float %52, %53
  %54 = load float* %imag1.addr.i20, align 4
  %add10.i = fadd float %mul9.i, %54
  %55 = load float* %d.i, align 4
  %mul11.i = fmul float %add10.i, %55
  store float %mul11.i, float* %x.i21, align 4
  %56 = load float* %imag1.addr.i20, align 4
  %57 = load float* %r.i, align 4
  %mul12.i = fmul float %56, %57
  %58 = load float* %real1.addr.i19, align 4
  %sub13.i = fsub float %mul12.i, %58
  %59 = load float* %d.i, align 4
  %mul14.i = fmul float %sub13.i, %59
  store float %mul14.i, float* %y.i22, align 4
  br label %__pgi_cdiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %60 = load float* %imag2.addr.i, align 4
  %61 = load float* %real2.addr.i, align 4
  %div15.i = fdiv float %60, %61
  store float %div15.i, float* %r.i, align 4
  %62 = load float* %real2.addr.i, align 4
  %63 = load float* %r.i, align 4
  %64 = load float* %r.i, align 4
  %mul16.i = fmul float %63, %64
  %add17.i = fadd float 1.000000e+00, %mul16.i
  %mul18.i = fmul float %62, %add17.i
  %div19.i = fdiv float 1.000000e+00, %mul18.i
  store float %div19.i, float* %d.i, align 4
  %65 = load float* %real1.addr.i19, align 4
  %66 = load float* %imag1.addr.i20, align 4
  %67 = load float* %r.i, align 4
  %mul20.i = fmul float %66, %67
  %add21.i = fadd float %65, %mul20.i
  %68 = load float* %d.i, align 4
  %mul22.i = fmul float %add21.i, %68
  store float %mul22.i, float* %x.i21, align 4
  %69 = load float* %imag1.addr.i20, align 4
  %70 = load float* %real1.addr.i19, align 4
  %71 = load float* %r.i, align 4
  %mul23.i = fmul float %70, %71
  %sub24.i = fsub float %69, %mul23.i
  %72 = load float* %d.i, align 4
  %mul25.i = fmul float %sub24.i, %72
  store float %mul25.i, float* %y.i22, align 4
  br label %__pgi_cdiv.exit

__pgi_cdiv.exit:                                  ; preds = %if.else.i, %if.then6.i
  %73 = load float* %x.i21, align 4
  %74 = load i8** %res.addr.i18, align 8
  %75 = bitcast i8* %74 to float*
  store float %73, float* %75, align 4
  %76 = load float* %y.i22, align 4
  %77 = load i8** %res.addr.i18, align 8
  %78 = bitcast i8* %77 to float*
  %arrayidx27.i = getelementptr inbounds float* %78, i64 1
  store float %76, float* %arrayidx27.i, align 4
  %r3 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %79 = load float* %r3, align 4
  store float %79, float* %x, align 4
  %i4 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %80 = load float* %i4, align 4
  store float %80, float* %y, align 4
  %81 = load float* %x, align 4
  %82 = load i8** %res.addr, align 8
  %83 = bitcast i8* %82 to float*
  %arrayidx = getelementptr inbounds float* %83, i64 0
  store float %81, float* %arrayidx, align 4
  %84 = load float* %y, align 4
  %85 = load i8** %res.addr, align 8
  %86 = bitcast i8* %85 to float*
  %arrayidx5 = getelementptr inbounds float* %86, i64 1
  store float %84, float* %arrayidx5, align 4
  ret void
}

define  void @__pgi_ccosh(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i7 = alloca i8*, align 8
  %real1.addr.i8 = alloca float, align 4
  %imag1.addr.i9 = alloca float, align 4
  %x.i10 = alloca float, align 4
  %y.i11 = alloca float, align 4
  %z.i12 = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %z.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = bitcast %struct.cmplx2* %tmp to i8*
  %1 = load float* %real1.addr, align 4
  %2 = load float* %imag1.addr, align 4
  store i8* %0, i8** %res.addr.i, align 8
  store float %1, float* %real1.addr.i, align 4
  store float %2, float* %imag1.addr.i, align 4
  %3 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_expf(float %3) nounwind
  store float %call.i, float* %x.i, align 4
  %4 = load float* %imag1.addr.i, align 4
  call  void @__nv_sincosf(float %4, float* %z.i, float* %y.i) nounwind
  %5 = load float* %x.i, align 4
  %6 = load float* %y.i, align 4
  %mul.i = fmul float %6, %5
  store float %mul.i, float* %y.i, align 4
  %7 = load float* %x.i, align 4
  %8 = load float* %z.i, align 4
  %mul1.i = fmul float %8, %7
  store float %mul1.i, float* %z.i, align 4
  %9 = load float* %y.i, align 4
  %10 = load i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to float*
  store float %9, float* %11, align 4
  %12 = load float* %z.i, align 4
  %13 = load i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to float*
  %arrayidx2.i = getelementptr inbounds float* %14, i64 1
  store float %12, float* %arrayidx2.i, align 4
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %15 = load float* %r, align 4
  store float %15, float* %x, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %16 = load float* %i, align 4
  store float %16, float* %y, align 4
  %17 = bitcast %struct.cmplx2* %tmp to i8*
  %18 = load float* %real1.addr, align 4
  %sub = fsub float -0.000000e+00, %18
  %19 = load float* %imag1.addr, align 4
  %sub1 = fsub float -0.000000e+00, %19
  store i8* %17, i8** %res.addr.i7, align 8
  store float %sub, float* %real1.addr.i8, align 4
  store float %sub1, float* %imag1.addr.i9, align 4
  %20 = load float* %real1.addr.i8, align 4
  %call.i13 = call  float @__nv_expf(float %20) nounwind
  store float %call.i13, float* %x.i10, align 4
  %21 = load float* %imag1.addr.i9, align 4
  call  void @__nv_sincosf(float %21, float* %z.i12, float* %y.i11) nounwind
  %22 = load float* %x.i10, align 4
  %23 = load float* %y.i11, align 4
  %mul.i14 = fmul float %23, %22
  store float %mul.i14, float* %y.i11, align 4
  %24 = load float* %x.i10, align 4
  %25 = load float* %z.i12, align 4
  %mul1.i15 = fmul float %25, %24
  store float %mul1.i15, float* %z.i12, align 4
  %26 = load float* %y.i11, align 4
  %27 = load i8** %res.addr.i7, align 8
  %28 = bitcast i8* %27 to float*
  store float %26, float* %28, align 4
  %29 = load float* %z.i12, align 4
  %30 = load i8** %res.addr.i7, align 8
  %31 = bitcast i8* %30 to float*
  %arrayidx2.i16 = getelementptr inbounds float* %31, i64 1
  store float %29, float* %arrayidx2.i16, align 4
  %r2 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %32 = load float* %r2, align 4
  %33 = load float* %x, align 4
  %add = fadd float %33, %32
  store float %add, float* %x, align 4
  %i3 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %34 = load float* %i3, align 4
  %35 = load float* %y, align 4
  %add4 = fadd float %35, %34
  store float %add4, float* %y, align 4
  %36 = load float* %x, align 4
  %mul = fmul float %36, 5.000000e-01
  store float %mul, float* %x, align 4
  %37 = load float* %y, align 4
  %mul5 = fmul float %37, 5.000000e-01
  store float %mul5, float* %y, align 4
  %38 = load float* %x, align 4
  %39 = load i8** %res.addr, align 8
  %40 = bitcast i8* %39 to float*
  %arrayidx = getelementptr inbounds float* %40, i64 0
  store float %38, float* %arrayidx, align 4
  %41 = load float* %y, align 4
  %42 = load i8** %res.addr, align 8
  %43 = bitcast i8* %42 to float*
  %arrayidx6 = getelementptr inbounds float* %43, i64 1
  store float %41, float* %arrayidx6, align 4
  ret void
}

define  void @__pgi_csinh(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i8 = alloca i8*, align 8
  %real1.addr.i9 = alloca float, align 4
  %imag1.addr.i10 = alloca float, align 4
  %x.i11 = alloca float, align 4
  %y.i12 = alloca float, align 4
  %z.i13 = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %z.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = bitcast %struct.cmplx2* %tmp to i8*
  %1 = load float* %real1.addr, align 4
  %2 = load float* %imag1.addr, align 4
  store i8* %0, i8** %res.addr.i, align 8
  store float %1, float* %real1.addr.i, align 4
  store float %2, float* %imag1.addr.i, align 4
  %3 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_expf(float %3) nounwind
  store float %call.i, float* %x.i, align 4
  %4 = load float* %imag1.addr.i, align 4
  call  void @__nv_sincosf(float %4, float* %z.i, float* %y.i) nounwind
  %5 = load float* %x.i, align 4
  %6 = load float* %y.i, align 4
  %mul.i = fmul float %6, %5
  store float %mul.i, float* %y.i, align 4
  %7 = load float* %x.i, align 4
  %8 = load float* %z.i, align 4
  %mul1.i = fmul float %8, %7
  store float %mul1.i, float* %z.i, align 4
  %9 = load float* %y.i, align 4
  %10 = load i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to float*
  store float %9, float* %11, align 4
  %12 = load float* %z.i, align 4
  %13 = load i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to float*
  %arrayidx2.i = getelementptr inbounds float* %14, i64 1
  store float %12, float* %arrayidx2.i, align 4
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %15 = load float* %r, align 4
  store float %15, float* %x, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %16 = load float* %i, align 4
  store float %16, float* %y, align 4
  %17 = bitcast %struct.cmplx2* %tmp to i8*
  %18 = load float* %real1.addr, align 4
  %sub = fsub float -0.000000e+00, %18
  %19 = load float* %imag1.addr, align 4
  %sub1 = fsub float -0.000000e+00, %19
  store i8* %17, i8** %res.addr.i8, align 8
  store float %sub, float* %real1.addr.i9, align 4
  store float %sub1, float* %imag1.addr.i10, align 4
  %20 = load float* %real1.addr.i9, align 4
  %call.i14 = call  float @__nv_expf(float %20) nounwind
  store float %call.i14, float* %x.i11, align 4
  %21 = load float* %imag1.addr.i10, align 4
  call  void @__nv_sincosf(float %21, float* %z.i13, float* %y.i12) nounwind
  %22 = load float* %x.i11, align 4
  %23 = load float* %y.i12, align 4
  %mul.i15 = fmul float %23, %22
  store float %mul.i15, float* %y.i12, align 4
  %24 = load float* %x.i11, align 4
  %25 = load float* %z.i13, align 4
  %mul1.i16 = fmul float %25, %24
  store float %mul1.i16, float* %z.i13, align 4
  %26 = load float* %y.i12, align 4
  %27 = load i8** %res.addr.i8, align 8
  %28 = bitcast i8* %27 to float*
  store float %26, float* %28, align 4
  %29 = load float* %z.i13, align 4
  %30 = load i8** %res.addr.i8, align 8
  %31 = bitcast i8* %30 to float*
  %arrayidx2.i17 = getelementptr inbounds float* %31, i64 1
  store float %29, float* %arrayidx2.i17, align 4
  %r2 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %32 = load float* %r2, align 4
  %33 = load float* %x, align 4
  %sub3 = fsub float %33, %32
  store float %sub3, float* %x, align 4
  %i4 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %34 = load float* %i4, align 4
  %35 = load float* %y, align 4
  %sub5 = fsub float %35, %34
  store float %sub5, float* %y, align 4
  %36 = load float* %x, align 4
  %mul = fmul float %36, 5.000000e-01
  store float %mul, float* %x, align 4
  %37 = load float* %y, align 4
  %mul6 = fmul float %37, 5.000000e-01
  store float %mul6, float* %y, align 4
  %38 = load float* %x, align 4
  %39 = load i8** %res.addr, align 8
  %40 = bitcast i8* %39 to float*
  %arrayidx = getelementptr inbounds float* %40, i64 0
  store float %38, float* %arrayidx, align 4
  %41 = load float* %y, align 4
  %42 = load i8** %res.addr, align 8
  %43 = bitcast i8* %42 to float*
  %arrayidx7 = getelementptr inbounds float* %43, i64 1
  store float %41, float* %arrayidx7, align 4
  ret void
}

define  void @__pgi_ctanh(i8* %res, float %real1, float %imag1) nounwind alwaysinline {
entry:
  %res.addr.i28 = alloca i8*, align 8
  %real1.addr.i29 = alloca float, align 4
  %imag1.addr.i30 = alloca float, align 4
  %real2.addr.i = alloca float, align 4
  %imag2.addr.i = alloca float, align 4
  %x.i31 = alloca float, align 4
  %y.i32 = alloca float, align 4
  %r.i33 = alloca float, align 4
  %d.i = alloca float, align 4
  %r_mag.i = alloca float, align 4
  %i_mag.i = alloca float, align 4
  %res.addr.i7.i = alloca i8*, align 8
  %real1.addr.i8.i = alloca float, align 4
  %imag1.addr.i9.i = alloca float, align 4
  %x.i10.i = alloca float, align 4
  %y.i11.i = alloca float, align 4
  %z.i12.i = alloca float, align 4
  %res.addr.i.i6 = alloca i8*, align 8
  %real1.addr.i.i7 = alloca float, align 4
  %imag1.addr.i.i8 = alloca float, align 4
  %x.i.i9 = alloca float, align 4
  %y.i.i10 = alloca float, align 4
  %z.i.i11 = alloca float, align 4
  %res.addr.i12 = alloca i8*, align 8
  %real1.addr.i13 = alloca float, align 4
  %imag1.addr.i14 = alloca float, align 4
  %x.i15 = alloca float, align 4
  %y.i16 = alloca float, align 4
  %tmp.i17 = alloca %struct.cmplx2, align 4
  %res.addr.i8.i = alloca i8*, align 8
  %real1.addr.i9.i = alloca float, align 4
  %imag1.addr.i10.i = alloca float, align 4
  %x.i11.i = alloca float, align 4
  %y.i12.i = alloca float, align 4
  %z.i13.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %z.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %x1 = alloca float, align 4
  %y1 = alloca float, align 4
  %tmp = alloca %struct.cmplx2, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  %0 = bitcast %struct.cmplx2* %tmp to i8*
  %1 = load float* %real1.addr, align 4
  %2 = load float* %imag1.addr, align 4
  store i8* %0, i8** %res.addr.i, align 8
  store float %1, float* %real1.addr.i, align 4
  store float %2, float* %imag1.addr.i, align 4
  %3 = bitcast %struct.cmplx2* %tmp.i to i8*
  %4 = load float* %real1.addr.i, align 4
  %5 = load float* %imag1.addr.i, align 4
  store i8* %3, i8** %res.addr.i.i, align 8
  store float %4, float* %real1.addr.i.i, align 4
  store float %5, float* %imag1.addr.i.i, align 4
  %6 = load float* %real1.addr.i.i, align 4
  %call.i.i = call  float @__nv_expf(float %6) nounwind
  store float %call.i.i, float* %x.i.i, align 4
  %7 = load float* %imag1.addr.i.i, align 4
  call  void @__nv_sincosf(float %7, float* %z.i.i, float* %y.i.i) nounwind
  %8 = load float* %x.i.i, align 4
  %9 = load float* %y.i.i, align 4
  %mul.i.i = fmul float %9, %8
  store float %mul.i.i, float* %y.i.i, align 4
  %10 = load float* %x.i.i, align 4
  %11 = load float* %z.i.i, align 4
  %mul1.i.i = fmul float %11, %10
  store float %mul1.i.i, float* %z.i.i, align 4
  %12 = load float* %y.i.i, align 4
  %13 = load i8** %res.addr.i.i, align 8
  %14 = bitcast i8* %13 to float*
  store float %12, float* %14, align 4
  %15 = load float* %z.i.i, align 4
  %16 = load i8** %res.addr.i.i, align 8
  %17 = bitcast i8* %16 to float*
  %arrayidx2.i.i = getelementptr inbounds float* %17, i64 1
  store float %15, float* %arrayidx2.i.i, align 4
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %18 = load float* %r.i, align 4
  store float %18, float* %x.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %19 = load float* %i.i, align 4
  store float %19, float* %y.i, align 4
  %20 = bitcast %struct.cmplx2* %tmp.i to i8*
  %21 = load float* %real1.addr.i, align 4
  %sub.i = fsub float -0.000000e+00, %21
  %22 = load float* %imag1.addr.i, align 4
  %sub1.i = fsub float -0.000000e+00, %22
  store i8* %20, i8** %res.addr.i8.i, align 8
  store float %sub.i, float* %real1.addr.i9.i, align 4
  store float %sub1.i, float* %imag1.addr.i10.i, align 4
  %23 = load float* %real1.addr.i9.i, align 4
  %call.i14.i = call  float @__nv_expf(float %23) nounwind
  store float %call.i14.i, float* %x.i11.i, align 4
  %24 = load float* %imag1.addr.i10.i, align 4
  call  void @__nv_sincosf(float %24, float* %z.i13.i, float* %y.i12.i) nounwind
  %25 = load float* %x.i11.i, align 4
  %26 = load float* %y.i12.i, align 4
  %mul.i15.i = fmul float %26, %25
  store float %mul.i15.i, float* %y.i12.i, align 4
  %27 = load float* %x.i11.i, align 4
  %28 = load float* %z.i13.i, align 4
  %mul1.i16.i = fmul float %28, %27
  store float %mul1.i16.i, float* %z.i13.i, align 4
  %29 = load float* %y.i12.i, align 4
  %30 = load i8** %res.addr.i8.i, align 8
  %31 = bitcast i8* %30 to float*
  store float %29, float* %31, align 4
  %32 = load float* %z.i13.i, align 4
  %33 = load i8** %res.addr.i8.i, align 8
  %34 = bitcast i8* %33 to float*
  %arrayidx2.i17.i = getelementptr inbounds float* %34, i64 1
  store float %32, float* %arrayidx2.i17.i, align 4
  %r2.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %35 = load float* %r2.i, align 4
  %36 = load float* %x.i, align 4
  %sub3.i = fsub float %36, %35
  store float %sub3.i, float* %x.i, align 4
  %i4.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %37 = load float* %i4.i, align 4
  %38 = load float* %y.i, align 4
  %sub5.i = fsub float %38, %37
  store float %sub5.i, float* %y.i, align 4
  %39 = load float* %x.i, align 4
  %mul.i = fmul float %39, 5.000000e-01
  store float %mul.i, float* %x.i, align 4
  %40 = load float* %y.i, align 4
  %mul6.i = fmul float %40, 5.000000e-01
  store float %mul6.i, float* %y.i, align 4
  %41 = load float* %x.i, align 4
  %42 = load i8** %res.addr.i, align 8
  %43 = bitcast i8* %42 to float*
  store float %41, float* %43, align 4
  %44 = load float* %y.i, align 4
  %45 = load i8** %res.addr.i, align 8
  %46 = bitcast i8* %45 to float*
  %arrayidx7.i = getelementptr inbounds float* %46, i64 1
  store float %44, float* %arrayidx7.i, align 4
  %r = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %47 = load float* %r, align 4
  store float %47, float* %x, align 4
  %i = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %48 = load float* %i, align 4
  store float %48, float* %y, align 4
  %49 = bitcast %struct.cmplx2* %tmp to i8*
  %50 = load float* %real1.addr, align 4
  %51 = load float* %imag1.addr, align 4
  store i8* %49, i8** %res.addr.i12, align 8
  store float %50, float* %real1.addr.i13, align 4
  store float %51, float* %imag1.addr.i14, align 4
  %52 = bitcast %struct.cmplx2* %tmp.i17 to i8*
  %53 = load float* %real1.addr.i13, align 4
  %54 = load float* %imag1.addr.i14, align 4
  store i8* %52, i8** %res.addr.i.i6, align 8
  store float %53, float* %real1.addr.i.i7, align 4
  store float %54, float* %imag1.addr.i.i8, align 4
  %55 = load float* %real1.addr.i.i7, align 4
  %call.i.i18 = call  float @__nv_expf(float %55) nounwind
  store float %call.i.i18, float* %x.i.i9, align 4
  %56 = load float* %imag1.addr.i.i8, align 4
  call  void @__nv_sincosf(float %56, float* %z.i.i11, float* %y.i.i10) nounwind
  %57 = load float* %x.i.i9, align 4
  %58 = load float* %y.i.i10, align 4
  %mul.i.i19 = fmul float %58, %57
  store float %mul.i.i19, float* %y.i.i10, align 4
  %59 = load float* %x.i.i9, align 4
  %60 = load float* %z.i.i11, align 4
  %mul1.i.i20 = fmul float %60, %59
  store float %mul1.i.i20, float* %z.i.i11, align 4
  %61 = load float* %y.i.i10, align 4
  %62 = load i8** %res.addr.i.i6, align 8
  %63 = bitcast i8* %62 to float*
  store float %61, float* %63, align 4
  %64 = load float* %z.i.i11, align 4
  %65 = load i8** %res.addr.i.i6, align 8
  %66 = bitcast i8* %65 to float*
  %arrayidx2.i.i21 = getelementptr inbounds float* %66, i64 1
  store float %64, float* %arrayidx2.i.i21, align 4
  %r.i22 = getelementptr inbounds %struct.cmplx2* %tmp.i17, i32 0, i32 0
  %67 = load float* %r.i22, align 4
  store float %67, float* %x.i15, align 4
  %i.i23 = getelementptr inbounds %struct.cmplx2* %tmp.i17, i32 0, i32 1
  %68 = load float* %i.i23, align 4
  store float %68, float* %y.i16, align 4
  %69 = bitcast %struct.cmplx2* %tmp.i17 to i8*
  %70 = load float* %real1.addr.i13, align 4
  %sub.i24 = fsub float -0.000000e+00, %70
  %71 = load float* %imag1.addr.i14, align 4
  %sub1.i25 = fsub float -0.000000e+00, %71
  store i8* %69, i8** %res.addr.i7.i, align 8
  store float %sub.i24, float* %real1.addr.i8.i, align 4
  store float %sub1.i25, float* %imag1.addr.i9.i, align 4
  %72 = load float* %real1.addr.i8.i, align 4
  %call.i13.i = call  float @__nv_expf(float %72) nounwind
  store float %call.i13.i, float* %x.i10.i, align 4
  %73 = load float* %imag1.addr.i9.i, align 4
  call  void @__nv_sincosf(float %73, float* %z.i12.i, float* %y.i11.i) nounwind
  %74 = load float* %x.i10.i, align 4
  %75 = load float* %y.i11.i, align 4
  %mul.i14.i = fmul float %75, %74
  store float %mul.i14.i, float* %y.i11.i, align 4
  %76 = load float* %x.i10.i, align 4
  %77 = load float* %z.i12.i, align 4
  %mul1.i15.i = fmul float %77, %76
  store float %mul1.i15.i, float* %z.i12.i, align 4
  %78 = load float* %y.i11.i, align 4
  %79 = load i8** %res.addr.i7.i, align 8
  %80 = bitcast i8* %79 to float*
  store float %78, float* %80, align 4
  %81 = load float* %z.i12.i, align 4
  %82 = load i8** %res.addr.i7.i, align 8
  %83 = bitcast i8* %82 to float*
  %arrayidx2.i16.i = getelementptr inbounds float* %83, i64 1
  store float %81, float* %arrayidx2.i16.i, align 4
  %r2.i26 = getelementptr inbounds %struct.cmplx2* %tmp.i17, i32 0, i32 0
  %84 = load float* %r2.i26, align 4
  %85 = load float* %x.i15, align 4
  %add.i = fadd float %85, %84
  store float %add.i, float* %x.i15, align 4
  %i3.i = getelementptr inbounds %struct.cmplx2* %tmp.i17, i32 0, i32 1
  %86 = load float* %i3.i, align 4
  %87 = load float* %y.i16, align 4
  %add4.i = fadd float %87, %86
  store float %add4.i, float* %y.i16, align 4
  %88 = load float* %x.i15, align 4
  %mul.i27 = fmul float %88, 5.000000e-01
  store float %mul.i27, float* %x.i15, align 4
  %89 = load float* %y.i16, align 4
  %mul5.i = fmul float %89, 5.000000e-01
  store float %mul5.i, float* %y.i16, align 4
  %90 = load float* %x.i15, align 4
  %91 = load i8** %res.addr.i12, align 8
  %92 = bitcast i8* %91 to float*
  store float %90, float* %92, align 4
  %93 = load float* %y.i16, align 4
  %94 = load i8** %res.addr.i12, align 8
  %95 = bitcast i8* %94 to float*
  %arrayidx6.i = getelementptr inbounds float* %95, i64 1
  store float %93, float* %arrayidx6.i, align 4
  %r1 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %96 = load float* %r1, align 4
  store float %96, float* %x1, align 4
  %i2 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %97 = load float* %i2, align 4
  store float %97, float* %y1, align 4
  %98 = bitcast %struct.cmplx2* %tmp to i8*
  %99 = load float* %x, align 4
  %100 = load float* %y, align 4
  %101 = load float* %x1, align 4
  %102 = load float* %y1, align 4
  store i8* %98, i8** %res.addr.i28, align 8
  store float %99, float* %real1.addr.i29, align 4
  store float %100, float* %imag1.addr.i30, align 4
  store float %101, float* %real2.addr.i, align 4
  store float %102, float* %imag2.addr.i, align 4
  %103 = load float* %real2.addr.i, align 4
  store float %103, float* %r_mag.i, align 4
  %104 = load float* %r_mag.i, align 4
  %cmp.i = fcmp olt float %104, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %105 = load float* %r_mag.i, align 4
  %sub.i34 = fsub float -0.000000e+00, %105
  store float %sub.i34, float* %r_mag.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %106 = load float* %imag2.addr.i, align 4
  store float %106, float* %i_mag.i, align 4
  %107 = load float* %i_mag.i, align 4
  %cmp1.i = fcmp olt float %107, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %108 = load float* %i_mag.i, align 4
  %sub3.i35 = fsub float -0.000000e+00, %108
  store float %sub3.i35, float* %i_mag.i, align 4
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %109 = load float* %r_mag.i, align 4
  %110 = load float* %i_mag.i, align 4
  %cmp5.i = fcmp ole float %109, %110
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %111 = load float* %real2.addr.i, align 4
  %112 = load float* %imag2.addr.i, align 4
  %div.i = fdiv float %111, %112
  store float %div.i, float* %r.i33, align 4
  %113 = load float* %imag2.addr.i, align 4
  %114 = load float* %r.i33, align 4
  %115 = load float* %r.i33, align 4
  %mul.i36 = fmul float %114, %115
  %add.i37 = fadd float 1.000000e+00, %mul.i36
  %mul7.i = fmul float %113, %add.i37
  %div8.i = fdiv float 1.000000e+00, %mul7.i
  store float %div8.i, float* %d.i, align 4
  %116 = load float* %real1.addr.i29, align 4
  %117 = load float* %r.i33, align 4
  %mul9.i = fmul float %116, %117
  %118 = load float* %imag1.addr.i30, align 4
  %add10.i = fadd float %mul9.i, %118
  %119 = load float* %d.i, align 4
  %mul11.i = fmul float %add10.i, %119
  store float %mul11.i, float* %x.i31, align 4
  %120 = load float* %imag1.addr.i30, align 4
  %121 = load float* %r.i33, align 4
  %mul12.i = fmul float %120, %121
  %122 = load float* %real1.addr.i29, align 4
  %sub13.i = fsub float %mul12.i, %122
  %123 = load float* %d.i, align 4
  %mul14.i = fmul float %sub13.i, %123
  store float %mul14.i, float* %y.i32, align 4
  br label %__pgi_cdiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %124 = load float* %imag2.addr.i, align 4
  %125 = load float* %real2.addr.i, align 4
  %div15.i = fdiv float %124, %125
  store float %div15.i, float* %r.i33, align 4
  %126 = load float* %real2.addr.i, align 4
  %127 = load float* %r.i33, align 4
  %128 = load float* %r.i33, align 4
  %mul16.i = fmul float %127, %128
  %add17.i = fadd float 1.000000e+00, %mul16.i
  %mul18.i = fmul float %126, %add17.i
  %div19.i = fdiv float 1.000000e+00, %mul18.i
  store float %div19.i, float* %d.i, align 4
  %129 = load float* %real1.addr.i29, align 4
  %130 = load float* %imag1.addr.i30, align 4
  %131 = load float* %r.i33, align 4
  %mul20.i = fmul float %130, %131
  %add21.i = fadd float %129, %mul20.i
  %132 = load float* %d.i, align 4
  %mul22.i = fmul float %add21.i, %132
  store float %mul22.i, float* %x.i31, align 4
  %133 = load float* %imag1.addr.i30, align 4
  %134 = load float* %real1.addr.i29, align 4
  %135 = load float* %r.i33, align 4
  %mul23.i = fmul float %134, %135
  %sub24.i = fsub float %133, %mul23.i
  %136 = load float* %d.i, align 4
  %mul25.i = fmul float %sub24.i, %136
  store float %mul25.i, float* %y.i32, align 4
  br label %__pgi_cdiv.exit

__pgi_cdiv.exit:                                  ; preds = %if.else.i, %if.then6.i
  %137 = load float* %x.i31, align 4
  %138 = load i8** %res.addr.i28, align 8
  %139 = bitcast i8* %138 to float*
  store float %137, float* %139, align 4
  %140 = load float* %y.i32, align 4
  %141 = load i8** %res.addr.i28, align 8
  %142 = bitcast i8* %141 to float*
  %arrayidx27.i = getelementptr inbounds float* %142, i64 1
  store float %140, float* %arrayidx27.i, align 4
  %r3 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 0
  %143 = load float* %r3, align 4
  store float %143, float* %x, align 4
  %i4 = getelementptr inbounds %struct.cmplx2* %tmp, i32 0, i32 1
  %144 = load float* %i4, align 4
  store float %144, float* %y, align 4
  %145 = load float* %x, align 4
  %146 = load i8** %res.addr, align 8
  %147 = bitcast i8* %146 to float*
  %arrayidx = getelementptr inbounds float* %147, i64 0
  store float %145, float* %arrayidx, align 4
  %148 = load float* %y, align 4
  %149 = load i8** %res.addr, align 8
  %150 = bitcast i8* %149 to float*
  %arrayidx5 = getelementptr inbounds float* %150, i64 1
  store float %148, float* %arrayidx5, align 4
  ret void
}

define  void @__pgi_cpowi(i8* %res, float %real, float %imag, i32 %i) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %real2.addr.i = alloca float, align 4
  %imag2.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %r.i = alloca float, align 4
  %d.i = alloca float, align 4
  %r_mag.i = alloca float, align 4
  %i_mag.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real.addr = alloca float, align 4
  %imag.addr = alloca float, align 4
  %i.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %fr = alloca float, align 4
  %fi = alloca float, align 4
  %gr = alloca float, align 4
  %gi = alloca float, align 4
  %tr = alloca float, align 4
  %ti = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real, float* %real.addr, align 4
  store float %imag, float* %imag.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store float 1.000000e+00, float* %fr, align 4
  store float 0.000000e+00, float* %fi, align 4
  %0 = load float* %real.addr, align 4
  store float %0, float* %gr, align 4
  %1 = load float* %imag.addr, align 4
  store float %1, float* %gi, align 4
  %2 = load i32* %i.addr, align 4
  store i32 %2, i32* %k, align 4
  %3 = load i32* %i.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32* %i.addr, align 4
  %sub = sub nsw i32 0, %4
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load i32* %k, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32* %k, align 4
  %and = and i32 %6, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %while.body
  %7 = load float* %fr, align 4
  %8 = load float* %gr, align 4
  %mul = fmul float %7, %8
  %9 = load float* %fi, align 4
  %10 = load float* %gi, align 4
  %mul3 = fmul float %9, %10
  %sub4 = fsub float %mul, %mul3
  store float %sub4, float* %tr, align 4
  %11 = load float* %fr, align 4
  %12 = load float* %gi, align 4
  %mul5 = fmul float %11, %12
  %13 = load float* %fi, align 4
  %14 = load float* %gr, align 4
  %mul6 = fmul float %13, %14
  %add = fadd float %mul5, %mul6
  store float %add, float* %ti, align 4
  %15 = load float* %tr, align 4
  store float %15, float* %fr, align 4
  %16 = load float* %ti, align 4
  store float %16, float* %fi, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %while.body
  %17 = load i32* %k, align 4
  %shr = lshr i32 %17, 1
  store i32 %shr, i32* %k, align 4
  %18 = load float* %gr, align 4
  %19 = load float* %gr, align 4
  %mul8 = fmul float %18, %19
  %20 = load float* %gi, align 4
  %21 = load float* %gi, align 4
  %mul9 = fmul float %20, %21
  %sub10 = fsub float %mul8, %mul9
  store float %sub10, float* %tr, align 4
  %22 = load float* %gr, align 4
  %mul11 = fmul float 2.000000e+00, %22
  %23 = load float* %gi, align 4
  %mul12 = fmul float %mul11, %23
  store float %mul12, float* %ti, align 4
  %24 = load float* %tr, align 4
  store float %24, float* %gr, align 4
  %25 = load float* %ti, align 4
  store float %25, float* %gi, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load i32* %i.addr, align 4
  %cmp13 = icmp slt i32 %26, 0
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.end
  %27 = load i8** %res.addr, align 8
  %28 = load float* %fr, align 4
  %29 = load float* %fi, align 4
  store i8* %27, i8** %res.addr.i, align 8
  store float 1.000000e+00, float* %real1.addr.i, align 4
  store float 0.000000e+00, float* %imag1.addr.i, align 4
  store float %28, float* %real2.addr.i, align 4
  store float %29, float* %imag2.addr.i, align 4
  %30 = load float* %real2.addr.i, align 4
  store float %30, float* %r_mag.i, align 4
  %31 = load float* %r_mag.i, align 4
  %cmp.i = fcmp olt float %31, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then14
  %32 = load float* %r_mag.i, align 4
  %sub.i = fsub float -0.000000e+00, %32
  store float %sub.i, float* %r_mag.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then14
  %33 = load float* %imag2.addr.i, align 4
  store float %33, float* %i_mag.i, align 4
  %34 = load float* %i_mag.i, align 4
  %cmp1.i = fcmp olt float %34, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %35 = load float* %i_mag.i, align 4
  %sub3.i = fsub float -0.000000e+00, %35
  store float %sub3.i, float* %i_mag.i, align 4
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %36 = load float* %r_mag.i, align 4
  %37 = load float* %i_mag.i, align 4
  %cmp5.i = fcmp ole float %36, %37
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %38 = load float* %real2.addr.i, align 4
  %39 = load float* %imag2.addr.i, align 4
  %div.i = fdiv float %38, %39
  store float %div.i, float* %r.i, align 4
  %40 = load float* %imag2.addr.i, align 4
  %41 = load float* %r.i, align 4
  %42 = load float* %r.i, align 4
  %mul.i = fmul float %41, %42
  %add.i = fadd float 1.000000e+00, %mul.i
  %mul7.i = fmul float %40, %add.i
  %div8.i = fdiv float 1.000000e+00, %mul7.i
  store float %div8.i, float* %d.i, align 4
  %43 = load float* %real1.addr.i, align 4
  %44 = load float* %r.i, align 4
  %mul9.i = fmul float %43, %44
  %45 = load float* %imag1.addr.i, align 4
  %add10.i = fadd float %mul9.i, %45
  %46 = load float* %d.i, align 4
  %mul11.i = fmul float %add10.i, %46
  store float %mul11.i, float* %x.i, align 4
  %47 = load float* %imag1.addr.i, align 4
  %48 = load float* %r.i, align 4
  %mul12.i = fmul float %47, %48
  %49 = load float* %real1.addr.i, align 4
  %sub13.i = fsub float %mul12.i, %49
  %50 = load float* %d.i, align 4
  %mul14.i = fmul float %sub13.i, %50
  store float %mul14.i, float* %y.i, align 4
  br label %__pgi_cdiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %51 = load float* %imag2.addr.i, align 4
  %52 = load float* %real2.addr.i, align 4
  %div15.i = fdiv float %51, %52
  store float %div15.i, float* %r.i, align 4
  %53 = load float* %real2.addr.i, align 4
  %54 = load float* %r.i, align 4
  %55 = load float* %r.i, align 4
  %mul16.i = fmul float %54, %55
  %add17.i = fadd float 1.000000e+00, %mul16.i
  %mul18.i = fmul float %53, %add17.i
  %div19.i = fdiv float 1.000000e+00, %mul18.i
  store float %div19.i, float* %d.i, align 4
  %56 = load float* %real1.addr.i, align 4
  %57 = load float* %imag1.addr.i, align 4
  %58 = load float* %r.i, align 4
  %mul20.i = fmul float %57, %58
  %add21.i = fadd float %56, %mul20.i
  %59 = load float* %d.i, align 4
  %mul22.i = fmul float %add21.i, %59
  store float %mul22.i, float* %x.i, align 4
  %60 = load float* %imag1.addr.i, align 4
  %61 = load float* %real1.addr.i, align 4
  %62 = load float* %r.i, align 4
  %mul23.i = fmul float %61, %62
  %sub24.i = fsub float %60, %mul23.i
  %63 = load float* %d.i, align 4
  %mul25.i = fmul float %sub24.i, %63
  store float %mul25.i, float* %y.i, align 4
  br label %__pgi_cdiv.exit

__pgi_cdiv.exit:                                  ; preds = %if.else.i, %if.then6.i
  %64 = load float* %x.i, align 4
  %65 = load i8** %res.addr.i, align 8
  %66 = bitcast i8* %65 to float*
  store float %64, float* %66, align 4
  %67 = load float* %y.i, align 4
  %68 = load i8** %res.addr.i, align 8
  %69 = bitcast i8* %68 to float*
  %arrayidx27.i = getelementptr inbounds float* %69, i64 1
  store float %67, float* %arrayidx27.i, align 4
  br label %if.end16

if.else:                                          ; preds = %while.end
  %70 = load float* %fr, align 4
  %71 = load i8** %res.addr, align 8
  %72 = bitcast i8* %71 to float*
  %arrayidx = getelementptr inbounds float* %72, i64 0
  store float %70, float* %arrayidx, align 4
  %73 = load float* %fi, align 4
  %74 = load i8** %res.addr, align 8
  %75 = bitcast i8* %74 to float*
  %arrayidx15 = getelementptr inbounds float* %75, i64 1
  store float %73, float* %arrayidx15, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.else, %__pgi_cdiv.exit
  ret void
}

define  void @__pgi_cpowk(i8* %res, float %real, float %imag, i64 %i) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %real2.addr.i = alloca float, align 4
  %imag2.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %r.i = alloca float, align 4
  %d.i = alloca float, align 4
  %r_mag.i = alloca float, align 4
  %i_mag.i = alloca float, align 4
  %res.addr = alloca i8*, align 8
  %real.addr = alloca float, align 4
  %imag.addr = alloca float, align 4
  %i.addr = alloca i64, align 8
  %k = alloca i64, align 8
  %fr = alloca float, align 4
  %fi = alloca float, align 4
  %gr = alloca float, align 4
  %gi = alloca float, align 4
  %tr = alloca float, align 4
  %ti = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real, float* %real.addr, align 4
  store float %imag, float* %imag.addr, align 4
  store i64 %i, i64* %i.addr, align 8
  store float 1.000000e+00, float* %fr, align 4
  store float 0.000000e+00, float* %fi, align 4
  %0 = load float* %real.addr, align 4
  store float %0, float* %gr, align 4
  %1 = load float* %imag.addr, align 4
  store float %1, float* %gi, align 4
  %2 = load i64* %i.addr, align 8
  store i64 %2, i64* %k, align 8
  %3 = load i64* %i.addr, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64* %i.addr, align 8
  %sub = sub nsw i64 0, %4
  store i64 %sub, i64* %k, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end7, %if.end
  %5 = load i64* %k, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64* %k, align 8
  %and = and i64 %6, 1
  %tobool1 = icmp ne i64 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %while.body
  %7 = load float* %fr, align 4
  %8 = load float* %gr, align 4
  %mul = fmul float %7, %8
  %9 = load float* %fi, align 4
  %10 = load float* %gi, align 4
  %mul3 = fmul float %9, %10
  %sub4 = fsub float %mul, %mul3
  store float %sub4, float* %tr, align 4
  %11 = load float* %fr, align 4
  %12 = load float* %gi, align 4
  %mul5 = fmul float %11, %12
  %13 = load float* %fi, align 4
  %14 = load float* %gr, align 4
  %mul6 = fmul float %13, %14
  %add = fadd float %mul5, %mul6
  store float %add, float* %ti, align 4
  %15 = load float* %tr, align 4
  store float %15, float* %fr, align 4
  %16 = load float* %ti, align 4
  store float %16, float* %fi, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %while.body
  %17 = load i64* %k, align 8
  %shr = lshr i64 %17, 1
  store i64 %shr, i64* %k, align 8
  %18 = load float* %gr, align 4
  %19 = load float* %gr, align 4
  %mul8 = fmul float %18, %19
  %20 = load float* %gi, align 4
  %21 = load float* %gi, align 4
  %mul9 = fmul float %20, %21
  %sub10 = fsub float %mul8, %mul9
  store float %sub10, float* %tr, align 4
  %22 = load float* %gr, align 4
  %mul11 = fmul float 2.000000e+00, %22
  %23 = load float* %gi, align 4
  %mul12 = fmul float %mul11, %23
  store float %mul12, float* %ti, align 4
  %24 = load float* %tr, align 4
  store float %24, float* %gr, align 4
  %25 = load float* %ti, align 4
  store float %25, float* %gi, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load i64* %i.addr, align 8
  %cmp13 = icmp slt i64 %26, 0
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %while.end
  %27 = load i8** %res.addr, align 8
  %28 = load float* %fr, align 4
  %29 = load float* %fi, align 4
  store i8* %27, i8** %res.addr.i, align 8
  store float 1.000000e+00, float* %real1.addr.i, align 4
  store float 0.000000e+00, float* %imag1.addr.i, align 4
  store float %28, float* %real2.addr.i, align 4
  store float %29, float* %imag2.addr.i, align 4
  %30 = load float* %real2.addr.i, align 4
  store float %30, float* %r_mag.i, align 4
  %31 = load float* %r_mag.i, align 4
  %cmp.i = fcmp olt float %31, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then14
  %32 = load float* %r_mag.i, align 4
  %sub.i = fsub float -0.000000e+00, %32
  store float %sub.i, float* %r_mag.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then14
  %33 = load float* %imag2.addr.i, align 4
  store float %33, float* %i_mag.i, align 4
  %34 = load float* %i_mag.i, align 4
  %cmp1.i = fcmp olt float %34, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %35 = load float* %i_mag.i, align 4
  %sub3.i = fsub float -0.000000e+00, %35
  store float %sub3.i, float* %i_mag.i, align 4
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %36 = load float* %r_mag.i, align 4
  %37 = load float* %i_mag.i, align 4
  %cmp5.i = fcmp ole float %36, %37
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %38 = load float* %real2.addr.i, align 4
  %39 = load float* %imag2.addr.i, align 4
  %div.i = fdiv float %38, %39
  store float %div.i, float* %r.i, align 4
  %40 = load float* %imag2.addr.i, align 4
  %41 = load float* %r.i, align 4
  %42 = load float* %r.i, align 4
  %mul.i = fmul float %41, %42
  %add.i = fadd float 1.000000e+00, %mul.i
  %mul7.i = fmul float %40, %add.i
  %div8.i = fdiv float 1.000000e+00, %mul7.i
  store float %div8.i, float* %d.i, align 4
  %43 = load float* %real1.addr.i, align 4
  %44 = load float* %r.i, align 4
  %mul9.i = fmul float %43, %44
  %45 = load float* %imag1.addr.i, align 4
  %add10.i = fadd float %mul9.i, %45
  %46 = load float* %d.i, align 4
  %mul11.i = fmul float %add10.i, %46
  store float %mul11.i, float* %x.i, align 4
  %47 = load float* %imag1.addr.i, align 4
  %48 = load float* %r.i, align 4
  %mul12.i = fmul float %47, %48
  %49 = load float* %real1.addr.i, align 4
  %sub13.i = fsub float %mul12.i, %49
  %50 = load float* %d.i, align 4
  %mul14.i = fmul float %sub13.i, %50
  store float %mul14.i, float* %y.i, align 4
  br label %__pgi_cdiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %51 = load float* %imag2.addr.i, align 4
  %52 = load float* %real2.addr.i, align 4
  %div15.i = fdiv float %51, %52
  store float %div15.i, float* %r.i, align 4
  %53 = load float* %real2.addr.i, align 4
  %54 = load float* %r.i, align 4
  %55 = load float* %r.i, align 4
  %mul16.i = fmul float %54, %55
  %add17.i = fadd float 1.000000e+00, %mul16.i
  %mul18.i = fmul float %53, %add17.i
  %div19.i = fdiv float 1.000000e+00, %mul18.i
  store float %div19.i, float* %d.i, align 4
  %56 = load float* %real1.addr.i, align 4
  %57 = load float* %imag1.addr.i, align 4
  %58 = load float* %r.i, align 4
  %mul20.i = fmul float %57, %58
  %add21.i = fadd float %56, %mul20.i
  %59 = load float* %d.i, align 4
  %mul22.i = fmul float %add21.i, %59
  store float %mul22.i, float* %x.i, align 4
  %60 = load float* %imag1.addr.i, align 4
  %61 = load float* %real1.addr.i, align 4
  %62 = load float* %r.i, align 4
  %mul23.i = fmul float %61, %62
  %sub24.i = fsub float %60, %mul23.i
  %63 = load float* %d.i, align 4
  %mul25.i = fmul float %sub24.i, %63
  store float %mul25.i, float* %y.i, align 4
  br label %__pgi_cdiv.exit

__pgi_cdiv.exit:                                  ; preds = %if.else.i, %if.then6.i
  %64 = load float* %x.i, align 4
  %65 = load i8** %res.addr.i, align 8
  %66 = bitcast i8* %65 to float*
  store float %64, float* %66, align 4
  %67 = load float* %y.i, align 4
  %68 = load i8** %res.addr.i, align 8
  %69 = bitcast i8* %68 to float*
  %arrayidx27.i = getelementptr inbounds float* %69, i64 1
  store float %67, float* %arrayidx27.i, align 4
  br label %if.end16

if.else:                                          ; preds = %while.end
  %70 = load float* %fr, align 4
  %71 = load i8** %res.addr, align 8
  %72 = bitcast i8* %71 to float*
  %arrayidx = getelementptr inbounds float* %72, i64 0
  store float %70, float* %arrayidx, align 4
  %73 = load float* %fi, align 4
  %74 = load i8** %res.addr, align 8
  %75 = bitcast i8* %74 to float*
  %arrayidx15 = getelementptr inbounds float* %75, i64 1
  store float %73, float* %arrayidx15, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.else, %__pgi_cdiv.exit
  ret void
}

define  void @__pgi_cpowc(i8* %res, float %real1, float %imag1, float %real2, float %imag2) nounwind alwaysinline {
entry:
  %res.addr = alloca i8*, align 8
  %real1.addr = alloca float, align 4
  %imag1.addr = alloca float, align 4
  %real2.addr = alloca float, align 4
  %imag2.addr = alloca float, align 4
  %logr = alloca float, align 4
  %logi = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %w = alloca float, align 4
  store i8* %res, i8** %res.addr, align 8
  store float %real1, float* %real1.addr, align 4
  store float %imag1, float* %imag1.addr, align 4
  store float %real2, float* %real2.addr, align 4
  store float %imag2, float* %imag2.addr, align 4
  %0 = load float* %real1.addr, align 4
  %1 = load float* %imag1.addr, align 4
  %call = call  float @__nv_hypotf(float %0, float %1)
  %call1 = call  float @__nv_logf(float %call)
  store float %call1, float* %logr, align 4
  %2 = load float* %imag1.addr, align 4
  %3 = load float* %real1.addr, align 4
  %call2 = call  float @__nv_atan2f(float %2, float %3)
  store float %call2, float* %logi, align 4
  %4 = load float* %logr, align 4
  %5 = load float* %real2.addr, align 4
  %mul = fmul float %4, %5
  %6 = load float* %logi, align 4
  %7 = load float* %imag2.addr, align 4
  %mul3 = fmul float %6, %7
  %sub = fsub float %mul, %mul3
  %call4 = call  float @__nv_expf(float %sub)
  store float %call4, float* %x, align 4
  %8 = load float* %logr, align 4
  %9 = load float* %imag2.addr, align 4
  %mul5 = fmul float %8, %9
  %10 = load float* %logi, align 4
  %11 = load float* %real2.addr, align 4
  %mul6 = fmul float %10, %11
  %add = fadd float %mul5, %mul6
  store float %add, float* %y, align 4
  %12 = load float* %x, align 4
  %13 = load float* %y, align 4
  %call7 = call  float @__nv_cosf(float %13)
  %mul8 = fmul float %12, %call7
  store float %mul8, float* %z, align 4
  %14 = load float* %x, align 4
  %15 = load float* %y, align 4
  %call9 = call  float @__nv_sinf(float %15)
  %mul10 = fmul float %14, %call9
  store float %mul10, float* %w, align 4
  %16 = load float* %z, align 4
  %17 = load i8** %res.addr, align 8
  %18 = bitcast i8* %17 to float*
  %arrayidx = getelementptr inbounds float* %18, i64 0
  store float %16, float* %arrayidx, align 4
  %19 = load float* %w, align 4
  %20 = load i8** %res.addr, align 8
  %21 = bitcast i8* %20 to float*
  %arrayidx11 = getelementptr inbounds float* %21, i64 1
  store float %19, float* %arrayidx11, align 4
  ret void
}

define  i32 @__pgi_ipowi(i32 %i, i32 %x) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %f = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  %1 = load i32* %i.addr, align 4
  %cmp1 = icmp sge i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load i32* %i.addr, align 4
  %shl = shl i32 1, %2
  store i32 %shl, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end3:                                          ; preds = %entry
  %3 = load i32* %i.addr, align 4
  %cmp4 = icmp slt i32 %3, 0
  br i1 %cmp4, label %if.then5, label %if.end12

if.then5:                                         ; preds = %if.end3
  %4 = load i32* %x.addr, align 4
  %cmp6 = icmp eq i32 %4, 1
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then5
  %5 = load i32* %x.addr, align 4
  %cmp7 = icmp eq i32 %5, -1
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %lor.lhs.false, %if.then5
  %6 = load i32* %i.addr, align 4
  %and = and i32 %6, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then8
  %7 = load i32* %x.addr, align 4
  store i32 %7, i32* %retval
  br label %return

if.end10:                                         ; preds = %if.then8
  store i32 1, i32* %retval
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

if.end12:                                         ; preds = %if.end3
  %8 = load i32* %i.addr, align 4
  %and13 = and i32 %8, 1
  store i32 %and13, i32* %j, align 4
  %9 = load i32* %j, align 4
  %10 = load i32* %x.addr, align 4
  %mul = mul nsw i32 %9, %10
  %11 = load i32* %j, align 4
  %sub = sub nsw i32 1, %11
  %add = add nsw i32 %mul, %sub
  store i32 %add, i32* %f, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end12
  %12 = load i32* %i.addr, align 4
  %shr = ashr i32 %12, 1
  store i32 %shr, i32* %i.addr, align 4
  %tobool14 = icmp ne i32 %shr, 0
  br i1 %tobool14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i32* %x.addr, align 4
  %14 = load i32* %x.addr, align 4
  %mul15 = mul nsw i32 %14, %13
  store i32 %mul15, i32* %x.addr, align 4
  %15 = load i32* %i.addr, align 4
  %and16 = and i32 %15, 1
  store i32 %and16, i32* %j, align 4
  %16 = load i32* %j, align 4
  %17 = load i32* %x.addr, align 4
  %mul17 = mul nsw i32 %16, %17
  %18 = load i32* %j, align 4
  %sub18 = sub nsw i32 1, %18
  %add19 = add nsw i32 %mul17, %sub18
  %19 = load i32* %f, align 4
  %mul20 = mul nsw i32 %19, %add19
  store i32 %mul20, i32* %f, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %20 = load i32* %f, align 4
  store i32 %20, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end11, %if.end10, %if.then9, %if.end, %if.then2
  %21 = load i32* %retval
  ret i32 %21
}

define  float @__pgi_wrap_bessel_jnf(i32 %n, float %x) nounwind alwaysinline {
entry:
  %retval = alloca float, align 4
  %n.addr = alloca i32, align 4
  %x.addr = alloca float, align 4
  %nn = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store float %x, float* %x.addr, align 4
  %0 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else5

if.then:                                          ; preds = %entry
  %1 = load i32* %n.addr, align 4
  %sub = sub nsw i32 0, %1
  store i32 %sub, i32* %nn, align 4
  %2 = load i32* %nn, align 4
  %div = sdiv i32 %2, 2
  %mul = mul nsw i32 %div, 2
  %3 = load i32* %nn, align 4
  %cmp1 = icmp eq i32 %mul, %3
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %4 = load i32* %nn, align 4
  %5 = load float* %x.addr, align 4
  %call = call  float @__nv_jnf(i32 %4, float %5)
  store float %call, float* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %6 = load i32* %nn, align 4
  %7 = load float* %x.addr, align 4
  %call3 = call  float @__nv_jnf(i32 %6, float %7)
  %sub4 = fsub float -0.000000e+00, %call3
  store float %sub4, float* %retval
  br label %return

if.else5:                                         ; preds = %entry
  %8 = load i32* %n.addr, align 4
  %9 = load float* %x.addr, align 4
  %call6 = call  float @__nv_jnf(i32 %8, float %9)
  store float %call6, float* %retval
  br label %return

return:                                           ; preds = %if.else5, %if.else, %if.then2
  %10 = load float* %retval
  ret float %10
}

declare  float @__nv_jnf(i32, float)

define  float @__pgi_acosd(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call  float @__nv_acosf(float %0)
  %mul = fmul float %call, 0x404CA5DC20000000
  ret float %mul
}

declare  float @__nv_acosf(float)

define  float @__pgi_asind(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call  float @__nv_asinf(float %0)
  %mul = fmul float %call, 0x404CA5DC20000000
  ret float %mul
}

declare  float @__nv_asinf(float)

define  float @__pgi_atan2d(float %x, float %y) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call  float @__nv_atan2f(float %0, float %1)
  %mul = fmul float %call, 0x404CA5DC20000000
  ret float %mul
}

define  float @__pgi_atand(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call  float @__nv_atanf(float %0)
  %mul = fmul float %call, 0x404CA5DC20000000
  ret float %mul
}

declare  float @__nv_atanf(float)

define  float @__pgi_cosd(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %mul = fmul float %0, 0x3F91DF46A0000000
  %call = call  float @__nv_cosf(float %mul)
  ret float %call
}

define  float @__pgi_sind(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %mul = fmul float %0, 0x3F91DF46A0000000
  %call = call  float @__nv_sinf(float %mul)
  ret float %call
}

define  float @__pgi_tand(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %mul = fmul float %0, 0x3F91DF46A0000000
  %call = call  float @__nv_tanf(float %mul)
  ret float %call
}

declare  float @__nv_tanf(float)

define  double @__pgi_dacosd(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call  double @__nv_acos(double %0)
  %mul = fmul double %call, 0x404CA5DC1A63C1F8
  ret double %mul
}

declare  double @__nv_acos(double)

define  double @__pgi_dasind(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call  double @__nv_asin(double %0)
  %mul = fmul double %call, 0x404CA5DC1A63C1F8
  ret double %mul
}

declare  double @__nv_asin(double)

define  double @__pgi_datan2d(double %x, double %y) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call  double @__nv_atan2(double %0, double %1)
  %mul = fmul double %call, 0x404CA5DC1A63C1F8
  ret double %mul
}

define  double @__pgi_datand(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call  double @__nv_atan(double %0)
  %mul = fmul double %call, 0x404CA5DC1A63C1F8
  ret double %mul
}

declare  double @__nv_atan(double)

define  double @__pgi_dcosd(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %mul = fmul double %0, 0x3F91DF46A2529D39
  %call = call  double @__nv_cos(double %mul)
  ret double %call
}

define  double @__pgi_dsind(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %mul = fmul double %0, 0x3F91DF46A2529D39
  %call = call  double @__nv_sin(double %mul)
  ret double %call
}

define  double @__pgi_dtand(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %mul = fmul double %0, 0x3F91DF46A2529D39
  %call = call  double @__nv_tan(double %mul)
  ret double %call
}

declare  double @__nv_tan(double)

define  i32 @__pgi_idim(i32 %x, i32 %y) nounwind alwaysinline {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %y.addr, align 4
  %sub = sub nsw i32 %0, %1
  store i32 %sub, i32* %x.addr, align 4
  %2 = load i32* %x.addr, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %x.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32* %x.addr, align 4
  ret i32 %3
}

define  i64 @__pgi_kdim(i64 %x, i64 %y) nounwind alwaysinline {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  %0 = load i64* %x.addr, align 8
  %1 = load i64* %y.addr, align 8
  %sub = sub nsw i64 %0, %1
  store i64 %sub, i64* %x.addr, align 8
  %2 = load i64* %x.addr, align 8
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64* %x.addr, align 8
  ret i64 %3
}

define  float @__pgi_fdim(float %x, float %y) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %sub = fsub float %0, %1
  store float %sub, float* %x.addr, align 4
  %2 = load float* %x.addr, align 4
  %cmp = fcmp olt float %2, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store float 0.000000e+00, float* %x.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load float* %x.addr, align 4
  ret float %3
}

define  double @__pgi_ddim(double %x, double %y) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x.addr, align 8
  %2 = load double* %x.addr, align 8
  %cmp = fcmp olt double %2, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load double* %x.addr, align 8
  ret double %3
}

define  i32 @__pgi_iffloorx(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %i = alloca i32, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %conv = fptosi float %0 to i32
  store i32 %conv, i32* %i, align 4
  %1 = load float* %x.addr, align 4
  %cmp = fcmp olt float %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32* %i, align 4
  %conv2 = sitofp i32 %2 to float
  %3 = load float* %x.addr, align 4
  %cmp3 = fcmp une float %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  store i32 %sub, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32* %i, align 4
  ret i32 %5
}

define  i32 @__pgi_idfloorx(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %conv = fptosi double %0 to i32
  store i32 %conv, i32* %i, align 4
  %1 = load double* %x.addr, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32* %i, align 4
  %conv2 = sitofp i32 %2 to double
  %3 = load double* %x.addr, align 8
  %cmp3 = fcmp une double %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  store i32 %sub, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32* %i, align 4
  ret i32 %5
}

define  i64 @__pgi_kffloorx(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %i = alloca i64, align 8
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %conv = fptosi float %0 to i64
  store i64 %conv, i64* %i, align 8
  %1 = load float* %x.addr, align 4
  %cmp = fcmp olt float %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64* %i, align 8
  %conv2 = sitofp i64 %2 to float
  %3 = load float* %x.addr, align 4
  %cmp3 = fcmp une float %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64* %i, align 8
  %sub = sub nsw i64 %4, 1
  store i64 %sub, i64* %i, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i64* %i, align 8
  ret i64 %5
}

define  i64 @__pgi_kdfloorx(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %i = alloca i64, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %conv = fptosi double %0 to i64
  store i64 %conv, i64* %i, align 8
  %1 = load double* %x.addr, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64* %i, align 8
  %conv2 = sitofp i64 %2 to double
  %3 = load double* %x.addr, align 8
  %cmp3 = fcmp une double %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64* %i, align 8
  %sub = sub nsw i64 %4, 1
  store i64 %sub, i64* %i, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i64* %i, align 8
  ret i64 %5
}

define  i32 @__pgi_ifceilingx(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %i = alloca i32, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %conv = fptosi float %0 to i32
  store i32 %conv, i32* %i, align 4
  %1 = load float* %x.addr, align 4
  %cmp = fcmp ogt float %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32* %i, align 4
  %conv2 = sitofp i32 %2 to float
  %3 = load float* %x.addr, align 4
  %cmp3 = fcmp une float %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32* %i, align 4
  ret i32 %5
}

define  i32 @__pgi_idceilingx(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %conv = fptosi double %0 to i32
  store i32 %conv, i32* %i, align 4
  %1 = load double* %x.addr, align 8
  %cmp = fcmp ogt double %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32* %i, align 4
  %conv2 = sitofp i32 %2 to double
  %3 = load double* %x.addr, align 8
  %cmp3 = fcmp une double %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32* %i, align 4
  ret i32 %5
}

define  i64 @__pgi_kfceilingx(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %i = alloca i64, align 8
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %conv = fptosi float %0 to i64
  store i64 %conv, i64* %i, align 8
  %1 = load float* %x.addr, align 4
  %cmp = fcmp ogt float %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64* %i, align 8
  %conv2 = sitofp i64 %2 to float
  %3 = load float* %x.addr, align 4
  %cmp3 = fcmp une float %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64* %i, align 8
  %add = add nsw i64 %4, 1
  store i64 %add, i64* %i, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i64* %i, align 8
  ret i64 %5
}

define  i64 @__pgi_kdceilingx(double %x) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %i = alloca i64, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %conv = fptosi double %0 to i64
  store i64 %conv, i64* %i, align 8
  %1 = load double* %x.addr, align 8
  %cmp = fcmp ogt double %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64* %i, align 8
  %conv2 = sitofp i64 %2 to double
  %3 = load double* %x.addr, align 8
  %cmp3 = fcmp une double %conv2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64* %i, align 8
  %add = add nsw i64 %4, 1
  store i64 %add, i64* %i, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i64* %i, align 8
  ret i64 %5
}

define  i32 @__pgi_imodulox(i32 %x, i32 %y) nounwind alwaysinline {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32* %x.addr, align 4
  %1 = load i32* %y.addr, align 4
  %div = sdiv i32 %0, %1
  store i32 %div, i32* %q, align 4
  %2 = load i32* %x.addr, align 4
  %3 = load i32* %q, align 4
  %4 = load i32* %y.addr, align 4
  %mul = mul nsw i32 %3, %4
  %sub = sub nsw i32 %2, %mul
  store i32 %sub, i32* %r, align 4
  %5 = load i32* %r, align 4
  %cmp = icmp ne i32 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i32* %x.addr, align 4
  %cmp1 = icmp slt i32 %6, 0
  br i1 %cmp1, label %land.lhs.true2, label %lor.lhs.false

land.lhs.true2:                                   ; preds = %land.lhs.true
  %7 = load i32* %y.addr, align 4
  %cmp3 = icmp sgt i32 %7, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2, %land.lhs.true
  %8 = load i32* %x.addr, align 4
  %cmp4 = icmp sgt i32 %8, 0
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %9 = load i32* %y.addr, align 4
  %cmp6 = icmp slt i32 %9, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true2
  %10 = load i32* %y.addr, align 4
  %11 = load i32* %r, align 4
  %add = add nsw i32 %11, %10
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %lor.lhs.false, %entry
  %12 = load i32* %r, align 4
  ret i32 %12
}

define  i32 @__pgi_jmodulox(i16 %x, i16 %y) nounwind alwaysinline {
entry:
  %x.addr = alloca i16, align 2
  %y.addr = alloca i16, align 2
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2
  store i16 %y, i16* %y.addr, align 2
  %0 = load i16* %x.addr, align 2
  %conv = sext i16 %0 to i32
  %1 = load i16* %y.addr, align 2
  %conv1 = sext i16 %1 to i32
  %div = sdiv i32 %conv, %conv1
  store i32 %div, i32* %q, align 4
  %2 = load i16* %x.addr, align 2
  %conv2 = sext i16 %2 to i32
  %3 = load i32* %q, align 4
  %4 = load i16* %y.addr, align 2
  %conv3 = sext i16 %4 to i32
  %mul = mul nsw i32 %3, %conv3
  %sub = sub nsw i32 %conv2, %mul
  store i32 %sub, i32* %r, align 4
  %5 = load i32* %r, align 4
  %cmp = icmp ne i32 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i16* %x.addr, align 2
  %conv5 = sext i16 %6 to i32
  %7 = load i16* %y.addr, align 2
  %conv6 = sext i16 %7 to i32
  %xor = xor i32 %conv5, %conv6
  %cmp7 = icmp slt i32 %xor, 0
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i16* %y.addr, align 2
  %conv9 = sext i16 %8 to i32
  %9 = load i32* %r, align 4
  %add = add nsw i32 %9, %conv9
  store i32 %add, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load i32* %r, align 4
  ret i32 %10
}

define  i64 @__pgi_kmodulox(i64 %x, i64 %y) nounwind alwaysinline {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  store i64 %y, i64* %y.addr, align 8
  %0 = load i64* %x.addr, align 8
  %1 = load i64* %y.addr, align 8
  %div = sdiv i64 %0, %1
  store i64 %div, i64* %q, align 8
  %2 = load i64* %x.addr, align 8
  %3 = load i64* %q, align 8
  %4 = load i64* %y.addr, align 8
  %mul = mul nsw i64 %3, %4
  %sub = sub nsw i64 %2, %mul
  store i64 %sub, i64* %r, align 8
  %5 = load i64* %r, align 8
  %cmp = icmp ne i64 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i64* %x.addr, align 8
  %7 = load i64* %y.addr, align 8
  %xor = xor i64 %6, %7
  %cmp1 = icmp slt i64 %xor, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i64* %y.addr, align 8
  %9 = load i64* %r, align 8
  %add = add nsw i64 %9, %8
  store i64 %add, i64* %r, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load i64* %r, align 8
  ret i64 %10
}

define  float @__pgi_fmodulox(float %x, float %y) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %r = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call  float @__nv_fmodf(float %0, float %1)
  store float %call, float* %r, align 4
  %2 = load float* %r, align 4
  %cmp = fcmp une float %2, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load float* %x.addr, align 4
  %cmp1 = fcmp olt float %3, 0.000000e+00
  br i1 %cmp1, label %land.lhs.true2, label %lor.lhs.false

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load float* %y.addr, align 4
  %cmp3 = fcmp ogt float %4, 0.000000e+00
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2, %land.lhs.true
  %5 = load float* %x.addr, align 4
  %cmp4 = fcmp ogt float %5, 0.000000e+00
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %6 = load float* %y.addr, align 4
  %cmp6 = fcmp olt float %6, 0.000000e+00
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true2
  %7 = load float* %y.addr, align 4
  %8 = load float* %r, align 4
  %add = fadd float %8, %7
  store float %add, float* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %lor.lhs.false, %entry
  %9 = load float* %r, align 4
  ret float %9
}

declare  float @__nv_fmodf(float, float)

define  double @__pgi_dmodulox(double %x, double %y) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %r = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call  double @__nv_fmod(double %0, double %1)
  store double %call, double* %r, align 8
  %2 = load double* %r, align 8
  %cmp = fcmp une double %2, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load double* %x.addr, align 8
  %cmp1 = fcmp olt double %3, 0.000000e+00
  br i1 %cmp1, label %land.lhs.true2, label %lor.lhs.false

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load double* %y.addr, align 8
  %cmp3 = fcmp ogt double %4, 0.000000e+00
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2, %land.lhs.true
  %5 = load double* %x.addr, align 8
  %cmp4 = fcmp ogt double %5, 0.000000e+00
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %6 = load double* %y.addr, align 8
  %cmp6 = fcmp olt double %6, 0.000000e+00
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true2
  %7 = load double* %y.addr, align 8
  %8 = load double* %r, align 8
  %add = fadd double %8, %7
  store double %add, double* %r, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true5, %lor.lhs.false, %entry
  %9 = load double* %r, align 8
  ret double %9
}

declare  double @__nv_fmod(double, double)

define  i32 @__pgi_poppari(i32 %x) nounwind alwaysinline {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32* %x.addr, align 4
  %call = call  i32 @__nv_popc(i32 %0)
  %and = and i32 %call, 1
  ret i32 %and
}

declare  i32 @__nv_popc(i32)

define  i64 @__pgi_popparul(i64 %x) nounwind alwaysinline {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load i64* %x.addr, align 8
  %call = call  i32 @__nv_popcll(i64 %0)
  %and = and i32 %call, 1
  %conv = sext i32 %and to i64
  ret i64 %conv
}

declare  i32 @__nv_popcll(i64)

define  i32 @__pgi_exponf(float %f) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  %0 = load float* %f.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %0)
  store i32 %call, i32* %i, align 4
  %1 = load i32* %i, align 4
  %and = and i32 %1, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i32* %i, align 4
  %shr = ashr i32 %2, 23
  %and1 = and i32 %shr, 255
  %sub = sub nsw i32 %and1, 126
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %3 = load i32* %retval
  ret i32 %3
}

declare  i32 @__nv_float_as_int(float)

define  i64 @__pgi_kexponf(float %f) nounwind alwaysinline {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  %0 = load float* %f.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %0)
  store i32 %call, i32* %i, align 4
  %1 = load i32* %i, align 4
  %and = and i32 %1, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i32* %i, align 4
  %shr = ashr i32 %2, 23
  %and1 = and i32 %shr, 255
  %sub = sub nsw i32 %and1, 126
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %3 = load i64* %retval
  ret i64 %3
}

define  i32 @__pgi_expond(double %d) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca double, align 8
  %i = alloca i64, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double* %d.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %0)
  store i64 %call, i64* %i, align 8
  %1 = load i64* %i, align 8
  %and = and i64 %1, 9223372036854775807
  %cmp = icmp eq i64 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i64* %i, align 8
  %shr = ashr i64 %2, 52
  %and1 = and i64 %shr, 2047
  %sub = sub nsw i64 %and1, 1022
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %3 = load i32* %retval
  ret i32 %3
}

declare  i64 @__nv_double_as_longlong(double)

define  i64 @__pgi_kexpond(double %d) nounwind alwaysinline {
entry:
  %retval = alloca i64, align 8
  %d.addr = alloca double, align 8
  %i = alloca i64, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double* %d.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %0)
  store i64 %call, i64* %i, align 8
  %1 = load i64* %i, align 8
  %and = and i64 %1, 9223372036854775807
  %cmp = icmp eq i64 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i64* %i, align 8
  %shr = ashr i64 %2, 52
  %and1 = and i64 %shr, 2047
  %sub = sub nsw i64 %and1, 1022
  store i64 %sub, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %3 = load i64* %retval
  ret i64 %3
}

define  i32 @__pgi_kcmp(i64 %a, i64 %b) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64* %a.addr, align 8
  %1 = load i64* %b.addr, align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64* %a.addr, align 8
  %3 = load i64* %b.addr, align 8
  %cmp1 = icmp slt i64 %2, %3
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i32* %retval
  ret i32 %4
}

define  i32 @__pgi_kcmpz(i64 %a) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  %0 = load i64* %a.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64* %a.addr, align 8
  %cmp1 = icmp slt i64 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %2 = load i32* %retval
  ret i32 %2
}

define  i32 @__pgi_kucmp(i64 %a, i64 %b) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64* %a.addr, align 8
  %1 = load i64* %b.addr, align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64* %a.addr, align 8
  %3 = load i64* %b.addr, align 8
  %cmp1 = icmp ult i64 %2, %3
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i32* %retval
  ret i32 %4
}

define  i32 @__pgi_kucmpz(i64 %a) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  %0 = load i64* %a.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %1 = load i32* %retval
  ret i32 %1
}

define  float @__pgi_fracf(float %f) nounwind alwaysinline {
entry:
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  %0 = load float* %f.addr, align 4
  %cmp = fcmp une float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load float* %f.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %1)
  store i32 %call, i32* %i, align 4
  %2 = load i32* %i, align 4
  %and = and i32 %2, -2139095041
  store i32 %and, i32* %i, align 4
  %3 = load i32* %i, align 4
  %or = or i32 %3, 1056964608
  store i32 %or, i32* %i, align 4
  %4 = load i32* %i, align 4
  %call1 = call  float @__nv_int_as_float(i32 %4)
  store float %call1, float* %f.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load float* %f.addr, align 4
  ret float %5
}

declare  float @__nv_int_as_float(i32)

define  double @__pgi_fracd(double %f) nounwind alwaysinline {
entry:
  %f.addr = alloca double, align 8
  %i = alloca i64, align 8
  store double %f, double* %f.addr, align 8
  %0 = load double* %f.addr, align 8
  %cmp = fcmp une double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load double* %f.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %1)
  store i64 %call, i64* %i, align 8
  %2 = load i64* %i, align 8
  %and = and i64 %2, -9218868437227405313
  store i64 %and, i64* %i, align 8
  %3 = load i64* %i, align 8
  %or = or i64 %3, 4602678819172646912
  store i64 %or, i64* %i, align 8
  %4 = load i64* %i, align 8
  %call1 = call  double @__nv_longlong_as_double(i64 %4)
  store double %call1, double* %f.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load double* %f.addr, align 8
  ret double %5
}

declare  double @__nv_longlong_as_double(i64)

define  float @__pgi_nearestf(float %f, i32 %sign) nounwind alwaysinline {
entry:
  %f.addr = alloca float, align 4
  %sign.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  store i32 %sign, i32* %sign.addr, align 4
  %0 = load float* %f.addr, align 4
  %cmp = fcmp oeq float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32* %sign.addr, align 4
  %tobool = icmp ne i32 %1, 0
  %cond = select i1 %tobool, i32 1048576, i32 -2146435072
  store i32 %cond, i32* %i, align 4
  %2 = load i32* %i, align 4
  %call = call  float @__nv_int_as_float(i32 %2)
  store float %call, float* %f.addr, align 4
  br label %if.end12

if.else:                                          ; preds = %entry
  %3 = load float* %f.addr, align 4
  %call1 = call  i32 @__nv_float_as_int(float %3)
  store i32 %call1, i32* %i, align 4
  %4 = load i32* %i, align 4
  %and = and i32 %4, 2139095040
  %cmp2 = icmp ne i32 %and, 2139095040
  br i1 %cmp2, label %if.then3, label %if.end11

if.then3:                                         ; preds = %if.else
  %5 = load float* %f.addr, align 4
  %cmp4 = fcmp olt float %5, 0.000000e+00
  %conv = zext i1 %cmp4 to i32
  %6 = load i32* %sign.addr, align 4
  %cmp5 = icmp ne i32 %6, 0
  %conv6 = zext i1 %cmp5 to i32
  %xor = xor i32 %conv, %conv6
  %tobool7 = icmp ne i32 %xor, 0
  br i1 %tobool7, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.then3
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end

if.else9:                                         ; preds = %if.then3
  %8 = load i32* %i, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.else9, %if.then8
  %9 = load i32* %i, align 4
  %call10 = call  float @__nv_int_as_float(i32 %9)
  store float %call10, float* %f.addr, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then
  %10 = load float* %f.addr, align 4
  ret float %10
}

define  double @__pgi_nearestd(double %f, i32 %sign) nounwind alwaysinline {
entry:
  %f.addr = alloca double, align 8
  %sign.addr = alloca i32, align 4
  %i = alloca i64, align 8
  store double %f, double* %f.addr, align 8
  store i32 %sign, i32* %sign.addr, align 4
  %0 = load double* %f.addr, align 8
  %cmp = fcmp oeq double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32* %sign.addr, align 4
  %tobool = icmp ne i32 %1, 0
  %cond = select i1 %tobool, i64 4503599627370496, i64 -9218868437227405312
  store i64 %cond, i64* %i, align 8
  %2 = load i64* %i, align 8
  %call = call  double @__nv_longlong_as_double(i64 %2)
  store double %call, double* %f.addr, align 8
  br label %if.end12

if.else:                                          ; preds = %entry
  %3 = load double* %f.addr, align 8
  %call1 = call  i64 @__nv_double_as_longlong(double %3)
  store i64 %call1, i64* %i, align 8
  %4 = load i64* %i, align 8
  %and = and i64 %4, 9218868437227405312
  %cmp2 = icmp ne i64 %and, 9218868437227405312
  br i1 %cmp2, label %if.then3, label %if.end11

if.then3:                                         ; preds = %if.else
  %5 = load double* %f.addr, align 8
  %cmp4 = fcmp olt double %5, 0.000000e+00
  %conv = zext i1 %cmp4 to i32
  %6 = load i32* %sign.addr, align 4
  %cmp5 = icmp ne i32 %6, 0
  %conv6 = zext i1 %cmp5 to i32
  %xor = xor i32 %conv, %conv6
  %tobool7 = icmp ne i32 %xor, 0
  br i1 %tobool7, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.then3
  %7 = load i64* %i, align 8
  %inc = add nsw i64 %7, 1
  store i64 %inc, i64* %i, align 8
  br label %if.end

if.else9:                                         ; preds = %if.then3
  %8 = load i64* %i, align 8
  %dec = add nsw i64 %8, -1
  store i64 %dec, i64* %i, align 8
  br label %if.end

if.end:                                           ; preds = %if.else9, %if.then8
  %9 = load i64* %i, align 8
  %call10 = call  double @__nv_longlong_as_double(i64 %9)
  store double %call10, double* %f.addr, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then
  %10 = load double* %f.addr, align 8
  ret double %10
}

define  float @__pgi_rrspacingf(float %f) nounwind alwaysinline {
entry:
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  %0 = load float* %f.addr, align 4
  %cmp = fcmp une float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %1 = load float* %f.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %1)
  store i32 %call, i32* %i, align 4
  %2 = load i32* %i, align 4
  %and = and i32 %2, 2139095040
  %xor = xor i32 %and, 2139095040
  store i32 %xor, i32* %j, align 4
  %3 = load i32* %j, align 4
  %call1 = call  float @__nv_int_as_float(i32 %3)
  %4 = load float* %f.addr, align 4
  %mul = fmul float %4, %call1
  store float %mul, float* %f.addr, align 4
  %5 = load float* %f.addr, align 4
  %cmp2 = fcmp olt float %5, 0.000000e+00
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %6 = load float* %f.addr, align 4
  %sub = fsub float -0.000000e+00, %6
  store float %sub, float* %f.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  store i32 1249902592, i32* %j, align 4
  %7 = load i32* %j, align 4
  %call4 = call  float @__nv_int_as_float(i32 %7)
  %8 = load float* %f.addr, align 4
  %mul5 = fmul float %8, %call4
  store float %mul5, float* %f.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %9 = load float* %f.addr, align 4
  ret float %9
}

define  double @__pgi_rrspacingd(double %f) nounwind alwaysinline {
entry:
  %f.addr = alloca double, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store double %f, double* %f.addr, align 8
  %0 = load double* %f.addr, align 8
  %cmp = fcmp une double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %1 = load double* %f.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %1)
  store i64 %call, i64* %i, align 8
  %2 = load i64* %i, align 8
  %and = and i64 %2, 9218868437227405312
  %xor = xor i64 %and, 9218868437227405312
  store i64 %xor, i64* %j, align 8
  %3 = load i64* %j, align 8
  %call1 = call  double @__nv_longlong_as_double(i64 %3)
  %4 = load double* %f.addr, align 8
  %mul = fmul double %4, %call1
  store double %mul, double* %f.addr, align 8
  %5 = load double* %f.addr, align 8
  %cmp2 = fcmp olt double %5, 0.000000e+00
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %6 = load double* %f.addr, align 8
  %sub = fsub double -0.000000e+00, %6
  store double %sub, double* %f.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  store i64 4836865999795912704, i64* %j, align 8
  %7 = load i64* %j, align 8
  %call4 = call  double @__nv_longlong_as_double(i64 %7)
  %8 = load double* %f.addr, align 8
  %mul5 = fmul double %8, %call4
  store double %mul5, double* %f.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %9 = load double* %f.addr, align 8
  ret double %9
}

define  float @__pgi_scalef(float %f, i32 %i) nounwind alwaysinline {
entry:
  %f.addr = alloca float, align 4
  %i.addr = alloca i32, align 4
  %e = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32* %i.addr, align 4
  %add = add nsw i32 %0, 127
  store i32 %add, i32* %e, align 4
  %1 = load i32* %e, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %e, align 4
  br label %if.end3

if.else:                                          ; preds = %entry
  %2 = load i32* %e, align 4
  %cmp1 = icmp sgt i32 %2, 255
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  store i32 255, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %3 = load i32* %e, align 4
  %shl = shl i32 %3, 23
  store i32 %shl, i32* %e, align 4
  %4 = load float* %f.addr, align 4
  %5 = load i32* %e, align 4
  %call = call  float @__nv_int_as_float(i32 %5)
  %mul = fmul float %4, %call
  ret float %mul
}

define  double @__pgi_scaled(double %f, i32 %i) nounwind alwaysinline {
entry:
  %f.addr = alloca double, align 8
  %i.addr = alloca i32, align 4
  %e = alloca i64, align 8
  store double %f, double* %f.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32* %i.addr, align 4
  %add = add nsw i32 %0, 1023
  %conv = sext i32 %add to i64
  store i64 %conv, i64* %e, align 8
  %1 = load i64* %e, align 8
  %cmp = icmp slt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %e, align 8
  br label %if.end5

if.else:                                          ; preds = %entry
  %2 = load i64* %e, align 8
  %cmp2 = icmp sgt i64 %2, 2047
  br i1 %cmp2, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  store i64 2047, i64* %e, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %3 = load i64* %e, align 8
  %shl = shl i64 %3, 52
  store i64 %shl, i64* %e, align 8
  %4 = load double* %f.addr, align 8
  %5 = load i64* %e, align 8
  %call = call  double @__nv_longlong_as_double(i64 %5)
  %mul = fmul double %4, %call
  ret double %mul
}

define  float @__pgi_setexpf(float %f, i32 %j) nounwind alwaysinline {
entry:
  %f.addr = alloca float, align 4
  %j.addr = alloca i32, align 4
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = load float* %f.addr, align 4
  %cmp = fcmp une float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %1 = load float* %f.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %1)
  store i32 %call, i32* %i, align 4
  %2 = load i32* %i, align 4
  %and = and i32 %2, -2139095041
  store i32 %and, i32* %i, align 4
  %3 = load i32* %i, align 4
  %or = or i32 %3, 1065353216
  store i32 %or, i32* %i, align 4
  %4 = load i32* %j.addr, align 4
  %add = add nsw i32 %4, 126
  store i32 %add, i32* %e, align 4
  %5 = load i32* %e, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %e, align 4
  br label %if.end5

if.else:                                          ; preds = %if.then
  %6 = load i32* %e, align 4
  %cmp3 = icmp sgt i32 %6, 255
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  store i32 255, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then2
  %7 = load i32* %e, align 4
  %shl = shl i32 %7, 23
  store i32 %shl, i32* %e, align 4
  %8 = load i32* %e, align 4
  %call6 = call  float @__nv_int_as_float(i32 %8)
  %9 = load i32* %i, align 4
  %call7 = call  float @__nv_int_as_float(i32 %9)
  %mul = fmul float %call6, %call7
  store float %mul, float* %f.addr, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.end5, %entry
  %10 = load float* %f.addr, align 4
  ret float %10
}

define  double @__pgi_setexpd(double %f, i32 %j) nounwind alwaysinline {
entry:
  %f.addr = alloca double, align 8
  %j.addr = alloca i32, align 4
  %e = alloca i64, align 8
  %i = alloca i64, align 8
  store double %f, double* %f.addr, align 8
  store i32 %j, i32* %j.addr, align 4
  %0 = load double* %f.addr, align 8
  %cmp = fcmp une double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %1 = load double* %f.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %1)
  store i64 %call, i64* %i, align 8
  %2 = load i64* %i, align 8
  %and = and i64 %2, -9218868437227405313
  store i64 %and, i64* %i, align 8
  %3 = load i64* %i, align 8
  %or = or i64 %3, 4607182418800017408
  store i64 %or, i64* %i, align 8
  %4 = load i32* %j.addr, align 4
  %add = add nsw i32 %4, 1022
  %conv = sext i32 %add to i64
  store i64 %conv, i64* %e, align 8
  %5 = load i64* %e, align 8
  %cmp1 = icmp slt i64 %5, 0
  br i1 %cmp1, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  store i64 0, i64* %e, align 8
  br label %if.end7

if.else:                                          ; preds = %if.then
  %6 = load i64* %e, align 8
  %cmp4 = icmp sgt i64 %6, 2047
  br i1 %cmp4, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  store i64 2047, i64* %e, align 8
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then3
  %7 = load i64* %e, align 8
  %shl = shl i64 %7, 52
  store i64 %shl, i64* %e, align 8
  %8 = load i64* %e, align 8
  %call8 = call  double @__nv_longlong_as_double(i64 %8)
  %9 = load i64* %i, align 8
  %call9 = call  double @__nv_longlong_as_double(i64 %9)
  %mul = fmul double %call8, %call9
  store double %mul, double* %f.addr, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.end7, %entry
  %10 = load double* %f.addr, align 8
  ret double %10
}

define  float @__pgi_spacingf(float %f) nounwind alwaysinline {
entry:
  %f.addr = alloca float, align 4
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  %0 = load float* %f.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %0)
  store i32 %call, i32* %i, align 4
  %1 = load i32* %i, align 4
  %shr = ashr i32 %1, 23
  %and = and i32 %shr, 255
  %sub = sub nsw i32 %and, 23
  store i32 %sub, i32* %e, align 4
  %2 = load i32* %e, align 4
  %cmp = icmp slt i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32* %e, align 4
  %shl = shl i32 %3, 23
  store i32 %shl, i32* %i, align 4
  %4 = load i32* %i, align 4
  %call1 = call  float @__nv_int_as_float(i32 %4)
  ret float %call1
}

define  i32 @pgf90_tsection(%struct.F90_Desc* %d, i32 %dx, %struct.F90_Desc* %a, i32 %ax, i32 %lb, i32 %ub, i32 %st, i32 %gsize, i32 %flags) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc*, align 8
  %dx.addr = alloca i32, align 4
  %a.addr = alloca %struct.F90_Desc*, align 8
  %ax.addr = alloca i32, align 4
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %st.addr = alloca i32, align 4
  %gsize.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %extent = alloca i32, align 4
  store %struct.F90_Desc* %d, %struct.F90_Desc** %d.addr, align 8
  store i32 %dx, i32* %dx.addr, align 4
  store %struct.F90_Desc* %a, %struct.F90_Desc** %a.addr, align 8
  store i32 %ax, i32* %ax.addr, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %st, i32* %st.addr, align 4
  store i32 %gsize, i32* %gsize.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32* %ub.addr, align 4
  %1 = load i32* %lb.addr, align 4
  %sub = sub nsw i32 %0, %1
  %2 = load i32* %st.addr, align 4
  %add = add nsw i32 %sub, %2
  store i32 %add, i32* %extent, align 4
  %3 = load i32* %st.addr, align 4
  %cmp = icmp ne i32 %3, 1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %4 = load i32* %st.addr, align 4
  %cmp1 = icmp eq i32 %4, -1
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %5 = load i32* %extent, align 4
  %sub3 = sub nsw i32 0, %5
  store i32 %sub3, i32* %extent, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %6 = load i32* %st.addr, align 4
  %7 = load i32* %extent, align 4
  %div = sdiv i32 %7, %6
  store i32 %div, i32* %extent, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %8 = load i32* %extent, align 4
  %cmp5 = icmp slt i32 %8, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  store i32 0, i32* %extent, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end4
  %9 = load i32* %dx.addr, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.F90_Desc** %d.addr, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %10, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom
  %lbound = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 0
  store i32 1, i32* %lbound, align 4
  %11 = load i32* %extent, align 4
  %12 = load i32* %dx.addr, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load %struct.F90_Desc** %d.addr, align 8
  %dim9 = getelementptr inbounds %struct.F90_Desc* %13, i32 0, i32 10
  %arrayidx10 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9, i32 0, i64 %idxprom8
  %ubound = getelementptr inbounds %struct.F90_DescDim* %arrayidx10, i32 0, i32 5
  store i32 %11, i32* %ubound, align 4
  %14 = load i32* %extent, align 4
  %15 = load i32* %dx.addr, align 4
  %idxprom11 = sext i32 %15 to i64
  %16 = load %struct.F90_Desc** %d.addr, align 8
  %dim12 = getelementptr inbounds %struct.F90_Desc* %16, i32 0, i32 10
  %arrayidx13 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12, i32 0, i64 %idxprom11
  %extent14 = getelementptr inbounds %struct.F90_DescDim* %arrayidx13, i32 0, i32 1
  store i32 %14, i32* %extent14, align 4
  %17 = load i32* %dx.addr, align 4
  %idxprom15 = sext i32 %17 to i64
  %18 = load %struct.F90_Desc** %d.addr, align 8
  %dim16 = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 10
  %arrayidx17 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16, i32 0, i64 %idxprom15
  %sstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx17, i32 0, i32 2
  store i32 1, i32* %sstride, align 4
  %19 = load i32* %dx.addr, align 4
  %idxprom18 = sext i32 %19 to i64
  %20 = load %struct.F90_Desc** %d.addr, align 8
  %dim19 = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 10
  %arrayidx20 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19, i32 0, i64 %idxprom18
  %soffset = getelementptr inbounds %struct.F90_DescDim* %arrayidx20, i32 0, i32 3
  store i32 0, i32* %soffset, align 4
  %21 = load i32* %ax.addr, align 4
  %idxprom21 = sext i32 %21 to i64
  %22 = load %struct.F90_Desc** %a.addr, align 8
  %dim22 = getelementptr inbounds %struct.F90_Desc* %22, i32 0, i32 10
  %arrayidx23 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22, i32 0, i64 %idxprom21
  %lstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx23, i32 0, i32 4
  %23 = load i32* %lstride, align 4
  %24 = load i32* %st.addr, align 4
  %mul = mul nsw i32 %23, %24
  %25 = load i32* %dx.addr, align 4
  %idxprom24 = sext i32 %25 to i64
  %26 = load %struct.F90_Desc** %d.addr, align 8
  %dim25 = getelementptr inbounds %struct.F90_Desc* %26, i32 0, i32 10
  %arrayidx26 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25, i32 0, i64 %idxprom24
  %lstride27 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26, i32 0, i32 4
  store i32 %mul, i32* %lstride27, align 4
  %27 = load i32* %dx.addr, align 4
  %idxprom28 = sext i32 %27 to i64
  %28 = load %struct.F90_Desc** %d.addr, align 8
  %dim29 = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 10
  %arrayidx30 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29, i32 0, i64 %idxprom28
  %lstride31 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30, i32 0, i32 4
  %29 = load i32* %lstride31, align 4
  %30 = load %struct.F90_Desc** %d.addr, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %30, i32 0, i32 7
  %31 = load i32* %lbase, align 4
  %sub32 = sub nsw i32 %31, %29
  store i32 %sub32, i32* %lbase, align 4
  %32 = load i32* %dx.addr, align 4
  %idxprom33 = sext i32 %32 to i64
  %33 = load %struct.F90_Desc** %d.addr, align 8
  %dim34 = getelementptr inbounds %struct.F90_Desc* %33, i32 0, i32 10
  %arrayidx35 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34, i32 0, i64 %idxprom33
  %lstride36 = getelementptr inbounds %struct.F90_DescDim* %arrayidx35, i32 0, i32 4
  %34 = load i32* %lstride36, align 4
  %35 = load i32* %gsize.addr, align 4
  %cmp37 = icmp ne i32 %34, %35
  br i1 %cmp37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end7
  %36 = load %struct.F90_Desc** %d.addr, align 8
  %flags39 = getelementptr inbounds %struct.F90_Desc* %36, i32 0, i32 4
  %37 = load i32* %flags39, align 4
  %and = and i32 %37, -536870913
  store i32 %and, i32* %flags39, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.end7
  %38 = load i32* %extent, align 4
  %39 = load i32* %gsize.addr, align 4
  %mul41 = mul nsw i32 %39, %38
  store i32 %mul41, i32* %gsize.addr, align 4
  %40 = load i32* %gsize.addr, align 4
  ret i32 %40
}

define  i32 @pgf90_asection(%struct.F90_Desc* %d, i32 %dx, %struct.F90_Desc* %a, i32 %ax, i32 %lb, i32 %ub, i32 %st, i32 %gsize, i32 %flags) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc*, align 8
  %dx.addr = alloca i32, align 4
  %a.addr = alloca %struct.F90_Desc*, align 8
  %ax.addr = alloca i32, align 4
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %st.addr = alloca i32, align 4
  %gsize.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %extent = alloca i32, align 4
  %noreindex = alloca i32, align 4
  %myoffset = alloca i32, align 4
  store %struct.F90_Desc* %d, %struct.F90_Desc** %d.addr, align 8
  store i32 %dx, i32* %dx.addr, align 4
  store %struct.F90_Desc* %a, %struct.F90_Desc** %a.addr, align 8
  store i32 %ax, i32* %ax.addr, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %st, i32* %st.addr, align 4
  store i32 %gsize, i32* %gsize.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32* %ub.addr, align 4
  %1 = load i32* %lb.addr, align 4
  %sub = sub nsw i32 %0, %1
  %2 = load i32* %st.addr, align 4
  %add = add nsw i32 %sub, %2
  store i32 %add, i32* %extent, align 4
  %3 = load i32* %flags.addr, align 4
  %and = and i32 %3, 33554432
  store i32 %and, i32* %noreindex, align 4
  %4 = load i32* %st.addr, align 4
  %cmp = icmp ne i32 %4, 1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %5 = load i32* %st.addr, align 4
  %cmp1 = icmp eq i32 %5, -1
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %6 = load i32* %extent, align 4
  %sub3 = sub nsw i32 0, %6
  store i32 %sub3, i32* %extent, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %7 = load i32* %st.addr, align 4
  %8 = load i32* %extent, align 4
  %div = sdiv i32 %8, %7
  store i32 %div, i32* %extent, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %9 = load i32* %extent, align 4
  %cmp5 = icmp slt i32 %9, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  store i32 0, i32* %extent, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end4
  %10 = load i32* %noreindex, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %land.lhs.true, label %if.else23

land.lhs.true:                                    ; preds = %if.end7
  %11 = load i32* %st.addr, align 4
  %cmp8 = icmp eq i32 %11, 1
  br i1 %cmp8, label %if.then9, label %if.else23

if.then9:                                         ; preds = %land.lhs.true
  %12 = load i32* %dx.addr, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %struct.F90_Desc** %d.addr, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %13, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom
  %lbound = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 0
  store i32 1, i32* %lbound, align 4
  %14 = load i32* %extent, align 4
  %cmp10 = icmp eq i32 %14, 0
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then9
  %15 = load i32* %lb.addr, align 4
  %sub11 = sub nsw i32 %15, 1
  br label %cond.end

cond.false:                                       ; preds = %if.then9
  %16 = load i32* %ub.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub11, %cond.true ], [ %16, %cond.false ]
  %17 = load i32* %dx.addr, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load %struct.F90_Desc** %d.addr, align 8
  %dim13 = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 10
  %arrayidx14 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13, i32 0, i64 %idxprom12
  %ubound = getelementptr inbounds %struct.F90_DescDim* %arrayidx14, i32 0, i32 5
  store i32 %cond, i32* %ubound, align 4
  %19 = load i32* %dx.addr, align 4
  %idxprom15 = sext i32 %19 to i64
  %20 = load %struct.F90_Desc** %d.addr, align 8
  %dim16 = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 10
  %arrayidx17 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16, i32 0, i64 %idxprom15
  %ubound18 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17, i32 0, i32 5
  %21 = load i32* %ubound18, align 4
  %22 = load i32* %dx.addr, align 4
  %idxprom19 = sext i32 %22 to i64
  %23 = load %struct.F90_Desc** %d.addr, align 8
  %dim20 = getelementptr inbounds %struct.F90_Desc* %23, i32 0, i32 10
  %arrayidx21 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20, i32 0, i64 %idxprom19
  %extent22 = getelementptr inbounds %struct.F90_DescDim* %arrayidx21, i32 0, i32 1
  store i32 %21, i32* %extent22, align 4
  store i32 0, i32* %myoffset, align 4
  br label %if.end37

if.else23:                                        ; preds = %land.lhs.true, %if.end7
  %24 = load i32* %dx.addr, align 4
  %idxprom24 = sext i32 %24 to i64
  %25 = load %struct.F90_Desc** %d.addr, align 8
  %dim25 = getelementptr inbounds %struct.F90_Desc* %25, i32 0, i32 10
  %arrayidx26 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25, i32 0, i64 %idxprom24
  %lbound27 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26, i32 0, i32 0
  store i32 1, i32* %lbound27, align 4
  %26 = load i32* %extent, align 4
  %27 = load i32* %dx.addr, align 4
  %idxprom28 = sext i32 %27 to i64
  %28 = load %struct.F90_Desc** %d.addr, align 8
  %dim29 = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 10
  %arrayidx30 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29, i32 0, i64 %idxprom28
  %ubound31 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30, i32 0, i32 5
  store i32 %26, i32* %ubound31, align 4
  %29 = load i32* %extent, align 4
  %30 = load i32* %dx.addr, align 4
  %idxprom32 = sext i32 %30 to i64
  %31 = load %struct.F90_Desc** %d.addr, align 8
  %dim33 = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 10
  %arrayidx34 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33, i32 0, i64 %idxprom32
  %extent35 = getelementptr inbounds %struct.F90_DescDim* %arrayidx34, i32 0, i32 1
  store i32 %29, i32* %extent35, align 4
  %32 = load i32* %lb.addr, align 4
  %33 = load i32* %st.addr, align 4
  %sub36 = sub nsw i32 %32, %33
  store i32 %sub36, i32* %myoffset, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.else23, %cond.end
  %34 = load i32* %dx.addr, align 4
  %idxprom38 = sext i32 %34 to i64
  %35 = load %struct.F90_Desc** %d.addr, align 8
  %dim39 = getelementptr inbounds %struct.F90_Desc* %35, i32 0, i32 10
  %arrayidx40 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39, i32 0, i64 %idxprom38
  %sstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx40, i32 0, i32 2
  store i32 1, i32* %sstride, align 4
  %36 = load i32* %dx.addr, align 4
  %idxprom41 = sext i32 %36 to i64
  %37 = load %struct.F90_Desc** %d.addr, align 8
  %dim42 = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 10
  %arrayidx43 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42, i32 0, i64 %idxprom41
  %soffset = getelementptr inbounds %struct.F90_DescDim* %arrayidx43, i32 0, i32 3
  store i32 0, i32* %soffset, align 4
  %38 = load i32* %ax.addr, align 4
  %idxprom44 = sext i32 %38 to i64
  %39 = load %struct.F90_Desc** %a.addr, align 8
  %dim45 = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 10
  %arrayidx46 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45, i32 0, i64 %idxprom44
  %lstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx46, i32 0, i32 4
  %40 = load i32* %lstride, align 4
  %41 = load i32* %st.addr, align 4
  %mul = mul nsw i32 %40, %41
  %42 = load i32* %dx.addr, align 4
  %idxprom47 = sext i32 %42 to i64
  %43 = load %struct.F90_Desc** %d.addr, align 8
  %dim48 = getelementptr inbounds %struct.F90_Desc* %43, i32 0, i32 10
  %arrayidx49 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48, i32 0, i64 %idxprom47
  %lstride50 = getelementptr inbounds %struct.F90_DescDim* %arrayidx49, i32 0, i32 4
  store i32 %mul, i32* %lstride50, align 4
  %44 = load i32* %myoffset, align 4
  %45 = load i32* %dx.addr, align 4
  %idxprom51 = sext i32 %45 to i64
  %46 = load %struct.F90_Desc** %d.addr, align 8
  %dim52 = getelementptr inbounds %struct.F90_Desc* %46, i32 0, i32 10
  %arrayidx53 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52, i32 0, i64 %idxprom51
  %lstride54 = getelementptr inbounds %struct.F90_DescDim* %arrayidx53, i32 0, i32 4
  %47 = load i32* %lstride54, align 4
  %mul55 = mul nsw i32 %44, %47
  %48 = load %struct.F90_Desc** %d.addr, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %48, i32 0, i32 7
  %49 = load i32* %lbase, align 4
  %add56 = add nsw i32 %49, %mul55
  store i32 %add56, i32* %lbase, align 4
  %50 = load i32* %dx.addr, align 4
  %idxprom57 = sext i32 %50 to i64
  %51 = load %struct.F90_Desc** %d.addr, align 8
  %dim58 = getelementptr inbounds %struct.F90_Desc* %51, i32 0, i32 10
  %arrayidx59 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58, i32 0, i64 %idxprom57
  %lstride60 = getelementptr inbounds %struct.F90_DescDim* %arrayidx59, i32 0, i32 4
  %52 = load i32* %lstride60, align 4
  %53 = load i32* %gsize.addr, align 4
  %cmp61 = icmp ne i32 %52, %53
  br i1 %cmp61, label %if.then62, label %if.end65

if.then62:                                        ; preds = %if.end37
  %54 = load %struct.F90_Desc** %d.addr, align 8
  %flags63 = getelementptr inbounds %struct.F90_Desc* %54, i32 0, i32 4
  %55 = load i32* %flags63, align 4
  %and64 = and i32 %55, -536870913
  store i32 %and64, i32* %flags63, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then62, %if.end37
  %56 = load i32* %extent, align 4
  %57 = load i32* %gsize.addr, align 4
  %mul66 = mul nsw i32 %57, %56
  store i32 %mul66, i32* %gsize.addr, align 4
  %58 = load i32* %gsize.addr, align 4
  ret i32 %58
}

define  void @pgf90_init_section(%struct.F90_Desc* %d, i32 %rank, %struct.F90_Desc* %a) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc*, align 8
  %rank.addr = alloca i32, align 4
  %a.addr = alloca %struct.F90_Desc*, align 8
  store %struct.F90_Desc* %d, %struct.F90_Desc** %d.addr, align 8
  store i32 %rank, i32* %rank.addr, align 4
  store %struct.F90_Desc* %a, %struct.F90_Desc** %a.addr, align 8
  %0 = load %struct.F90_Desc** %d.addr, align 8
  %tag = getelementptr inbounds %struct.F90_Desc* %0, i32 0, i32 0
  store i32 35, i32* %tag, align 4
  %1 = load i32* %rank.addr, align 4
  %2 = load %struct.F90_Desc** %d.addr, align 8
  %rank1 = getelementptr inbounds %struct.F90_Desc* %2, i32 0, i32 1
  store i32 %1, i32* %rank1, align 4
  %3 = load %struct.F90_Desc** %a.addr, align 8
  %kind = getelementptr inbounds %struct.F90_Desc* %3, i32 0, i32 2
  %4 = load i32* %kind, align 4
  %5 = load %struct.F90_Desc** %d.addr, align 8
  %kind2 = getelementptr inbounds %struct.F90_Desc* %5, i32 0, i32 2
  store i32 %4, i32* %kind2, align 4
  %6 = load %struct.F90_Desc** %a.addr, align 8
  %len = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 3
  %7 = load i32* %len, align 4
  %8 = load %struct.F90_Desc** %d.addr, align 8
  %len3 = getelementptr inbounds %struct.F90_Desc* %8, i32 0, i32 3
  store i32 %7, i32* %len3, align 4
  %9 = load %struct.F90_Desc** %a.addr, align 8
  %flags = getelementptr inbounds %struct.F90_Desc* %9, i32 0, i32 4
  %10 = load i32* %flags, align 4
  %11 = load %struct.F90_Desc** %d.addr, align 8
  %flags4 = getelementptr inbounds %struct.F90_Desc* %11, i32 0, i32 4
  store i32 %10, i32* %flags4, align 4
  %12 = load %struct.F90_Desc** %a.addr, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 6
  %13 = load i32* %gsize, align 4
  %14 = load %struct.F90_Desc** %d.addr, align 8
  %gsize5 = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 6
  store i32 %13, i32* %gsize5, align 4
  %15 = load %struct.F90_Desc** %a.addr, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %15, i32 0, i32 5
  %16 = load i32* %lsize, align 4
  %17 = load %struct.F90_Desc** %d.addr, align 8
  %lsize6 = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 5
  store i32 %16, i32* %lsize6, align 4
  %18 = load %struct.F90_Desc** %a.addr, align 8
  %gbase = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 8
  %19 = load i32** %gbase, align 8
  %20 = load %struct.F90_Desc** %d.addr, align 8
  %gbase7 = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 8
  store i32* %19, i32** %gbase7, align 8
  %21 = load %struct.F90_Desc** %a.addr, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %21, i32 0, i32 7
  %22 = load i32* %lbase, align 4
  %23 = load %struct.F90_Desc** %d.addr, align 8
  %lbase8 = getelementptr inbounds %struct.F90_Desc* %23, i32 0, i32 7
  store i32 %22, i32* %lbase8, align 4
  ret void
}

define  void @pgf90_init_section_la(%struct.F90_Desc_la* %d, i32 %rank, %struct.F90_Desc_la* %a) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc_la*, align 8
  %rank.addr = alloca i32, align 4
  %a.addr = alloca %struct.F90_Desc_la*, align 8
  store %struct.F90_Desc_la* %d, %struct.F90_Desc_la** %d.addr, align 8
  store i32 %rank, i32* %rank.addr, align 4
  store %struct.F90_Desc_la* %a, %struct.F90_Desc_la** %a.addr, align 8
  %0 = load %struct.F90_Desc_la** %d.addr, align 8
  %tag = getelementptr inbounds %struct.F90_Desc_la* %0, i32 0, i32 0
  store i64 35, i64* %tag, align 8
  %1 = load i32* %rank.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load %struct.F90_Desc_la** %d.addr, align 8
  %rank1 = getelementptr inbounds %struct.F90_Desc_la* %2, i32 0, i32 1
  store i64 %conv, i64* %rank1, align 8
  %3 = load %struct.F90_Desc_la** %a.addr, align 8
  %kind = getelementptr inbounds %struct.F90_Desc_la* %3, i32 0, i32 2
  %4 = load i64* %kind, align 8
  %5 = load %struct.F90_Desc_la** %d.addr, align 8
  %kind2 = getelementptr inbounds %struct.F90_Desc_la* %5, i32 0, i32 2
  store i64 %4, i64* %kind2, align 8
  %6 = load %struct.F90_Desc_la** %a.addr, align 8
  %len = getelementptr inbounds %struct.F90_Desc_la* %6, i32 0, i32 3
  %7 = load i64* %len, align 8
  %8 = load %struct.F90_Desc_la** %d.addr, align 8
  %len3 = getelementptr inbounds %struct.F90_Desc_la* %8, i32 0, i32 3
  store i64 %7, i64* %len3, align 8
  %9 = load %struct.F90_Desc_la** %a.addr, align 8
  %flags = getelementptr inbounds %struct.F90_Desc_la* %9, i32 0, i32 4
  %10 = load i64* %flags, align 8
  %11 = load %struct.F90_Desc_la** %d.addr, align 8
  %flags4 = getelementptr inbounds %struct.F90_Desc_la* %11, i32 0, i32 4
  store i64 %10, i64* %flags4, align 8
  %12 = load %struct.F90_Desc_la** %a.addr, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc_la* %12, i32 0, i32 6
  %13 = load i64* %gsize, align 8
  %14 = load %struct.F90_Desc_la** %d.addr, align 8
  %gsize5 = getelementptr inbounds %struct.F90_Desc_la* %14, i32 0, i32 6
  store i64 %13, i64* %gsize5, align 8
  %15 = load %struct.F90_Desc_la** %a.addr, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc_la* %15, i32 0, i32 5
  %16 = load i64* %lsize, align 8
  %17 = load %struct.F90_Desc_la** %d.addr, align 8
  %lsize6 = getelementptr inbounds %struct.F90_Desc_la* %17, i32 0, i32 5
  store i64 %16, i64* %lsize6, align 8
  %18 = load %struct.F90_Desc_la** %a.addr, align 8
  %gbase = getelementptr inbounds %struct.F90_Desc_la* %18, i32 0, i32 8
  %19 = load i64** %gbase, align 8
  %20 = load %struct.F90_Desc_la** %d.addr, align 8
  %gbase7 = getelementptr inbounds %struct.F90_Desc_la* %20, i32 0, i32 8
  store i64* %19, i64** %gbase7, align 8
  %21 = load %struct.F90_Desc_la** %a.addr, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc_la* %21, i32 0, i32 7
  %22 = load i64* %lbase, align 8
  %23 = load %struct.F90_Desc_la** %d.addr, align 8
  %lbase8 = getelementptr inbounds %struct.F90_Desc_la* %23, i32 0, i32 7
  store i64 %22, i64* %lbase8, align 8
  ret void
}

define  void @pgf90_init_descriptor(%struct.F90_Desc* %d, i32 %rank, i32 %kind, i32 %len, i32 %flags) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc*, align 8
  %rank.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store %struct.F90_Desc* %d, %struct.F90_Desc** %d.addr, align 8
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %kind, i32* %kind.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.F90_Desc** %d.addr, align 8
  %tag = getelementptr inbounds %struct.F90_Desc* %0, i32 0, i32 0
  store i32 35, i32* %tag, align 4
  %1 = load i32* %rank.addr, align 4
  %2 = load %struct.F90_Desc** %d.addr, align 8
  %rank1 = getelementptr inbounds %struct.F90_Desc* %2, i32 0, i32 1
  store i32 %1, i32* %rank1, align 4
  %3 = load i32* %kind.addr, align 4
  %4 = load %struct.F90_Desc** %d.addr, align 8
  %kind2 = getelementptr inbounds %struct.F90_Desc* %4, i32 0, i32 2
  store i32 %3, i32* %kind2, align 4
  %5 = load i32* %len.addr, align 4
  %6 = load %struct.F90_Desc** %d.addr, align 8
  %len3 = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 3
  store i32 %5, i32* %len3, align 4
  %7 = load i32* %flags.addr, align 4
  %or = or i32 %7, 65536
  %or4 = or i32 %or, 536870912
  %8 = load %struct.F90_Desc** %d.addr, align 8
  %flags5 = getelementptr inbounds %struct.F90_Desc* %8, i32 0, i32 4
  store i32 %or4, i32* %flags5, align 4
  %9 = load %struct.F90_Desc** %d.addr, align 8
  %flags6 = getelementptr inbounds %struct.F90_Desc* %9, i32 0, i32 4
  %10 = load i32* %flags6, align 4
  %and = and i32 %10, -17301505
  store i32 %and, i32* %flags6, align 4
  %11 = load %struct.F90_Desc** %d.addr, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc* %11, i32 0, i32 6
  store i32 0, i32* %gsize, align 4
  %12 = load %struct.F90_Desc** %d.addr, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 5
  store i32 0, i32* %lsize, align 4
  %13 = load %struct.F90_Desc** %d.addr, align 8
  %gbase = getelementptr inbounds %struct.F90_Desc* %13, i32 0, i32 8
  store i32* null, i32** %gbase, align 8
  %14 = load %struct.F90_Desc** %d.addr, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 7
  store i32 1, i32* %lbase, align 4
  ret void
}

define  i32 @pgf90_bogus_sect(%struct.F90_Desc* %d, %struct.F90_Desc* %a, i32 %flags, i32* %lower, i32* %upper, i32* %stride) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc*, align 8
  %a.addr = alloca %struct.F90_Desc*, align 8
  %flags.addr = alloca i32, align 4
  %lower.addr = alloca i32*, align 8
  %upper.addr = alloca i32*, align 8
  %stride.addr = alloca i32*, align 8
  %gsize = alloca i32, align 4
  %ax = alloca i32, align 4
  %dx = alloca i32, align 4
  store %struct.F90_Desc* %d, %struct.F90_Desc** %d.addr, align 8
  store %struct.F90_Desc* %a, %struct.F90_Desc** %a.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32* %lower, i32** %lower.addr, align 8
  store i32* %upper, i32** %upper.addr, align 8
  store i32* %stride, i32** %stride.addr, align 8
  %0 = load %struct.F90_Desc** %d.addr, align 8
  %flags1 = getelementptr inbounds %struct.F90_Desc* %0, i32 0, i32 4
  %1 = load i32* %flags1, align 4
  %or = or i32 %1, 8388608
  store i32 %or, i32* %flags1, align 4
  store i32 1, i32* %gsize, align 4
  store i32 0, i32* %dx, align 4
  store i32 0, i32* %ax, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %ax, align 4
  %3 = load %struct.F90_Desc** %a.addr, align 8
  %rank = getelementptr inbounds %struct.F90_Desc* %3, i32 0, i32 1
  %4 = load i32* %rank, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %flags.addr, align 4
  %6 = load i32* %ax, align 4
  %shl = shl i32 1, %6
  %and = and i32 %5, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end33

if.then:                                          ; preds = %for.body
  %7 = load i32* %dx, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i32** %lower.addr, align 8
  %arrayidx = getelementptr inbounds i32* %8, i64 %idxprom
  %9 = load i32* %arrayidx, align 4
  %10 = load i32* %dx, align 4
  %idxprom2 = sext i32 %10 to i64
  %11 = load %struct.F90_Desc** %d.addr, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %11, i32 0, i32 10
  %arrayidx3 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom2
  %lbound = getelementptr inbounds %struct.F90_DescDim* %arrayidx3, i32 0, i32 0
  store i32 %9, i32* %lbound, align 4
  %12 = load i32* %dx, align 4
  %idxprom4 = sext i32 %12 to i64
  %13 = load i32** %upper.addr, align 8
  %arrayidx5 = getelementptr inbounds i32* %13, i64 %idxprom4
  %14 = load i32* %arrayidx5, align 4
  %15 = load i32* %dx, align 4
  %idxprom6 = sext i32 %15 to i64
  %16 = load %struct.F90_Desc** %d.addr, align 8
  %dim7 = getelementptr inbounds %struct.F90_Desc* %16, i32 0, i32 10
  %arrayidx8 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7, i32 0, i64 %idxprom6
  %ubound = getelementptr inbounds %struct.F90_DescDim* %arrayidx8, i32 0, i32 5
  store i32 %14, i32* %ubound, align 4
  %17 = load i32* %dx, align 4
  %idxprom9 = sext i32 %17 to i64
  %18 = load i32** %upper.addr, align 8
  %arrayidx10 = getelementptr inbounds i32* %18, i64 %idxprom9
  %19 = load i32* %arrayidx10, align 4
  %20 = load i32* %dx, align 4
  %idxprom11 = sext i32 %20 to i64
  %21 = load i32** %lower.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %21, i64 %idxprom11
  %22 = load i32* %arrayidx12, align 4
  %sub = sub nsw i32 %19, %22
  %add = add nsw i32 %sub, 1
  %23 = load i32* %dx, align 4
  %idxprom13 = sext i32 %23 to i64
  %24 = load %struct.F90_Desc** %d.addr, align 8
  %dim14 = getelementptr inbounds %struct.F90_Desc* %24, i32 0, i32 10
  %arrayidx15 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14, i32 0, i64 %idxprom13
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx15, i32 0, i32 1
  store i32 %add, i32* %extent, align 4
  %25 = load i32* %dx, align 4
  %idxprom16 = sext i32 %25 to i64
  %26 = load i32** %stride.addr, align 8
  %arrayidx17 = getelementptr inbounds i32* %26, i64 %idxprom16
  %27 = load i32* %arrayidx17, align 4
  %28 = load i32* %dx, align 4
  %idxprom18 = sext i32 %28 to i64
  %29 = load %struct.F90_Desc** %d.addr, align 8
  %dim19 = getelementptr inbounds %struct.F90_Desc* %29, i32 0, i32 10
  %arrayidx20 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19, i32 0, i64 %idxprom18
  %lstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx20, i32 0, i32 4
  store i32 %27, i32* %lstride, align 4
  %30 = load i32* %dx, align 4
  %idxprom21 = sext i32 %30 to i64
  %31 = load %struct.F90_Desc** %d.addr, align 8
  %dim22 = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 10
  %arrayidx23 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22, i32 0, i64 %idxprom21
  %lstride24 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23, i32 0, i32 4
  %32 = load i32* %lstride24, align 4
  %33 = load i32* %gsize, align 4
  %cmp25 = icmp ne i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end

if.then26:                                        ; preds = %if.then
  %34 = load %struct.F90_Desc** %d.addr, align 8
  %flags27 = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 4
  %35 = load i32* %flags27, align 4
  %and28 = and i32 %35, -536870913
  store i32 %and28, i32* %flags27, align 4
  br label %if.end

if.end:                                           ; preds = %if.then26, %if.then
  %36 = load i32* %dx, align 4
  %idxprom29 = sext i32 %36 to i64
  %37 = load %struct.F90_Desc** %d.addr, align 8
  %dim30 = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 10
  %arrayidx31 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30, i32 0, i64 %idxprom29
  %extent32 = getelementptr inbounds %struct.F90_DescDim* %arrayidx31, i32 0, i32 1
  %38 = load i32* %extent32, align 4
  %39 = load i32* %gsize, align 4
  %mul = mul nsw i32 %39, %38
  store i32 %mul, i32* %gsize, align 4
  %40 = load i32* %dx, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %dx, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end33
  %41 = load i32* %ax, align 4
  %inc34 = add nsw i32 %41, 1
  store i32 %inc34, i32* %ax, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = load i32* %gsize, align 4
  ret i32 %42
}

define  void @pgf90_sect1v(i8* %pd, i8* %pa, i8* %prank, i32 %lw0, i32 %up0, i32 %st0, i32 %flags) nounwind alwaysinline {
entry:
  %d.addr.i71 = alloca %struct.F90_Desc*, align 8
  %a.addr.i72 = alloca %struct.F90_Desc*, align 8
  %flags.addr.i73 = alloca i32, align 4
  %lower.addr.i = alloca i32*, align 8
  %upper.addr.i = alloca i32*, align 8
  %stride.addr.i = alloca i32*, align 8
  %gsize.i74 = alloca i32, align 4
  %ax.i = alloca i32, align 4
  %dx.i = alloca i32, align 4
  %d.addr.i27 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i28 = alloca i32, align 4
  %a.addr.i29 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i30 = alloca i32, align 4
  %lb.addr.i31 = alloca i32, align 4
  %ub.addr.i32 = alloca i32, align 4
  %st.addr.i33 = alloca i32, align 4
  %gsize.addr.i34 = alloca i32, align 4
  %flags.addr.i35 = alloca i32, align 4
  %extent.i36 = alloca i32, align 4
  %d.addr.i24 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i = alloca i32, align 4
  %a.addr.i25 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i = alloca i32, align 4
  %lb.addr.i = alloca i32, align 4
  %ub.addr.i = alloca i32, align 4
  %st.addr.i = alloca i32, align 4
  %gsize.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %extent.i = alloca i32, align 4
  %noreindex.i = alloca i32, align 4
  %myoffset.i = alloca i32, align 4
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %a.addr.i = alloca %struct.F90_Desc*, align 8
  %pd.addr = alloca i8*, align 8
  %pa.addr = alloca i8*, align 8
  %prank.addr = alloca i8*, align 8
  %lw0.addr = alloca i32, align 4
  %up0.addr = alloca i32, align 4
  %st0.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %gsize = alloca i32, align 4
  %dx = alloca i32, align 4
  %rank = alloca i32, align 4
  %d = alloca %struct.F90_Desc*, align 8
  %a = alloca %struct.F90_Desc*, align 8
  %lower = alloca [1 x i32], align 4
  %upper = alloca [1 x i32], align 4
  %stride = alloca [1 x i32], align 4
  %ax = alloca i32, align 4
  store i8* %pd, i8** %pd.addr, align 8
  store i8* %pa, i8** %pa.addr, align 8
  store i8* %prank, i8** %prank.addr, align 8
  store i32 %lw0, i32* %lw0.addr, align 4
  store i32 %up0, i32* %up0.addr, align 4
  store i32 %st0, i32* %st0.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8** %pd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %d, align 8
  %2 = load i8** %pa.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc*
  store %struct.F90_Desc* %3, %struct.F90_Desc** %a, align 8
  %4 = load i32* %flags.addr, align 4
  %and = and i32 %4, 1
  store i32 %and, i32* %rank, align 4
  %5 = load %struct.F90_Desc** %d, align 8
  %6 = load i32* %rank, align 4
  %7 = load %struct.F90_Desc** %a, align 8
  store %struct.F90_Desc* %5, %struct.F90_Desc** %d.addr.i, align 8
  store i32 %6, i32* %rank.addr.i, align 4
  store %struct.F90_Desc* %7, %struct.F90_Desc** %a.addr.i, align 8
  %8 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %8, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %9 = load i32* %rank.addr.i, align 4
  %10 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %10, i32 0, i32 1
  store i32 %9, i32* %rank1.i, align 4
  %11 = load %struct.F90_Desc** %a.addr.i, align 8
  %kind.i = getelementptr inbounds %struct.F90_Desc* %11, i32 0, i32 2
  %12 = load i32* %kind.i, align 4
  %13 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %13, i32 0, i32 2
  store i32 %12, i32* %kind2.i, align 4
  %14 = load %struct.F90_Desc** %a.addr.i, align 8
  %len.i = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 3
  %15 = load i32* %len.i, align 4
  %16 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %16, i32 0, i32 3
  store i32 %15, i32* %len3.i, align 4
  %17 = load %struct.F90_Desc** %a.addr.i, align 8
  %flags.i = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 4
  %18 = load i32* %flags.i, align 4
  %19 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags4.i = getelementptr inbounds %struct.F90_Desc* %19, i32 0, i32 4
  store i32 %18, i32* %flags4.i, align 4
  %20 = load %struct.F90_Desc** %a.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 6
  %21 = load i32* %gsize.i, align 4
  %22 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize5.i = getelementptr inbounds %struct.F90_Desc* %22, i32 0, i32 6
  store i32 %21, i32* %gsize5.i, align 4
  %23 = load %struct.F90_Desc** %a.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %23, i32 0, i32 5
  %24 = load i32* %lsize.i, align 4
  %25 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize6.i = getelementptr inbounds %struct.F90_Desc* %25, i32 0, i32 5
  store i32 %24, i32* %lsize6.i, align 4
  %26 = load %struct.F90_Desc** %a.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %26, i32 0, i32 8
  %27 = load i32** %gbase.i, align 8
  %28 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase7.i = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 8
  store i32* %27, i32** %gbase7.i, align 8
  %29 = load %struct.F90_Desc** %a.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %29, i32 0, i32 7
  %30 = load i32* %lbase.i, align 4
  %31 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase8.i = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 7
  store i32 %30, i32* %lbase8.i, align 4
  store i32 1, i32* %gsize, align 4
  store i32 0, i32* %dx, align 4
  %32 = load i32* %flags.addr, align 4
  %and1 = and i32 %32, 256
  %tobool = icmp ne i32 %and1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %33 = load i32* %lw0.addr, align 4
  %arrayidx = getelementptr inbounds [1 x i32]* %lower, i32 0, i64 0
  store i32 %33, i32* %arrayidx, align 4
  %34 = load i32* %up0.addr, align 4
  %arrayidx2 = getelementptr inbounds [1 x i32]* %upper, i32 0, i64 0
  store i32 %34, i32* %arrayidx2, align 4
  %35 = load i32* %st0.addr, align 4
  %arrayidx3 = getelementptr inbounds [1 x i32]* %stride, i32 0, i64 0
  store i32 %35, i32* %arrayidx3, align 4
  %36 = load %struct.F90_Desc** %d, align 8
  %37 = load %struct.F90_Desc** %a, align 8
  %38 = load i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [1 x i32]* %lower, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [1 x i32]* %upper, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [1 x i32]* %stride, i32 0, i32 0
  store %struct.F90_Desc* %36, %struct.F90_Desc** %d.addr.i71, align 8
  store %struct.F90_Desc* %37, %struct.F90_Desc** %a.addr.i72, align 8
  store i32 %38, i32* %flags.addr.i73, align 4
  store i32* %arraydecay, i32** %lower.addr.i, align 8
  store i32* %arraydecay4, i32** %upper.addr.i, align 8
  store i32* %arraydecay5, i32** %stride.addr.i, align 8
  %39 = load %struct.F90_Desc** %d.addr.i71, align 8
  %flags1.i = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 4
  %40 = load i32* %flags1.i, align 4
  %or.i = or i32 %40, 8388608
  store i32 %or.i, i32* %flags1.i, align 4
  store i32 1, i32* %gsize.i74, align 4
  store i32 0, i32* %dx.i, align 4
  store i32 0, i32* %ax.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end33.i, %if.then
  %41 = load i32* %ax.i, align 4
  %42 = load %struct.F90_Desc** %a.addr.i72, align 8
  %rank.i = getelementptr inbounds %struct.F90_Desc* %42, i32 0, i32 1
  %43 = load i32* %rank.i, align 4
  %cmp.i75 = icmp slt i32 %41, %43
  br i1 %cmp.i75, label %for.body.i, label %pgf90_bogus_sect.exit

for.body.i:                                       ; preds = %for.cond.i
  %44 = load i32* %flags.addr.i73, align 4
  %45 = load i32* %ax.i, align 4
  %shl.i = shl i32 1, %45
  %and.i76 = and i32 %44, %shl.i
  %tobool.i77 = icmp ne i32 %and.i76, 0
  br i1 %tobool.i77, label %if.then.i96, label %if.end33.i

if.then.i96:                                      ; preds = %for.body.i
  %46 = load i32* %dx.i, align 4
  %idxprom.i78 = sext i32 %46 to i64
  %47 = load i32** %lower.addr.i, align 8
  %arrayidx.i79 = getelementptr inbounds i32* %47, i64 %idxprom.i78
  %48 = load i32* %arrayidx.i79, align 4
  %49 = load i32* %dx.i, align 4
  %idxprom2.i = sext i32 %49 to i64
  %50 = load %struct.F90_Desc** %d.addr.i71, align 8
  %dim.i80 = getelementptr inbounds %struct.F90_Desc* %50, i32 0, i32 10
  %arrayidx3.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i80, i32 0, i64 %idxprom2.i
  %lbound.i81 = getelementptr inbounds %struct.F90_DescDim* %arrayidx3.i, i32 0, i32 0
  store i32 %48, i32* %lbound.i81, align 4
  %51 = load i32* %dx.i, align 4
  %idxprom4.i = sext i32 %51 to i64
  %52 = load i32** %upper.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i32* %52, i64 %idxprom4.i
  %53 = load i32* %arrayidx5.i, align 4
  %54 = load i32* %dx.i, align 4
  %idxprom6.i = sext i32 %54 to i64
  %55 = load %struct.F90_Desc** %d.addr.i71, align 8
  %dim7.i = getelementptr inbounds %struct.F90_Desc* %55, i32 0, i32 10
  %arrayidx8.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7.i, i32 0, i64 %idxprom6.i
  %ubound.i82 = getelementptr inbounds %struct.F90_DescDim* %arrayidx8.i, i32 0, i32 5
  store i32 %53, i32* %ubound.i82, align 4
  %56 = load i32* %dx.i, align 4
  %idxprom9.i = sext i32 %56 to i64
  %57 = load i32** %upper.addr.i, align 8
  %arrayidx10.i83 = getelementptr inbounds i32* %57, i64 %idxprom9.i
  %58 = load i32* %arrayidx10.i83, align 4
  %59 = load i32* %dx.i, align 4
  %idxprom11.i84 = sext i32 %59 to i64
  %60 = load i32** %lower.addr.i, align 8
  %arrayidx12.i = getelementptr inbounds i32* %60, i64 %idxprom11.i84
  %61 = load i32* %arrayidx12.i, align 4
  %sub.i85 = sub nsw i32 %58, %61
  %add.i86 = add nsw i32 %sub.i85, 1
  %62 = load i32* %dx.i, align 4
  %idxprom13.i = sext i32 %62 to i64
  %63 = load %struct.F90_Desc** %d.addr.i71, align 8
  %dim14.i = getelementptr inbounds %struct.F90_Desc* %63, i32 0, i32 10
  %arrayidx15.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14.i, i32 0, i64 %idxprom13.i
  %extent.i87 = getelementptr inbounds %struct.F90_DescDim* %arrayidx15.i, i32 0, i32 1
  store i32 %add.i86, i32* %extent.i87, align 4
  %64 = load i32* %dx.i, align 4
  %idxprom16.i = sext i32 %64 to i64
  %65 = load i32** %stride.addr.i, align 8
  %arrayidx17.i88 = getelementptr inbounds i32* %65, i64 %idxprom16.i
  %66 = load i32* %arrayidx17.i88, align 4
  %67 = load i32* %dx.i, align 4
  %idxprom18.i89 = sext i32 %67 to i64
  %68 = load %struct.F90_Desc** %d.addr.i71, align 8
  %dim19.i90 = getelementptr inbounds %struct.F90_Desc* %68, i32 0, i32 10
  %arrayidx20.i91 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i90, i32 0, i64 %idxprom18.i89
  %lstride.i92 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i91, i32 0, i32 4
  store i32 %66, i32* %lstride.i92, align 4
  %69 = load i32* %dx.i, align 4
  %idxprom21.i93 = sext i32 %69 to i64
  %70 = load %struct.F90_Desc** %d.addr.i71, align 8
  %dim22.i94 = getelementptr inbounds %struct.F90_Desc* %70, i32 0, i32 10
  %arrayidx23.i95 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i94, i32 0, i64 %idxprom21.i93
  %lstride24.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i95, i32 0, i32 4
  %71 = load i32* %lstride24.i, align 4
  %72 = load i32* %gsize.i74, align 4
  %cmp25.i = icmp ne i32 %71, %72
  br i1 %cmp25.i, label %if.then26.i, label %if.end.i98

if.then26.i:                                      ; preds = %if.then.i96
  %73 = load %struct.F90_Desc** %d.addr.i71, align 8
  %flags27.i = getelementptr inbounds %struct.F90_Desc* %73, i32 0, i32 4
  %74 = load i32* %flags27.i, align 4
  %and28.i = and i32 %74, -536870913
  store i32 %and28.i, i32* %flags27.i, align 4
  br label %if.end.i98

if.end.i98:                                       ; preds = %if.then26.i, %if.then.i96
  %75 = load i32* %dx.i, align 4
  %idxprom29.i = sext i32 %75 to i64
  %76 = load %struct.F90_Desc** %d.addr.i71, align 8
  %dim30.i = getelementptr inbounds %struct.F90_Desc* %76, i32 0, i32 10
  %arrayidx31.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30.i, i32 0, i64 %idxprom29.i
  %extent32.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx31.i, i32 0, i32 1
  %77 = load i32* %extent32.i, align 4
  %78 = load i32* %gsize.i74, align 4
  %mul.i97 = mul nsw i32 %78, %77
  store i32 %mul.i97, i32* %gsize.i74, align 4
  %79 = load i32* %dx.i, align 4
  %inc.i = add nsw i32 %79, 1
  store i32 %inc.i, i32* %dx.i, align 4
  br label %if.end33.i

if.end33.i:                                       ; preds = %if.end.i98, %for.body.i
  %80 = load i32* %ax.i, align 4
  %inc34.i = add nsw i32 %80, 1
  store i32 %inc34.i, i32* %ax.i, align 4
  br label %for.cond.i

pgf90_bogus_sect.exit:                            ; preds = %for.cond.i
  %81 = load i32* %gsize.i74, align 4
  store i32 %81, i32* %gsize, align 4
  br label %if.end22

if.else:                                          ; preds = %entry
  store i32 0, i32* %ax, align 4
  %82 = load i32* %flags.addr, align 4
  %and6 = and i32 %82, 4194304
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.else13

if.then8:                                         ; preds = %if.else
  %83 = load %struct.F90_Desc** %d, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %83, i32 0, i32 7
  store i32 1, i32* %lbase, align 4
  %84 = load i32* %flags.addr, align 4
  %85 = load i32* %ax, align 4
  %shl = shl i32 1, %85
  %and9 = and i32 %84, %shl
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then8
  %86 = load %struct.F90_Desc** %d, align 8
  %87 = load i32* %dx, align 4
  %88 = load %struct.F90_Desc** %a, align 8
  %89 = load i32* %ax, align 4
  %90 = load i32* %lw0.addr, align 4
  %91 = load i32* %up0.addr, align 4
  %92 = load i32* %st0.addr, align 4
  %93 = load i32* %gsize, align 4
  %94 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %86, %struct.F90_Desc** %d.addr.i27, align 8
  store i32 %87, i32* %dx.addr.i28, align 4
  store %struct.F90_Desc* %88, %struct.F90_Desc** %a.addr.i29, align 8
  store i32 %89, i32* %ax.addr.i30, align 4
  store i32 %90, i32* %lb.addr.i31, align 4
  store i32 %91, i32* %ub.addr.i32, align 4
  store i32 %92, i32* %st.addr.i33, align 4
  store i32 %93, i32* %gsize.addr.i34, align 4
  store i32 %94, i32* %flags.addr.i35, align 4
  %95 = load i32* %ub.addr.i32, align 4
  %96 = load i32* %lb.addr.i31, align 4
  %sub.i37 = sub nsw i32 %95, %96
  %97 = load i32* %st.addr.i33, align 4
  %add.i38 = add nsw i32 %sub.i37, %97
  store i32 %add.i38, i32* %extent.i36, align 4
  %98 = load i32* %st.addr.i33, align 4
  %cmp.i39 = icmp ne i32 %98, 1
  br i1 %cmp.i39, label %if.then.i41, label %if.end4.i48

if.then.i41:                                      ; preds = %if.then11
  %99 = load i32* %st.addr.i33, align 4
  %cmp1.i40 = icmp eq i32 %99, -1
  br i1 %cmp1.i40, label %if.then2.i43, label %if.else.i45

if.then2.i43:                                     ; preds = %if.then.i41
  %100 = load i32* %extent.i36, align 4
  %sub3.i42 = sub nsw i32 0, %100
  store i32 %sub3.i42, i32* %extent.i36, align 4
  br label %if.end.i46

if.else.i45:                                      ; preds = %if.then.i41
  %101 = load i32* %st.addr.i33, align 4
  %102 = load i32* %extent.i36, align 4
  %div.i44 = sdiv i32 %102, %101
  store i32 %div.i44, i32* %extent.i36, align 4
  br label %if.end.i46

if.end.i46:                                       ; preds = %if.else.i45, %if.then2.i43
  br label %if.end4.i48

if.end4.i48:                                      ; preds = %if.end.i46, %if.then11
  %103 = load i32* %extent.i36, align 4
  %cmp5.i47 = icmp slt i32 %103, 0
  br i1 %cmp5.i47, label %if.then6.i49, label %if.end7.i69

if.then6.i49:                                     ; preds = %if.end4.i48
  store i32 0, i32* %extent.i36, align 4
  br label %if.end7.i69

if.end7.i69:                                      ; preds = %if.then6.i49, %if.end4.i48
  %104 = load i32* %dx.addr.i28, align 4
  %idxprom.i50 = sext i32 %104 to i64
  %105 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim.i51 = getelementptr inbounds %struct.F90_Desc* %105, i32 0, i32 10
  %arrayidx.i52 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i51, i32 0, i64 %idxprom.i50
  %lbound.i53 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i52, i32 0, i32 0
  store i32 1, i32* %lbound.i53, align 4
  %106 = load i32* %extent.i36, align 4
  %107 = load i32* %dx.addr.i28, align 4
  %idxprom8.i = sext i32 %107 to i64
  %108 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim9.i = getelementptr inbounds %struct.F90_Desc* %108, i32 0, i32 10
  %arrayidx10.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i, i32 0, i64 %idxprom8.i
  %ubound.i54 = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i, i32 0, i32 5
  store i32 %106, i32* %ubound.i54, align 4
  %109 = load i32* %extent.i36, align 4
  %110 = load i32* %dx.addr.i28, align 4
  %idxprom11.i = sext i32 %110 to i64
  %111 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim12.i = getelementptr inbounds %struct.F90_Desc* %111, i32 0, i32 10
  %arrayidx13.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i, i32 0, i64 %idxprom11.i
  %extent14.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i, i32 0, i32 1
  store i32 %109, i32* %extent14.i, align 4
  %112 = load i32* %dx.addr.i28, align 4
  %idxprom15.i55 = sext i32 %112 to i64
  %113 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim16.i56 = getelementptr inbounds %struct.F90_Desc* %113, i32 0, i32 10
  %arrayidx17.i57 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i56, i32 0, i64 %idxprom15.i55
  %sstride.i58 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i57, i32 0, i32 2
  store i32 1, i32* %sstride.i58, align 4
  %114 = load i32* %dx.addr.i28, align 4
  %idxprom18.i = sext i32 %114 to i64
  %115 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim19.i = getelementptr inbounds %struct.F90_Desc* %115, i32 0, i32 10
  %arrayidx20.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i, i32 0, i64 %idxprom18.i
  %soffset.i59 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i, i32 0, i32 3
  store i32 0, i32* %soffset.i59, align 4
  %116 = load i32* %ax.addr.i30, align 4
  %idxprom21.i = sext i32 %116 to i64
  %117 = load %struct.F90_Desc** %a.addr.i29, align 8
  %dim22.i = getelementptr inbounds %struct.F90_Desc* %117, i32 0, i32 10
  %arrayidx23.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i, i32 0, i64 %idxprom21.i
  %lstride.i60 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i, i32 0, i32 4
  %118 = load i32* %lstride.i60, align 4
  %119 = load i32* %st.addr.i33, align 4
  %mul.i61 = mul nsw i32 %118, %119
  %120 = load i32* %dx.addr.i28, align 4
  %idxprom24.i62 = sext i32 %120 to i64
  %121 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim25.i63 = getelementptr inbounds %struct.F90_Desc* %121, i32 0, i32 10
  %arrayidx26.i64 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i63, i32 0, i64 %idxprom24.i62
  %lstride27.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i64, i32 0, i32 4
  store i32 %mul.i61, i32* %lstride27.i, align 4
  %122 = load i32* %dx.addr.i28, align 4
  %idxprom28.i65 = sext i32 %122 to i64
  %123 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim29.i66 = getelementptr inbounds %struct.F90_Desc* %123, i32 0, i32 10
  %arrayidx30.i67 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i66, i32 0, i64 %idxprom28.i65
  %lstride31.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i67, i32 0, i32 4
  %124 = load i32* %lstride31.i, align 4
  %125 = load %struct.F90_Desc** %d.addr.i27, align 8
  %lbase.i68 = getelementptr inbounds %struct.F90_Desc* %125, i32 0, i32 7
  %126 = load i32* %lbase.i68, align 4
  %sub32.i = sub nsw i32 %126, %124
  store i32 %sub32.i, i32* %lbase.i68, align 4
  %127 = load i32* %dx.addr.i28, align 4
  %idxprom33.i = sext i32 %127 to i64
  %128 = load %struct.F90_Desc** %d.addr.i27, align 8
  %dim34.i = getelementptr inbounds %struct.F90_Desc* %128, i32 0, i32 10
  %arrayidx35.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i, i32 0, i64 %idxprom33.i
  %lstride36.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i, i32 0, i32 4
  %129 = load i32* %lstride36.i, align 4
  %130 = load i32* %gsize.addr.i34, align 4
  %cmp37.i = icmp ne i32 %129, %130
  br i1 %cmp37.i, label %if.then38.i, label %pgf90_tsection.exit

if.then38.i:                                      ; preds = %if.end7.i69
  %131 = load %struct.F90_Desc** %d.addr.i27, align 8
  %flags39.i = getelementptr inbounds %struct.F90_Desc* %131, i32 0, i32 4
  %132 = load i32* %flags39.i, align 4
  %and.i70 = and i32 %132, -536870913
  store i32 %and.i70, i32* %flags39.i, align 4
  br label %pgf90_tsection.exit

pgf90_tsection.exit:                              ; preds = %if.then38.i, %if.end7.i69
  %133 = load i32* %extent.i36, align 4
  %134 = load i32* %gsize.addr.i34, align 4
  %mul41.i = mul nsw i32 %134, %133
  store i32 %mul41.i, i32* %gsize.addr.i34, align 4
  %135 = load i32* %gsize.addr.i34, align 4
  store i32 %135, i32* %gsize, align 4
  %136 = load i32* %dx, align 4
  %inc = add nsw i32 %136, 1
  store i32 %inc, i32* %dx, align 4
  br label %if.end

if.end:                                           ; preds = %pgf90_tsection.exit, %if.then8
  br label %if.end21

if.else13:                                        ; preds = %if.else
  %137 = load i32* %flags.addr, align 4
  %138 = load i32* %ax, align 4
  %shl14 = shl i32 1, %138
  %and15 = and i32 %137, %shl14
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end20

if.then17:                                        ; preds = %if.else13
  %139 = load %struct.F90_Desc** %d, align 8
  %140 = load i32* %dx, align 4
  %141 = load %struct.F90_Desc** %a, align 8
  %142 = load i32* %ax, align 4
  %143 = load i32* %lw0.addr, align 4
  %144 = load i32* %up0.addr, align 4
  %145 = load i32* %st0.addr, align 4
  %146 = load i32* %gsize, align 4
  %147 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %139, %struct.F90_Desc** %d.addr.i24, align 8
  store i32 %140, i32* %dx.addr.i, align 4
  store %struct.F90_Desc* %141, %struct.F90_Desc** %a.addr.i25, align 8
  store i32 %142, i32* %ax.addr.i, align 4
  store i32 %143, i32* %lb.addr.i, align 4
  store i32 %144, i32* %ub.addr.i, align 4
  store i32 %145, i32* %st.addr.i, align 4
  store i32 %146, i32* %gsize.addr.i, align 4
  store i32 %147, i32* %flags.addr.i, align 4
  %148 = load i32* %ub.addr.i, align 4
  %149 = load i32* %lb.addr.i, align 4
  %sub.i = sub nsw i32 %148, %149
  %150 = load i32* %st.addr.i, align 4
  %add.i = add nsw i32 %sub.i, %150
  store i32 %add.i, i32* %extent.i, align 4
  %151 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %151, 33554432
  store i32 %and.i, i32* %noreindex.i, align 4
  %152 = load i32* %st.addr.i, align 4
  %cmp.i = icmp ne i32 %152, 1
  br i1 %cmp.i, label %if.then.i, label %if.end4.i

if.then.i:                                        ; preds = %if.then17
  %153 = load i32* %st.addr.i, align 4
  %cmp1.i = icmp eq i32 %153, -1
  br i1 %cmp1.i, label %if.then2.i, label %if.else.i

if.then2.i:                                       ; preds = %if.then.i
  %154 = load i32* %extent.i, align 4
  %sub3.i = sub nsw i32 0, %154
  store i32 %sub3.i, i32* %extent.i, align 4
  br label %if.end.i

if.else.i:                                        ; preds = %if.then.i
  %155 = load i32* %st.addr.i, align 4
  %156 = load i32* %extent.i, align 4
  %div.i = sdiv i32 %156, %155
  store i32 %div.i, i32* %extent.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then2.i
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.end.i, %if.then17
  %157 = load i32* %extent.i, align 4
  %cmp5.i = icmp slt i32 %157, 0
  br i1 %cmp5.i, label %if.then6.i, label %if.end7.i

if.then6.i:                                       ; preds = %if.end4.i
  store i32 0, i32* %extent.i, align 4
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then6.i, %if.end4.i
  %158 = load i32* %noreindex.i, align 4
  %tobool.i = icmp ne i32 %158, 0
  br i1 %tobool.i, label %land.lhs.true.i, label %if.else23.i

land.lhs.true.i:                                  ; preds = %if.end7.i
  %159 = load i32* %st.addr.i, align 4
  %cmp8.i = icmp eq i32 %159, 1
  br i1 %cmp8.i, label %if.then9.i, label %if.else23.i

if.then9.i:                                       ; preds = %land.lhs.true.i
  %160 = load i32* %dx.addr.i, align 4
  %idxprom.i = sext i32 %160 to i64
  %161 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim.i = getelementptr inbounds %struct.F90_Desc* %161, i32 0, i32 10
  %arrayidx.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i, i32 0, i64 %idxprom.i
  %lbound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i, i32 0, i32 0
  store i32 1, i32* %lbound.i, align 4
  %162 = load i32* %extent.i, align 4
  %cmp10.i = icmp eq i32 %162, 0
  br i1 %cmp10.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.then9.i
  %163 = load i32* %lb.addr.i, align 4
  %sub11.i = sub nsw i32 %163, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.then9.i
  %164 = load i32* %ub.addr.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub11.i, %cond.true.i ], [ %164, %cond.false.i ]
  %165 = load i32* %dx.addr.i, align 4
  %idxprom12.i = sext i32 %165 to i64
  %166 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim13.i = getelementptr inbounds %struct.F90_Desc* %166, i32 0, i32 10
  %arrayidx14.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i, i32 0, i64 %idxprom12.i
  %ubound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i, i32 0, i32 5
  store i32 %cond.i, i32* %ubound.i, align 4
  %167 = load i32* %dx.addr.i, align 4
  %idxprom15.i = sext i32 %167 to i64
  %168 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim16.i = getelementptr inbounds %struct.F90_Desc* %168, i32 0, i32 10
  %arrayidx17.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i, i32 0, i64 %idxprom15.i
  %ubound18.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i, i32 0, i32 5
  %169 = load i32* %ubound18.i, align 4
  %170 = load i32* %dx.addr.i, align 4
  %idxprom19.i = sext i32 %170 to i64
  %171 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim20.i = getelementptr inbounds %struct.F90_Desc* %171, i32 0, i32 10
  %arrayidx21.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i, i32 0, i64 %idxprom19.i
  %extent22.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i, i32 0, i32 1
  store i32 %169, i32* %extent22.i, align 4
  store i32 0, i32* %myoffset.i, align 4
  br label %if.end37.i

if.else23.i:                                      ; preds = %land.lhs.true.i, %if.end7.i
  %172 = load i32* %dx.addr.i, align 4
  %idxprom24.i = sext i32 %172 to i64
  %173 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim25.i = getelementptr inbounds %struct.F90_Desc* %173, i32 0, i32 10
  %arrayidx26.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i, i32 0, i64 %idxprom24.i
  %lbound27.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i, align 4
  %174 = load i32* %extent.i, align 4
  %175 = load i32* %dx.addr.i, align 4
  %idxprom28.i = sext i32 %175 to i64
  %176 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim29.i = getelementptr inbounds %struct.F90_Desc* %176, i32 0, i32 10
  %arrayidx30.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i, i32 0, i64 %idxprom28.i
  %ubound31.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i, i32 0, i32 5
  store i32 %174, i32* %ubound31.i, align 4
  %177 = load i32* %extent.i, align 4
  %178 = load i32* %dx.addr.i, align 4
  %idxprom32.i = sext i32 %178 to i64
  %179 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim33.i = getelementptr inbounds %struct.F90_Desc* %179, i32 0, i32 10
  %arrayidx34.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i, i32 0, i64 %idxprom32.i
  %extent35.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i, i32 0, i32 1
  store i32 %177, i32* %extent35.i, align 4
  %180 = load i32* %lb.addr.i, align 4
  %181 = load i32* %st.addr.i, align 4
  %sub36.i = sub nsw i32 %180, %181
  store i32 %sub36.i, i32* %myoffset.i, align 4
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.else23.i, %cond.end.i
  %182 = load i32* %dx.addr.i, align 4
  %idxprom38.i = sext i32 %182 to i64
  %183 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim39.i = getelementptr inbounds %struct.F90_Desc* %183, i32 0, i32 10
  %arrayidx40.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i, i32 0, i64 %idxprom38.i
  %sstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i, i32 0, i32 2
  store i32 1, i32* %sstride.i, align 4
  %184 = load i32* %dx.addr.i, align 4
  %idxprom41.i = sext i32 %184 to i64
  %185 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim42.i = getelementptr inbounds %struct.F90_Desc* %185, i32 0, i32 10
  %arrayidx43.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i, i32 0, i64 %idxprom41.i
  %soffset.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i, i32 0, i32 3
  store i32 0, i32* %soffset.i, align 4
  %186 = load i32* %ax.addr.i, align 4
  %idxprom44.i = sext i32 %186 to i64
  %187 = load %struct.F90_Desc** %a.addr.i25, align 8
  %dim45.i = getelementptr inbounds %struct.F90_Desc* %187, i32 0, i32 10
  %arrayidx46.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i, i32 0, i64 %idxprom44.i
  %lstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i, i32 0, i32 4
  %188 = load i32* %lstride.i, align 4
  %189 = load i32* %st.addr.i, align 4
  %mul.i = mul nsw i32 %188, %189
  %190 = load i32* %dx.addr.i, align 4
  %idxprom47.i = sext i32 %190 to i64
  %191 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim48.i = getelementptr inbounds %struct.F90_Desc* %191, i32 0, i32 10
  %arrayidx49.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i, i32 0, i64 %idxprom47.i
  %lstride50.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i, i32 0, i32 4
  store i32 %mul.i, i32* %lstride50.i, align 4
  %192 = load i32* %myoffset.i, align 4
  %193 = load i32* %dx.addr.i, align 4
  %idxprom51.i = sext i32 %193 to i64
  %194 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim52.i = getelementptr inbounds %struct.F90_Desc* %194, i32 0, i32 10
  %arrayidx53.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i, i32 0, i64 %idxprom51.i
  %lstride54.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i, i32 0, i32 4
  %195 = load i32* %lstride54.i, align 4
  %mul55.i = mul nsw i32 %192, %195
  %196 = load %struct.F90_Desc** %d.addr.i24, align 8
  %lbase.i26 = getelementptr inbounds %struct.F90_Desc* %196, i32 0, i32 7
  %197 = load i32* %lbase.i26, align 4
  %add56.i = add nsw i32 %197, %mul55.i
  store i32 %add56.i, i32* %lbase.i26, align 4
  %198 = load i32* %dx.addr.i, align 4
  %idxprom57.i = sext i32 %198 to i64
  %199 = load %struct.F90_Desc** %d.addr.i24, align 8
  %dim58.i = getelementptr inbounds %struct.F90_Desc* %199, i32 0, i32 10
  %arrayidx59.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i, i32 0, i64 %idxprom57.i
  %lstride60.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i, i32 0, i32 4
  %200 = load i32* %lstride60.i, align 4
  %201 = load i32* %gsize.addr.i, align 4
  %cmp61.i = icmp ne i32 %200, %201
  br i1 %cmp61.i, label %if.then62.i, label %pgf90_asection.exit

if.then62.i:                                      ; preds = %if.end37.i
  %202 = load %struct.F90_Desc** %d.addr.i24, align 8
  %flags63.i = getelementptr inbounds %struct.F90_Desc* %202, i32 0, i32 4
  %203 = load i32* %flags63.i, align 4
  %and64.i = and i32 %203, -536870913
  store i32 %and64.i, i32* %flags63.i, align 4
  br label %pgf90_asection.exit

pgf90_asection.exit:                              ; preds = %if.then62.i, %if.end37.i
  %204 = load i32* %extent.i, align 4
  %205 = load i32* %gsize.addr.i, align 4
  %mul66.i = mul nsw i32 %205, %204
  store i32 %mul66.i, i32* %gsize.addr.i, align 4
  %206 = load i32* %gsize.addr.i, align 4
  store i32 %206, i32* %gsize, align 4
  %207 = load i32* %dx, align 4
  %inc19 = add nsw i32 %207, 1
  store i32 %inc19, i32* %dx, align 4
  br label %if.end20

if.end20:                                         ; preds = %pgf90_asection.exit, %if.else13
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %pgf90_bogus_sect.exit
  %208 = load i32* %gsize, align 4
  %209 = load %struct.F90_Desc** %d, align 8
  %gsize23 = getelementptr inbounds %struct.F90_Desc* %209, i32 0, i32 6
  store i32 %208, i32* %gsize23, align 4
  %210 = load i32* %gsize, align 4
  %211 = load %struct.F90_Desc** %d, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %211, i32 0, i32 5
  store i32 %210, i32* %lsize, align 4
  ret void
}

define  void @pgf90_sect1(i8* %d, i8* %a, i8* %prank, i8* %lw0, i8* %up0, i8* %st0, i8* %flags) nounwind alwaysinline {
entry:
  %d.addr.i71.i = alloca %struct.F90_Desc*, align 8
  %a.addr.i72.i = alloca %struct.F90_Desc*, align 8
  %flags.addr.i73.i = alloca i32, align 4
  %lower.addr.i.i = alloca i32*, align 8
  %upper.addr.i.i = alloca i32*, align 8
  %stride.addr.i.i = alloca i32*, align 8
  %gsize.i74.i = alloca i32, align 4
  %ax.i.i = alloca i32, align 4
  %dx.i.i = alloca i32, align 4
  %d.addr.i27.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i28.i = alloca i32, align 4
  %a.addr.i29.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i30.i = alloca i32, align 4
  %lb.addr.i31.i = alloca i32, align 4
  %ub.addr.i32.i = alloca i32, align 4
  %st.addr.i33.i = alloca i32, align 4
  %gsize.addr.i34.i = alloca i32, align 4
  %flags.addr.i35.i = alloca i32, align 4
  %extent.i36.i = alloca i32, align 4
  %d.addr.i24.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i.i = alloca i32, align 4
  %a.addr.i25.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i.i = alloca i32, align 4
  %lb.addr.i.i = alloca i32, align 4
  %ub.addr.i.i = alloca i32, align 4
  %st.addr.i.i = alloca i32, align 4
  %gsize.addr.i.i = alloca i32, align 4
  %flags.addr.i.i = alloca i32, align 4
  %extent.i.i = alloca i32, align 4
  %noreindex.i.i = alloca i32, align 4
  %myoffset.i.i = alloca i32, align 4
  %d.addr.i.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i.i = alloca i32, align 4
  %a.addr.i.i = alloca %struct.F90_Desc*, align 8
  %pd.addr.i = alloca i8*, align 8
  %pa.addr.i = alloca i8*, align 8
  %prank.addr.i = alloca i8*, align 8
  %lw0.addr.i = alloca i32, align 4
  %up0.addr.i = alloca i32, align 4
  %st0.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %gsize.i = alloca i32, align 4
  %dx.i = alloca i32, align 4
  %rank.i = alloca i32, align 4
  %d.i = alloca %struct.F90_Desc*, align 8
  %a.i = alloca %struct.F90_Desc*, align 8
  %lower.i = alloca [1 x i32], align 4
  %upper.i = alloca [1 x i32], align 4
  %stride.i = alloca [1 x i32], align 4
  %ax.i = alloca i32, align 4
  %d.addr = alloca i8*, align 8
  %a.addr = alloca i8*, align 8
  %prank.addr = alloca i8*, align 8
  %lw0.addr = alloca i8*, align 8
  %up0.addr = alloca i8*, align 8
  %st0.addr = alloca i8*, align 8
  %flags.addr = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %a, i8** %a.addr, align 8
  store i8* %prank, i8** %prank.addr, align 8
  store i8* %lw0, i8** %lw0.addr, align 8
  store i8* %up0, i8** %up0.addr, align 8
  store i8* %st0, i8** %st0.addr, align 8
  store i8* %flags, i8** %flags.addr, align 8
  %0 = load i8** %d.addr, align 8
  %1 = load i8** %a.addr, align 8
  %2 = load i8** %prank.addr, align 8
  %3 = load i8** %lw0.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4
  %6 = load i8** %up0.addr, align 8
  %7 = bitcast i8* %6 to i32*
  %8 = load i32* %7, align 4
  %9 = load i8** %st0.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %12 = load i8** %flags.addr, align 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32* %13, align 4
  store i8* %0, i8** %pd.addr.i, align 8
  store i8* %1, i8** %pa.addr.i, align 8
  store i8* %2, i8** %prank.addr.i, align 8
  store i32 %5, i32* %lw0.addr.i, align 4
  store i32 %8, i32* %up0.addr.i, align 4
  store i32 %11, i32* %st0.addr.i, align 4
  store i32 %14, i32* %flags.addr.i, align 4
  %15 = load i8** %pd.addr.i, align 8
  %16 = bitcast i8* %15 to %struct.F90_Desc*
  store %struct.F90_Desc* %16, %struct.F90_Desc** %d.i, align 8
  %17 = load i8** %pa.addr.i, align 8
  %18 = bitcast i8* %17 to %struct.F90_Desc*
  store %struct.F90_Desc* %18, %struct.F90_Desc** %a.i, align 8
  %19 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %19, 1
  store i32 %and.i, i32* %rank.i, align 4
  %20 = load %struct.F90_Desc** %d.i, align 8
  %21 = load i32* %rank.i, align 4
  %22 = load %struct.F90_Desc** %a.i, align 8
  store %struct.F90_Desc* %20, %struct.F90_Desc** %d.addr.i.i, align 8
  store i32 %21, i32* %rank.addr.i.i, align 4
  store %struct.F90_Desc* %22, %struct.F90_Desc** %a.addr.i.i, align 8
  %23 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %tag.i.i = getelementptr inbounds %struct.F90_Desc* %23, i32 0, i32 0
  store i32 35, i32* %tag.i.i, align 4
  %24 = load i32* %rank.addr.i.i, align 4
  %25 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %rank1.i.i = getelementptr inbounds %struct.F90_Desc* %25, i32 0, i32 1
  store i32 %24, i32* %rank1.i.i, align 4
  %26 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %kind.i.i = getelementptr inbounds %struct.F90_Desc* %26, i32 0, i32 2
  %27 = load i32* %kind.i.i, align 4
  %28 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %kind2.i.i = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 2
  store i32 %27, i32* %kind2.i.i, align 4
  %29 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %len.i.i = getelementptr inbounds %struct.F90_Desc* %29, i32 0, i32 3
  %30 = load i32* %len.i.i, align 4
  %31 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %len3.i.i = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 3
  store i32 %30, i32* %len3.i.i, align 4
  %32 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %flags.i.i = getelementptr inbounds %struct.F90_Desc* %32, i32 0, i32 4
  %33 = load i32* %flags.i.i, align 4
  %34 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags4.i.i = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 4
  store i32 %33, i32* %flags4.i.i, align 4
  %35 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %gsize.i.i = getelementptr inbounds %struct.F90_Desc* %35, i32 0, i32 6
  %36 = load i32* %gsize.i.i, align 4
  %37 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gsize5.i.i = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 6
  store i32 %36, i32* %gsize5.i.i, align 4
  %38 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %lsize.i.i = getelementptr inbounds %struct.F90_Desc* %38, i32 0, i32 5
  %39 = load i32* %lsize.i.i, align 4
  %40 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lsize6.i.i = getelementptr inbounds %struct.F90_Desc* %40, i32 0, i32 5
  store i32 %39, i32* %lsize6.i.i, align 4
  %41 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %gbase.i.i = getelementptr inbounds %struct.F90_Desc* %41, i32 0, i32 8
  %42 = load i32** %gbase.i.i, align 8
  %43 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gbase7.i.i = getelementptr inbounds %struct.F90_Desc* %43, i32 0, i32 8
  store i32* %42, i32** %gbase7.i.i, align 8
  %44 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %lbase.i.i = getelementptr inbounds %struct.F90_Desc* %44, i32 0, i32 7
  %45 = load i32* %lbase.i.i, align 4
  %46 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lbase8.i.i = getelementptr inbounds %struct.F90_Desc* %46, i32 0, i32 7
  store i32 %45, i32* %lbase8.i.i, align 4
  store i32 1, i32* %gsize.i, align 4
  store i32 0, i32* %dx.i, align 4
  %47 = load i32* %flags.addr.i, align 4
  %and1.i = and i32 %47, 256
  %tobool.i = icmp ne i32 %and1.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %48 = load i32* %lw0.addr.i, align 4
  %arrayidx.i = getelementptr inbounds [1 x i32]* %lower.i, i32 0, i64 0
  store i32 %48, i32* %arrayidx.i, align 4
  %49 = load i32* %up0.addr.i, align 4
  %arrayidx2.i = getelementptr inbounds [1 x i32]* %upper.i, i32 0, i64 0
  store i32 %49, i32* %arrayidx2.i, align 4
  %50 = load i32* %st0.addr.i, align 4
  %arrayidx3.i = getelementptr inbounds [1 x i32]* %stride.i, i32 0, i64 0
  store i32 %50, i32* %arrayidx3.i, align 4
  %51 = load %struct.F90_Desc** %d.i, align 8
  %52 = load %struct.F90_Desc** %a.i, align 8
  %53 = load i32* %flags.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [1 x i32]* %lower.i, i32 0, i32 0
  %arraydecay4.i = getelementptr inbounds [1 x i32]* %upper.i, i32 0, i32 0
  %arraydecay5.i = getelementptr inbounds [1 x i32]* %stride.i, i32 0, i32 0
  store %struct.F90_Desc* %51, %struct.F90_Desc** %d.addr.i71.i, align 8
  store %struct.F90_Desc* %52, %struct.F90_Desc** %a.addr.i72.i, align 8
  store i32 %53, i32* %flags.addr.i73.i, align 4
  store i32* %arraydecay.i, i32** %lower.addr.i.i, align 8
  store i32* %arraydecay4.i, i32** %upper.addr.i.i, align 8
  store i32* %arraydecay5.i, i32** %stride.addr.i.i, align 8
  %54 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %flags1.i.i = getelementptr inbounds %struct.F90_Desc* %54, i32 0, i32 4
  %55 = load i32* %flags1.i.i, align 4
  %or.i.i = or i32 %55, 8388608
  store i32 %or.i.i, i32* %flags1.i.i, align 4
  store i32 1, i32* %gsize.i74.i, align 4
  store i32 0, i32* %dx.i.i, align 4
  store i32 0, i32* %ax.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %if.end33.i.i, %if.then.i
  %56 = load i32* %ax.i.i, align 4
  %57 = load %struct.F90_Desc** %a.addr.i72.i, align 8
  %rank.i.i = getelementptr inbounds %struct.F90_Desc* %57, i32 0, i32 1
  %58 = load i32* %rank.i.i, align 4
  %cmp.i75.i = icmp slt i32 %56, %58
  br i1 %cmp.i75.i, label %for.body.i.i, label %pgf90_bogus_sect.exit.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %59 = load i32* %flags.addr.i73.i, align 4
  %60 = load i32* %ax.i.i, align 4
  %shl.i.i = shl i32 1, %60
  %and.i76.i = and i32 %59, %shl.i.i
  %tobool.i77.i = icmp ne i32 %and.i76.i, 0
  br i1 %tobool.i77.i, label %if.then.i96.i, label %if.end33.i.i

if.then.i96.i:                                    ; preds = %for.body.i.i
  %61 = load i32* %dx.i.i, align 4
  %idxprom.i78.i = sext i32 %61 to i64
  %62 = load i32** %lower.addr.i.i, align 8
  %arrayidx.i79.i = getelementptr inbounds i32* %62, i64 %idxprom.i78.i
  %63 = load i32* %arrayidx.i79.i, align 4
  %64 = load i32* %dx.i.i, align 4
  %idxprom2.i.i = sext i32 %64 to i64
  %65 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %dim.i80.i = getelementptr inbounds %struct.F90_Desc* %65, i32 0, i32 10
  %arrayidx3.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i80.i, i32 0, i64 %idxprom2.i.i
  %lbound.i81.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx3.i.i, i32 0, i32 0
  store i32 %63, i32* %lbound.i81.i, align 4
  %66 = load i32* %dx.i.i, align 4
  %idxprom4.i.i = sext i32 %66 to i64
  %67 = load i32** %upper.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i32* %67, i64 %idxprom4.i.i
  %68 = load i32* %arrayidx5.i.i, align 4
  %69 = load i32* %dx.i.i, align 4
  %idxprom6.i.i = sext i32 %69 to i64
  %70 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %dim7.i.i = getelementptr inbounds %struct.F90_Desc* %70, i32 0, i32 10
  %arrayidx8.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7.i.i, i32 0, i64 %idxprom6.i.i
  %ubound.i82.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx8.i.i, i32 0, i32 5
  store i32 %68, i32* %ubound.i82.i, align 4
  %71 = load i32* %dx.i.i, align 4
  %idxprom9.i.i = sext i32 %71 to i64
  %72 = load i32** %upper.addr.i.i, align 8
  %arrayidx10.i83.i = getelementptr inbounds i32* %72, i64 %idxprom9.i.i
  %73 = load i32* %arrayidx10.i83.i, align 4
  %74 = load i32* %dx.i.i, align 4
  %idxprom11.i84.i = sext i32 %74 to i64
  %75 = load i32** %lower.addr.i.i, align 8
  %arrayidx12.i.i = getelementptr inbounds i32* %75, i64 %idxprom11.i84.i
  %76 = load i32* %arrayidx12.i.i, align 4
  %sub.i85.i = sub nsw i32 %73, %76
  %add.i86.i = add nsw i32 %sub.i85.i, 1
  %77 = load i32* %dx.i.i, align 4
  %idxprom13.i.i = sext i32 %77 to i64
  %78 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %dim14.i.i = getelementptr inbounds %struct.F90_Desc* %78, i32 0, i32 10
  %arrayidx15.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14.i.i, i32 0, i64 %idxprom13.i.i
  %extent.i87.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx15.i.i, i32 0, i32 1
  store i32 %add.i86.i, i32* %extent.i87.i, align 4
  %79 = load i32* %dx.i.i, align 4
  %idxprom16.i.i = sext i32 %79 to i64
  %80 = load i32** %stride.addr.i.i, align 8
  %arrayidx17.i88.i = getelementptr inbounds i32* %80, i64 %idxprom16.i.i
  %81 = load i32* %arrayidx17.i88.i, align 4
  %82 = load i32* %dx.i.i, align 4
  %idxprom18.i89.i = sext i32 %82 to i64
  %83 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %dim19.i90.i = getelementptr inbounds %struct.F90_Desc* %83, i32 0, i32 10
  %arrayidx20.i91.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i90.i, i32 0, i64 %idxprom18.i89.i
  %lstride.i92.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i91.i, i32 0, i32 4
  store i32 %81, i32* %lstride.i92.i, align 4
  %84 = load i32* %dx.i.i, align 4
  %idxprom21.i93.i = sext i32 %84 to i64
  %85 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %dim22.i94.i = getelementptr inbounds %struct.F90_Desc* %85, i32 0, i32 10
  %arrayidx23.i95.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i94.i, i32 0, i64 %idxprom21.i93.i
  %lstride24.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i95.i, i32 0, i32 4
  %86 = load i32* %lstride24.i.i, align 4
  %87 = load i32* %gsize.i74.i, align 4
  %cmp25.i.i = icmp ne i32 %86, %87
  br i1 %cmp25.i.i, label %if.then26.i.i, label %if.end.i98.i

if.then26.i.i:                                    ; preds = %if.then.i96.i
  %88 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %flags27.i.i = getelementptr inbounds %struct.F90_Desc* %88, i32 0, i32 4
  %89 = load i32* %flags27.i.i, align 4
  %and28.i.i = and i32 %89, -536870913
  store i32 %and28.i.i, i32* %flags27.i.i, align 4
  br label %if.end.i98.i

if.end.i98.i:                                     ; preds = %if.then26.i.i, %if.then.i96.i
  %90 = load i32* %dx.i.i, align 4
  %idxprom29.i.i = sext i32 %90 to i64
  %91 = load %struct.F90_Desc** %d.addr.i71.i, align 8
  %dim30.i.i = getelementptr inbounds %struct.F90_Desc* %91, i32 0, i32 10
  %arrayidx31.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30.i.i, i32 0, i64 %idxprom29.i.i
  %extent32.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx31.i.i, i32 0, i32 1
  %92 = load i32* %extent32.i.i, align 4
  %93 = load i32* %gsize.i74.i, align 4
  %mul.i97.i = mul nsw i32 %93, %92
  store i32 %mul.i97.i, i32* %gsize.i74.i, align 4
  %94 = load i32* %dx.i.i, align 4
  %inc.i.i = add nsw i32 %94, 1
  store i32 %inc.i.i, i32* %dx.i.i, align 4
  br label %if.end33.i.i

if.end33.i.i:                                     ; preds = %if.end.i98.i, %for.body.i.i
  %95 = load i32* %ax.i.i, align 4
  %inc34.i.i = add nsw i32 %95, 1
  store i32 %inc34.i.i, i32* %ax.i.i, align 4
  br label %for.cond.i.i

pgf90_bogus_sect.exit.i:                          ; preds = %for.cond.i.i
  %96 = load i32* %gsize.i74.i, align 4
  store i32 %96, i32* %gsize.i, align 4
  br label %pgf90_sect1v.exit

if.else.i:                                        ; preds = %entry
  store i32 0, i32* %ax.i, align 4
  %97 = load i32* %flags.addr.i, align 4
  %and6.i = and i32 %97, 4194304
  %tobool7.i = icmp ne i32 %and6.i, 0
  br i1 %tobool7.i, label %if.then8.i, label %if.else13.i

if.then8.i:                                       ; preds = %if.else.i
  %98 = load %struct.F90_Desc** %d.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %98, i32 0, i32 7
  store i32 1, i32* %lbase.i, align 4
  %99 = load i32* %flags.addr.i, align 4
  %100 = load i32* %ax.i, align 4
  %shl.i = shl i32 1, %100
  %and9.i = and i32 %99, %shl.i
  %tobool10.i = icmp ne i32 %and9.i, 0
  br i1 %tobool10.i, label %if.then11.i, label %if.end.i

if.then11.i:                                      ; preds = %if.then8.i
  %101 = load %struct.F90_Desc** %d.i, align 8
  %102 = load i32* %dx.i, align 4
  %103 = load %struct.F90_Desc** %a.i, align 8
  %104 = load i32* %ax.i, align 4
  %105 = load i32* %lw0.addr.i, align 4
  %106 = load i32* %up0.addr.i, align 4
  %107 = load i32* %st0.addr.i, align 4
  %108 = load i32* %gsize.i, align 4
  %109 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %101, %struct.F90_Desc** %d.addr.i27.i, align 8
  store i32 %102, i32* %dx.addr.i28.i, align 4
  store %struct.F90_Desc* %103, %struct.F90_Desc** %a.addr.i29.i, align 8
  store i32 %104, i32* %ax.addr.i30.i, align 4
  store i32 %105, i32* %lb.addr.i31.i, align 4
  store i32 %106, i32* %ub.addr.i32.i, align 4
  store i32 %107, i32* %st.addr.i33.i, align 4
  store i32 %108, i32* %gsize.addr.i34.i, align 4
  store i32 %109, i32* %flags.addr.i35.i, align 4
  %110 = load i32* %ub.addr.i32.i, align 4
  %111 = load i32* %lb.addr.i31.i, align 4
  %sub.i37.i = sub nsw i32 %110, %111
  %112 = load i32* %st.addr.i33.i, align 4
  %add.i38.i = add nsw i32 %sub.i37.i, %112
  store i32 %add.i38.i, i32* %extent.i36.i, align 4
  %113 = load i32* %st.addr.i33.i, align 4
  %cmp.i39.i = icmp ne i32 %113, 1
  br i1 %cmp.i39.i, label %if.then.i41.i, label %if.end4.i48.i

if.then.i41.i:                                    ; preds = %if.then11.i
  %114 = load i32* %st.addr.i33.i, align 4
  %cmp1.i40.i = icmp eq i32 %114, -1
  br i1 %cmp1.i40.i, label %if.then2.i43.i, label %if.else.i45.i

if.then2.i43.i:                                   ; preds = %if.then.i41.i
  %115 = load i32* %extent.i36.i, align 4
  %sub3.i42.i = sub nsw i32 0, %115
  store i32 %sub3.i42.i, i32* %extent.i36.i, align 4
  br label %if.end.i46.i

if.else.i45.i:                                    ; preds = %if.then.i41.i
  %116 = load i32* %st.addr.i33.i, align 4
  %117 = load i32* %extent.i36.i, align 4
  %div.i44.i = sdiv i32 %117, %116
  store i32 %div.i44.i, i32* %extent.i36.i, align 4
  br label %if.end.i46.i

if.end.i46.i:                                     ; preds = %if.else.i45.i, %if.then2.i43.i
  br label %if.end4.i48.i

if.end4.i48.i:                                    ; preds = %if.end.i46.i, %if.then11.i
  %118 = load i32* %extent.i36.i, align 4
  %cmp5.i47.i = icmp slt i32 %118, 0
  br i1 %cmp5.i47.i, label %if.then6.i49.i, label %if.end7.i69.i

if.then6.i49.i:                                   ; preds = %if.end4.i48.i
  store i32 0, i32* %extent.i36.i, align 4
  br label %if.end7.i69.i

if.end7.i69.i:                                    ; preds = %if.then6.i49.i, %if.end4.i48.i
  %119 = load i32* %dx.addr.i28.i, align 4
  %idxprom.i50.i = sext i32 %119 to i64
  %120 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim.i51.i = getelementptr inbounds %struct.F90_Desc* %120, i32 0, i32 10
  %arrayidx.i52.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i51.i, i32 0, i64 %idxprom.i50.i
  %lbound.i53.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i52.i, i32 0, i32 0
  store i32 1, i32* %lbound.i53.i, align 4
  %121 = load i32* %extent.i36.i, align 4
  %122 = load i32* %dx.addr.i28.i, align 4
  %idxprom8.i.i = sext i32 %122 to i64
  %123 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim9.i.i = getelementptr inbounds %struct.F90_Desc* %123, i32 0, i32 10
  %arrayidx10.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i.i, i32 0, i64 %idxprom8.i.i
  %ubound.i54.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i.i, i32 0, i32 5
  store i32 %121, i32* %ubound.i54.i, align 4
  %124 = load i32* %extent.i36.i, align 4
  %125 = load i32* %dx.addr.i28.i, align 4
  %idxprom11.i.i = sext i32 %125 to i64
  %126 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim12.i.i = getelementptr inbounds %struct.F90_Desc* %126, i32 0, i32 10
  %arrayidx13.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i.i, i32 0, i64 %idxprom11.i.i
  %extent14.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i.i, i32 0, i32 1
  store i32 %124, i32* %extent14.i.i, align 4
  %127 = load i32* %dx.addr.i28.i, align 4
  %idxprom15.i55.i = sext i32 %127 to i64
  %128 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim16.i56.i = getelementptr inbounds %struct.F90_Desc* %128, i32 0, i32 10
  %arrayidx17.i57.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i56.i, i32 0, i64 %idxprom15.i55.i
  %sstride.i58.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i57.i, i32 0, i32 2
  store i32 1, i32* %sstride.i58.i, align 4
  %129 = load i32* %dx.addr.i28.i, align 4
  %idxprom18.i.i = sext i32 %129 to i64
  %130 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim19.i.i = getelementptr inbounds %struct.F90_Desc* %130, i32 0, i32 10
  %arrayidx20.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i.i, i32 0, i64 %idxprom18.i.i
  %soffset.i59.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i59.i, align 4
  %131 = load i32* %ax.addr.i30.i, align 4
  %idxprom21.i.i = sext i32 %131 to i64
  %132 = load %struct.F90_Desc** %a.addr.i29.i, align 8
  %dim22.i.i = getelementptr inbounds %struct.F90_Desc* %132, i32 0, i32 10
  %arrayidx23.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i.i, i32 0, i64 %idxprom21.i.i
  %lstride.i60.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i.i, i32 0, i32 4
  %133 = load i32* %lstride.i60.i, align 4
  %134 = load i32* %st.addr.i33.i, align 4
  %mul.i61.i = mul nsw i32 %133, %134
  %135 = load i32* %dx.addr.i28.i, align 4
  %idxprom24.i62.i = sext i32 %135 to i64
  %136 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim25.i63.i = getelementptr inbounds %struct.F90_Desc* %136, i32 0, i32 10
  %arrayidx26.i64.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i63.i, i32 0, i64 %idxprom24.i62.i
  %lstride27.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i64.i, i32 0, i32 4
  store i32 %mul.i61.i, i32* %lstride27.i.i, align 4
  %137 = load i32* %dx.addr.i28.i, align 4
  %idxprom28.i65.i = sext i32 %137 to i64
  %138 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim29.i66.i = getelementptr inbounds %struct.F90_Desc* %138, i32 0, i32 10
  %arrayidx30.i67.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i66.i, i32 0, i64 %idxprom28.i65.i
  %lstride31.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i67.i, i32 0, i32 4
  %139 = load i32* %lstride31.i.i, align 4
  %140 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %lbase.i68.i = getelementptr inbounds %struct.F90_Desc* %140, i32 0, i32 7
  %141 = load i32* %lbase.i68.i, align 4
  %sub32.i.i = sub nsw i32 %141, %139
  store i32 %sub32.i.i, i32* %lbase.i68.i, align 4
  %142 = load i32* %dx.addr.i28.i, align 4
  %idxprom33.i.i = sext i32 %142 to i64
  %143 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %dim34.i.i = getelementptr inbounds %struct.F90_Desc* %143, i32 0, i32 10
  %arrayidx35.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i.i, i32 0, i64 %idxprom33.i.i
  %lstride36.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i.i, i32 0, i32 4
  %144 = load i32* %lstride36.i.i, align 4
  %145 = load i32* %gsize.addr.i34.i, align 4
  %cmp37.i.i = icmp ne i32 %144, %145
  br i1 %cmp37.i.i, label %if.then38.i.i, label %pgf90_tsection.exit.i

if.then38.i.i:                                    ; preds = %if.end7.i69.i
  %146 = load %struct.F90_Desc** %d.addr.i27.i, align 8
  %flags39.i.i = getelementptr inbounds %struct.F90_Desc* %146, i32 0, i32 4
  %147 = load i32* %flags39.i.i, align 4
  %and.i70.i = and i32 %147, -536870913
  store i32 %and.i70.i, i32* %flags39.i.i, align 4
  br label %pgf90_tsection.exit.i

pgf90_tsection.exit.i:                            ; preds = %if.then38.i.i, %if.end7.i69.i
  %148 = load i32* %extent.i36.i, align 4
  %149 = load i32* %gsize.addr.i34.i, align 4
  %mul41.i.i = mul nsw i32 %149, %148
  store i32 %mul41.i.i, i32* %gsize.addr.i34.i, align 4
  %150 = load i32* %gsize.addr.i34.i, align 4
  store i32 %150, i32* %gsize.i, align 4
  %151 = load i32* %dx.i, align 4
  %inc.i = add nsw i32 %151, 1
  store i32 %inc.i, i32* %dx.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %pgf90_tsection.exit.i, %if.then8.i
  br label %if.end21.i

if.else13.i:                                      ; preds = %if.else.i
  %152 = load i32* %flags.addr.i, align 4
  %153 = load i32* %ax.i, align 4
  %shl14.i = shl i32 1, %153
  %and15.i = and i32 %152, %shl14.i
  %tobool16.i = icmp ne i32 %and15.i, 0
  br i1 %tobool16.i, label %if.then17.i, label %if.end20.i

if.then17.i:                                      ; preds = %if.else13.i
  %154 = load %struct.F90_Desc** %d.i, align 8
  %155 = load i32* %dx.i, align 4
  %156 = load %struct.F90_Desc** %a.i, align 8
  %157 = load i32* %ax.i, align 4
  %158 = load i32* %lw0.addr.i, align 4
  %159 = load i32* %up0.addr.i, align 4
  %160 = load i32* %st0.addr.i, align 4
  %161 = load i32* %gsize.i, align 4
  %162 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %154, %struct.F90_Desc** %d.addr.i24.i, align 8
  store i32 %155, i32* %dx.addr.i.i, align 4
  store %struct.F90_Desc* %156, %struct.F90_Desc** %a.addr.i25.i, align 8
  store i32 %157, i32* %ax.addr.i.i, align 4
  store i32 %158, i32* %lb.addr.i.i, align 4
  store i32 %159, i32* %ub.addr.i.i, align 4
  store i32 %160, i32* %st.addr.i.i, align 4
  store i32 %161, i32* %gsize.addr.i.i, align 4
  store i32 %162, i32* %flags.addr.i.i, align 4
  %163 = load i32* %ub.addr.i.i, align 4
  %164 = load i32* %lb.addr.i.i, align 4
  %sub.i.i = sub nsw i32 %163, %164
  %165 = load i32* %st.addr.i.i, align 4
  %add.i.i = add nsw i32 %sub.i.i, %165
  store i32 %add.i.i, i32* %extent.i.i, align 4
  %166 = load i32* %flags.addr.i.i, align 4
  %and.i.i = and i32 %166, 33554432
  store i32 %and.i.i, i32* %noreindex.i.i, align 4
  %167 = load i32* %st.addr.i.i, align 4
  %cmp.i.i = icmp ne i32 %167, 1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %if.then17.i
  %168 = load i32* %st.addr.i.i, align 4
  %cmp1.i.i = icmp eq i32 %168, -1
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else.i.i

if.then2.i.i:                                     ; preds = %if.then.i.i
  %169 = load i32* %extent.i.i, align 4
  %sub3.i.i = sub nsw i32 0, %169
  store i32 %sub3.i.i, i32* %extent.i.i, align 4
  br label %if.end.i.i

if.else.i.i:                                      ; preds = %if.then.i.i
  %170 = load i32* %st.addr.i.i, align 4
  %171 = load i32* %extent.i.i, align 4
  %div.i.i = sdiv i32 %171, %170
  store i32 %div.i.i, i32* %extent.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i.i, %if.then2.i.i
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end.i.i, %if.then17.i
  %172 = load i32* %extent.i.i, align 4
  %cmp5.i.i = icmp slt i32 %172, 0
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.end7.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  store i32 0, i32* %extent.i.i, align 4
  br label %if.end7.i.i

if.end7.i.i:                                      ; preds = %if.then6.i.i, %if.end4.i.i
  %173 = load i32* %noreindex.i.i, align 4
  %tobool.i.i = icmp ne i32 %173, 0
  br i1 %tobool.i.i, label %land.lhs.true.i.i, label %if.else23.i.i

land.lhs.true.i.i:                                ; preds = %if.end7.i.i
  %174 = load i32* %st.addr.i.i, align 4
  %cmp8.i.i = icmp eq i32 %174, 1
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.else23.i.i

if.then9.i.i:                                     ; preds = %land.lhs.true.i.i
  %175 = load i32* %dx.addr.i.i, align 4
  %idxprom.i.i = sext i32 %175 to i64
  %176 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim.i.i = getelementptr inbounds %struct.F90_Desc* %176, i32 0, i32 10
  %arrayidx.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i.i, i32 0, i64 %idxprom.i.i
  %lbound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i.i, i32 0, i32 0
  store i32 1, i32* %lbound.i.i, align 4
  %177 = load i32* %extent.i.i, align 4
  %cmp10.i.i = icmp eq i32 %177, 0
  br i1 %cmp10.i.i, label %cond.true.i.i, label %cond.false.i.i

cond.true.i.i:                                    ; preds = %if.then9.i.i
  %178 = load i32* %lb.addr.i.i, align 4
  %sub11.i.i = sub nsw i32 %178, 1
  br label %cond.end.i.i

cond.false.i.i:                                   ; preds = %if.then9.i.i
  %179 = load i32* %ub.addr.i.i, align 4
  br label %cond.end.i.i

cond.end.i.i:                                     ; preds = %cond.false.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %sub11.i.i, %cond.true.i.i ], [ %179, %cond.false.i.i ]
  %180 = load i32* %dx.addr.i.i, align 4
  %idxprom12.i.i = sext i32 %180 to i64
  %181 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim13.i.i = getelementptr inbounds %struct.F90_Desc* %181, i32 0, i32 10
  %arrayidx14.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i.i, i32 0, i64 %idxprom12.i.i
  %ubound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i.i, i32 0, i32 5
  store i32 %cond.i.i, i32* %ubound.i.i, align 4
  %182 = load i32* %dx.addr.i.i, align 4
  %idxprom15.i.i = sext i32 %182 to i64
  %183 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim16.i.i = getelementptr inbounds %struct.F90_Desc* %183, i32 0, i32 10
  %arrayidx17.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i.i, i32 0, i64 %idxprom15.i.i
  %ubound18.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i.i, i32 0, i32 5
  %184 = load i32* %ubound18.i.i, align 4
  %185 = load i32* %dx.addr.i.i, align 4
  %idxprom19.i.i = sext i32 %185 to i64
  %186 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim20.i.i = getelementptr inbounds %struct.F90_Desc* %186, i32 0, i32 10
  %arrayidx21.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i.i, i32 0, i64 %idxprom19.i.i
  %extent22.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i.i, i32 0, i32 1
  store i32 %184, i32* %extent22.i.i, align 4
  store i32 0, i32* %myoffset.i.i, align 4
  br label %if.end37.i.i

if.else23.i.i:                                    ; preds = %land.lhs.true.i.i, %if.end7.i.i
  %187 = load i32* %dx.addr.i.i, align 4
  %idxprom24.i.i = sext i32 %187 to i64
  %188 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim25.i.i = getelementptr inbounds %struct.F90_Desc* %188, i32 0, i32 10
  %arrayidx26.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i.i, i32 0, i64 %idxprom24.i.i
  %lbound27.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i.i, align 4
  %189 = load i32* %extent.i.i, align 4
  %190 = load i32* %dx.addr.i.i, align 4
  %idxprom28.i.i = sext i32 %190 to i64
  %191 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim29.i.i = getelementptr inbounds %struct.F90_Desc* %191, i32 0, i32 10
  %arrayidx30.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i.i, i32 0, i64 %idxprom28.i.i
  %ubound31.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i.i, i32 0, i32 5
  store i32 %189, i32* %ubound31.i.i, align 4
  %192 = load i32* %extent.i.i, align 4
  %193 = load i32* %dx.addr.i.i, align 4
  %idxprom32.i.i = sext i32 %193 to i64
  %194 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim33.i.i = getelementptr inbounds %struct.F90_Desc* %194, i32 0, i32 10
  %arrayidx34.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i.i, i32 0, i64 %idxprom32.i.i
  %extent35.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i.i, i32 0, i32 1
  store i32 %192, i32* %extent35.i.i, align 4
  %195 = load i32* %lb.addr.i.i, align 4
  %196 = load i32* %st.addr.i.i, align 4
  %sub36.i.i = sub nsw i32 %195, %196
  store i32 %sub36.i.i, i32* %myoffset.i.i, align 4
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.else23.i.i, %cond.end.i.i
  %197 = load i32* %dx.addr.i.i, align 4
  %idxprom38.i.i = sext i32 %197 to i64
  %198 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim39.i.i = getelementptr inbounds %struct.F90_Desc* %198, i32 0, i32 10
  %arrayidx40.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i.i, i32 0, i64 %idxprom38.i.i
  %sstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i.i, i32 0, i32 2
  store i32 1, i32* %sstride.i.i, align 4
  %199 = load i32* %dx.addr.i.i, align 4
  %idxprom41.i.i = sext i32 %199 to i64
  %200 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim42.i.i = getelementptr inbounds %struct.F90_Desc* %200, i32 0, i32 10
  %arrayidx43.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i.i, i32 0, i64 %idxprom41.i.i
  %soffset.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i.i, align 4
  %201 = load i32* %ax.addr.i.i, align 4
  %idxprom44.i.i = sext i32 %201 to i64
  %202 = load %struct.F90_Desc** %a.addr.i25.i, align 8
  %dim45.i.i = getelementptr inbounds %struct.F90_Desc* %202, i32 0, i32 10
  %arrayidx46.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i.i, i32 0, i64 %idxprom44.i.i
  %lstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i.i, i32 0, i32 4
  %203 = load i32* %lstride.i.i, align 4
  %204 = load i32* %st.addr.i.i, align 4
  %mul.i.i = mul nsw i32 %203, %204
  %205 = load i32* %dx.addr.i.i, align 4
  %idxprom47.i.i = sext i32 %205 to i64
  %206 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim48.i.i = getelementptr inbounds %struct.F90_Desc* %206, i32 0, i32 10
  %arrayidx49.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i.i, i32 0, i64 %idxprom47.i.i
  %lstride50.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i.i, i32 0, i32 4
  store i32 %mul.i.i, i32* %lstride50.i.i, align 4
  %207 = load i32* %myoffset.i.i, align 4
  %208 = load i32* %dx.addr.i.i, align 4
  %idxprom51.i.i = sext i32 %208 to i64
  %209 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim52.i.i = getelementptr inbounds %struct.F90_Desc* %209, i32 0, i32 10
  %arrayidx53.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i.i, i32 0, i64 %idxprom51.i.i
  %lstride54.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i.i, i32 0, i32 4
  %210 = load i32* %lstride54.i.i, align 4
  %mul55.i.i = mul nsw i32 %207, %210
  %211 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %lbase.i26.i = getelementptr inbounds %struct.F90_Desc* %211, i32 0, i32 7
  %212 = load i32* %lbase.i26.i, align 4
  %add56.i.i = add nsw i32 %212, %mul55.i.i
  store i32 %add56.i.i, i32* %lbase.i26.i, align 4
  %213 = load i32* %dx.addr.i.i, align 4
  %idxprom57.i.i = sext i32 %213 to i64
  %214 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %dim58.i.i = getelementptr inbounds %struct.F90_Desc* %214, i32 0, i32 10
  %arrayidx59.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i.i, i32 0, i64 %idxprom57.i.i
  %lstride60.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i.i, i32 0, i32 4
  %215 = load i32* %lstride60.i.i, align 4
  %216 = load i32* %gsize.addr.i.i, align 4
  %cmp61.i.i = icmp ne i32 %215, %216
  br i1 %cmp61.i.i, label %if.then62.i.i, label %pgf90_asection.exit.i

if.then62.i.i:                                    ; preds = %if.end37.i.i
  %217 = load %struct.F90_Desc** %d.addr.i24.i, align 8
  %flags63.i.i = getelementptr inbounds %struct.F90_Desc* %217, i32 0, i32 4
  %218 = load i32* %flags63.i.i, align 4
  %and64.i.i = and i32 %218, -536870913
  store i32 %and64.i.i, i32* %flags63.i.i, align 4
  br label %pgf90_asection.exit.i

pgf90_asection.exit.i:                            ; preds = %if.then62.i.i, %if.end37.i.i
  %219 = load i32* %extent.i.i, align 4
  %220 = load i32* %gsize.addr.i.i, align 4
  %mul66.i.i = mul nsw i32 %220, %219
  store i32 %mul66.i.i, i32* %gsize.addr.i.i, align 4
  %221 = load i32* %gsize.addr.i.i, align 4
  store i32 %221, i32* %gsize.i, align 4
  %222 = load i32* %dx.i, align 4
  %inc19.i = add nsw i32 %222, 1
  store i32 %inc19.i, i32* %dx.i, align 4
  br label %if.end20.i

if.end20.i:                                       ; preds = %pgf90_asection.exit.i, %if.else13.i
  br label %if.end21.i

if.end21.i:                                       ; preds = %if.end20.i, %if.end.i
  br label %pgf90_sect1v.exit

pgf90_sect1v.exit:                                ; preds = %if.end21.i, %pgf90_bogus_sect.exit.i
  %223 = load i32* %gsize.i, align 4
  %224 = load %struct.F90_Desc** %d.i, align 8
  %gsize23.i = getelementptr inbounds %struct.F90_Desc* %224, i32 0, i32 6
  store i32 %223, i32* %gsize23.i, align 4
  %225 = load i32* %gsize.i, align 4
  %226 = load %struct.F90_Desc** %d.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %226, i32 0, i32 5
  store i32 %225, i32* %lsize.i, align 4
  ret void
}

define  void @pgf90_sect2v(i8* %pd, i8* %pa, i8* %prank, i32 %lw0, i32 %up0, i32 %st0, i32 %lw1, i32 %up1, i32 %st1, i32 %flags) nounwind alwaysinline {
entry:
  %d.addr.i262 = alloca %struct.F90_Desc*, align 8
  %a.addr.i263 = alloca %struct.F90_Desc*, align 8
  %flags.addr.i264 = alloca i32, align 4
  %lower.addr.i = alloca i32*, align 8
  %upper.addr.i = alloca i32*, align 8
  %stride.addr.i = alloca i32*, align 8
  %gsize.i265 = alloca i32, align 4
  %ax.i = alloca i32, align 4
  %dx.i = alloca i32, align 4
  %d.addr.i193 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i194 = alloca i32, align 4
  %a.addr.i195 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i196 = alloca i32, align 4
  %lb.addr.i197 = alloca i32, align 4
  %ub.addr.i198 = alloca i32, align 4
  %st.addr.i199 = alloca i32, align 4
  %gsize.addr.i200 = alloca i32, align 4
  %flags.addr.i201 = alloca i32, align 4
  %extent.i202 = alloca i32, align 4
  %d.addr.i149 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i150 = alloca i32, align 4
  %a.addr.i151 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i152 = alloca i32, align 4
  %lb.addr.i153 = alloca i32, align 4
  %ub.addr.i154 = alloca i32, align 4
  %st.addr.i155 = alloca i32, align 4
  %gsize.addr.i156 = alloca i32, align 4
  %flags.addr.i157 = alloca i32, align 4
  %extent.i158 = alloca i32, align 4
  %d.addr.i47 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i48 = alloca i32, align 4
  %a.addr.i49 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i50 = alloca i32, align 4
  %lb.addr.i51 = alloca i32, align 4
  %ub.addr.i52 = alloca i32, align 4
  %st.addr.i53 = alloca i32, align 4
  %gsize.addr.i54 = alloca i32, align 4
  %flags.addr.i55 = alloca i32, align 4
  %extent.i56 = alloca i32, align 4
  %noreindex.i57 = alloca i32, align 4
  %myoffset.i58 = alloca i32, align 4
  %d.addr.i44 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i = alloca i32, align 4
  %a.addr.i45 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i = alloca i32, align 4
  %lb.addr.i = alloca i32, align 4
  %ub.addr.i = alloca i32, align 4
  %st.addr.i = alloca i32, align 4
  %gsize.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %extent.i = alloca i32, align 4
  %noreindex.i = alloca i32, align 4
  %myoffset.i = alloca i32, align 4
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %a.addr.i = alloca %struct.F90_Desc*, align 8
  %pd.addr = alloca i8*, align 8
  %pa.addr = alloca i8*, align 8
  %prank.addr = alloca i8*, align 8
  %lw0.addr = alloca i32, align 4
  %up0.addr = alloca i32, align 4
  %st0.addr = alloca i32, align 4
  %lw1.addr = alloca i32, align 4
  %up1.addr = alloca i32, align 4
  %st1.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %gsize = alloca i32, align 4
  %dx = alloca i32, align 4
  %rank = alloca i32, align 4
  %d = alloca %struct.F90_Desc*, align 8
  %a = alloca %struct.F90_Desc*, align 8
  %lower = alloca [2 x i32], align 4
  %upper = alloca [2 x i32], align 4
  %stride = alloca [2 x i32], align 4
  %ax = alloca i32, align 4
  store i8* %pd, i8** %pd.addr, align 8
  store i8* %pa, i8** %pa.addr, align 8
  store i8* %prank, i8** %prank.addr, align 8
  store i32 %lw0, i32* %lw0.addr, align 4
  store i32 %up0, i32* %up0.addr, align 4
  store i32 %st0, i32* %st0.addr, align 4
  store i32 %lw1, i32* %lw1.addr, align 4
  store i32 %up1, i32* %up1.addr, align 4
  store i32 %st1, i32* %st1.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8** %pd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %d, align 8
  %2 = load i8** %pa.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc*
  store %struct.F90_Desc* %3, %struct.F90_Desc** %a, align 8
  %4 = load i32* %flags.addr, align 4
  %and = and i32 %4, 1
  %5 = load i32* %flags.addr, align 4
  %and1 = and i32 %5, 2
  %add = add nsw i32 %and, %and1
  store i32 %add, i32* %rank, align 4
  %6 = load %struct.F90_Desc** %d, align 8
  %7 = load i32* %rank, align 4
  %8 = load %struct.F90_Desc** %a, align 8
  store %struct.F90_Desc* %6, %struct.F90_Desc** %d.addr.i, align 8
  store i32 %7, i32* %rank.addr.i, align 4
  store %struct.F90_Desc* %8, %struct.F90_Desc** %a.addr.i, align 8
  %9 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %9, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %10 = load i32* %rank.addr.i, align 4
  %11 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %11, i32 0, i32 1
  store i32 %10, i32* %rank1.i, align 4
  %12 = load %struct.F90_Desc** %a.addr.i, align 8
  %kind.i = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 2
  %13 = load i32* %kind.i, align 4
  %14 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 2
  store i32 %13, i32* %kind2.i, align 4
  %15 = load %struct.F90_Desc** %a.addr.i, align 8
  %len.i = getelementptr inbounds %struct.F90_Desc* %15, i32 0, i32 3
  %16 = load i32* %len.i, align 4
  %17 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 3
  store i32 %16, i32* %len3.i, align 4
  %18 = load %struct.F90_Desc** %a.addr.i, align 8
  %flags.i = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 4
  %19 = load i32* %flags.i, align 4
  %20 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags4.i = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 4
  store i32 %19, i32* %flags4.i, align 4
  %21 = load %struct.F90_Desc** %a.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %21, i32 0, i32 6
  %22 = load i32* %gsize.i, align 4
  %23 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize5.i = getelementptr inbounds %struct.F90_Desc* %23, i32 0, i32 6
  store i32 %22, i32* %gsize5.i, align 4
  %24 = load %struct.F90_Desc** %a.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %24, i32 0, i32 5
  %25 = load i32* %lsize.i, align 4
  %26 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize6.i = getelementptr inbounds %struct.F90_Desc* %26, i32 0, i32 5
  store i32 %25, i32* %lsize6.i, align 4
  %27 = load %struct.F90_Desc** %a.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %27, i32 0, i32 8
  %28 = load i32** %gbase.i, align 8
  %29 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase7.i = getelementptr inbounds %struct.F90_Desc* %29, i32 0, i32 8
  store i32* %28, i32** %gbase7.i, align 8
  %30 = load %struct.F90_Desc** %a.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %30, i32 0, i32 7
  %31 = load i32* %lbase.i, align 4
  %32 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase8.i = getelementptr inbounds %struct.F90_Desc* %32, i32 0, i32 7
  store i32 %31, i32* %lbase8.i, align 4
  store i32 1, i32* %gsize, align 4
  store i32 0, i32* %dx, align 4
  %33 = load i32* %flags.addr, align 4
  %and2 = and i32 %33, 256
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %34 = load i32* %lw0.addr, align 4
  %arrayidx = getelementptr inbounds [2 x i32]* %lower, i32 0, i64 0
  store i32 %34, i32* %arrayidx, align 4
  %35 = load i32* %up0.addr, align 4
  %arrayidx3 = getelementptr inbounds [2 x i32]* %upper, i32 0, i64 0
  store i32 %35, i32* %arrayidx3, align 4
  %36 = load i32* %st0.addr, align 4
  %arrayidx4 = getelementptr inbounds [2 x i32]* %stride, i32 0, i64 0
  store i32 %36, i32* %arrayidx4, align 4
  %37 = load i32* %lw1.addr, align 4
  %arrayidx5 = getelementptr inbounds [2 x i32]* %lower, i32 0, i64 1
  store i32 %37, i32* %arrayidx5, align 4
  %38 = load i32* %up1.addr, align 4
  %arrayidx6 = getelementptr inbounds [2 x i32]* %upper, i32 0, i64 1
  store i32 %38, i32* %arrayidx6, align 4
  %39 = load i32* %st1.addr, align 4
  %arrayidx7 = getelementptr inbounds [2 x i32]* %stride, i32 0, i64 1
  store i32 %39, i32* %arrayidx7, align 4
  %40 = load %struct.F90_Desc** %d, align 8
  %41 = load %struct.F90_Desc** %a, align 8
  %42 = load i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [2 x i32]* %lower, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [2 x i32]* %upper, i32 0, i32 0
  %arraydecay9 = getelementptr inbounds [2 x i32]* %stride, i32 0, i32 0
  store %struct.F90_Desc* %40, %struct.F90_Desc** %d.addr.i262, align 8
  store %struct.F90_Desc* %41, %struct.F90_Desc** %a.addr.i263, align 8
  store i32 %42, i32* %flags.addr.i264, align 4
  store i32* %arraydecay, i32** %lower.addr.i, align 8
  store i32* %arraydecay8, i32** %upper.addr.i, align 8
  store i32* %arraydecay9, i32** %stride.addr.i, align 8
  %43 = load %struct.F90_Desc** %d.addr.i262, align 8
  %flags1.i = getelementptr inbounds %struct.F90_Desc* %43, i32 0, i32 4
  %44 = load i32* %flags1.i, align 4
  %or.i = or i32 %44, 8388608
  store i32 %or.i, i32* %flags1.i, align 4
  store i32 1, i32* %gsize.i265, align 4
  store i32 0, i32* %dx.i, align 4
  store i32 0, i32* %ax.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end33.i, %if.then
  %45 = load i32* %ax.i, align 4
  %46 = load %struct.F90_Desc** %a.addr.i263, align 8
  %rank.i = getelementptr inbounds %struct.F90_Desc* %46, i32 0, i32 1
  %47 = load i32* %rank.i, align 4
  %cmp.i266 = icmp slt i32 %45, %47
  br i1 %cmp.i266, label %for.body.i, label %pgf90_bogus_sect.exit

for.body.i:                                       ; preds = %for.cond.i
  %48 = load i32* %flags.addr.i264, align 4
  %49 = load i32* %ax.i, align 4
  %shl.i = shl i32 1, %49
  %and.i267 = and i32 %48, %shl.i
  %tobool.i268 = icmp ne i32 %and.i267, 0
  br i1 %tobool.i268, label %if.then.i287, label %if.end33.i

if.then.i287:                                     ; preds = %for.body.i
  %50 = load i32* %dx.i, align 4
  %idxprom.i269 = sext i32 %50 to i64
  %51 = load i32** %lower.addr.i, align 8
  %arrayidx.i270 = getelementptr inbounds i32* %51, i64 %idxprom.i269
  %52 = load i32* %arrayidx.i270, align 4
  %53 = load i32* %dx.i, align 4
  %idxprom2.i = sext i32 %53 to i64
  %54 = load %struct.F90_Desc** %d.addr.i262, align 8
  %dim.i271 = getelementptr inbounds %struct.F90_Desc* %54, i32 0, i32 10
  %arrayidx3.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i271, i32 0, i64 %idxprom2.i
  %lbound.i272 = getelementptr inbounds %struct.F90_DescDim* %arrayidx3.i, i32 0, i32 0
  store i32 %52, i32* %lbound.i272, align 4
  %55 = load i32* %dx.i, align 4
  %idxprom4.i = sext i32 %55 to i64
  %56 = load i32** %upper.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i32* %56, i64 %idxprom4.i
  %57 = load i32* %arrayidx5.i, align 4
  %58 = load i32* %dx.i, align 4
  %idxprom6.i = sext i32 %58 to i64
  %59 = load %struct.F90_Desc** %d.addr.i262, align 8
  %dim7.i = getelementptr inbounds %struct.F90_Desc* %59, i32 0, i32 10
  %arrayidx8.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7.i, i32 0, i64 %idxprom6.i
  %ubound.i273 = getelementptr inbounds %struct.F90_DescDim* %arrayidx8.i, i32 0, i32 5
  store i32 %57, i32* %ubound.i273, align 4
  %60 = load i32* %dx.i, align 4
  %idxprom9.i = sext i32 %60 to i64
  %61 = load i32** %upper.addr.i, align 8
  %arrayidx10.i274 = getelementptr inbounds i32* %61, i64 %idxprom9.i
  %62 = load i32* %arrayidx10.i274, align 4
  %63 = load i32* %dx.i, align 4
  %idxprom11.i275 = sext i32 %63 to i64
  %64 = load i32** %lower.addr.i, align 8
  %arrayidx12.i = getelementptr inbounds i32* %64, i64 %idxprom11.i275
  %65 = load i32* %arrayidx12.i, align 4
  %sub.i276 = sub nsw i32 %62, %65
  %add.i277 = add nsw i32 %sub.i276, 1
  %66 = load i32* %dx.i, align 4
  %idxprom13.i = sext i32 %66 to i64
  %67 = load %struct.F90_Desc** %d.addr.i262, align 8
  %dim14.i = getelementptr inbounds %struct.F90_Desc* %67, i32 0, i32 10
  %arrayidx15.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14.i, i32 0, i64 %idxprom13.i
  %extent.i278 = getelementptr inbounds %struct.F90_DescDim* %arrayidx15.i, i32 0, i32 1
  store i32 %add.i277, i32* %extent.i278, align 4
  %68 = load i32* %dx.i, align 4
  %idxprom16.i = sext i32 %68 to i64
  %69 = load i32** %stride.addr.i, align 8
  %arrayidx17.i279 = getelementptr inbounds i32* %69, i64 %idxprom16.i
  %70 = load i32* %arrayidx17.i279, align 4
  %71 = load i32* %dx.i, align 4
  %idxprom18.i280 = sext i32 %71 to i64
  %72 = load %struct.F90_Desc** %d.addr.i262, align 8
  %dim19.i281 = getelementptr inbounds %struct.F90_Desc* %72, i32 0, i32 10
  %arrayidx20.i282 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i281, i32 0, i64 %idxprom18.i280
  %lstride.i283 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i282, i32 0, i32 4
  store i32 %70, i32* %lstride.i283, align 4
  %73 = load i32* %dx.i, align 4
  %idxprom21.i284 = sext i32 %73 to i64
  %74 = load %struct.F90_Desc** %d.addr.i262, align 8
  %dim22.i285 = getelementptr inbounds %struct.F90_Desc* %74, i32 0, i32 10
  %arrayidx23.i286 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i285, i32 0, i64 %idxprom21.i284
  %lstride24.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i286, i32 0, i32 4
  %75 = load i32* %lstride24.i, align 4
  %76 = load i32* %gsize.i265, align 4
  %cmp25.i = icmp ne i32 %75, %76
  br i1 %cmp25.i, label %if.then26.i, label %if.end.i289

if.then26.i:                                      ; preds = %if.then.i287
  %77 = load %struct.F90_Desc** %d.addr.i262, align 8
  %flags27.i = getelementptr inbounds %struct.F90_Desc* %77, i32 0, i32 4
  %78 = load i32* %flags27.i, align 4
  %and28.i = and i32 %78, -536870913
  store i32 %and28.i, i32* %flags27.i, align 4
  br label %if.end.i289

if.end.i289:                                      ; preds = %if.then26.i, %if.then.i287
  %79 = load i32* %dx.i, align 4
  %idxprom29.i = sext i32 %79 to i64
  %80 = load %struct.F90_Desc** %d.addr.i262, align 8
  %dim30.i = getelementptr inbounds %struct.F90_Desc* %80, i32 0, i32 10
  %arrayidx31.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30.i, i32 0, i64 %idxprom29.i
  %extent32.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx31.i, i32 0, i32 1
  %81 = load i32* %extent32.i, align 4
  %82 = load i32* %gsize.i265, align 4
  %mul.i288 = mul nsw i32 %82, %81
  store i32 %mul.i288, i32* %gsize.i265, align 4
  %83 = load i32* %dx.i, align 4
  %inc.i = add nsw i32 %83, 1
  store i32 %inc.i, i32* %dx.i, align 4
  br label %if.end33.i

if.end33.i:                                       ; preds = %if.end.i289, %for.body.i
  %84 = load i32* %ax.i, align 4
  %inc34.i = add nsw i32 %84, 1
  store i32 %inc34.i, i32* %ax.i, align 4
  br label %for.cond.i

pgf90_bogus_sect.exit:                            ; preds = %for.cond.i
  %85 = load i32* %gsize.i265, align 4
  store i32 %85, i32* %gsize, align 4
  br label %if.end42

if.else:                                          ; preds = %entry
  store i32 0, i32* %ax, align 4
  %86 = load i32* %flags.addr, align 4
  %and10 = and i32 %86, 4194304
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else25

if.then12:                                        ; preds = %if.else
  %87 = load %struct.F90_Desc** %d, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %87, i32 0, i32 7
  store i32 1, i32* %lbase, align 4
  %88 = load i32* %flags.addr, align 4
  %89 = load i32* %ax, align 4
  %shl = shl i32 1, %89
  %and13 = and i32 %88, %shl
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then12
  %90 = load %struct.F90_Desc** %d, align 8
  %91 = load i32* %dx, align 4
  %92 = load %struct.F90_Desc** %a, align 8
  %93 = load i32* %ax, align 4
  %94 = load i32* %lw0.addr, align 4
  %95 = load i32* %up0.addr, align 4
  %96 = load i32* %st0.addr, align 4
  %97 = load i32* %gsize, align 4
  %98 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %90, %struct.F90_Desc** %d.addr.i193, align 8
  store i32 %91, i32* %dx.addr.i194, align 4
  store %struct.F90_Desc* %92, %struct.F90_Desc** %a.addr.i195, align 8
  store i32 %93, i32* %ax.addr.i196, align 4
  store i32 %94, i32* %lb.addr.i197, align 4
  store i32 %95, i32* %ub.addr.i198, align 4
  store i32 %96, i32* %st.addr.i199, align 4
  store i32 %97, i32* %gsize.addr.i200, align 4
  store i32 %98, i32* %flags.addr.i201, align 4
  %99 = load i32* %ub.addr.i198, align 4
  %100 = load i32* %lb.addr.i197, align 4
  %sub.i203 = sub nsw i32 %99, %100
  %101 = load i32* %st.addr.i199, align 4
  %add.i204 = add nsw i32 %sub.i203, %101
  store i32 %add.i204, i32* %extent.i202, align 4
  %102 = load i32* %st.addr.i199, align 4
  %cmp.i205 = icmp ne i32 %102, 1
  br i1 %cmp.i205, label %if.then.i207, label %if.end4.i214

if.then.i207:                                     ; preds = %if.then15
  %103 = load i32* %st.addr.i199, align 4
  %cmp1.i206 = icmp eq i32 %103, -1
  br i1 %cmp1.i206, label %if.then2.i209, label %if.else.i211

if.then2.i209:                                    ; preds = %if.then.i207
  %104 = load i32* %extent.i202, align 4
  %sub3.i208 = sub nsw i32 0, %104
  store i32 %sub3.i208, i32* %extent.i202, align 4
  br label %if.end.i212

if.else.i211:                                     ; preds = %if.then.i207
  %105 = load i32* %st.addr.i199, align 4
  %106 = load i32* %extent.i202, align 4
  %div.i210 = sdiv i32 %106, %105
  store i32 %div.i210, i32* %extent.i202, align 4
  br label %if.end.i212

if.end.i212:                                      ; preds = %if.else.i211, %if.then2.i209
  br label %if.end4.i214

if.end4.i214:                                     ; preds = %if.end.i212, %if.then15
  %107 = load i32* %extent.i202, align 4
  %cmp5.i213 = icmp slt i32 %107, 0
  br i1 %cmp5.i213, label %if.then6.i215, label %if.end7.i256

if.then6.i215:                                    ; preds = %if.end4.i214
  store i32 0, i32* %extent.i202, align 4
  br label %if.end7.i256

if.end7.i256:                                     ; preds = %if.then6.i215, %if.end4.i214
  %108 = load i32* %dx.addr.i194, align 4
  %idxprom.i216 = sext i32 %108 to i64
  %109 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim.i217 = getelementptr inbounds %struct.F90_Desc* %109, i32 0, i32 10
  %arrayidx.i218 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i217, i32 0, i64 %idxprom.i216
  %lbound.i219 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i218, i32 0, i32 0
  store i32 1, i32* %lbound.i219, align 4
  %110 = load i32* %extent.i202, align 4
  %111 = load i32* %dx.addr.i194, align 4
  %idxprom8.i220 = sext i32 %111 to i64
  %112 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim9.i221 = getelementptr inbounds %struct.F90_Desc* %112, i32 0, i32 10
  %arrayidx10.i222 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i221, i32 0, i64 %idxprom8.i220
  %ubound.i223 = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i222, i32 0, i32 5
  store i32 %110, i32* %ubound.i223, align 4
  %113 = load i32* %extent.i202, align 4
  %114 = load i32* %dx.addr.i194, align 4
  %idxprom11.i224 = sext i32 %114 to i64
  %115 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim12.i225 = getelementptr inbounds %struct.F90_Desc* %115, i32 0, i32 10
  %arrayidx13.i226 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i225, i32 0, i64 %idxprom11.i224
  %extent14.i227 = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i226, i32 0, i32 1
  store i32 %113, i32* %extent14.i227, align 4
  %116 = load i32* %dx.addr.i194, align 4
  %idxprom15.i228 = sext i32 %116 to i64
  %117 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim16.i229 = getelementptr inbounds %struct.F90_Desc* %117, i32 0, i32 10
  %arrayidx17.i230 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i229, i32 0, i64 %idxprom15.i228
  %sstride.i231 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i230, i32 0, i32 2
  store i32 1, i32* %sstride.i231, align 4
  %118 = load i32* %dx.addr.i194, align 4
  %idxprom18.i232 = sext i32 %118 to i64
  %119 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim19.i233 = getelementptr inbounds %struct.F90_Desc* %119, i32 0, i32 10
  %arrayidx20.i234 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i233, i32 0, i64 %idxprom18.i232
  %soffset.i235 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i234, i32 0, i32 3
  store i32 0, i32* %soffset.i235, align 4
  %120 = load i32* %ax.addr.i196, align 4
  %idxprom21.i236 = sext i32 %120 to i64
  %121 = load %struct.F90_Desc** %a.addr.i195, align 8
  %dim22.i237 = getelementptr inbounds %struct.F90_Desc* %121, i32 0, i32 10
  %arrayidx23.i238 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i237, i32 0, i64 %idxprom21.i236
  %lstride.i239 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i238, i32 0, i32 4
  %122 = load i32* %lstride.i239, align 4
  %123 = load i32* %st.addr.i199, align 4
  %mul.i240 = mul nsw i32 %122, %123
  %124 = load i32* %dx.addr.i194, align 4
  %idxprom24.i241 = sext i32 %124 to i64
  %125 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim25.i242 = getelementptr inbounds %struct.F90_Desc* %125, i32 0, i32 10
  %arrayidx26.i243 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i242, i32 0, i64 %idxprom24.i241
  %lstride27.i244 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i243, i32 0, i32 4
  store i32 %mul.i240, i32* %lstride27.i244, align 4
  %126 = load i32* %dx.addr.i194, align 4
  %idxprom28.i245 = sext i32 %126 to i64
  %127 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim29.i246 = getelementptr inbounds %struct.F90_Desc* %127, i32 0, i32 10
  %arrayidx30.i247 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i246, i32 0, i64 %idxprom28.i245
  %lstride31.i248 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i247, i32 0, i32 4
  %128 = load i32* %lstride31.i248, align 4
  %129 = load %struct.F90_Desc** %d.addr.i193, align 8
  %lbase.i249 = getelementptr inbounds %struct.F90_Desc* %129, i32 0, i32 7
  %130 = load i32* %lbase.i249, align 4
  %sub32.i250 = sub nsw i32 %130, %128
  store i32 %sub32.i250, i32* %lbase.i249, align 4
  %131 = load i32* %dx.addr.i194, align 4
  %idxprom33.i251 = sext i32 %131 to i64
  %132 = load %struct.F90_Desc** %d.addr.i193, align 8
  %dim34.i252 = getelementptr inbounds %struct.F90_Desc* %132, i32 0, i32 10
  %arrayidx35.i253 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i252, i32 0, i64 %idxprom33.i251
  %lstride36.i254 = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i253, i32 0, i32 4
  %133 = load i32* %lstride36.i254, align 4
  %134 = load i32* %gsize.addr.i200, align 4
  %cmp37.i255 = icmp ne i32 %133, %134
  br i1 %cmp37.i255, label %if.then38.i259, label %pgf90_tsection.exit261

if.then38.i259:                                   ; preds = %if.end7.i256
  %135 = load %struct.F90_Desc** %d.addr.i193, align 8
  %flags39.i257 = getelementptr inbounds %struct.F90_Desc* %135, i32 0, i32 4
  %136 = load i32* %flags39.i257, align 4
  %and.i258 = and i32 %136, -536870913
  store i32 %and.i258, i32* %flags39.i257, align 4
  br label %pgf90_tsection.exit261

pgf90_tsection.exit261:                           ; preds = %if.then38.i259, %if.end7.i256
  %137 = load i32* %extent.i202, align 4
  %138 = load i32* %gsize.addr.i200, align 4
  %mul41.i260 = mul nsw i32 %138, %137
  store i32 %mul41.i260, i32* %gsize.addr.i200, align 4
  %139 = load i32* %gsize.addr.i200, align 4
  store i32 %139, i32* %gsize, align 4
  %140 = load i32* %dx, align 4
  %inc = add nsw i32 %140, 1
  store i32 %inc, i32* %dx, align 4
  br label %if.end

if.end:                                           ; preds = %pgf90_tsection.exit261, %if.then12
  %141 = load i32* %ax, align 4
  %inc17 = add nsw i32 %141, 1
  store i32 %inc17, i32* %ax, align 4
  %142 = load i32* %flags.addr, align 4
  %143 = load i32* %ax, align 4
  %shl18 = shl i32 1, %143
  %and19 = and i32 %142, %shl18
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %if.end
  %144 = load %struct.F90_Desc** %d, align 8
  %145 = load i32* %dx, align 4
  %146 = load %struct.F90_Desc** %a, align 8
  %147 = load i32* %ax, align 4
  %148 = load i32* %lw1.addr, align 4
  %149 = load i32* %up1.addr, align 4
  %150 = load i32* %st1.addr, align 4
  %151 = load i32* %gsize, align 4
  %152 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %144, %struct.F90_Desc** %d.addr.i149, align 8
  store i32 %145, i32* %dx.addr.i150, align 4
  store %struct.F90_Desc* %146, %struct.F90_Desc** %a.addr.i151, align 8
  store i32 %147, i32* %ax.addr.i152, align 4
  store i32 %148, i32* %lb.addr.i153, align 4
  store i32 %149, i32* %ub.addr.i154, align 4
  store i32 %150, i32* %st.addr.i155, align 4
  store i32 %151, i32* %gsize.addr.i156, align 4
  store i32 %152, i32* %flags.addr.i157, align 4
  %153 = load i32* %ub.addr.i154, align 4
  %154 = load i32* %lb.addr.i153, align 4
  %sub.i159 = sub nsw i32 %153, %154
  %155 = load i32* %st.addr.i155, align 4
  %add.i160 = add nsw i32 %sub.i159, %155
  store i32 %add.i160, i32* %extent.i158, align 4
  %156 = load i32* %st.addr.i155, align 4
  %cmp.i161 = icmp ne i32 %156, 1
  br i1 %cmp.i161, label %if.then.i163, label %if.end4.i170

if.then.i163:                                     ; preds = %if.then21
  %157 = load i32* %st.addr.i155, align 4
  %cmp1.i162 = icmp eq i32 %157, -1
  br i1 %cmp1.i162, label %if.then2.i165, label %if.else.i167

if.then2.i165:                                    ; preds = %if.then.i163
  %158 = load i32* %extent.i158, align 4
  %sub3.i164 = sub nsw i32 0, %158
  store i32 %sub3.i164, i32* %extent.i158, align 4
  br label %if.end.i168

if.else.i167:                                     ; preds = %if.then.i163
  %159 = load i32* %st.addr.i155, align 4
  %160 = load i32* %extent.i158, align 4
  %div.i166 = sdiv i32 %160, %159
  store i32 %div.i166, i32* %extent.i158, align 4
  br label %if.end.i168

if.end.i168:                                      ; preds = %if.else.i167, %if.then2.i165
  br label %if.end4.i170

if.end4.i170:                                     ; preds = %if.end.i168, %if.then21
  %161 = load i32* %extent.i158, align 4
  %cmp5.i169 = icmp slt i32 %161, 0
  br i1 %cmp5.i169, label %if.then6.i171, label %if.end7.i191

if.then6.i171:                                    ; preds = %if.end4.i170
  store i32 0, i32* %extent.i158, align 4
  br label %if.end7.i191

if.end7.i191:                                     ; preds = %if.then6.i171, %if.end4.i170
  %162 = load i32* %dx.addr.i150, align 4
  %idxprom.i172 = sext i32 %162 to i64
  %163 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim.i173 = getelementptr inbounds %struct.F90_Desc* %163, i32 0, i32 10
  %arrayidx.i174 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i173, i32 0, i64 %idxprom.i172
  %lbound.i175 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i174, i32 0, i32 0
  store i32 1, i32* %lbound.i175, align 4
  %164 = load i32* %extent.i158, align 4
  %165 = load i32* %dx.addr.i150, align 4
  %idxprom8.i = sext i32 %165 to i64
  %166 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim9.i = getelementptr inbounds %struct.F90_Desc* %166, i32 0, i32 10
  %arrayidx10.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i, i32 0, i64 %idxprom8.i
  %ubound.i176 = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i, i32 0, i32 5
  store i32 %164, i32* %ubound.i176, align 4
  %167 = load i32* %extent.i158, align 4
  %168 = load i32* %dx.addr.i150, align 4
  %idxprom11.i = sext i32 %168 to i64
  %169 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim12.i = getelementptr inbounds %struct.F90_Desc* %169, i32 0, i32 10
  %arrayidx13.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i, i32 0, i64 %idxprom11.i
  %extent14.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i, i32 0, i32 1
  store i32 %167, i32* %extent14.i, align 4
  %170 = load i32* %dx.addr.i150, align 4
  %idxprom15.i177 = sext i32 %170 to i64
  %171 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim16.i178 = getelementptr inbounds %struct.F90_Desc* %171, i32 0, i32 10
  %arrayidx17.i179 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i178, i32 0, i64 %idxprom15.i177
  %sstride.i180 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i179, i32 0, i32 2
  store i32 1, i32* %sstride.i180, align 4
  %172 = load i32* %dx.addr.i150, align 4
  %idxprom18.i = sext i32 %172 to i64
  %173 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim19.i = getelementptr inbounds %struct.F90_Desc* %173, i32 0, i32 10
  %arrayidx20.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i, i32 0, i64 %idxprom18.i
  %soffset.i181 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i, i32 0, i32 3
  store i32 0, i32* %soffset.i181, align 4
  %174 = load i32* %ax.addr.i152, align 4
  %idxprom21.i = sext i32 %174 to i64
  %175 = load %struct.F90_Desc** %a.addr.i151, align 8
  %dim22.i = getelementptr inbounds %struct.F90_Desc* %175, i32 0, i32 10
  %arrayidx23.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i, i32 0, i64 %idxprom21.i
  %lstride.i182 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i, i32 0, i32 4
  %176 = load i32* %lstride.i182, align 4
  %177 = load i32* %st.addr.i155, align 4
  %mul.i183 = mul nsw i32 %176, %177
  %178 = load i32* %dx.addr.i150, align 4
  %idxprom24.i184 = sext i32 %178 to i64
  %179 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim25.i185 = getelementptr inbounds %struct.F90_Desc* %179, i32 0, i32 10
  %arrayidx26.i186 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i185, i32 0, i64 %idxprom24.i184
  %lstride27.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i186, i32 0, i32 4
  store i32 %mul.i183, i32* %lstride27.i, align 4
  %180 = load i32* %dx.addr.i150, align 4
  %idxprom28.i187 = sext i32 %180 to i64
  %181 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim29.i188 = getelementptr inbounds %struct.F90_Desc* %181, i32 0, i32 10
  %arrayidx30.i189 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i188, i32 0, i64 %idxprom28.i187
  %lstride31.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i189, i32 0, i32 4
  %182 = load i32* %lstride31.i, align 4
  %183 = load %struct.F90_Desc** %d.addr.i149, align 8
  %lbase.i190 = getelementptr inbounds %struct.F90_Desc* %183, i32 0, i32 7
  %184 = load i32* %lbase.i190, align 4
  %sub32.i = sub nsw i32 %184, %182
  store i32 %sub32.i, i32* %lbase.i190, align 4
  %185 = load i32* %dx.addr.i150, align 4
  %idxprom33.i = sext i32 %185 to i64
  %186 = load %struct.F90_Desc** %d.addr.i149, align 8
  %dim34.i = getelementptr inbounds %struct.F90_Desc* %186, i32 0, i32 10
  %arrayidx35.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i, i32 0, i64 %idxprom33.i
  %lstride36.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i, i32 0, i32 4
  %187 = load i32* %lstride36.i, align 4
  %188 = load i32* %gsize.addr.i156, align 4
  %cmp37.i = icmp ne i32 %187, %188
  br i1 %cmp37.i, label %if.then38.i, label %pgf90_tsection.exit

if.then38.i:                                      ; preds = %if.end7.i191
  %189 = load %struct.F90_Desc** %d.addr.i149, align 8
  %flags39.i = getelementptr inbounds %struct.F90_Desc* %189, i32 0, i32 4
  %190 = load i32* %flags39.i, align 4
  %and.i192 = and i32 %190, -536870913
  store i32 %and.i192, i32* %flags39.i, align 4
  br label %pgf90_tsection.exit

pgf90_tsection.exit:                              ; preds = %if.then38.i, %if.end7.i191
  %191 = load i32* %extent.i158, align 4
  %192 = load i32* %gsize.addr.i156, align 4
  %mul41.i = mul nsw i32 %192, %191
  store i32 %mul41.i, i32* %gsize.addr.i156, align 4
  %193 = load i32* %gsize.addr.i156, align 4
  store i32 %193, i32* %gsize, align 4
  %194 = load i32* %dx, align 4
  %inc23 = add nsw i32 %194, 1
  store i32 %inc23, i32* %dx, align 4
  br label %if.end24

if.end24:                                         ; preds = %pgf90_tsection.exit, %if.end
  br label %if.end41

if.else25:                                        ; preds = %if.else
  %195 = load i32* %flags.addr, align 4
  %196 = load i32* %ax, align 4
  %shl26 = shl i32 1, %196
  %and27 = and i32 %195, %shl26
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.else25
  %197 = load %struct.F90_Desc** %d, align 8
  %198 = load %struct.F90_Desc** %a, align 8
  %199 = load i32* %lw0.addr, align 4
  %200 = load i32* %up0.addr, align 4
  %201 = load i32* %st0.addr, align 4
  %202 = load i32* %gsize, align 4
  %203 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %197, %struct.F90_Desc** %d.addr.i47, align 8
  store i32 0, i32* %dx.addr.i48, align 4
  store %struct.F90_Desc* %198, %struct.F90_Desc** %a.addr.i49, align 8
  store i32 0, i32* %ax.addr.i50, align 4
  store i32 %199, i32* %lb.addr.i51, align 4
  store i32 %200, i32* %ub.addr.i52, align 4
  store i32 %201, i32* %st.addr.i53, align 4
  store i32 %202, i32* %gsize.addr.i54, align 4
  store i32 %203, i32* %flags.addr.i55, align 4
  %204 = load i32* %ub.addr.i52, align 4
  %205 = load i32* %lb.addr.i51, align 4
  %sub.i59 = sub nsw i32 %204, %205
  %206 = load i32* %st.addr.i53, align 4
  %add.i60 = add nsw i32 %sub.i59, %206
  store i32 %add.i60, i32* %extent.i56, align 4
  %207 = load i32* %flags.addr.i55, align 4
  %and.i61 = and i32 %207, 33554432
  store i32 %and.i61, i32* %noreindex.i57, align 4
  %208 = load i32* %st.addr.i53, align 4
  %cmp.i62 = icmp ne i32 %208, 1
  br i1 %cmp.i62, label %if.then.i64, label %if.end4.i71

if.then.i64:                                      ; preds = %if.then29
  %209 = load i32* %st.addr.i53, align 4
  %cmp1.i63 = icmp eq i32 %209, -1
  br i1 %cmp1.i63, label %if.then2.i66, label %if.else.i68

if.then2.i66:                                     ; preds = %if.then.i64
  %210 = load i32* %extent.i56, align 4
  %sub3.i65 = sub nsw i32 0, %210
  store i32 %sub3.i65, i32* %extent.i56, align 4
  br label %if.end.i69

if.else.i68:                                      ; preds = %if.then.i64
  %211 = load i32* %st.addr.i53, align 4
  %212 = load i32* %extent.i56, align 4
  %div.i67 = sdiv i32 %212, %211
  store i32 %div.i67, i32* %extent.i56, align 4
  br label %if.end.i69

if.end.i69:                                       ; preds = %if.else.i68, %if.then2.i66
  br label %if.end4.i71

if.end4.i71:                                      ; preds = %if.end.i69, %if.then29
  %213 = load i32* %extent.i56, align 4
  %cmp5.i70 = icmp slt i32 %213, 0
  br i1 %cmp5.i70, label %if.then6.i72, label %if.end7.i74

if.then6.i72:                                     ; preds = %if.end4.i71
  store i32 0, i32* %extent.i56, align 4
  br label %if.end7.i74

if.end7.i74:                                      ; preds = %if.then6.i72, %if.end4.i71
  %214 = load i32* %noreindex.i57, align 4
  %tobool.i73 = icmp ne i32 %214, 0
  br i1 %tobool.i73, label %land.lhs.true.i76, label %if.else23.i113

land.lhs.true.i76:                                ; preds = %if.end7.i74
  %215 = load i32* %st.addr.i53, align 4
  %cmp8.i75 = icmp eq i32 %215, 1
  br i1 %cmp8.i75, label %if.then9.i82, label %if.else23.i113

if.then9.i82:                                     ; preds = %land.lhs.true.i76
  %216 = load i32* %dx.addr.i48, align 4
  %idxprom.i77 = sext i32 %216 to i64
  %217 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim.i78 = getelementptr inbounds %struct.F90_Desc* %217, i32 0, i32 10
  %arrayidx.i79 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i78, i32 0, i64 %idxprom.i77
  %lbound.i80 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i79, i32 0, i32 0
  store i32 1, i32* %lbound.i80, align 4
  %218 = load i32* %extent.i56, align 4
  %cmp10.i81 = icmp eq i32 %218, 0
  br i1 %cmp10.i81, label %cond.true.i84, label %cond.false.i85

cond.true.i84:                                    ; preds = %if.then9.i82
  %219 = load i32* %lb.addr.i51, align 4
  %sub11.i83 = sub nsw i32 %219, 1
  br label %cond.end.i99

cond.false.i85:                                   ; preds = %if.then9.i82
  %220 = load i32* %ub.addr.i52, align 4
  br label %cond.end.i99

cond.end.i99:                                     ; preds = %cond.false.i85, %cond.true.i84
  %cond.i86 = phi i32 [ %sub11.i83, %cond.true.i84 ], [ %220, %cond.false.i85 ]
  %221 = load i32* %dx.addr.i48, align 4
  %idxprom12.i87 = sext i32 %221 to i64
  %222 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim13.i88 = getelementptr inbounds %struct.F90_Desc* %222, i32 0, i32 10
  %arrayidx14.i89 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i88, i32 0, i64 %idxprom12.i87
  %ubound.i90 = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i89, i32 0, i32 5
  store i32 %cond.i86, i32* %ubound.i90, align 4
  %223 = load i32* %dx.addr.i48, align 4
  %idxprom15.i91 = sext i32 %223 to i64
  %224 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim16.i92 = getelementptr inbounds %struct.F90_Desc* %224, i32 0, i32 10
  %arrayidx17.i93 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i92, i32 0, i64 %idxprom15.i91
  %ubound18.i94 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i93, i32 0, i32 5
  %225 = load i32* %ubound18.i94, align 4
  %226 = load i32* %dx.addr.i48, align 4
  %idxprom19.i95 = sext i32 %226 to i64
  %227 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim20.i96 = getelementptr inbounds %struct.F90_Desc* %227, i32 0, i32 10
  %arrayidx21.i97 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i96, i32 0, i64 %idxprom19.i95
  %extent22.i98 = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i97, i32 0, i32 1
  store i32 %225, i32* %extent22.i98, align 4
  store i32 0, i32* %myoffset.i58, align 4
  br label %if.end37.i143

if.else23.i113:                                   ; preds = %land.lhs.true.i76, %if.end7.i74
  %228 = load i32* %dx.addr.i48, align 4
  %idxprom24.i100 = sext i32 %228 to i64
  %229 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim25.i101 = getelementptr inbounds %struct.F90_Desc* %229, i32 0, i32 10
  %arrayidx26.i102 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i101, i32 0, i64 %idxprom24.i100
  %lbound27.i103 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i102, i32 0, i32 0
  store i32 1, i32* %lbound27.i103, align 4
  %230 = load i32* %extent.i56, align 4
  %231 = load i32* %dx.addr.i48, align 4
  %idxprom28.i104 = sext i32 %231 to i64
  %232 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim29.i105 = getelementptr inbounds %struct.F90_Desc* %232, i32 0, i32 10
  %arrayidx30.i106 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i105, i32 0, i64 %idxprom28.i104
  %ubound31.i107 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i106, i32 0, i32 5
  store i32 %230, i32* %ubound31.i107, align 4
  %233 = load i32* %extent.i56, align 4
  %234 = load i32* %dx.addr.i48, align 4
  %idxprom32.i108 = sext i32 %234 to i64
  %235 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim33.i109 = getelementptr inbounds %struct.F90_Desc* %235, i32 0, i32 10
  %arrayidx34.i110 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i109, i32 0, i64 %idxprom32.i108
  %extent35.i111 = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i110, i32 0, i32 1
  store i32 %233, i32* %extent35.i111, align 4
  %236 = load i32* %lb.addr.i51, align 4
  %237 = load i32* %st.addr.i53, align 4
  %sub36.i112 = sub nsw i32 %236, %237
  store i32 %sub36.i112, i32* %myoffset.i58, align 4
  br label %if.end37.i143

if.end37.i143:                                    ; preds = %if.else23.i113, %cond.end.i99
  %238 = load i32* %dx.addr.i48, align 4
  %idxprom38.i114 = sext i32 %238 to i64
  %239 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim39.i115 = getelementptr inbounds %struct.F90_Desc* %239, i32 0, i32 10
  %arrayidx40.i116 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i115, i32 0, i64 %idxprom38.i114
  %sstride.i117 = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i116, i32 0, i32 2
  store i32 1, i32* %sstride.i117, align 4
  %240 = load i32* %dx.addr.i48, align 4
  %idxprom41.i118 = sext i32 %240 to i64
  %241 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim42.i119 = getelementptr inbounds %struct.F90_Desc* %241, i32 0, i32 10
  %arrayidx43.i120 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i119, i32 0, i64 %idxprom41.i118
  %soffset.i121 = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i120, i32 0, i32 3
  store i32 0, i32* %soffset.i121, align 4
  %242 = load i32* %ax.addr.i50, align 4
  %idxprom44.i122 = sext i32 %242 to i64
  %243 = load %struct.F90_Desc** %a.addr.i49, align 8
  %dim45.i123 = getelementptr inbounds %struct.F90_Desc* %243, i32 0, i32 10
  %arrayidx46.i124 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i123, i32 0, i64 %idxprom44.i122
  %lstride.i125 = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i124, i32 0, i32 4
  %244 = load i32* %lstride.i125, align 4
  %245 = load i32* %st.addr.i53, align 4
  %mul.i126 = mul nsw i32 %244, %245
  %246 = load i32* %dx.addr.i48, align 4
  %idxprom47.i127 = sext i32 %246 to i64
  %247 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim48.i128 = getelementptr inbounds %struct.F90_Desc* %247, i32 0, i32 10
  %arrayidx49.i129 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i128, i32 0, i64 %idxprom47.i127
  %lstride50.i130 = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i129, i32 0, i32 4
  store i32 %mul.i126, i32* %lstride50.i130, align 4
  %248 = load i32* %myoffset.i58, align 4
  %249 = load i32* %dx.addr.i48, align 4
  %idxprom51.i131 = sext i32 %249 to i64
  %250 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim52.i132 = getelementptr inbounds %struct.F90_Desc* %250, i32 0, i32 10
  %arrayidx53.i133 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i132, i32 0, i64 %idxprom51.i131
  %lstride54.i134 = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i133, i32 0, i32 4
  %251 = load i32* %lstride54.i134, align 4
  %mul55.i135 = mul nsw i32 %248, %251
  %252 = load %struct.F90_Desc** %d.addr.i47, align 8
  %lbase.i136 = getelementptr inbounds %struct.F90_Desc* %252, i32 0, i32 7
  %253 = load i32* %lbase.i136, align 4
  %add56.i137 = add nsw i32 %253, %mul55.i135
  store i32 %add56.i137, i32* %lbase.i136, align 4
  %254 = load i32* %dx.addr.i48, align 4
  %idxprom57.i138 = sext i32 %254 to i64
  %255 = load %struct.F90_Desc** %d.addr.i47, align 8
  %dim58.i139 = getelementptr inbounds %struct.F90_Desc* %255, i32 0, i32 10
  %arrayidx59.i140 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i139, i32 0, i64 %idxprom57.i138
  %lstride60.i141 = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i140, i32 0, i32 4
  %256 = load i32* %lstride60.i141, align 4
  %257 = load i32* %gsize.addr.i54, align 4
  %cmp61.i142 = icmp ne i32 %256, %257
  br i1 %cmp61.i142, label %if.then62.i146, label %pgf90_asection.exit148

if.then62.i146:                                   ; preds = %if.end37.i143
  %258 = load %struct.F90_Desc** %d.addr.i47, align 8
  %flags63.i144 = getelementptr inbounds %struct.F90_Desc* %258, i32 0, i32 4
  %259 = load i32* %flags63.i144, align 4
  %and64.i145 = and i32 %259, -536870913
  store i32 %and64.i145, i32* %flags63.i144, align 4
  br label %pgf90_asection.exit148

pgf90_asection.exit148:                           ; preds = %if.then62.i146, %if.end37.i143
  %260 = load i32* %extent.i56, align 4
  %261 = load i32* %gsize.addr.i54, align 4
  %mul66.i147 = mul nsw i32 %261, %260
  store i32 %mul66.i147, i32* %gsize.addr.i54, align 4
  %262 = load i32* %gsize.addr.i54, align 4
  store i32 %262, i32* %gsize, align 4
  %263 = load i32* %dx, align 4
  %inc31 = add nsw i32 %263, 1
  store i32 %inc31, i32* %dx, align 4
  br label %if.end32

if.end32:                                         ; preds = %pgf90_asection.exit148, %if.else25
  %264 = load i32* %ax, align 4
  %inc33 = add nsw i32 %264, 1
  store i32 %inc33, i32* %ax, align 4
  %265 = load i32* %flags.addr, align 4
  %266 = load i32* %ax, align 4
  %shl34 = shl i32 1, %266
  %and35 = and i32 %265, %shl34
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end32
  %267 = load %struct.F90_Desc** %d, align 8
  %268 = load i32* %dx, align 4
  %269 = load %struct.F90_Desc** %a, align 8
  %270 = load i32* %ax, align 4
  %271 = load i32* %lw1.addr, align 4
  %272 = load i32* %up1.addr, align 4
  %273 = load i32* %st1.addr, align 4
  %274 = load i32* %gsize, align 4
  %275 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %267, %struct.F90_Desc** %d.addr.i44, align 8
  store i32 %268, i32* %dx.addr.i, align 4
  store %struct.F90_Desc* %269, %struct.F90_Desc** %a.addr.i45, align 8
  store i32 %270, i32* %ax.addr.i, align 4
  store i32 %271, i32* %lb.addr.i, align 4
  store i32 %272, i32* %ub.addr.i, align 4
  store i32 %273, i32* %st.addr.i, align 4
  store i32 %274, i32* %gsize.addr.i, align 4
  store i32 %275, i32* %flags.addr.i, align 4
  %276 = load i32* %ub.addr.i, align 4
  %277 = load i32* %lb.addr.i, align 4
  %sub.i = sub nsw i32 %276, %277
  %278 = load i32* %st.addr.i, align 4
  %add.i = add nsw i32 %sub.i, %278
  store i32 %add.i, i32* %extent.i, align 4
  %279 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %279, 33554432
  store i32 %and.i, i32* %noreindex.i, align 4
  %280 = load i32* %st.addr.i, align 4
  %cmp.i = icmp ne i32 %280, 1
  br i1 %cmp.i, label %if.then.i, label %if.end4.i

if.then.i:                                        ; preds = %if.then37
  %281 = load i32* %st.addr.i, align 4
  %cmp1.i = icmp eq i32 %281, -1
  br i1 %cmp1.i, label %if.then2.i, label %if.else.i

if.then2.i:                                       ; preds = %if.then.i
  %282 = load i32* %extent.i, align 4
  %sub3.i = sub nsw i32 0, %282
  store i32 %sub3.i, i32* %extent.i, align 4
  br label %if.end.i

if.else.i:                                        ; preds = %if.then.i
  %283 = load i32* %st.addr.i, align 4
  %284 = load i32* %extent.i, align 4
  %div.i = sdiv i32 %284, %283
  store i32 %div.i, i32* %extent.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then2.i
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.end.i, %if.then37
  %285 = load i32* %extent.i, align 4
  %cmp5.i = icmp slt i32 %285, 0
  br i1 %cmp5.i, label %if.then6.i, label %if.end7.i

if.then6.i:                                       ; preds = %if.end4.i
  store i32 0, i32* %extent.i, align 4
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then6.i, %if.end4.i
  %286 = load i32* %noreindex.i, align 4
  %tobool.i = icmp ne i32 %286, 0
  br i1 %tobool.i, label %land.lhs.true.i, label %if.else23.i

land.lhs.true.i:                                  ; preds = %if.end7.i
  %287 = load i32* %st.addr.i, align 4
  %cmp8.i = icmp eq i32 %287, 1
  br i1 %cmp8.i, label %if.then9.i, label %if.else23.i

if.then9.i:                                       ; preds = %land.lhs.true.i
  %288 = load i32* %dx.addr.i, align 4
  %idxprom.i = sext i32 %288 to i64
  %289 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim.i = getelementptr inbounds %struct.F90_Desc* %289, i32 0, i32 10
  %arrayidx.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i, i32 0, i64 %idxprom.i
  %lbound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i, i32 0, i32 0
  store i32 1, i32* %lbound.i, align 4
  %290 = load i32* %extent.i, align 4
  %cmp10.i = icmp eq i32 %290, 0
  br i1 %cmp10.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.then9.i
  %291 = load i32* %lb.addr.i, align 4
  %sub11.i = sub nsw i32 %291, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.then9.i
  %292 = load i32* %ub.addr.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub11.i, %cond.true.i ], [ %292, %cond.false.i ]
  %293 = load i32* %dx.addr.i, align 4
  %idxprom12.i = sext i32 %293 to i64
  %294 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim13.i = getelementptr inbounds %struct.F90_Desc* %294, i32 0, i32 10
  %arrayidx14.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i, i32 0, i64 %idxprom12.i
  %ubound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i, i32 0, i32 5
  store i32 %cond.i, i32* %ubound.i, align 4
  %295 = load i32* %dx.addr.i, align 4
  %idxprom15.i = sext i32 %295 to i64
  %296 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim16.i = getelementptr inbounds %struct.F90_Desc* %296, i32 0, i32 10
  %arrayidx17.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i, i32 0, i64 %idxprom15.i
  %ubound18.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i, i32 0, i32 5
  %297 = load i32* %ubound18.i, align 4
  %298 = load i32* %dx.addr.i, align 4
  %idxprom19.i = sext i32 %298 to i64
  %299 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim20.i = getelementptr inbounds %struct.F90_Desc* %299, i32 0, i32 10
  %arrayidx21.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i, i32 0, i64 %idxprom19.i
  %extent22.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i, i32 0, i32 1
  store i32 %297, i32* %extent22.i, align 4
  store i32 0, i32* %myoffset.i, align 4
  br label %if.end37.i

if.else23.i:                                      ; preds = %land.lhs.true.i, %if.end7.i
  %300 = load i32* %dx.addr.i, align 4
  %idxprom24.i = sext i32 %300 to i64
  %301 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim25.i = getelementptr inbounds %struct.F90_Desc* %301, i32 0, i32 10
  %arrayidx26.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i, i32 0, i64 %idxprom24.i
  %lbound27.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i, align 4
  %302 = load i32* %extent.i, align 4
  %303 = load i32* %dx.addr.i, align 4
  %idxprom28.i = sext i32 %303 to i64
  %304 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim29.i = getelementptr inbounds %struct.F90_Desc* %304, i32 0, i32 10
  %arrayidx30.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i, i32 0, i64 %idxprom28.i
  %ubound31.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i, i32 0, i32 5
  store i32 %302, i32* %ubound31.i, align 4
  %305 = load i32* %extent.i, align 4
  %306 = load i32* %dx.addr.i, align 4
  %idxprom32.i = sext i32 %306 to i64
  %307 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim33.i = getelementptr inbounds %struct.F90_Desc* %307, i32 0, i32 10
  %arrayidx34.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i, i32 0, i64 %idxprom32.i
  %extent35.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i, i32 0, i32 1
  store i32 %305, i32* %extent35.i, align 4
  %308 = load i32* %lb.addr.i, align 4
  %309 = load i32* %st.addr.i, align 4
  %sub36.i = sub nsw i32 %308, %309
  store i32 %sub36.i, i32* %myoffset.i, align 4
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.else23.i, %cond.end.i
  %310 = load i32* %dx.addr.i, align 4
  %idxprom38.i = sext i32 %310 to i64
  %311 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim39.i = getelementptr inbounds %struct.F90_Desc* %311, i32 0, i32 10
  %arrayidx40.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i, i32 0, i64 %idxprom38.i
  %sstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i, i32 0, i32 2
  store i32 1, i32* %sstride.i, align 4
  %312 = load i32* %dx.addr.i, align 4
  %idxprom41.i = sext i32 %312 to i64
  %313 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim42.i = getelementptr inbounds %struct.F90_Desc* %313, i32 0, i32 10
  %arrayidx43.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i, i32 0, i64 %idxprom41.i
  %soffset.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i, i32 0, i32 3
  store i32 0, i32* %soffset.i, align 4
  %314 = load i32* %ax.addr.i, align 4
  %idxprom44.i = sext i32 %314 to i64
  %315 = load %struct.F90_Desc** %a.addr.i45, align 8
  %dim45.i = getelementptr inbounds %struct.F90_Desc* %315, i32 0, i32 10
  %arrayidx46.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i, i32 0, i64 %idxprom44.i
  %lstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i, i32 0, i32 4
  %316 = load i32* %lstride.i, align 4
  %317 = load i32* %st.addr.i, align 4
  %mul.i = mul nsw i32 %316, %317
  %318 = load i32* %dx.addr.i, align 4
  %idxprom47.i = sext i32 %318 to i64
  %319 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim48.i = getelementptr inbounds %struct.F90_Desc* %319, i32 0, i32 10
  %arrayidx49.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i, i32 0, i64 %idxprom47.i
  %lstride50.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i, i32 0, i32 4
  store i32 %mul.i, i32* %lstride50.i, align 4
  %320 = load i32* %myoffset.i, align 4
  %321 = load i32* %dx.addr.i, align 4
  %idxprom51.i = sext i32 %321 to i64
  %322 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim52.i = getelementptr inbounds %struct.F90_Desc* %322, i32 0, i32 10
  %arrayidx53.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i, i32 0, i64 %idxprom51.i
  %lstride54.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i, i32 0, i32 4
  %323 = load i32* %lstride54.i, align 4
  %mul55.i = mul nsw i32 %320, %323
  %324 = load %struct.F90_Desc** %d.addr.i44, align 8
  %lbase.i46 = getelementptr inbounds %struct.F90_Desc* %324, i32 0, i32 7
  %325 = load i32* %lbase.i46, align 4
  %add56.i = add nsw i32 %325, %mul55.i
  store i32 %add56.i, i32* %lbase.i46, align 4
  %326 = load i32* %dx.addr.i, align 4
  %idxprom57.i = sext i32 %326 to i64
  %327 = load %struct.F90_Desc** %d.addr.i44, align 8
  %dim58.i = getelementptr inbounds %struct.F90_Desc* %327, i32 0, i32 10
  %arrayidx59.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i, i32 0, i64 %idxprom57.i
  %lstride60.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i, i32 0, i32 4
  %328 = load i32* %lstride60.i, align 4
  %329 = load i32* %gsize.addr.i, align 4
  %cmp61.i = icmp ne i32 %328, %329
  br i1 %cmp61.i, label %if.then62.i, label %pgf90_asection.exit

if.then62.i:                                      ; preds = %if.end37.i
  %330 = load %struct.F90_Desc** %d.addr.i44, align 8
  %flags63.i = getelementptr inbounds %struct.F90_Desc* %330, i32 0, i32 4
  %331 = load i32* %flags63.i, align 4
  %and64.i = and i32 %331, -536870913
  store i32 %and64.i, i32* %flags63.i, align 4
  br label %pgf90_asection.exit

pgf90_asection.exit:                              ; preds = %if.then62.i, %if.end37.i
  %332 = load i32* %extent.i, align 4
  %333 = load i32* %gsize.addr.i, align 4
  %mul66.i = mul nsw i32 %333, %332
  store i32 %mul66.i, i32* %gsize.addr.i, align 4
  %334 = load i32* %gsize.addr.i, align 4
  store i32 %334, i32* %gsize, align 4
  %335 = load i32* %dx, align 4
  %inc39 = add nsw i32 %335, 1
  store i32 %inc39, i32* %dx, align 4
  br label %if.end40

if.end40:                                         ; preds = %pgf90_asection.exit, %if.end32
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end24
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %pgf90_bogus_sect.exit
  %336 = load i32* %gsize, align 4
  %337 = load %struct.F90_Desc** %d, align 8
  %gsize43 = getelementptr inbounds %struct.F90_Desc* %337, i32 0, i32 6
  store i32 %336, i32* %gsize43, align 4
  %338 = load i32* %gsize, align 4
  %339 = load %struct.F90_Desc** %d, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %339, i32 0, i32 5
  store i32 %338, i32* %lsize, align 4
  ret void
}

define  void @pgf90_sect2(i8* %d, i8* %a, i8* %prank, i8* %lw0, i8* %up0, i8* %st0, i8* %lw1, i8* %up1, i8* %st1, i8* %flags) nounwind alwaysinline {
entry:
  %d.addr.i262.i = alloca %struct.F90_Desc*, align 8
  %a.addr.i263.i = alloca %struct.F90_Desc*, align 8
  %flags.addr.i264.i = alloca i32, align 4
  %lower.addr.i.i = alloca i32*, align 8
  %upper.addr.i.i = alloca i32*, align 8
  %stride.addr.i.i = alloca i32*, align 8
  %gsize.i265.i = alloca i32, align 4
  %ax.i.i = alloca i32, align 4
  %dx.i.i = alloca i32, align 4
  %d.addr.i193.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i194.i = alloca i32, align 4
  %a.addr.i195.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i196.i = alloca i32, align 4
  %lb.addr.i197.i = alloca i32, align 4
  %ub.addr.i198.i = alloca i32, align 4
  %st.addr.i199.i = alloca i32, align 4
  %gsize.addr.i200.i = alloca i32, align 4
  %flags.addr.i201.i = alloca i32, align 4
  %extent.i202.i = alloca i32, align 4
  %d.addr.i149.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i150.i = alloca i32, align 4
  %a.addr.i151.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i152.i = alloca i32, align 4
  %lb.addr.i153.i = alloca i32, align 4
  %ub.addr.i154.i = alloca i32, align 4
  %st.addr.i155.i = alloca i32, align 4
  %gsize.addr.i156.i = alloca i32, align 4
  %flags.addr.i157.i = alloca i32, align 4
  %extent.i158.i = alloca i32, align 4
  %d.addr.i47.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i48.i = alloca i32, align 4
  %a.addr.i49.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i50.i = alloca i32, align 4
  %lb.addr.i51.i = alloca i32, align 4
  %ub.addr.i52.i = alloca i32, align 4
  %st.addr.i53.i = alloca i32, align 4
  %gsize.addr.i54.i = alloca i32, align 4
  %flags.addr.i55.i = alloca i32, align 4
  %extent.i56.i = alloca i32, align 4
  %noreindex.i57.i = alloca i32, align 4
  %myoffset.i58.i = alloca i32, align 4
  %d.addr.i44.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i.i = alloca i32, align 4
  %a.addr.i45.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i.i = alloca i32, align 4
  %lb.addr.i.i = alloca i32, align 4
  %ub.addr.i.i = alloca i32, align 4
  %st.addr.i.i = alloca i32, align 4
  %gsize.addr.i.i = alloca i32, align 4
  %flags.addr.i.i = alloca i32, align 4
  %extent.i.i = alloca i32, align 4
  %noreindex.i.i = alloca i32, align 4
  %myoffset.i.i = alloca i32, align 4
  %d.addr.i.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i.i = alloca i32, align 4
  %a.addr.i.i = alloca %struct.F90_Desc*, align 8
  %pd.addr.i = alloca i8*, align 8
  %pa.addr.i = alloca i8*, align 8
  %prank.addr.i = alloca i8*, align 8
  %lw0.addr.i = alloca i32, align 4
  %up0.addr.i = alloca i32, align 4
  %st0.addr.i = alloca i32, align 4
  %lw1.addr.i = alloca i32, align 4
  %up1.addr.i = alloca i32, align 4
  %st1.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %gsize.i = alloca i32, align 4
  %dx.i = alloca i32, align 4
  %rank.i = alloca i32, align 4
  %d.i = alloca %struct.F90_Desc*, align 8
  %a.i = alloca %struct.F90_Desc*, align 8
  %lower.i = alloca [2 x i32], align 4
  %upper.i = alloca [2 x i32], align 4
  %stride.i = alloca [2 x i32], align 4
  %ax.i = alloca i32, align 4
  %d.addr = alloca i8*, align 8
  %a.addr = alloca i8*, align 8
  %prank.addr = alloca i8*, align 8
  %lw0.addr = alloca i8*, align 8
  %up0.addr = alloca i8*, align 8
  %st0.addr = alloca i8*, align 8
  %lw1.addr = alloca i8*, align 8
  %up1.addr = alloca i8*, align 8
  %st1.addr = alloca i8*, align 8
  %flags.addr = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %a, i8** %a.addr, align 8
  store i8* %prank, i8** %prank.addr, align 8
  store i8* %lw0, i8** %lw0.addr, align 8
  store i8* %up0, i8** %up0.addr, align 8
  store i8* %st0, i8** %st0.addr, align 8
  store i8* %lw1, i8** %lw1.addr, align 8
  store i8* %up1, i8** %up1.addr, align 8
  store i8* %st1, i8** %st1.addr, align 8
  store i8* %flags, i8** %flags.addr, align 8
  %0 = load i8** %d.addr, align 8
  %1 = load i8** %a.addr, align 8
  %2 = load i8** %prank.addr, align 8
  %3 = load i8** %lw0.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4
  %6 = load i8** %up0.addr, align 8
  %7 = bitcast i8* %6 to i32*
  %8 = load i32* %7, align 4
  %9 = load i8** %st0.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %12 = load i8** %lw1.addr, align 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32* %13, align 4
  %15 = load i8** %up1.addr, align 8
  %16 = bitcast i8* %15 to i32*
  %17 = load i32* %16, align 4
  %18 = load i8** %st1.addr, align 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32* %19, align 4
  %21 = load i8** %flags.addr, align 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32* %22, align 4
  store i8* %0, i8** %pd.addr.i, align 8
  store i8* %1, i8** %pa.addr.i, align 8
  store i8* %2, i8** %prank.addr.i, align 8
  store i32 %5, i32* %lw0.addr.i, align 4
  store i32 %8, i32* %up0.addr.i, align 4
  store i32 %11, i32* %st0.addr.i, align 4
  store i32 %14, i32* %lw1.addr.i, align 4
  store i32 %17, i32* %up1.addr.i, align 4
  store i32 %20, i32* %st1.addr.i, align 4
  store i32 %23, i32* %flags.addr.i, align 4
  %24 = load i8** %pd.addr.i, align 8
  %25 = bitcast i8* %24 to %struct.F90_Desc*
  store %struct.F90_Desc* %25, %struct.F90_Desc** %d.i, align 8
  %26 = load i8** %pa.addr.i, align 8
  %27 = bitcast i8* %26 to %struct.F90_Desc*
  store %struct.F90_Desc* %27, %struct.F90_Desc** %a.i, align 8
  %28 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %28, 1
  %29 = load i32* %flags.addr.i, align 4
  %and1.i = and i32 %29, 2
  %add.i = add nsw i32 %and.i, %and1.i
  store i32 %add.i, i32* %rank.i, align 4
  %30 = load %struct.F90_Desc** %d.i, align 8
  %31 = load i32* %rank.i, align 4
  %32 = load %struct.F90_Desc** %a.i, align 8
  store %struct.F90_Desc* %30, %struct.F90_Desc** %d.addr.i.i, align 8
  store i32 %31, i32* %rank.addr.i.i, align 4
  store %struct.F90_Desc* %32, %struct.F90_Desc** %a.addr.i.i, align 8
  %33 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %tag.i.i = getelementptr inbounds %struct.F90_Desc* %33, i32 0, i32 0
  store i32 35, i32* %tag.i.i, align 4
  %34 = load i32* %rank.addr.i.i, align 4
  %35 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %rank1.i.i = getelementptr inbounds %struct.F90_Desc* %35, i32 0, i32 1
  store i32 %34, i32* %rank1.i.i, align 4
  %36 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %kind.i.i = getelementptr inbounds %struct.F90_Desc* %36, i32 0, i32 2
  %37 = load i32* %kind.i.i, align 4
  %38 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %kind2.i.i = getelementptr inbounds %struct.F90_Desc* %38, i32 0, i32 2
  store i32 %37, i32* %kind2.i.i, align 4
  %39 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %len.i.i = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 3
  %40 = load i32* %len.i.i, align 4
  %41 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %len3.i.i = getelementptr inbounds %struct.F90_Desc* %41, i32 0, i32 3
  store i32 %40, i32* %len3.i.i, align 4
  %42 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %flags.i.i = getelementptr inbounds %struct.F90_Desc* %42, i32 0, i32 4
  %43 = load i32* %flags.i.i, align 4
  %44 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags4.i.i = getelementptr inbounds %struct.F90_Desc* %44, i32 0, i32 4
  store i32 %43, i32* %flags4.i.i, align 4
  %45 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %gsize.i.i = getelementptr inbounds %struct.F90_Desc* %45, i32 0, i32 6
  %46 = load i32* %gsize.i.i, align 4
  %47 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gsize5.i.i = getelementptr inbounds %struct.F90_Desc* %47, i32 0, i32 6
  store i32 %46, i32* %gsize5.i.i, align 4
  %48 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %lsize.i.i = getelementptr inbounds %struct.F90_Desc* %48, i32 0, i32 5
  %49 = load i32* %lsize.i.i, align 4
  %50 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lsize6.i.i = getelementptr inbounds %struct.F90_Desc* %50, i32 0, i32 5
  store i32 %49, i32* %lsize6.i.i, align 4
  %51 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %gbase.i.i = getelementptr inbounds %struct.F90_Desc* %51, i32 0, i32 8
  %52 = load i32** %gbase.i.i, align 8
  %53 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gbase7.i.i = getelementptr inbounds %struct.F90_Desc* %53, i32 0, i32 8
  store i32* %52, i32** %gbase7.i.i, align 8
  %54 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %lbase.i.i = getelementptr inbounds %struct.F90_Desc* %54, i32 0, i32 7
  %55 = load i32* %lbase.i.i, align 4
  %56 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lbase8.i.i = getelementptr inbounds %struct.F90_Desc* %56, i32 0, i32 7
  store i32 %55, i32* %lbase8.i.i, align 4
  store i32 1, i32* %gsize.i, align 4
  store i32 0, i32* %dx.i, align 4
  %57 = load i32* %flags.addr.i, align 4
  %and2.i = and i32 %57, 256
  %tobool.i = icmp ne i32 %and2.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %58 = load i32* %lw0.addr.i, align 4
  %arrayidx.i = getelementptr inbounds [2 x i32]* %lower.i, i32 0, i64 0
  store i32 %58, i32* %arrayidx.i, align 4
  %59 = load i32* %up0.addr.i, align 4
  %arrayidx3.i = getelementptr inbounds [2 x i32]* %upper.i, i32 0, i64 0
  store i32 %59, i32* %arrayidx3.i, align 4
  %60 = load i32* %st0.addr.i, align 4
  %arrayidx4.i = getelementptr inbounds [2 x i32]* %stride.i, i32 0, i64 0
  store i32 %60, i32* %arrayidx4.i, align 4
  %61 = load i32* %lw1.addr.i, align 4
  %arrayidx5.i = getelementptr inbounds [2 x i32]* %lower.i, i32 0, i64 1
  store i32 %61, i32* %arrayidx5.i, align 4
  %62 = load i32* %up1.addr.i, align 4
  %arrayidx6.i = getelementptr inbounds [2 x i32]* %upper.i, i32 0, i64 1
  store i32 %62, i32* %arrayidx6.i, align 4
  %63 = load i32* %st1.addr.i, align 4
  %arrayidx7.i = getelementptr inbounds [2 x i32]* %stride.i, i32 0, i64 1
  store i32 %63, i32* %arrayidx7.i, align 4
  %64 = load %struct.F90_Desc** %d.i, align 8
  %65 = load %struct.F90_Desc** %a.i, align 8
  %66 = load i32* %flags.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [2 x i32]* %lower.i, i32 0, i32 0
  %arraydecay8.i = getelementptr inbounds [2 x i32]* %upper.i, i32 0, i32 0
  %arraydecay9.i = getelementptr inbounds [2 x i32]* %stride.i, i32 0, i32 0
  store %struct.F90_Desc* %64, %struct.F90_Desc** %d.addr.i262.i, align 8
  store %struct.F90_Desc* %65, %struct.F90_Desc** %a.addr.i263.i, align 8
  store i32 %66, i32* %flags.addr.i264.i, align 4
  store i32* %arraydecay.i, i32** %lower.addr.i.i, align 8
  store i32* %arraydecay8.i, i32** %upper.addr.i.i, align 8
  store i32* %arraydecay9.i, i32** %stride.addr.i.i, align 8
  %67 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %flags1.i.i = getelementptr inbounds %struct.F90_Desc* %67, i32 0, i32 4
  %68 = load i32* %flags1.i.i, align 4
  %or.i.i = or i32 %68, 8388608
  store i32 %or.i.i, i32* %flags1.i.i, align 4
  store i32 1, i32* %gsize.i265.i, align 4
  store i32 0, i32* %dx.i.i, align 4
  store i32 0, i32* %ax.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %if.end33.i.i, %if.then.i
  %69 = load i32* %ax.i.i, align 4
  %70 = load %struct.F90_Desc** %a.addr.i263.i, align 8
  %rank.i.i = getelementptr inbounds %struct.F90_Desc* %70, i32 0, i32 1
  %71 = load i32* %rank.i.i, align 4
  %cmp.i266.i = icmp slt i32 %69, %71
  br i1 %cmp.i266.i, label %for.body.i.i, label %pgf90_bogus_sect.exit.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %72 = load i32* %flags.addr.i264.i, align 4
  %73 = load i32* %ax.i.i, align 4
  %shl.i.i = shl i32 1, %73
  %and.i267.i = and i32 %72, %shl.i.i
  %tobool.i268.i = icmp ne i32 %and.i267.i, 0
  br i1 %tobool.i268.i, label %if.then.i287.i, label %if.end33.i.i

if.then.i287.i:                                   ; preds = %for.body.i.i
  %74 = load i32* %dx.i.i, align 4
  %idxprom.i269.i = sext i32 %74 to i64
  %75 = load i32** %lower.addr.i.i, align 8
  %arrayidx.i270.i = getelementptr inbounds i32* %75, i64 %idxprom.i269.i
  %76 = load i32* %arrayidx.i270.i, align 4
  %77 = load i32* %dx.i.i, align 4
  %idxprom2.i.i = sext i32 %77 to i64
  %78 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %dim.i271.i = getelementptr inbounds %struct.F90_Desc* %78, i32 0, i32 10
  %arrayidx3.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i271.i, i32 0, i64 %idxprom2.i.i
  %lbound.i272.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx3.i.i, i32 0, i32 0
  store i32 %76, i32* %lbound.i272.i, align 4
  %79 = load i32* %dx.i.i, align 4
  %idxprom4.i.i = sext i32 %79 to i64
  %80 = load i32** %upper.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i32* %80, i64 %idxprom4.i.i
  %81 = load i32* %arrayidx5.i.i, align 4
  %82 = load i32* %dx.i.i, align 4
  %idxprom6.i.i = sext i32 %82 to i64
  %83 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %dim7.i.i = getelementptr inbounds %struct.F90_Desc* %83, i32 0, i32 10
  %arrayidx8.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7.i.i, i32 0, i64 %idxprom6.i.i
  %ubound.i273.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx8.i.i, i32 0, i32 5
  store i32 %81, i32* %ubound.i273.i, align 4
  %84 = load i32* %dx.i.i, align 4
  %idxprom9.i.i = sext i32 %84 to i64
  %85 = load i32** %upper.addr.i.i, align 8
  %arrayidx10.i274.i = getelementptr inbounds i32* %85, i64 %idxprom9.i.i
  %86 = load i32* %arrayidx10.i274.i, align 4
  %87 = load i32* %dx.i.i, align 4
  %idxprom11.i275.i = sext i32 %87 to i64
  %88 = load i32** %lower.addr.i.i, align 8
  %arrayidx12.i.i = getelementptr inbounds i32* %88, i64 %idxprom11.i275.i
  %89 = load i32* %arrayidx12.i.i, align 4
  %sub.i276.i = sub nsw i32 %86, %89
  %add.i277.i = add nsw i32 %sub.i276.i, 1
  %90 = load i32* %dx.i.i, align 4
  %idxprom13.i.i = sext i32 %90 to i64
  %91 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %dim14.i.i = getelementptr inbounds %struct.F90_Desc* %91, i32 0, i32 10
  %arrayidx15.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14.i.i, i32 0, i64 %idxprom13.i.i
  %extent.i278.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx15.i.i, i32 0, i32 1
  store i32 %add.i277.i, i32* %extent.i278.i, align 4
  %92 = load i32* %dx.i.i, align 4
  %idxprom16.i.i = sext i32 %92 to i64
  %93 = load i32** %stride.addr.i.i, align 8
  %arrayidx17.i279.i = getelementptr inbounds i32* %93, i64 %idxprom16.i.i
  %94 = load i32* %arrayidx17.i279.i, align 4
  %95 = load i32* %dx.i.i, align 4
  %idxprom18.i280.i = sext i32 %95 to i64
  %96 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %dim19.i281.i = getelementptr inbounds %struct.F90_Desc* %96, i32 0, i32 10
  %arrayidx20.i282.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i281.i, i32 0, i64 %idxprom18.i280.i
  %lstride.i283.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i282.i, i32 0, i32 4
  store i32 %94, i32* %lstride.i283.i, align 4
  %97 = load i32* %dx.i.i, align 4
  %idxprom21.i284.i = sext i32 %97 to i64
  %98 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %dim22.i285.i = getelementptr inbounds %struct.F90_Desc* %98, i32 0, i32 10
  %arrayidx23.i286.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i285.i, i32 0, i64 %idxprom21.i284.i
  %lstride24.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i286.i, i32 0, i32 4
  %99 = load i32* %lstride24.i.i, align 4
  %100 = load i32* %gsize.i265.i, align 4
  %cmp25.i.i = icmp ne i32 %99, %100
  br i1 %cmp25.i.i, label %if.then26.i.i, label %if.end.i289.i

if.then26.i.i:                                    ; preds = %if.then.i287.i
  %101 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %flags27.i.i = getelementptr inbounds %struct.F90_Desc* %101, i32 0, i32 4
  %102 = load i32* %flags27.i.i, align 4
  %and28.i.i = and i32 %102, -536870913
  store i32 %and28.i.i, i32* %flags27.i.i, align 4
  br label %if.end.i289.i

if.end.i289.i:                                    ; preds = %if.then26.i.i, %if.then.i287.i
  %103 = load i32* %dx.i.i, align 4
  %idxprom29.i.i = sext i32 %103 to i64
  %104 = load %struct.F90_Desc** %d.addr.i262.i, align 8
  %dim30.i.i = getelementptr inbounds %struct.F90_Desc* %104, i32 0, i32 10
  %arrayidx31.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30.i.i, i32 0, i64 %idxprom29.i.i
  %extent32.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx31.i.i, i32 0, i32 1
  %105 = load i32* %extent32.i.i, align 4
  %106 = load i32* %gsize.i265.i, align 4
  %mul.i288.i = mul nsw i32 %106, %105
  store i32 %mul.i288.i, i32* %gsize.i265.i, align 4
  %107 = load i32* %dx.i.i, align 4
  %inc.i.i = add nsw i32 %107, 1
  store i32 %inc.i.i, i32* %dx.i.i, align 4
  br label %if.end33.i.i

if.end33.i.i:                                     ; preds = %if.end.i289.i, %for.body.i.i
  %108 = load i32* %ax.i.i, align 4
  %inc34.i.i = add nsw i32 %108, 1
  store i32 %inc34.i.i, i32* %ax.i.i, align 4
  br label %for.cond.i.i

pgf90_bogus_sect.exit.i:                          ; preds = %for.cond.i.i
  %109 = load i32* %gsize.i265.i, align 4
  store i32 %109, i32* %gsize.i, align 4
  br label %pgf90_sect2v.exit

if.else.i:                                        ; preds = %entry
  store i32 0, i32* %ax.i, align 4
  %110 = load i32* %flags.addr.i, align 4
  %and10.i = and i32 %110, 4194304
  %tobool11.i = icmp ne i32 %and10.i, 0
  br i1 %tobool11.i, label %if.then12.i, label %if.else25.i

if.then12.i:                                      ; preds = %if.else.i
  %111 = load %struct.F90_Desc** %d.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %111, i32 0, i32 7
  store i32 1, i32* %lbase.i, align 4
  %112 = load i32* %flags.addr.i, align 4
  %113 = load i32* %ax.i, align 4
  %shl.i = shl i32 1, %113
  %and13.i = and i32 %112, %shl.i
  %tobool14.i = icmp ne i32 %and13.i, 0
  br i1 %tobool14.i, label %if.then15.i, label %if.end.i

if.then15.i:                                      ; preds = %if.then12.i
  %114 = load %struct.F90_Desc** %d.i, align 8
  %115 = load i32* %dx.i, align 4
  %116 = load %struct.F90_Desc** %a.i, align 8
  %117 = load i32* %ax.i, align 4
  %118 = load i32* %lw0.addr.i, align 4
  %119 = load i32* %up0.addr.i, align 4
  %120 = load i32* %st0.addr.i, align 4
  %121 = load i32* %gsize.i, align 4
  %122 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %114, %struct.F90_Desc** %d.addr.i193.i, align 8
  store i32 %115, i32* %dx.addr.i194.i, align 4
  store %struct.F90_Desc* %116, %struct.F90_Desc** %a.addr.i195.i, align 8
  store i32 %117, i32* %ax.addr.i196.i, align 4
  store i32 %118, i32* %lb.addr.i197.i, align 4
  store i32 %119, i32* %ub.addr.i198.i, align 4
  store i32 %120, i32* %st.addr.i199.i, align 4
  store i32 %121, i32* %gsize.addr.i200.i, align 4
  store i32 %122, i32* %flags.addr.i201.i, align 4
  %123 = load i32* %ub.addr.i198.i, align 4
  %124 = load i32* %lb.addr.i197.i, align 4
  %sub.i203.i = sub nsw i32 %123, %124
  %125 = load i32* %st.addr.i199.i, align 4
  %add.i204.i = add nsw i32 %sub.i203.i, %125
  store i32 %add.i204.i, i32* %extent.i202.i, align 4
  %126 = load i32* %st.addr.i199.i, align 4
  %cmp.i205.i = icmp ne i32 %126, 1
  br i1 %cmp.i205.i, label %if.then.i207.i, label %if.end4.i214.i

if.then.i207.i:                                   ; preds = %if.then15.i
  %127 = load i32* %st.addr.i199.i, align 4
  %cmp1.i206.i = icmp eq i32 %127, -1
  br i1 %cmp1.i206.i, label %if.then2.i209.i, label %if.else.i211.i

if.then2.i209.i:                                  ; preds = %if.then.i207.i
  %128 = load i32* %extent.i202.i, align 4
  %sub3.i208.i = sub nsw i32 0, %128
  store i32 %sub3.i208.i, i32* %extent.i202.i, align 4
  br label %if.end.i212.i

if.else.i211.i:                                   ; preds = %if.then.i207.i
  %129 = load i32* %st.addr.i199.i, align 4
  %130 = load i32* %extent.i202.i, align 4
  %div.i210.i = sdiv i32 %130, %129
  store i32 %div.i210.i, i32* %extent.i202.i, align 4
  br label %if.end.i212.i

if.end.i212.i:                                    ; preds = %if.else.i211.i, %if.then2.i209.i
  br label %if.end4.i214.i

if.end4.i214.i:                                   ; preds = %if.end.i212.i, %if.then15.i
  %131 = load i32* %extent.i202.i, align 4
  %cmp5.i213.i = icmp slt i32 %131, 0
  br i1 %cmp5.i213.i, label %if.then6.i215.i, label %if.end7.i256.i

if.then6.i215.i:                                  ; preds = %if.end4.i214.i
  store i32 0, i32* %extent.i202.i, align 4
  br label %if.end7.i256.i

if.end7.i256.i:                                   ; preds = %if.then6.i215.i, %if.end4.i214.i
  %132 = load i32* %dx.addr.i194.i, align 4
  %idxprom.i216.i = sext i32 %132 to i64
  %133 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim.i217.i = getelementptr inbounds %struct.F90_Desc* %133, i32 0, i32 10
  %arrayidx.i218.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i217.i, i32 0, i64 %idxprom.i216.i
  %lbound.i219.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i218.i, i32 0, i32 0
  store i32 1, i32* %lbound.i219.i, align 4
  %134 = load i32* %extent.i202.i, align 4
  %135 = load i32* %dx.addr.i194.i, align 4
  %idxprom8.i220.i = sext i32 %135 to i64
  %136 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim9.i221.i = getelementptr inbounds %struct.F90_Desc* %136, i32 0, i32 10
  %arrayidx10.i222.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i221.i, i32 0, i64 %idxprom8.i220.i
  %ubound.i223.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i222.i, i32 0, i32 5
  store i32 %134, i32* %ubound.i223.i, align 4
  %137 = load i32* %extent.i202.i, align 4
  %138 = load i32* %dx.addr.i194.i, align 4
  %idxprom11.i224.i = sext i32 %138 to i64
  %139 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim12.i225.i = getelementptr inbounds %struct.F90_Desc* %139, i32 0, i32 10
  %arrayidx13.i226.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i225.i, i32 0, i64 %idxprom11.i224.i
  %extent14.i227.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i226.i, i32 0, i32 1
  store i32 %137, i32* %extent14.i227.i, align 4
  %140 = load i32* %dx.addr.i194.i, align 4
  %idxprom15.i228.i = sext i32 %140 to i64
  %141 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim16.i229.i = getelementptr inbounds %struct.F90_Desc* %141, i32 0, i32 10
  %arrayidx17.i230.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i229.i, i32 0, i64 %idxprom15.i228.i
  %sstride.i231.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i230.i, i32 0, i32 2
  store i32 1, i32* %sstride.i231.i, align 4
  %142 = load i32* %dx.addr.i194.i, align 4
  %idxprom18.i232.i = sext i32 %142 to i64
  %143 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim19.i233.i = getelementptr inbounds %struct.F90_Desc* %143, i32 0, i32 10
  %arrayidx20.i234.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i233.i, i32 0, i64 %idxprom18.i232.i
  %soffset.i235.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i234.i, i32 0, i32 3
  store i32 0, i32* %soffset.i235.i, align 4
  %144 = load i32* %ax.addr.i196.i, align 4
  %idxprom21.i236.i = sext i32 %144 to i64
  %145 = load %struct.F90_Desc** %a.addr.i195.i, align 8
  %dim22.i237.i = getelementptr inbounds %struct.F90_Desc* %145, i32 0, i32 10
  %arrayidx23.i238.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i237.i, i32 0, i64 %idxprom21.i236.i
  %lstride.i239.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i238.i, i32 0, i32 4
  %146 = load i32* %lstride.i239.i, align 4
  %147 = load i32* %st.addr.i199.i, align 4
  %mul.i240.i = mul nsw i32 %146, %147
  %148 = load i32* %dx.addr.i194.i, align 4
  %idxprom24.i241.i = sext i32 %148 to i64
  %149 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim25.i242.i = getelementptr inbounds %struct.F90_Desc* %149, i32 0, i32 10
  %arrayidx26.i243.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i242.i, i32 0, i64 %idxprom24.i241.i
  %lstride27.i244.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i243.i, i32 0, i32 4
  store i32 %mul.i240.i, i32* %lstride27.i244.i, align 4
  %150 = load i32* %dx.addr.i194.i, align 4
  %idxprom28.i245.i = sext i32 %150 to i64
  %151 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim29.i246.i = getelementptr inbounds %struct.F90_Desc* %151, i32 0, i32 10
  %arrayidx30.i247.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i246.i, i32 0, i64 %idxprom28.i245.i
  %lstride31.i248.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i247.i, i32 0, i32 4
  %152 = load i32* %lstride31.i248.i, align 4
  %153 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %lbase.i249.i = getelementptr inbounds %struct.F90_Desc* %153, i32 0, i32 7
  %154 = load i32* %lbase.i249.i, align 4
  %sub32.i250.i = sub nsw i32 %154, %152
  store i32 %sub32.i250.i, i32* %lbase.i249.i, align 4
  %155 = load i32* %dx.addr.i194.i, align 4
  %idxprom33.i251.i = sext i32 %155 to i64
  %156 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %dim34.i252.i = getelementptr inbounds %struct.F90_Desc* %156, i32 0, i32 10
  %arrayidx35.i253.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i252.i, i32 0, i64 %idxprom33.i251.i
  %lstride36.i254.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i253.i, i32 0, i32 4
  %157 = load i32* %lstride36.i254.i, align 4
  %158 = load i32* %gsize.addr.i200.i, align 4
  %cmp37.i255.i = icmp ne i32 %157, %158
  br i1 %cmp37.i255.i, label %if.then38.i259.i, label %pgf90_tsection.exit261.i

if.then38.i259.i:                                 ; preds = %if.end7.i256.i
  %159 = load %struct.F90_Desc** %d.addr.i193.i, align 8
  %flags39.i257.i = getelementptr inbounds %struct.F90_Desc* %159, i32 0, i32 4
  %160 = load i32* %flags39.i257.i, align 4
  %and.i258.i = and i32 %160, -536870913
  store i32 %and.i258.i, i32* %flags39.i257.i, align 4
  br label %pgf90_tsection.exit261.i

pgf90_tsection.exit261.i:                         ; preds = %if.then38.i259.i, %if.end7.i256.i
  %161 = load i32* %extent.i202.i, align 4
  %162 = load i32* %gsize.addr.i200.i, align 4
  %mul41.i260.i = mul nsw i32 %162, %161
  store i32 %mul41.i260.i, i32* %gsize.addr.i200.i, align 4
  %163 = load i32* %gsize.addr.i200.i, align 4
  store i32 %163, i32* %gsize.i, align 4
  %164 = load i32* %dx.i, align 4
  %inc.i = add nsw i32 %164, 1
  store i32 %inc.i, i32* %dx.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %pgf90_tsection.exit261.i, %if.then12.i
  %165 = load i32* %ax.i, align 4
  %inc17.i = add nsw i32 %165, 1
  store i32 %inc17.i, i32* %ax.i, align 4
  %166 = load i32* %flags.addr.i, align 4
  %167 = load i32* %ax.i, align 4
  %shl18.i = shl i32 1, %167
  %and19.i = and i32 %166, %shl18.i
  %tobool20.i = icmp ne i32 %and19.i, 0
  br i1 %tobool20.i, label %if.then21.i, label %if.end24.i

if.then21.i:                                      ; preds = %if.end.i
  %168 = load %struct.F90_Desc** %d.i, align 8
  %169 = load i32* %dx.i, align 4
  %170 = load %struct.F90_Desc** %a.i, align 8
  %171 = load i32* %ax.i, align 4
  %172 = load i32* %lw1.addr.i, align 4
  %173 = load i32* %up1.addr.i, align 4
  %174 = load i32* %st1.addr.i, align 4
  %175 = load i32* %gsize.i, align 4
  %176 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %168, %struct.F90_Desc** %d.addr.i149.i, align 8
  store i32 %169, i32* %dx.addr.i150.i, align 4
  store %struct.F90_Desc* %170, %struct.F90_Desc** %a.addr.i151.i, align 8
  store i32 %171, i32* %ax.addr.i152.i, align 4
  store i32 %172, i32* %lb.addr.i153.i, align 4
  store i32 %173, i32* %ub.addr.i154.i, align 4
  store i32 %174, i32* %st.addr.i155.i, align 4
  store i32 %175, i32* %gsize.addr.i156.i, align 4
  store i32 %176, i32* %flags.addr.i157.i, align 4
  %177 = load i32* %ub.addr.i154.i, align 4
  %178 = load i32* %lb.addr.i153.i, align 4
  %sub.i159.i = sub nsw i32 %177, %178
  %179 = load i32* %st.addr.i155.i, align 4
  %add.i160.i = add nsw i32 %sub.i159.i, %179
  store i32 %add.i160.i, i32* %extent.i158.i, align 4
  %180 = load i32* %st.addr.i155.i, align 4
  %cmp.i161.i = icmp ne i32 %180, 1
  br i1 %cmp.i161.i, label %if.then.i163.i, label %if.end4.i170.i

if.then.i163.i:                                   ; preds = %if.then21.i
  %181 = load i32* %st.addr.i155.i, align 4
  %cmp1.i162.i = icmp eq i32 %181, -1
  br i1 %cmp1.i162.i, label %if.then2.i165.i, label %if.else.i167.i

if.then2.i165.i:                                  ; preds = %if.then.i163.i
  %182 = load i32* %extent.i158.i, align 4
  %sub3.i164.i = sub nsw i32 0, %182
  store i32 %sub3.i164.i, i32* %extent.i158.i, align 4
  br label %if.end.i168.i

if.else.i167.i:                                   ; preds = %if.then.i163.i
  %183 = load i32* %st.addr.i155.i, align 4
  %184 = load i32* %extent.i158.i, align 4
  %div.i166.i = sdiv i32 %184, %183
  store i32 %div.i166.i, i32* %extent.i158.i, align 4
  br label %if.end.i168.i

if.end.i168.i:                                    ; preds = %if.else.i167.i, %if.then2.i165.i
  br label %if.end4.i170.i

if.end4.i170.i:                                   ; preds = %if.end.i168.i, %if.then21.i
  %185 = load i32* %extent.i158.i, align 4
  %cmp5.i169.i = icmp slt i32 %185, 0
  br i1 %cmp5.i169.i, label %if.then6.i171.i, label %if.end7.i191.i

if.then6.i171.i:                                  ; preds = %if.end4.i170.i
  store i32 0, i32* %extent.i158.i, align 4
  br label %if.end7.i191.i

if.end7.i191.i:                                   ; preds = %if.then6.i171.i, %if.end4.i170.i
  %186 = load i32* %dx.addr.i150.i, align 4
  %idxprom.i172.i = sext i32 %186 to i64
  %187 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim.i173.i = getelementptr inbounds %struct.F90_Desc* %187, i32 0, i32 10
  %arrayidx.i174.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i173.i, i32 0, i64 %idxprom.i172.i
  %lbound.i175.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i174.i, i32 0, i32 0
  store i32 1, i32* %lbound.i175.i, align 4
  %188 = load i32* %extent.i158.i, align 4
  %189 = load i32* %dx.addr.i150.i, align 4
  %idxprom8.i.i = sext i32 %189 to i64
  %190 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim9.i.i = getelementptr inbounds %struct.F90_Desc* %190, i32 0, i32 10
  %arrayidx10.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i.i, i32 0, i64 %idxprom8.i.i
  %ubound.i176.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i.i, i32 0, i32 5
  store i32 %188, i32* %ubound.i176.i, align 4
  %191 = load i32* %extent.i158.i, align 4
  %192 = load i32* %dx.addr.i150.i, align 4
  %idxprom11.i.i = sext i32 %192 to i64
  %193 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim12.i.i = getelementptr inbounds %struct.F90_Desc* %193, i32 0, i32 10
  %arrayidx13.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i.i, i32 0, i64 %idxprom11.i.i
  %extent14.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i.i, i32 0, i32 1
  store i32 %191, i32* %extent14.i.i, align 4
  %194 = load i32* %dx.addr.i150.i, align 4
  %idxprom15.i177.i = sext i32 %194 to i64
  %195 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim16.i178.i = getelementptr inbounds %struct.F90_Desc* %195, i32 0, i32 10
  %arrayidx17.i179.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i178.i, i32 0, i64 %idxprom15.i177.i
  %sstride.i180.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i179.i, i32 0, i32 2
  store i32 1, i32* %sstride.i180.i, align 4
  %196 = load i32* %dx.addr.i150.i, align 4
  %idxprom18.i.i = sext i32 %196 to i64
  %197 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim19.i.i = getelementptr inbounds %struct.F90_Desc* %197, i32 0, i32 10
  %arrayidx20.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i.i, i32 0, i64 %idxprom18.i.i
  %soffset.i181.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i181.i, align 4
  %198 = load i32* %ax.addr.i152.i, align 4
  %idxprom21.i.i = sext i32 %198 to i64
  %199 = load %struct.F90_Desc** %a.addr.i151.i, align 8
  %dim22.i.i = getelementptr inbounds %struct.F90_Desc* %199, i32 0, i32 10
  %arrayidx23.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i.i, i32 0, i64 %idxprom21.i.i
  %lstride.i182.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i.i, i32 0, i32 4
  %200 = load i32* %lstride.i182.i, align 4
  %201 = load i32* %st.addr.i155.i, align 4
  %mul.i183.i = mul nsw i32 %200, %201
  %202 = load i32* %dx.addr.i150.i, align 4
  %idxprom24.i184.i = sext i32 %202 to i64
  %203 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim25.i185.i = getelementptr inbounds %struct.F90_Desc* %203, i32 0, i32 10
  %arrayidx26.i186.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i185.i, i32 0, i64 %idxprom24.i184.i
  %lstride27.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i186.i, i32 0, i32 4
  store i32 %mul.i183.i, i32* %lstride27.i.i, align 4
  %204 = load i32* %dx.addr.i150.i, align 4
  %idxprom28.i187.i = sext i32 %204 to i64
  %205 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim29.i188.i = getelementptr inbounds %struct.F90_Desc* %205, i32 0, i32 10
  %arrayidx30.i189.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i188.i, i32 0, i64 %idxprom28.i187.i
  %lstride31.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i189.i, i32 0, i32 4
  %206 = load i32* %lstride31.i.i, align 4
  %207 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %lbase.i190.i = getelementptr inbounds %struct.F90_Desc* %207, i32 0, i32 7
  %208 = load i32* %lbase.i190.i, align 4
  %sub32.i.i = sub nsw i32 %208, %206
  store i32 %sub32.i.i, i32* %lbase.i190.i, align 4
  %209 = load i32* %dx.addr.i150.i, align 4
  %idxprom33.i.i = sext i32 %209 to i64
  %210 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %dim34.i.i = getelementptr inbounds %struct.F90_Desc* %210, i32 0, i32 10
  %arrayidx35.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i.i, i32 0, i64 %idxprom33.i.i
  %lstride36.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i.i, i32 0, i32 4
  %211 = load i32* %lstride36.i.i, align 4
  %212 = load i32* %gsize.addr.i156.i, align 4
  %cmp37.i.i = icmp ne i32 %211, %212
  br i1 %cmp37.i.i, label %if.then38.i.i, label %pgf90_tsection.exit.i

if.then38.i.i:                                    ; preds = %if.end7.i191.i
  %213 = load %struct.F90_Desc** %d.addr.i149.i, align 8
  %flags39.i.i = getelementptr inbounds %struct.F90_Desc* %213, i32 0, i32 4
  %214 = load i32* %flags39.i.i, align 4
  %and.i192.i = and i32 %214, -536870913
  store i32 %and.i192.i, i32* %flags39.i.i, align 4
  br label %pgf90_tsection.exit.i

pgf90_tsection.exit.i:                            ; preds = %if.then38.i.i, %if.end7.i191.i
  %215 = load i32* %extent.i158.i, align 4
  %216 = load i32* %gsize.addr.i156.i, align 4
  %mul41.i.i = mul nsw i32 %216, %215
  store i32 %mul41.i.i, i32* %gsize.addr.i156.i, align 4
  %217 = load i32* %gsize.addr.i156.i, align 4
  store i32 %217, i32* %gsize.i, align 4
  %218 = load i32* %dx.i, align 4
  %inc23.i = add nsw i32 %218, 1
  store i32 %inc23.i, i32* %dx.i, align 4
  br label %if.end24.i

if.end24.i:                                       ; preds = %pgf90_tsection.exit.i, %if.end.i
  br label %if.end41.i

if.else25.i:                                      ; preds = %if.else.i
  %219 = load i32* %flags.addr.i, align 4
  %220 = load i32* %ax.i, align 4
  %shl26.i = shl i32 1, %220
  %and27.i = and i32 %219, %shl26.i
  %tobool28.i = icmp ne i32 %and27.i, 0
  br i1 %tobool28.i, label %if.then29.i, label %if.end32.i

if.then29.i:                                      ; preds = %if.else25.i
  %221 = load %struct.F90_Desc** %d.i, align 8
  %222 = load %struct.F90_Desc** %a.i, align 8
  %223 = load i32* %lw0.addr.i, align 4
  %224 = load i32* %up0.addr.i, align 4
  %225 = load i32* %st0.addr.i, align 4
  %226 = load i32* %gsize.i, align 4
  %227 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %221, %struct.F90_Desc** %d.addr.i47.i, align 8
  store i32 0, i32* %dx.addr.i48.i, align 4
  store %struct.F90_Desc* %222, %struct.F90_Desc** %a.addr.i49.i, align 8
  store i32 0, i32* %ax.addr.i50.i, align 4
  store i32 %223, i32* %lb.addr.i51.i, align 4
  store i32 %224, i32* %ub.addr.i52.i, align 4
  store i32 %225, i32* %st.addr.i53.i, align 4
  store i32 %226, i32* %gsize.addr.i54.i, align 4
  store i32 %227, i32* %flags.addr.i55.i, align 4
  %228 = load i32* %ub.addr.i52.i, align 4
  %229 = load i32* %lb.addr.i51.i, align 4
  %sub.i59.i = sub nsw i32 %228, %229
  %230 = load i32* %st.addr.i53.i, align 4
  %add.i60.i = add nsw i32 %sub.i59.i, %230
  store i32 %add.i60.i, i32* %extent.i56.i, align 4
  %231 = load i32* %flags.addr.i55.i, align 4
  %and.i61.i = and i32 %231, 33554432
  store i32 %and.i61.i, i32* %noreindex.i57.i, align 4
  %232 = load i32* %st.addr.i53.i, align 4
  %cmp.i62.i = icmp ne i32 %232, 1
  br i1 %cmp.i62.i, label %if.then.i64.i, label %if.end4.i71.i

if.then.i64.i:                                    ; preds = %if.then29.i
  %233 = load i32* %st.addr.i53.i, align 4
  %cmp1.i63.i = icmp eq i32 %233, -1
  br i1 %cmp1.i63.i, label %if.then2.i66.i, label %if.else.i68.i

if.then2.i66.i:                                   ; preds = %if.then.i64.i
  %234 = load i32* %extent.i56.i, align 4
  %sub3.i65.i = sub nsw i32 0, %234
  store i32 %sub3.i65.i, i32* %extent.i56.i, align 4
  br label %if.end.i69.i

if.else.i68.i:                                    ; preds = %if.then.i64.i
  %235 = load i32* %st.addr.i53.i, align 4
  %236 = load i32* %extent.i56.i, align 4
  %div.i67.i = sdiv i32 %236, %235
  store i32 %div.i67.i, i32* %extent.i56.i, align 4
  br label %if.end.i69.i

if.end.i69.i:                                     ; preds = %if.else.i68.i, %if.then2.i66.i
  br label %if.end4.i71.i

if.end4.i71.i:                                    ; preds = %if.end.i69.i, %if.then29.i
  %237 = load i32* %extent.i56.i, align 4
  %cmp5.i70.i = icmp slt i32 %237, 0
  br i1 %cmp5.i70.i, label %if.then6.i72.i, label %if.end7.i74.i

if.then6.i72.i:                                   ; preds = %if.end4.i71.i
  store i32 0, i32* %extent.i56.i, align 4
  br label %if.end7.i74.i

if.end7.i74.i:                                    ; preds = %if.then6.i72.i, %if.end4.i71.i
  %238 = load i32* %noreindex.i57.i, align 4
  %tobool.i73.i = icmp ne i32 %238, 0
  br i1 %tobool.i73.i, label %land.lhs.true.i76.i, label %if.else23.i113.i

land.lhs.true.i76.i:                              ; preds = %if.end7.i74.i
  %239 = load i32* %st.addr.i53.i, align 4
  %cmp8.i75.i = icmp eq i32 %239, 1
  br i1 %cmp8.i75.i, label %if.then9.i82.i, label %if.else23.i113.i

if.then9.i82.i:                                   ; preds = %land.lhs.true.i76.i
  %240 = load i32* %dx.addr.i48.i, align 4
  %idxprom.i77.i = sext i32 %240 to i64
  %241 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim.i78.i = getelementptr inbounds %struct.F90_Desc* %241, i32 0, i32 10
  %arrayidx.i79.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i78.i, i32 0, i64 %idxprom.i77.i
  %lbound.i80.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i79.i, i32 0, i32 0
  store i32 1, i32* %lbound.i80.i, align 4
  %242 = load i32* %extent.i56.i, align 4
  %cmp10.i81.i = icmp eq i32 %242, 0
  br i1 %cmp10.i81.i, label %cond.true.i84.i, label %cond.false.i85.i

cond.true.i84.i:                                  ; preds = %if.then9.i82.i
  %243 = load i32* %lb.addr.i51.i, align 4
  %sub11.i83.i = sub nsw i32 %243, 1
  br label %cond.end.i99.i

cond.false.i85.i:                                 ; preds = %if.then9.i82.i
  %244 = load i32* %ub.addr.i52.i, align 4
  br label %cond.end.i99.i

cond.end.i99.i:                                   ; preds = %cond.false.i85.i, %cond.true.i84.i
  %cond.i86.i = phi i32 [ %sub11.i83.i, %cond.true.i84.i ], [ %244, %cond.false.i85.i ]
  %245 = load i32* %dx.addr.i48.i, align 4
  %idxprom12.i87.i = sext i32 %245 to i64
  %246 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim13.i88.i = getelementptr inbounds %struct.F90_Desc* %246, i32 0, i32 10
  %arrayidx14.i89.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i88.i, i32 0, i64 %idxprom12.i87.i
  %ubound.i90.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i89.i, i32 0, i32 5
  store i32 %cond.i86.i, i32* %ubound.i90.i, align 4
  %247 = load i32* %dx.addr.i48.i, align 4
  %idxprom15.i91.i = sext i32 %247 to i64
  %248 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim16.i92.i = getelementptr inbounds %struct.F90_Desc* %248, i32 0, i32 10
  %arrayidx17.i93.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i92.i, i32 0, i64 %idxprom15.i91.i
  %ubound18.i94.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i93.i, i32 0, i32 5
  %249 = load i32* %ubound18.i94.i, align 4
  %250 = load i32* %dx.addr.i48.i, align 4
  %idxprom19.i95.i = sext i32 %250 to i64
  %251 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim20.i96.i = getelementptr inbounds %struct.F90_Desc* %251, i32 0, i32 10
  %arrayidx21.i97.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i96.i, i32 0, i64 %idxprom19.i95.i
  %extent22.i98.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i97.i, i32 0, i32 1
  store i32 %249, i32* %extent22.i98.i, align 4
  store i32 0, i32* %myoffset.i58.i, align 4
  br label %if.end37.i143.i

if.else23.i113.i:                                 ; preds = %land.lhs.true.i76.i, %if.end7.i74.i
  %252 = load i32* %dx.addr.i48.i, align 4
  %idxprom24.i100.i = sext i32 %252 to i64
  %253 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim25.i101.i = getelementptr inbounds %struct.F90_Desc* %253, i32 0, i32 10
  %arrayidx26.i102.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i101.i, i32 0, i64 %idxprom24.i100.i
  %lbound27.i103.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i102.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i103.i, align 4
  %254 = load i32* %extent.i56.i, align 4
  %255 = load i32* %dx.addr.i48.i, align 4
  %idxprom28.i104.i = sext i32 %255 to i64
  %256 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim29.i105.i = getelementptr inbounds %struct.F90_Desc* %256, i32 0, i32 10
  %arrayidx30.i106.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i105.i, i32 0, i64 %idxprom28.i104.i
  %ubound31.i107.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i106.i, i32 0, i32 5
  store i32 %254, i32* %ubound31.i107.i, align 4
  %257 = load i32* %extent.i56.i, align 4
  %258 = load i32* %dx.addr.i48.i, align 4
  %idxprom32.i108.i = sext i32 %258 to i64
  %259 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim33.i109.i = getelementptr inbounds %struct.F90_Desc* %259, i32 0, i32 10
  %arrayidx34.i110.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i109.i, i32 0, i64 %idxprom32.i108.i
  %extent35.i111.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i110.i, i32 0, i32 1
  store i32 %257, i32* %extent35.i111.i, align 4
  %260 = load i32* %lb.addr.i51.i, align 4
  %261 = load i32* %st.addr.i53.i, align 4
  %sub36.i112.i = sub nsw i32 %260, %261
  store i32 %sub36.i112.i, i32* %myoffset.i58.i, align 4
  br label %if.end37.i143.i

if.end37.i143.i:                                  ; preds = %if.else23.i113.i, %cond.end.i99.i
  %262 = load i32* %dx.addr.i48.i, align 4
  %idxprom38.i114.i = sext i32 %262 to i64
  %263 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim39.i115.i = getelementptr inbounds %struct.F90_Desc* %263, i32 0, i32 10
  %arrayidx40.i116.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i115.i, i32 0, i64 %idxprom38.i114.i
  %sstride.i117.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i116.i, i32 0, i32 2
  store i32 1, i32* %sstride.i117.i, align 4
  %264 = load i32* %dx.addr.i48.i, align 4
  %idxprom41.i118.i = sext i32 %264 to i64
  %265 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim42.i119.i = getelementptr inbounds %struct.F90_Desc* %265, i32 0, i32 10
  %arrayidx43.i120.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i119.i, i32 0, i64 %idxprom41.i118.i
  %soffset.i121.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i120.i, i32 0, i32 3
  store i32 0, i32* %soffset.i121.i, align 4
  %266 = load i32* %ax.addr.i50.i, align 4
  %idxprom44.i122.i = sext i32 %266 to i64
  %267 = load %struct.F90_Desc** %a.addr.i49.i, align 8
  %dim45.i123.i = getelementptr inbounds %struct.F90_Desc* %267, i32 0, i32 10
  %arrayidx46.i124.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i123.i, i32 0, i64 %idxprom44.i122.i
  %lstride.i125.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i124.i, i32 0, i32 4
  %268 = load i32* %lstride.i125.i, align 4
  %269 = load i32* %st.addr.i53.i, align 4
  %mul.i126.i = mul nsw i32 %268, %269
  %270 = load i32* %dx.addr.i48.i, align 4
  %idxprom47.i127.i = sext i32 %270 to i64
  %271 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim48.i128.i = getelementptr inbounds %struct.F90_Desc* %271, i32 0, i32 10
  %arrayidx49.i129.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i128.i, i32 0, i64 %idxprom47.i127.i
  %lstride50.i130.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i129.i, i32 0, i32 4
  store i32 %mul.i126.i, i32* %lstride50.i130.i, align 4
  %272 = load i32* %myoffset.i58.i, align 4
  %273 = load i32* %dx.addr.i48.i, align 4
  %idxprom51.i131.i = sext i32 %273 to i64
  %274 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim52.i132.i = getelementptr inbounds %struct.F90_Desc* %274, i32 0, i32 10
  %arrayidx53.i133.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i132.i, i32 0, i64 %idxprom51.i131.i
  %lstride54.i134.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i133.i, i32 0, i32 4
  %275 = load i32* %lstride54.i134.i, align 4
  %mul55.i135.i = mul nsw i32 %272, %275
  %276 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %lbase.i136.i = getelementptr inbounds %struct.F90_Desc* %276, i32 0, i32 7
  %277 = load i32* %lbase.i136.i, align 4
  %add56.i137.i = add nsw i32 %277, %mul55.i135.i
  store i32 %add56.i137.i, i32* %lbase.i136.i, align 4
  %278 = load i32* %dx.addr.i48.i, align 4
  %idxprom57.i138.i = sext i32 %278 to i64
  %279 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %dim58.i139.i = getelementptr inbounds %struct.F90_Desc* %279, i32 0, i32 10
  %arrayidx59.i140.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i139.i, i32 0, i64 %idxprom57.i138.i
  %lstride60.i141.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i140.i, i32 0, i32 4
  %280 = load i32* %lstride60.i141.i, align 4
  %281 = load i32* %gsize.addr.i54.i, align 4
  %cmp61.i142.i = icmp ne i32 %280, %281
  br i1 %cmp61.i142.i, label %if.then62.i146.i, label %pgf90_asection.exit148.i

if.then62.i146.i:                                 ; preds = %if.end37.i143.i
  %282 = load %struct.F90_Desc** %d.addr.i47.i, align 8
  %flags63.i144.i = getelementptr inbounds %struct.F90_Desc* %282, i32 0, i32 4
  %283 = load i32* %flags63.i144.i, align 4
  %and64.i145.i = and i32 %283, -536870913
  store i32 %and64.i145.i, i32* %flags63.i144.i, align 4
  br label %pgf90_asection.exit148.i

pgf90_asection.exit148.i:                         ; preds = %if.then62.i146.i, %if.end37.i143.i
  %284 = load i32* %extent.i56.i, align 4
  %285 = load i32* %gsize.addr.i54.i, align 4
  %mul66.i147.i = mul nsw i32 %285, %284
  store i32 %mul66.i147.i, i32* %gsize.addr.i54.i, align 4
  %286 = load i32* %gsize.addr.i54.i, align 4
  store i32 %286, i32* %gsize.i, align 4
  %287 = load i32* %dx.i, align 4
  %inc31.i = add nsw i32 %287, 1
  store i32 %inc31.i, i32* %dx.i, align 4
  br label %if.end32.i

if.end32.i:                                       ; preds = %pgf90_asection.exit148.i, %if.else25.i
  %288 = load i32* %ax.i, align 4
  %inc33.i = add nsw i32 %288, 1
  store i32 %inc33.i, i32* %ax.i, align 4
  %289 = load i32* %flags.addr.i, align 4
  %290 = load i32* %ax.i, align 4
  %shl34.i = shl i32 1, %290
  %and35.i = and i32 %289, %shl34.i
  %tobool36.i = icmp ne i32 %and35.i, 0
  br i1 %tobool36.i, label %if.then37.i, label %if.end40.i

if.then37.i:                                      ; preds = %if.end32.i
  %291 = load %struct.F90_Desc** %d.i, align 8
  %292 = load i32* %dx.i, align 4
  %293 = load %struct.F90_Desc** %a.i, align 8
  %294 = load i32* %ax.i, align 4
  %295 = load i32* %lw1.addr.i, align 4
  %296 = load i32* %up1.addr.i, align 4
  %297 = load i32* %st1.addr.i, align 4
  %298 = load i32* %gsize.i, align 4
  %299 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %291, %struct.F90_Desc** %d.addr.i44.i, align 8
  store i32 %292, i32* %dx.addr.i.i, align 4
  store %struct.F90_Desc* %293, %struct.F90_Desc** %a.addr.i45.i, align 8
  store i32 %294, i32* %ax.addr.i.i, align 4
  store i32 %295, i32* %lb.addr.i.i, align 4
  store i32 %296, i32* %ub.addr.i.i, align 4
  store i32 %297, i32* %st.addr.i.i, align 4
  store i32 %298, i32* %gsize.addr.i.i, align 4
  store i32 %299, i32* %flags.addr.i.i, align 4
  %300 = load i32* %ub.addr.i.i, align 4
  %301 = load i32* %lb.addr.i.i, align 4
  %sub.i.i = sub nsw i32 %300, %301
  %302 = load i32* %st.addr.i.i, align 4
  %add.i.i = add nsw i32 %sub.i.i, %302
  store i32 %add.i.i, i32* %extent.i.i, align 4
  %303 = load i32* %flags.addr.i.i, align 4
  %and.i.i = and i32 %303, 33554432
  store i32 %and.i.i, i32* %noreindex.i.i, align 4
  %304 = load i32* %st.addr.i.i, align 4
  %cmp.i.i = icmp ne i32 %304, 1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %if.then37.i
  %305 = load i32* %st.addr.i.i, align 4
  %cmp1.i.i = icmp eq i32 %305, -1
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else.i.i

if.then2.i.i:                                     ; preds = %if.then.i.i
  %306 = load i32* %extent.i.i, align 4
  %sub3.i.i = sub nsw i32 0, %306
  store i32 %sub3.i.i, i32* %extent.i.i, align 4
  br label %if.end.i.i

if.else.i.i:                                      ; preds = %if.then.i.i
  %307 = load i32* %st.addr.i.i, align 4
  %308 = load i32* %extent.i.i, align 4
  %div.i.i = sdiv i32 %308, %307
  store i32 %div.i.i, i32* %extent.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i.i, %if.then2.i.i
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end.i.i, %if.then37.i
  %309 = load i32* %extent.i.i, align 4
  %cmp5.i.i = icmp slt i32 %309, 0
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.end7.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  store i32 0, i32* %extent.i.i, align 4
  br label %if.end7.i.i

if.end7.i.i:                                      ; preds = %if.then6.i.i, %if.end4.i.i
  %310 = load i32* %noreindex.i.i, align 4
  %tobool.i.i = icmp ne i32 %310, 0
  br i1 %tobool.i.i, label %land.lhs.true.i.i, label %if.else23.i.i

land.lhs.true.i.i:                                ; preds = %if.end7.i.i
  %311 = load i32* %st.addr.i.i, align 4
  %cmp8.i.i = icmp eq i32 %311, 1
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.else23.i.i

if.then9.i.i:                                     ; preds = %land.lhs.true.i.i
  %312 = load i32* %dx.addr.i.i, align 4
  %idxprom.i.i = sext i32 %312 to i64
  %313 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim.i.i = getelementptr inbounds %struct.F90_Desc* %313, i32 0, i32 10
  %arrayidx.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i.i, i32 0, i64 %idxprom.i.i
  %lbound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i.i, i32 0, i32 0
  store i32 1, i32* %lbound.i.i, align 4
  %314 = load i32* %extent.i.i, align 4
  %cmp10.i.i = icmp eq i32 %314, 0
  br i1 %cmp10.i.i, label %cond.true.i.i, label %cond.false.i.i

cond.true.i.i:                                    ; preds = %if.then9.i.i
  %315 = load i32* %lb.addr.i.i, align 4
  %sub11.i.i = sub nsw i32 %315, 1
  br label %cond.end.i.i

cond.false.i.i:                                   ; preds = %if.then9.i.i
  %316 = load i32* %ub.addr.i.i, align 4
  br label %cond.end.i.i

cond.end.i.i:                                     ; preds = %cond.false.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %sub11.i.i, %cond.true.i.i ], [ %316, %cond.false.i.i ]
  %317 = load i32* %dx.addr.i.i, align 4
  %idxprom12.i.i = sext i32 %317 to i64
  %318 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim13.i.i = getelementptr inbounds %struct.F90_Desc* %318, i32 0, i32 10
  %arrayidx14.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i.i, i32 0, i64 %idxprom12.i.i
  %ubound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i.i, i32 0, i32 5
  store i32 %cond.i.i, i32* %ubound.i.i, align 4
  %319 = load i32* %dx.addr.i.i, align 4
  %idxprom15.i.i = sext i32 %319 to i64
  %320 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim16.i.i = getelementptr inbounds %struct.F90_Desc* %320, i32 0, i32 10
  %arrayidx17.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i.i, i32 0, i64 %idxprom15.i.i
  %ubound18.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i.i, i32 0, i32 5
  %321 = load i32* %ubound18.i.i, align 4
  %322 = load i32* %dx.addr.i.i, align 4
  %idxprom19.i.i = sext i32 %322 to i64
  %323 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim20.i.i = getelementptr inbounds %struct.F90_Desc* %323, i32 0, i32 10
  %arrayidx21.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i.i, i32 0, i64 %idxprom19.i.i
  %extent22.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i.i, i32 0, i32 1
  store i32 %321, i32* %extent22.i.i, align 4
  store i32 0, i32* %myoffset.i.i, align 4
  br label %if.end37.i.i

if.else23.i.i:                                    ; preds = %land.lhs.true.i.i, %if.end7.i.i
  %324 = load i32* %dx.addr.i.i, align 4
  %idxprom24.i.i = sext i32 %324 to i64
  %325 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim25.i.i = getelementptr inbounds %struct.F90_Desc* %325, i32 0, i32 10
  %arrayidx26.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i.i, i32 0, i64 %idxprom24.i.i
  %lbound27.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i.i, align 4
  %326 = load i32* %extent.i.i, align 4
  %327 = load i32* %dx.addr.i.i, align 4
  %idxprom28.i.i = sext i32 %327 to i64
  %328 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim29.i.i = getelementptr inbounds %struct.F90_Desc* %328, i32 0, i32 10
  %arrayidx30.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i.i, i32 0, i64 %idxprom28.i.i
  %ubound31.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i.i, i32 0, i32 5
  store i32 %326, i32* %ubound31.i.i, align 4
  %329 = load i32* %extent.i.i, align 4
  %330 = load i32* %dx.addr.i.i, align 4
  %idxprom32.i.i = sext i32 %330 to i64
  %331 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim33.i.i = getelementptr inbounds %struct.F90_Desc* %331, i32 0, i32 10
  %arrayidx34.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i.i, i32 0, i64 %idxprom32.i.i
  %extent35.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i.i, i32 0, i32 1
  store i32 %329, i32* %extent35.i.i, align 4
  %332 = load i32* %lb.addr.i.i, align 4
  %333 = load i32* %st.addr.i.i, align 4
  %sub36.i.i = sub nsw i32 %332, %333
  store i32 %sub36.i.i, i32* %myoffset.i.i, align 4
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.else23.i.i, %cond.end.i.i
  %334 = load i32* %dx.addr.i.i, align 4
  %idxprom38.i.i = sext i32 %334 to i64
  %335 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim39.i.i = getelementptr inbounds %struct.F90_Desc* %335, i32 0, i32 10
  %arrayidx40.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i.i, i32 0, i64 %idxprom38.i.i
  %sstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i.i, i32 0, i32 2
  store i32 1, i32* %sstride.i.i, align 4
  %336 = load i32* %dx.addr.i.i, align 4
  %idxprom41.i.i = sext i32 %336 to i64
  %337 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim42.i.i = getelementptr inbounds %struct.F90_Desc* %337, i32 0, i32 10
  %arrayidx43.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i.i, i32 0, i64 %idxprom41.i.i
  %soffset.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i.i, align 4
  %338 = load i32* %ax.addr.i.i, align 4
  %idxprom44.i.i = sext i32 %338 to i64
  %339 = load %struct.F90_Desc** %a.addr.i45.i, align 8
  %dim45.i.i = getelementptr inbounds %struct.F90_Desc* %339, i32 0, i32 10
  %arrayidx46.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i.i, i32 0, i64 %idxprom44.i.i
  %lstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i.i, i32 0, i32 4
  %340 = load i32* %lstride.i.i, align 4
  %341 = load i32* %st.addr.i.i, align 4
  %mul.i.i = mul nsw i32 %340, %341
  %342 = load i32* %dx.addr.i.i, align 4
  %idxprom47.i.i = sext i32 %342 to i64
  %343 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim48.i.i = getelementptr inbounds %struct.F90_Desc* %343, i32 0, i32 10
  %arrayidx49.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i.i, i32 0, i64 %idxprom47.i.i
  %lstride50.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i.i, i32 0, i32 4
  store i32 %mul.i.i, i32* %lstride50.i.i, align 4
  %344 = load i32* %myoffset.i.i, align 4
  %345 = load i32* %dx.addr.i.i, align 4
  %idxprom51.i.i = sext i32 %345 to i64
  %346 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim52.i.i = getelementptr inbounds %struct.F90_Desc* %346, i32 0, i32 10
  %arrayidx53.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i.i, i32 0, i64 %idxprom51.i.i
  %lstride54.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i.i, i32 0, i32 4
  %347 = load i32* %lstride54.i.i, align 4
  %mul55.i.i = mul nsw i32 %344, %347
  %348 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %lbase.i46.i = getelementptr inbounds %struct.F90_Desc* %348, i32 0, i32 7
  %349 = load i32* %lbase.i46.i, align 4
  %add56.i.i = add nsw i32 %349, %mul55.i.i
  store i32 %add56.i.i, i32* %lbase.i46.i, align 4
  %350 = load i32* %dx.addr.i.i, align 4
  %idxprom57.i.i = sext i32 %350 to i64
  %351 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %dim58.i.i = getelementptr inbounds %struct.F90_Desc* %351, i32 0, i32 10
  %arrayidx59.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i.i, i32 0, i64 %idxprom57.i.i
  %lstride60.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i.i, i32 0, i32 4
  %352 = load i32* %lstride60.i.i, align 4
  %353 = load i32* %gsize.addr.i.i, align 4
  %cmp61.i.i = icmp ne i32 %352, %353
  br i1 %cmp61.i.i, label %if.then62.i.i, label %pgf90_asection.exit.i

if.then62.i.i:                                    ; preds = %if.end37.i.i
  %354 = load %struct.F90_Desc** %d.addr.i44.i, align 8
  %flags63.i.i = getelementptr inbounds %struct.F90_Desc* %354, i32 0, i32 4
  %355 = load i32* %flags63.i.i, align 4
  %and64.i.i = and i32 %355, -536870913
  store i32 %and64.i.i, i32* %flags63.i.i, align 4
  br label %pgf90_asection.exit.i

pgf90_asection.exit.i:                            ; preds = %if.then62.i.i, %if.end37.i.i
  %356 = load i32* %extent.i.i, align 4
  %357 = load i32* %gsize.addr.i.i, align 4
  %mul66.i.i = mul nsw i32 %357, %356
  store i32 %mul66.i.i, i32* %gsize.addr.i.i, align 4
  %358 = load i32* %gsize.addr.i.i, align 4
  store i32 %358, i32* %gsize.i, align 4
  %359 = load i32* %dx.i, align 4
  %inc39.i = add nsw i32 %359, 1
  store i32 %inc39.i, i32* %dx.i, align 4
  br label %if.end40.i

if.end40.i:                                       ; preds = %pgf90_asection.exit.i, %if.end32.i
  br label %if.end41.i

if.end41.i:                                       ; preds = %if.end40.i, %if.end24.i
  br label %pgf90_sect2v.exit

pgf90_sect2v.exit:                                ; preds = %if.end41.i, %pgf90_bogus_sect.exit.i
  %360 = load i32* %gsize.i, align 4
  %361 = load %struct.F90_Desc** %d.i, align 8
  %gsize43.i = getelementptr inbounds %struct.F90_Desc* %361, i32 0, i32 6
  store i32 %360, i32* %gsize43.i, align 4
  %362 = load i32* %gsize.i, align 4
  %363 = load %struct.F90_Desc** %d.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %363, i32 0, i32 5
  store i32 %362, i32* %lsize.i, align 4
  ret void
}

define  void @pgf90_sect3v(i8* %pd, i8* %pa, i8* %prank, i32 %lw0, i32 %up0, i32 %st0, i32 %lw1, i32 %up1, i32 %st1, i32 %lw2, i32 %up2, i32 %st2, i32 %flags) nounwind alwaysinline {
entry:
  %d.addr.i456 = alloca %struct.F90_Desc*, align 8
  %a.addr.i457 = alloca %struct.F90_Desc*, align 8
  %flags.addr.i458 = alloca i32, align 4
  %lower.addr.i = alloca i32*, align 8
  %upper.addr.i = alloca i32*, align 8
  %stride.addr.i = alloca i32*, align 8
  %gsize.i459 = alloca i32, align 4
  %ax.i = alloca i32, align 4
  %dx.i = alloca i32, align 4
  %d.addr.i387 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i388 = alloca i32, align 4
  %a.addr.i389 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i390 = alloca i32, align 4
  %lb.addr.i391 = alloca i32, align 4
  %ub.addr.i392 = alloca i32, align 4
  %st.addr.i393 = alloca i32, align 4
  %gsize.addr.i394 = alloca i32, align 4
  %flags.addr.i395 = alloca i32, align 4
  %extent.i396 = alloca i32, align 4
  %d.addr.i318 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i319 = alloca i32, align 4
  %a.addr.i320 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i321 = alloca i32, align 4
  %lb.addr.i322 = alloca i32, align 4
  %ub.addr.i323 = alloca i32, align 4
  %st.addr.i324 = alloca i32, align 4
  %gsize.addr.i325 = alloca i32, align 4
  %flags.addr.i326 = alloca i32, align 4
  %extent.i327 = alloca i32, align 4
  %d.addr.i274 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i275 = alloca i32, align 4
  %a.addr.i276 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i277 = alloca i32, align 4
  %lb.addr.i278 = alloca i32, align 4
  %ub.addr.i279 = alloca i32, align 4
  %st.addr.i280 = alloca i32, align 4
  %gsize.addr.i281 = alloca i32, align 4
  %flags.addr.i282 = alloca i32, align 4
  %extent.i283 = alloca i32, align 4
  %d.addr.i172 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i173 = alloca i32, align 4
  %a.addr.i174 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i175 = alloca i32, align 4
  %lb.addr.i176 = alloca i32, align 4
  %ub.addr.i177 = alloca i32, align 4
  %st.addr.i178 = alloca i32, align 4
  %gsize.addr.i179 = alloca i32, align 4
  %flags.addr.i180 = alloca i32, align 4
  %extent.i181 = alloca i32, align 4
  %noreindex.i182 = alloca i32, align 4
  %myoffset.i183 = alloca i32, align 4
  %d.addr.i70 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i71 = alloca i32, align 4
  %a.addr.i72 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i73 = alloca i32, align 4
  %lb.addr.i74 = alloca i32, align 4
  %ub.addr.i75 = alloca i32, align 4
  %st.addr.i76 = alloca i32, align 4
  %gsize.addr.i77 = alloca i32, align 4
  %flags.addr.i78 = alloca i32, align 4
  %extent.i79 = alloca i32, align 4
  %noreindex.i80 = alloca i32, align 4
  %myoffset.i81 = alloca i32, align 4
  %d.addr.i67 = alloca %struct.F90_Desc*, align 8
  %dx.addr.i = alloca i32, align 4
  %a.addr.i68 = alloca %struct.F90_Desc*, align 8
  %ax.addr.i = alloca i32, align 4
  %lb.addr.i = alloca i32, align 4
  %ub.addr.i = alloca i32, align 4
  %st.addr.i = alloca i32, align 4
  %gsize.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %extent.i = alloca i32, align 4
  %noreindex.i = alloca i32, align 4
  %myoffset.i = alloca i32, align 4
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %a.addr.i = alloca %struct.F90_Desc*, align 8
  %pd.addr = alloca i8*, align 8
  %pa.addr = alloca i8*, align 8
  %prank.addr = alloca i8*, align 8
  %lw0.addr = alloca i32, align 4
  %up0.addr = alloca i32, align 4
  %st0.addr = alloca i32, align 4
  %lw1.addr = alloca i32, align 4
  %up1.addr = alloca i32, align 4
  %st1.addr = alloca i32, align 4
  %lw2.addr = alloca i32, align 4
  %up2.addr = alloca i32, align 4
  %st2.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %gsize = alloca i32, align 4
  %dx = alloca i32, align 4
  %rank = alloca i32, align 4
  %d = alloca %struct.F90_Desc*, align 8
  %a = alloca %struct.F90_Desc*, align 8
  %lower = alloca [3 x i32], align 4
  %upper = alloca [3 x i32], align 4
  %stride = alloca [3 x i32], align 4
  %ax = alloca i32, align 4
  store i8* %pd, i8** %pd.addr, align 8
  store i8* %pa, i8** %pa.addr, align 8
  store i8* %prank, i8** %prank.addr, align 8
  store i32 %lw0, i32* %lw0.addr, align 4
  store i32 %up0, i32* %up0.addr, align 4
  store i32 %st0, i32* %st0.addr, align 4
  store i32 %lw1, i32* %lw1.addr, align 4
  store i32 %up1, i32* %up1.addr, align 4
  store i32 %st1, i32* %st1.addr, align 4
  store i32 %lw2, i32* %lw2.addr, align 4
  store i32 %up2, i32* %up2.addr, align 4
  store i32 %st2, i32* %st2.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8** %pd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %d, align 8
  %2 = load i8** %pa.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc*
  store %struct.F90_Desc* %3, %struct.F90_Desc** %a, align 8
  %4 = load i32* %flags.addr, align 4
  %and = and i32 %4, 5
  %5 = load i32* %flags.addr, align 4
  %shr = ashr i32 %5, 1
  %and1 = and i32 %shr, 1
  %add = add nsw i32 %and, %and1
  store i32 %add, i32* %rank, align 4
  %6 = load i32* %rank, align 4
  %and2 = and i32 %6, 3
  %7 = load i32* %rank, align 4
  %shr3 = ashr i32 %7, 2
  %and4 = and i32 %shr3, 1
  %add5 = add nsw i32 %and2, %and4
  store i32 %add5, i32* %rank, align 4
  %8 = load %struct.F90_Desc** %d, align 8
  %9 = load i32* %rank, align 4
  %10 = load %struct.F90_Desc** %a, align 8
  store %struct.F90_Desc* %8, %struct.F90_Desc** %d.addr.i, align 8
  store i32 %9, i32* %rank.addr.i, align 4
  store %struct.F90_Desc* %10, %struct.F90_Desc** %a.addr.i, align 8
  %11 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %11, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %12 = load i32* %rank.addr.i, align 4
  %13 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %13, i32 0, i32 1
  store i32 %12, i32* %rank1.i, align 4
  %14 = load %struct.F90_Desc** %a.addr.i, align 8
  %kind.i = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 2
  %15 = load i32* %kind.i, align 4
  %16 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %16, i32 0, i32 2
  store i32 %15, i32* %kind2.i, align 4
  %17 = load %struct.F90_Desc** %a.addr.i, align 8
  %len.i = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 3
  %18 = load i32* %len.i, align 4
  %19 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %19, i32 0, i32 3
  store i32 %18, i32* %len3.i, align 4
  %20 = load %struct.F90_Desc** %a.addr.i, align 8
  %flags.i = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 4
  %21 = load i32* %flags.i, align 4
  %22 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags4.i = getelementptr inbounds %struct.F90_Desc* %22, i32 0, i32 4
  store i32 %21, i32* %flags4.i, align 4
  %23 = load %struct.F90_Desc** %a.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %23, i32 0, i32 6
  %24 = load i32* %gsize.i, align 4
  %25 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize5.i = getelementptr inbounds %struct.F90_Desc* %25, i32 0, i32 6
  store i32 %24, i32* %gsize5.i, align 4
  %26 = load %struct.F90_Desc** %a.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %26, i32 0, i32 5
  %27 = load i32* %lsize.i, align 4
  %28 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize6.i = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 5
  store i32 %27, i32* %lsize6.i, align 4
  %29 = load %struct.F90_Desc** %a.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %29, i32 0, i32 8
  %30 = load i32** %gbase.i, align 8
  %31 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase7.i = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 8
  store i32* %30, i32** %gbase7.i, align 8
  %32 = load %struct.F90_Desc** %a.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %32, i32 0, i32 7
  %33 = load i32* %lbase.i, align 4
  %34 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase8.i = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 7
  store i32 %33, i32* %lbase8.i, align 4
  store i32 1, i32* %gsize, align 4
  store i32 0, i32* %dx, align 4
  %35 = load i32* %flags.addr, align 4
  %and6 = and i32 %35, 256
  %tobool = icmp ne i32 %and6, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %36 = load i32* %lw0.addr, align 4
  %arrayidx = getelementptr inbounds [3 x i32]* %lower, i32 0, i64 0
  store i32 %36, i32* %arrayidx, align 4
  %37 = load i32* %up0.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x i32]* %upper, i32 0, i64 0
  store i32 %37, i32* %arrayidx7, align 4
  %38 = load i32* %st0.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32]* %stride, i32 0, i64 0
  store i32 %38, i32* %arrayidx8, align 4
  %39 = load i32* %lw1.addr, align 4
  %arrayidx9 = getelementptr inbounds [3 x i32]* %lower, i32 0, i64 1
  store i32 %39, i32* %arrayidx9, align 4
  %40 = load i32* %up1.addr, align 4
  %arrayidx10 = getelementptr inbounds [3 x i32]* %upper, i32 0, i64 1
  store i32 %40, i32* %arrayidx10, align 4
  %41 = load i32* %st1.addr, align 4
  %arrayidx11 = getelementptr inbounds [3 x i32]* %stride, i32 0, i64 1
  store i32 %41, i32* %arrayidx11, align 4
  %42 = load i32* %lw2.addr, align 4
  %arrayidx12 = getelementptr inbounds [3 x i32]* %lower, i32 0, i64 2
  store i32 %42, i32* %arrayidx12, align 4
  %43 = load i32* %up2.addr, align 4
  %arrayidx13 = getelementptr inbounds [3 x i32]* %upper, i32 0, i64 2
  store i32 %43, i32* %arrayidx13, align 4
  %44 = load i32* %st2.addr, align 4
  %arrayidx14 = getelementptr inbounds [3 x i32]* %stride, i32 0, i64 2
  store i32 %44, i32* %arrayidx14, align 4
  %45 = load %struct.F90_Desc** %d, align 8
  %46 = load %struct.F90_Desc** %a, align 8
  %47 = load i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32]* %lower, i32 0, i32 0
  %arraydecay15 = getelementptr inbounds [3 x i32]* %upper, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x i32]* %stride, i32 0, i32 0
  store %struct.F90_Desc* %45, %struct.F90_Desc** %d.addr.i456, align 8
  store %struct.F90_Desc* %46, %struct.F90_Desc** %a.addr.i457, align 8
  store i32 %47, i32* %flags.addr.i458, align 4
  store i32* %arraydecay, i32** %lower.addr.i, align 8
  store i32* %arraydecay15, i32** %upper.addr.i, align 8
  store i32* %arraydecay16, i32** %stride.addr.i, align 8
  %48 = load %struct.F90_Desc** %d.addr.i456, align 8
  %flags1.i = getelementptr inbounds %struct.F90_Desc* %48, i32 0, i32 4
  %49 = load i32* %flags1.i, align 4
  %or.i = or i32 %49, 8388608
  store i32 %or.i, i32* %flags1.i, align 4
  store i32 1, i32* %gsize.i459, align 4
  store i32 0, i32* %dx.i, align 4
  store i32 0, i32* %ax.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end33.i, %if.then
  %50 = load i32* %ax.i, align 4
  %51 = load %struct.F90_Desc** %a.addr.i457, align 8
  %rank.i = getelementptr inbounds %struct.F90_Desc* %51, i32 0, i32 1
  %52 = load i32* %rank.i, align 4
  %cmp.i460 = icmp slt i32 %50, %52
  br i1 %cmp.i460, label %for.body.i, label %pgf90_bogus_sect.exit

for.body.i:                                       ; preds = %for.cond.i
  %53 = load i32* %flags.addr.i458, align 4
  %54 = load i32* %ax.i, align 4
  %shl.i = shl i32 1, %54
  %and.i461 = and i32 %53, %shl.i
  %tobool.i462 = icmp ne i32 %and.i461, 0
  br i1 %tobool.i462, label %if.then.i481, label %if.end33.i

if.then.i481:                                     ; preds = %for.body.i
  %55 = load i32* %dx.i, align 4
  %idxprom.i463 = sext i32 %55 to i64
  %56 = load i32** %lower.addr.i, align 8
  %arrayidx.i464 = getelementptr inbounds i32* %56, i64 %idxprom.i463
  %57 = load i32* %arrayidx.i464, align 4
  %58 = load i32* %dx.i, align 4
  %idxprom2.i = sext i32 %58 to i64
  %59 = load %struct.F90_Desc** %d.addr.i456, align 8
  %dim.i465 = getelementptr inbounds %struct.F90_Desc* %59, i32 0, i32 10
  %arrayidx3.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i465, i32 0, i64 %idxprom2.i
  %lbound.i466 = getelementptr inbounds %struct.F90_DescDim* %arrayidx3.i, i32 0, i32 0
  store i32 %57, i32* %lbound.i466, align 4
  %60 = load i32* %dx.i, align 4
  %idxprom4.i = sext i32 %60 to i64
  %61 = load i32** %upper.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i32* %61, i64 %idxprom4.i
  %62 = load i32* %arrayidx5.i, align 4
  %63 = load i32* %dx.i, align 4
  %idxprom6.i = sext i32 %63 to i64
  %64 = load %struct.F90_Desc** %d.addr.i456, align 8
  %dim7.i = getelementptr inbounds %struct.F90_Desc* %64, i32 0, i32 10
  %arrayidx8.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7.i, i32 0, i64 %idxprom6.i
  %ubound.i467 = getelementptr inbounds %struct.F90_DescDim* %arrayidx8.i, i32 0, i32 5
  store i32 %62, i32* %ubound.i467, align 4
  %65 = load i32* %dx.i, align 4
  %idxprom9.i = sext i32 %65 to i64
  %66 = load i32** %upper.addr.i, align 8
  %arrayidx10.i468 = getelementptr inbounds i32* %66, i64 %idxprom9.i
  %67 = load i32* %arrayidx10.i468, align 4
  %68 = load i32* %dx.i, align 4
  %idxprom11.i469 = sext i32 %68 to i64
  %69 = load i32** %lower.addr.i, align 8
  %arrayidx12.i = getelementptr inbounds i32* %69, i64 %idxprom11.i469
  %70 = load i32* %arrayidx12.i, align 4
  %sub.i470 = sub nsw i32 %67, %70
  %add.i471 = add nsw i32 %sub.i470, 1
  %71 = load i32* %dx.i, align 4
  %idxprom13.i = sext i32 %71 to i64
  %72 = load %struct.F90_Desc** %d.addr.i456, align 8
  %dim14.i = getelementptr inbounds %struct.F90_Desc* %72, i32 0, i32 10
  %arrayidx15.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14.i, i32 0, i64 %idxprom13.i
  %extent.i472 = getelementptr inbounds %struct.F90_DescDim* %arrayidx15.i, i32 0, i32 1
  store i32 %add.i471, i32* %extent.i472, align 4
  %73 = load i32* %dx.i, align 4
  %idxprom16.i = sext i32 %73 to i64
  %74 = load i32** %stride.addr.i, align 8
  %arrayidx17.i473 = getelementptr inbounds i32* %74, i64 %idxprom16.i
  %75 = load i32* %arrayidx17.i473, align 4
  %76 = load i32* %dx.i, align 4
  %idxprom18.i474 = sext i32 %76 to i64
  %77 = load %struct.F90_Desc** %d.addr.i456, align 8
  %dim19.i475 = getelementptr inbounds %struct.F90_Desc* %77, i32 0, i32 10
  %arrayidx20.i476 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i475, i32 0, i64 %idxprom18.i474
  %lstride.i477 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i476, i32 0, i32 4
  store i32 %75, i32* %lstride.i477, align 4
  %78 = load i32* %dx.i, align 4
  %idxprom21.i478 = sext i32 %78 to i64
  %79 = load %struct.F90_Desc** %d.addr.i456, align 8
  %dim22.i479 = getelementptr inbounds %struct.F90_Desc* %79, i32 0, i32 10
  %arrayidx23.i480 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i479, i32 0, i64 %idxprom21.i478
  %lstride24.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i480, i32 0, i32 4
  %80 = load i32* %lstride24.i, align 4
  %81 = load i32* %gsize.i459, align 4
  %cmp25.i = icmp ne i32 %80, %81
  br i1 %cmp25.i, label %if.then26.i, label %if.end.i483

if.then26.i:                                      ; preds = %if.then.i481
  %82 = load %struct.F90_Desc** %d.addr.i456, align 8
  %flags27.i = getelementptr inbounds %struct.F90_Desc* %82, i32 0, i32 4
  %83 = load i32* %flags27.i, align 4
  %and28.i = and i32 %83, -536870913
  store i32 %and28.i, i32* %flags27.i, align 4
  br label %if.end.i483

if.end.i483:                                      ; preds = %if.then26.i, %if.then.i481
  %84 = load i32* %dx.i, align 4
  %idxprom29.i = sext i32 %84 to i64
  %85 = load %struct.F90_Desc** %d.addr.i456, align 8
  %dim30.i = getelementptr inbounds %struct.F90_Desc* %85, i32 0, i32 10
  %arrayidx31.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30.i, i32 0, i64 %idxprom29.i
  %extent32.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx31.i, i32 0, i32 1
  %86 = load i32* %extent32.i, align 4
  %87 = load i32* %gsize.i459, align 4
  %mul.i482 = mul nsw i32 %87, %86
  store i32 %mul.i482, i32* %gsize.i459, align 4
  %88 = load i32* %dx.i, align 4
  %inc.i = add nsw i32 %88, 1
  store i32 %inc.i, i32* %dx.i, align 4
  br label %if.end33.i

if.end33.i:                                       ; preds = %if.end.i483, %for.body.i
  %89 = load i32* %ax.i, align 4
  %inc34.i = add nsw i32 %89, 1
  store i32 %inc34.i, i32* %ax.i, align 4
  br label %for.cond.i

pgf90_bogus_sect.exit:                            ; preds = %for.cond.i
  %90 = load i32* %gsize.i459, align 4
  store i32 %90, i32* %gsize, align 4
  br label %if.end65

if.else:                                          ; preds = %entry
  store i32 0, i32* %ax, align 4
  %91 = load i32* %flags.addr, align 4
  %and17 = and i32 %91, 4194304
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else40

if.then19:                                        ; preds = %if.else
  %92 = load %struct.F90_Desc** %d, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %92, i32 0, i32 7
  store i32 1, i32* %lbase, align 4
  %93 = load i32* %flags.addr, align 4
  %94 = load i32* %ax, align 4
  %shl = shl i32 1, %94
  %and20 = and i32 %93, %shl
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end

if.then22:                                        ; preds = %if.then19
  %95 = load %struct.F90_Desc** %d, align 8
  %96 = load i32* %dx, align 4
  %97 = load %struct.F90_Desc** %a, align 8
  %98 = load i32* %ax, align 4
  %99 = load i32* %lw0.addr, align 4
  %100 = load i32* %up0.addr, align 4
  %101 = load i32* %st0.addr, align 4
  %102 = load i32* %gsize, align 4
  %103 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %95, %struct.F90_Desc** %d.addr.i387, align 8
  store i32 %96, i32* %dx.addr.i388, align 4
  store %struct.F90_Desc* %97, %struct.F90_Desc** %a.addr.i389, align 8
  store i32 %98, i32* %ax.addr.i390, align 4
  store i32 %99, i32* %lb.addr.i391, align 4
  store i32 %100, i32* %ub.addr.i392, align 4
  store i32 %101, i32* %st.addr.i393, align 4
  store i32 %102, i32* %gsize.addr.i394, align 4
  store i32 %103, i32* %flags.addr.i395, align 4
  %104 = load i32* %ub.addr.i392, align 4
  %105 = load i32* %lb.addr.i391, align 4
  %sub.i397 = sub nsw i32 %104, %105
  %106 = load i32* %st.addr.i393, align 4
  %add.i398 = add nsw i32 %sub.i397, %106
  store i32 %add.i398, i32* %extent.i396, align 4
  %107 = load i32* %st.addr.i393, align 4
  %cmp.i399 = icmp ne i32 %107, 1
  br i1 %cmp.i399, label %if.then.i401, label %if.end4.i408

if.then.i401:                                     ; preds = %if.then22
  %108 = load i32* %st.addr.i393, align 4
  %cmp1.i400 = icmp eq i32 %108, -1
  br i1 %cmp1.i400, label %if.then2.i403, label %if.else.i405

if.then2.i403:                                    ; preds = %if.then.i401
  %109 = load i32* %extent.i396, align 4
  %sub3.i402 = sub nsw i32 0, %109
  store i32 %sub3.i402, i32* %extent.i396, align 4
  br label %if.end.i406

if.else.i405:                                     ; preds = %if.then.i401
  %110 = load i32* %st.addr.i393, align 4
  %111 = load i32* %extent.i396, align 4
  %div.i404 = sdiv i32 %111, %110
  store i32 %div.i404, i32* %extent.i396, align 4
  br label %if.end.i406

if.end.i406:                                      ; preds = %if.else.i405, %if.then2.i403
  br label %if.end4.i408

if.end4.i408:                                     ; preds = %if.end.i406, %if.then22
  %112 = load i32* %extent.i396, align 4
  %cmp5.i407 = icmp slt i32 %112, 0
  br i1 %cmp5.i407, label %if.then6.i409, label %if.end7.i450

if.then6.i409:                                    ; preds = %if.end4.i408
  store i32 0, i32* %extent.i396, align 4
  br label %if.end7.i450

if.end7.i450:                                     ; preds = %if.then6.i409, %if.end4.i408
  %113 = load i32* %dx.addr.i388, align 4
  %idxprom.i410 = sext i32 %113 to i64
  %114 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim.i411 = getelementptr inbounds %struct.F90_Desc* %114, i32 0, i32 10
  %arrayidx.i412 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i411, i32 0, i64 %idxprom.i410
  %lbound.i413 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i412, i32 0, i32 0
  store i32 1, i32* %lbound.i413, align 4
  %115 = load i32* %extent.i396, align 4
  %116 = load i32* %dx.addr.i388, align 4
  %idxprom8.i414 = sext i32 %116 to i64
  %117 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim9.i415 = getelementptr inbounds %struct.F90_Desc* %117, i32 0, i32 10
  %arrayidx10.i416 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i415, i32 0, i64 %idxprom8.i414
  %ubound.i417 = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i416, i32 0, i32 5
  store i32 %115, i32* %ubound.i417, align 4
  %118 = load i32* %extent.i396, align 4
  %119 = load i32* %dx.addr.i388, align 4
  %idxprom11.i418 = sext i32 %119 to i64
  %120 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim12.i419 = getelementptr inbounds %struct.F90_Desc* %120, i32 0, i32 10
  %arrayidx13.i420 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i419, i32 0, i64 %idxprom11.i418
  %extent14.i421 = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i420, i32 0, i32 1
  store i32 %118, i32* %extent14.i421, align 4
  %121 = load i32* %dx.addr.i388, align 4
  %idxprom15.i422 = sext i32 %121 to i64
  %122 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim16.i423 = getelementptr inbounds %struct.F90_Desc* %122, i32 0, i32 10
  %arrayidx17.i424 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i423, i32 0, i64 %idxprom15.i422
  %sstride.i425 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i424, i32 0, i32 2
  store i32 1, i32* %sstride.i425, align 4
  %123 = load i32* %dx.addr.i388, align 4
  %idxprom18.i426 = sext i32 %123 to i64
  %124 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim19.i427 = getelementptr inbounds %struct.F90_Desc* %124, i32 0, i32 10
  %arrayidx20.i428 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i427, i32 0, i64 %idxprom18.i426
  %soffset.i429 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i428, i32 0, i32 3
  store i32 0, i32* %soffset.i429, align 4
  %125 = load i32* %ax.addr.i390, align 4
  %idxprom21.i430 = sext i32 %125 to i64
  %126 = load %struct.F90_Desc** %a.addr.i389, align 8
  %dim22.i431 = getelementptr inbounds %struct.F90_Desc* %126, i32 0, i32 10
  %arrayidx23.i432 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i431, i32 0, i64 %idxprom21.i430
  %lstride.i433 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i432, i32 0, i32 4
  %127 = load i32* %lstride.i433, align 4
  %128 = load i32* %st.addr.i393, align 4
  %mul.i434 = mul nsw i32 %127, %128
  %129 = load i32* %dx.addr.i388, align 4
  %idxprom24.i435 = sext i32 %129 to i64
  %130 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim25.i436 = getelementptr inbounds %struct.F90_Desc* %130, i32 0, i32 10
  %arrayidx26.i437 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i436, i32 0, i64 %idxprom24.i435
  %lstride27.i438 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i437, i32 0, i32 4
  store i32 %mul.i434, i32* %lstride27.i438, align 4
  %131 = load i32* %dx.addr.i388, align 4
  %idxprom28.i439 = sext i32 %131 to i64
  %132 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim29.i440 = getelementptr inbounds %struct.F90_Desc* %132, i32 0, i32 10
  %arrayidx30.i441 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i440, i32 0, i64 %idxprom28.i439
  %lstride31.i442 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i441, i32 0, i32 4
  %133 = load i32* %lstride31.i442, align 4
  %134 = load %struct.F90_Desc** %d.addr.i387, align 8
  %lbase.i443 = getelementptr inbounds %struct.F90_Desc* %134, i32 0, i32 7
  %135 = load i32* %lbase.i443, align 4
  %sub32.i444 = sub nsw i32 %135, %133
  store i32 %sub32.i444, i32* %lbase.i443, align 4
  %136 = load i32* %dx.addr.i388, align 4
  %idxprom33.i445 = sext i32 %136 to i64
  %137 = load %struct.F90_Desc** %d.addr.i387, align 8
  %dim34.i446 = getelementptr inbounds %struct.F90_Desc* %137, i32 0, i32 10
  %arrayidx35.i447 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i446, i32 0, i64 %idxprom33.i445
  %lstride36.i448 = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i447, i32 0, i32 4
  %138 = load i32* %lstride36.i448, align 4
  %139 = load i32* %gsize.addr.i394, align 4
  %cmp37.i449 = icmp ne i32 %138, %139
  br i1 %cmp37.i449, label %if.then38.i453, label %pgf90_tsection.exit455

if.then38.i453:                                   ; preds = %if.end7.i450
  %140 = load %struct.F90_Desc** %d.addr.i387, align 8
  %flags39.i451 = getelementptr inbounds %struct.F90_Desc* %140, i32 0, i32 4
  %141 = load i32* %flags39.i451, align 4
  %and.i452 = and i32 %141, -536870913
  store i32 %and.i452, i32* %flags39.i451, align 4
  br label %pgf90_tsection.exit455

pgf90_tsection.exit455:                           ; preds = %if.then38.i453, %if.end7.i450
  %142 = load i32* %extent.i396, align 4
  %143 = load i32* %gsize.addr.i394, align 4
  %mul41.i454 = mul nsw i32 %143, %142
  store i32 %mul41.i454, i32* %gsize.addr.i394, align 4
  %144 = load i32* %gsize.addr.i394, align 4
  store i32 %144, i32* %gsize, align 4
  %145 = load i32* %dx, align 4
  %inc = add nsw i32 %145, 1
  store i32 %inc, i32* %dx, align 4
  br label %if.end

if.end:                                           ; preds = %pgf90_tsection.exit455, %if.then19
  %146 = load i32* %ax, align 4
  %inc24 = add nsw i32 %146, 1
  store i32 %inc24, i32* %ax, align 4
  %147 = load i32* %flags.addr, align 4
  %148 = load i32* %ax, align 4
  %shl25 = shl i32 1, %148
  %and26 = and i32 %147, %shl25
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.then28, label %if.end31

if.then28:                                        ; preds = %if.end
  %149 = load %struct.F90_Desc** %d, align 8
  %150 = load i32* %dx, align 4
  %151 = load %struct.F90_Desc** %a, align 8
  %152 = load i32* %ax, align 4
  %153 = load i32* %lw1.addr, align 4
  %154 = load i32* %up1.addr, align 4
  %155 = load i32* %st1.addr, align 4
  %156 = load i32* %gsize, align 4
  %157 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %149, %struct.F90_Desc** %d.addr.i318, align 8
  store i32 %150, i32* %dx.addr.i319, align 4
  store %struct.F90_Desc* %151, %struct.F90_Desc** %a.addr.i320, align 8
  store i32 %152, i32* %ax.addr.i321, align 4
  store i32 %153, i32* %lb.addr.i322, align 4
  store i32 %154, i32* %ub.addr.i323, align 4
  store i32 %155, i32* %st.addr.i324, align 4
  store i32 %156, i32* %gsize.addr.i325, align 4
  store i32 %157, i32* %flags.addr.i326, align 4
  %158 = load i32* %ub.addr.i323, align 4
  %159 = load i32* %lb.addr.i322, align 4
  %sub.i328 = sub nsw i32 %158, %159
  %160 = load i32* %st.addr.i324, align 4
  %add.i329 = add nsw i32 %sub.i328, %160
  store i32 %add.i329, i32* %extent.i327, align 4
  %161 = load i32* %st.addr.i324, align 4
  %cmp.i330 = icmp ne i32 %161, 1
  br i1 %cmp.i330, label %if.then.i332, label %if.end4.i339

if.then.i332:                                     ; preds = %if.then28
  %162 = load i32* %st.addr.i324, align 4
  %cmp1.i331 = icmp eq i32 %162, -1
  br i1 %cmp1.i331, label %if.then2.i334, label %if.else.i336

if.then2.i334:                                    ; preds = %if.then.i332
  %163 = load i32* %extent.i327, align 4
  %sub3.i333 = sub nsw i32 0, %163
  store i32 %sub3.i333, i32* %extent.i327, align 4
  br label %if.end.i337

if.else.i336:                                     ; preds = %if.then.i332
  %164 = load i32* %st.addr.i324, align 4
  %165 = load i32* %extent.i327, align 4
  %div.i335 = sdiv i32 %165, %164
  store i32 %div.i335, i32* %extent.i327, align 4
  br label %if.end.i337

if.end.i337:                                      ; preds = %if.else.i336, %if.then2.i334
  br label %if.end4.i339

if.end4.i339:                                     ; preds = %if.end.i337, %if.then28
  %166 = load i32* %extent.i327, align 4
  %cmp5.i338 = icmp slt i32 %166, 0
  br i1 %cmp5.i338, label %if.then6.i340, label %if.end7.i381

if.then6.i340:                                    ; preds = %if.end4.i339
  store i32 0, i32* %extent.i327, align 4
  br label %if.end7.i381

if.end7.i381:                                     ; preds = %if.then6.i340, %if.end4.i339
  %167 = load i32* %dx.addr.i319, align 4
  %idxprom.i341 = sext i32 %167 to i64
  %168 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim.i342 = getelementptr inbounds %struct.F90_Desc* %168, i32 0, i32 10
  %arrayidx.i343 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i342, i32 0, i64 %idxprom.i341
  %lbound.i344 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i343, i32 0, i32 0
  store i32 1, i32* %lbound.i344, align 4
  %169 = load i32* %extent.i327, align 4
  %170 = load i32* %dx.addr.i319, align 4
  %idxprom8.i345 = sext i32 %170 to i64
  %171 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim9.i346 = getelementptr inbounds %struct.F90_Desc* %171, i32 0, i32 10
  %arrayidx10.i347 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i346, i32 0, i64 %idxprom8.i345
  %ubound.i348 = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i347, i32 0, i32 5
  store i32 %169, i32* %ubound.i348, align 4
  %172 = load i32* %extent.i327, align 4
  %173 = load i32* %dx.addr.i319, align 4
  %idxprom11.i349 = sext i32 %173 to i64
  %174 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim12.i350 = getelementptr inbounds %struct.F90_Desc* %174, i32 0, i32 10
  %arrayidx13.i351 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i350, i32 0, i64 %idxprom11.i349
  %extent14.i352 = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i351, i32 0, i32 1
  store i32 %172, i32* %extent14.i352, align 4
  %175 = load i32* %dx.addr.i319, align 4
  %idxprom15.i353 = sext i32 %175 to i64
  %176 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim16.i354 = getelementptr inbounds %struct.F90_Desc* %176, i32 0, i32 10
  %arrayidx17.i355 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i354, i32 0, i64 %idxprom15.i353
  %sstride.i356 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i355, i32 0, i32 2
  store i32 1, i32* %sstride.i356, align 4
  %177 = load i32* %dx.addr.i319, align 4
  %idxprom18.i357 = sext i32 %177 to i64
  %178 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim19.i358 = getelementptr inbounds %struct.F90_Desc* %178, i32 0, i32 10
  %arrayidx20.i359 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i358, i32 0, i64 %idxprom18.i357
  %soffset.i360 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i359, i32 0, i32 3
  store i32 0, i32* %soffset.i360, align 4
  %179 = load i32* %ax.addr.i321, align 4
  %idxprom21.i361 = sext i32 %179 to i64
  %180 = load %struct.F90_Desc** %a.addr.i320, align 8
  %dim22.i362 = getelementptr inbounds %struct.F90_Desc* %180, i32 0, i32 10
  %arrayidx23.i363 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i362, i32 0, i64 %idxprom21.i361
  %lstride.i364 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i363, i32 0, i32 4
  %181 = load i32* %lstride.i364, align 4
  %182 = load i32* %st.addr.i324, align 4
  %mul.i365 = mul nsw i32 %181, %182
  %183 = load i32* %dx.addr.i319, align 4
  %idxprom24.i366 = sext i32 %183 to i64
  %184 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim25.i367 = getelementptr inbounds %struct.F90_Desc* %184, i32 0, i32 10
  %arrayidx26.i368 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i367, i32 0, i64 %idxprom24.i366
  %lstride27.i369 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i368, i32 0, i32 4
  store i32 %mul.i365, i32* %lstride27.i369, align 4
  %185 = load i32* %dx.addr.i319, align 4
  %idxprom28.i370 = sext i32 %185 to i64
  %186 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim29.i371 = getelementptr inbounds %struct.F90_Desc* %186, i32 0, i32 10
  %arrayidx30.i372 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i371, i32 0, i64 %idxprom28.i370
  %lstride31.i373 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i372, i32 0, i32 4
  %187 = load i32* %lstride31.i373, align 4
  %188 = load %struct.F90_Desc** %d.addr.i318, align 8
  %lbase.i374 = getelementptr inbounds %struct.F90_Desc* %188, i32 0, i32 7
  %189 = load i32* %lbase.i374, align 4
  %sub32.i375 = sub nsw i32 %189, %187
  store i32 %sub32.i375, i32* %lbase.i374, align 4
  %190 = load i32* %dx.addr.i319, align 4
  %idxprom33.i376 = sext i32 %190 to i64
  %191 = load %struct.F90_Desc** %d.addr.i318, align 8
  %dim34.i377 = getelementptr inbounds %struct.F90_Desc* %191, i32 0, i32 10
  %arrayidx35.i378 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i377, i32 0, i64 %idxprom33.i376
  %lstride36.i379 = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i378, i32 0, i32 4
  %192 = load i32* %lstride36.i379, align 4
  %193 = load i32* %gsize.addr.i325, align 4
  %cmp37.i380 = icmp ne i32 %192, %193
  br i1 %cmp37.i380, label %if.then38.i384, label %pgf90_tsection.exit386

if.then38.i384:                                   ; preds = %if.end7.i381
  %194 = load %struct.F90_Desc** %d.addr.i318, align 8
  %flags39.i382 = getelementptr inbounds %struct.F90_Desc* %194, i32 0, i32 4
  %195 = load i32* %flags39.i382, align 4
  %and.i383 = and i32 %195, -536870913
  store i32 %and.i383, i32* %flags39.i382, align 4
  br label %pgf90_tsection.exit386

pgf90_tsection.exit386:                           ; preds = %if.then38.i384, %if.end7.i381
  %196 = load i32* %extent.i327, align 4
  %197 = load i32* %gsize.addr.i325, align 4
  %mul41.i385 = mul nsw i32 %197, %196
  store i32 %mul41.i385, i32* %gsize.addr.i325, align 4
  %198 = load i32* %gsize.addr.i325, align 4
  store i32 %198, i32* %gsize, align 4
  %199 = load i32* %dx, align 4
  %inc30 = add nsw i32 %199, 1
  store i32 %inc30, i32* %dx, align 4
  br label %if.end31

if.end31:                                         ; preds = %pgf90_tsection.exit386, %if.end
  %200 = load i32* %ax, align 4
  %inc32 = add nsw i32 %200, 1
  store i32 %inc32, i32* %ax, align 4
  %201 = load i32* %flags.addr, align 4
  %202 = load i32* %ax, align 4
  %shl33 = shl i32 1, %202
  %and34 = and i32 %201, %shl33
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end39

if.then36:                                        ; preds = %if.end31
  %203 = load %struct.F90_Desc** %d, align 8
  %204 = load i32* %dx, align 4
  %205 = load %struct.F90_Desc** %a, align 8
  %206 = load i32* %ax, align 4
  %207 = load i32* %lw2.addr, align 4
  %208 = load i32* %up2.addr, align 4
  %209 = load i32* %st2.addr, align 4
  %210 = load i32* %gsize, align 4
  %211 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %203, %struct.F90_Desc** %d.addr.i274, align 8
  store i32 %204, i32* %dx.addr.i275, align 4
  store %struct.F90_Desc* %205, %struct.F90_Desc** %a.addr.i276, align 8
  store i32 %206, i32* %ax.addr.i277, align 4
  store i32 %207, i32* %lb.addr.i278, align 4
  store i32 %208, i32* %ub.addr.i279, align 4
  store i32 %209, i32* %st.addr.i280, align 4
  store i32 %210, i32* %gsize.addr.i281, align 4
  store i32 %211, i32* %flags.addr.i282, align 4
  %212 = load i32* %ub.addr.i279, align 4
  %213 = load i32* %lb.addr.i278, align 4
  %sub.i284 = sub nsw i32 %212, %213
  %214 = load i32* %st.addr.i280, align 4
  %add.i285 = add nsw i32 %sub.i284, %214
  store i32 %add.i285, i32* %extent.i283, align 4
  %215 = load i32* %st.addr.i280, align 4
  %cmp.i286 = icmp ne i32 %215, 1
  br i1 %cmp.i286, label %if.then.i288, label %if.end4.i295

if.then.i288:                                     ; preds = %if.then36
  %216 = load i32* %st.addr.i280, align 4
  %cmp1.i287 = icmp eq i32 %216, -1
  br i1 %cmp1.i287, label %if.then2.i290, label %if.else.i292

if.then2.i290:                                    ; preds = %if.then.i288
  %217 = load i32* %extent.i283, align 4
  %sub3.i289 = sub nsw i32 0, %217
  store i32 %sub3.i289, i32* %extent.i283, align 4
  br label %if.end.i293

if.else.i292:                                     ; preds = %if.then.i288
  %218 = load i32* %st.addr.i280, align 4
  %219 = load i32* %extent.i283, align 4
  %div.i291 = sdiv i32 %219, %218
  store i32 %div.i291, i32* %extent.i283, align 4
  br label %if.end.i293

if.end.i293:                                      ; preds = %if.else.i292, %if.then2.i290
  br label %if.end4.i295

if.end4.i295:                                     ; preds = %if.end.i293, %if.then36
  %220 = load i32* %extent.i283, align 4
  %cmp5.i294 = icmp slt i32 %220, 0
  br i1 %cmp5.i294, label %if.then6.i296, label %if.end7.i316

if.then6.i296:                                    ; preds = %if.end4.i295
  store i32 0, i32* %extent.i283, align 4
  br label %if.end7.i316

if.end7.i316:                                     ; preds = %if.then6.i296, %if.end4.i295
  %221 = load i32* %dx.addr.i275, align 4
  %idxprom.i297 = sext i32 %221 to i64
  %222 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim.i298 = getelementptr inbounds %struct.F90_Desc* %222, i32 0, i32 10
  %arrayidx.i299 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i298, i32 0, i64 %idxprom.i297
  %lbound.i300 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i299, i32 0, i32 0
  store i32 1, i32* %lbound.i300, align 4
  %223 = load i32* %extent.i283, align 4
  %224 = load i32* %dx.addr.i275, align 4
  %idxprom8.i = sext i32 %224 to i64
  %225 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim9.i = getelementptr inbounds %struct.F90_Desc* %225, i32 0, i32 10
  %arrayidx10.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i, i32 0, i64 %idxprom8.i
  %ubound.i301 = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i, i32 0, i32 5
  store i32 %223, i32* %ubound.i301, align 4
  %226 = load i32* %extent.i283, align 4
  %227 = load i32* %dx.addr.i275, align 4
  %idxprom11.i = sext i32 %227 to i64
  %228 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim12.i = getelementptr inbounds %struct.F90_Desc* %228, i32 0, i32 10
  %arrayidx13.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i, i32 0, i64 %idxprom11.i
  %extent14.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i, i32 0, i32 1
  store i32 %226, i32* %extent14.i, align 4
  %229 = load i32* %dx.addr.i275, align 4
  %idxprom15.i302 = sext i32 %229 to i64
  %230 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim16.i303 = getelementptr inbounds %struct.F90_Desc* %230, i32 0, i32 10
  %arrayidx17.i304 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i303, i32 0, i64 %idxprom15.i302
  %sstride.i305 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i304, i32 0, i32 2
  store i32 1, i32* %sstride.i305, align 4
  %231 = load i32* %dx.addr.i275, align 4
  %idxprom18.i = sext i32 %231 to i64
  %232 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim19.i = getelementptr inbounds %struct.F90_Desc* %232, i32 0, i32 10
  %arrayidx20.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i, i32 0, i64 %idxprom18.i
  %soffset.i306 = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i, i32 0, i32 3
  store i32 0, i32* %soffset.i306, align 4
  %233 = load i32* %ax.addr.i277, align 4
  %idxprom21.i = sext i32 %233 to i64
  %234 = load %struct.F90_Desc** %a.addr.i276, align 8
  %dim22.i = getelementptr inbounds %struct.F90_Desc* %234, i32 0, i32 10
  %arrayidx23.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i, i32 0, i64 %idxprom21.i
  %lstride.i307 = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i, i32 0, i32 4
  %235 = load i32* %lstride.i307, align 4
  %236 = load i32* %st.addr.i280, align 4
  %mul.i308 = mul nsw i32 %235, %236
  %237 = load i32* %dx.addr.i275, align 4
  %idxprom24.i309 = sext i32 %237 to i64
  %238 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim25.i310 = getelementptr inbounds %struct.F90_Desc* %238, i32 0, i32 10
  %arrayidx26.i311 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i310, i32 0, i64 %idxprom24.i309
  %lstride27.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i311, i32 0, i32 4
  store i32 %mul.i308, i32* %lstride27.i, align 4
  %239 = load i32* %dx.addr.i275, align 4
  %idxprom28.i312 = sext i32 %239 to i64
  %240 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim29.i313 = getelementptr inbounds %struct.F90_Desc* %240, i32 0, i32 10
  %arrayidx30.i314 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i313, i32 0, i64 %idxprom28.i312
  %lstride31.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i314, i32 0, i32 4
  %241 = load i32* %lstride31.i, align 4
  %242 = load %struct.F90_Desc** %d.addr.i274, align 8
  %lbase.i315 = getelementptr inbounds %struct.F90_Desc* %242, i32 0, i32 7
  %243 = load i32* %lbase.i315, align 4
  %sub32.i = sub nsw i32 %243, %241
  store i32 %sub32.i, i32* %lbase.i315, align 4
  %244 = load i32* %dx.addr.i275, align 4
  %idxprom33.i = sext i32 %244 to i64
  %245 = load %struct.F90_Desc** %d.addr.i274, align 8
  %dim34.i = getelementptr inbounds %struct.F90_Desc* %245, i32 0, i32 10
  %arrayidx35.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i, i32 0, i64 %idxprom33.i
  %lstride36.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i, i32 0, i32 4
  %246 = load i32* %lstride36.i, align 4
  %247 = load i32* %gsize.addr.i281, align 4
  %cmp37.i = icmp ne i32 %246, %247
  br i1 %cmp37.i, label %if.then38.i, label %pgf90_tsection.exit

if.then38.i:                                      ; preds = %if.end7.i316
  %248 = load %struct.F90_Desc** %d.addr.i274, align 8
  %flags39.i = getelementptr inbounds %struct.F90_Desc* %248, i32 0, i32 4
  %249 = load i32* %flags39.i, align 4
  %and.i317 = and i32 %249, -536870913
  store i32 %and.i317, i32* %flags39.i, align 4
  br label %pgf90_tsection.exit

pgf90_tsection.exit:                              ; preds = %if.then38.i, %if.end7.i316
  %250 = load i32* %extent.i283, align 4
  %251 = load i32* %gsize.addr.i281, align 4
  %mul41.i = mul nsw i32 %251, %250
  store i32 %mul41.i, i32* %gsize.addr.i281, align 4
  %252 = load i32* %gsize.addr.i281, align 4
  store i32 %252, i32* %gsize, align 4
  %253 = load i32* %dx, align 4
  %inc38 = add nsw i32 %253, 1
  store i32 %inc38, i32* %dx, align 4
  br label %if.end39

if.end39:                                         ; preds = %pgf90_tsection.exit, %if.end31
  br label %if.end64

if.else40:                                        ; preds = %if.else
  %254 = load i32* %flags.addr, align 4
  %255 = load i32* %ax, align 4
  %shl41 = shl i32 1, %255
  %and42 = and i32 %254, %shl41
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else40
  %256 = load %struct.F90_Desc** %d, align 8
  %257 = load %struct.F90_Desc** %a, align 8
  %258 = load i32* %lw0.addr, align 4
  %259 = load i32* %up0.addr, align 4
  %260 = load i32* %st0.addr, align 4
  %261 = load i32* %gsize, align 4
  %262 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %256, %struct.F90_Desc** %d.addr.i172, align 8
  store i32 0, i32* %dx.addr.i173, align 4
  store %struct.F90_Desc* %257, %struct.F90_Desc** %a.addr.i174, align 8
  store i32 0, i32* %ax.addr.i175, align 4
  store i32 %258, i32* %lb.addr.i176, align 4
  store i32 %259, i32* %ub.addr.i177, align 4
  store i32 %260, i32* %st.addr.i178, align 4
  store i32 %261, i32* %gsize.addr.i179, align 4
  store i32 %262, i32* %flags.addr.i180, align 4
  %263 = load i32* %ub.addr.i177, align 4
  %264 = load i32* %lb.addr.i176, align 4
  %sub.i184 = sub nsw i32 %263, %264
  %265 = load i32* %st.addr.i178, align 4
  %add.i185 = add nsw i32 %sub.i184, %265
  store i32 %add.i185, i32* %extent.i181, align 4
  %266 = load i32* %flags.addr.i180, align 4
  %and.i186 = and i32 %266, 33554432
  store i32 %and.i186, i32* %noreindex.i182, align 4
  %267 = load i32* %st.addr.i178, align 4
  %cmp.i187 = icmp ne i32 %267, 1
  br i1 %cmp.i187, label %if.then.i189, label %if.end4.i196

if.then.i189:                                     ; preds = %if.then44
  %268 = load i32* %st.addr.i178, align 4
  %cmp1.i188 = icmp eq i32 %268, -1
  br i1 %cmp1.i188, label %if.then2.i191, label %if.else.i193

if.then2.i191:                                    ; preds = %if.then.i189
  %269 = load i32* %extent.i181, align 4
  %sub3.i190 = sub nsw i32 0, %269
  store i32 %sub3.i190, i32* %extent.i181, align 4
  br label %if.end.i194

if.else.i193:                                     ; preds = %if.then.i189
  %270 = load i32* %st.addr.i178, align 4
  %271 = load i32* %extent.i181, align 4
  %div.i192 = sdiv i32 %271, %270
  store i32 %div.i192, i32* %extent.i181, align 4
  br label %if.end.i194

if.end.i194:                                      ; preds = %if.else.i193, %if.then2.i191
  br label %if.end4.i196

if.end4.i196:                                     ; preds = %if.end.i194, %if.then44
  %272 = load i32* %extent.i181, align 4
  %cmp5.i195 = icmp slt i32 %272, 0
  br i1 %cmp5.i195, label %if.then6.i197, label %if.end7.i199

if.then6.i197:                                    ; preds = %if.end4.i196
  store i32 0, i32* %extent.i181, align 4
  br label %if.end7.i199

if.end7.i199:                                     ; preds = %if.then6.i197, %if.end4.i196
  %273 = load i32* %noreindex.i182, align 4
  %tobool.i198 = icmp ne i32 %273, 0
  br i1 %tobool.i198, label %land.lhs.true.i201, label %if.else23.i238

land.lhs.true.i201:                               ; preds = %if.end7.i199
  %274 = load i32* %st.addr.i178, align 4
  %cmp8.i200 = icmp eq i32 %274, 1
  br i1 %cmp8.i200, label %if.then9.i207, label %if.else23.i238

if.then9.i207:                                    ; preds = %land.lhs.true.i201
  %275 = load i32* %dx.addr.i173, align 4
  %idxprom.i202 = sext i32 %275 to i64
  %276 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim.i203 = getelementptr inbounds %struct.F90_Desc* %276, i32 0, i32 10
  %arrayidx.i204 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i203, i32 0, i64 %idxprom.i202
  %lbound.i205 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i204, i32 0, i32 0
  store i32 1, i32* %lbound.i205, align 4
  %277 = load i32* %extent.i181, align 4
  %cmp10.i206 = icmp eq i32 %277, 0
  br i1 %cmp10.i206, label %cond.true.i209, label %cond.false.i210

cond.true.i209:                                   ; preds = %if.then9.i207
  %278 = load i32* %lb.addr.i176, align 4
  %sub11.i208 = sub nsw i32 %278, 1
  br label %cond.end.i224

cond.false.i210:                                  ; preds = %if.then9.i207
  %279 = load i32* %ub.addr.i177, align 4
  br label %cond.end.i224

cond.end.i224:                                    ; preds = %cond.false.i210, %cond.true.i209
  %cond.i211 = phi i32 [ %sub11.i208, %cond.true.i209 ], [ %279, %cond.false.i210 ]
  %280 = load i32* %dx.addr.i173, align 4
  %idxprom12.i212 = sext i32 %280 to i64
  %281 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim13.i213 = getelementptr inbounds %struct.F90_Desc* %281, i32 0, i32 10
  %arrayidx14.i214 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i213, i32 0, i64 %idxprom12.i212
  %ubound.i215 = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i214, i32 0, i32 5
  store i32 %cond.i211, i32* %ubound.i215, align 4
  %282 = load i32* %dx.addr.i173, align 4
  %idxprom15.i216 = sext i32 %282 to i64
  %283 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim16.i217 = getelementptr inbounds %struct.F90_Desc* %283, i32 0, i32 10
  %arrayidx17.i218 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i217, i32 0, i64 %idxprom15.i216
  %ubound18.i219 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i218, i32 0, i32 5
  %284 = load i32* %ubound18.i219, align 4
  %285 = load i32* %dx.addr.i173, align 4
  %idxprom19.i220 = sext i32 %285 to i64
  %286 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim20.i221 = getelementptr inbounds %struct.F90_Desc* %286, i32 0, i32 10
  %arrayidx21.i222 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i221, i32 0, i64 %idxprom19.i220
  %extent22.i223 = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i222, i32 0, i32 1
  store i32 %284, i32* %extent22.i223, align 4
  store i32 0, i32* %myoffset.i183, align 4
  br label %if.end37.i268

if.else23.i238:                                   ; preds = %land.lhs.true.i201, %if.end7.i199
  %287 = load i32* %dx.addr.i173, align 4
  %idxprom24.i225 = sext i32 %287 to i64
  %288 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim25.i226 = getelementptr inbounds %struct.F90_Desc* %288, i32 0, i32 10
  %arrayidx26.i227 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i226, i32 0, i64 %idxprom24.i225
  %lbound27.i228 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i227, i32 0, i32 0
  store i32 1, i32* %lbound27.i228, align 4
  %289 = load i32* %extent.i181, align 4
  %290 = load i32* %dx.addr.i173, align 4
  %idxprom28.i229 = sext i32 %290 to i64
  %291 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim29.i230 = getelementptr inbounds %struct.F90_Desc* %291, i32 0, i32 10
  %arrayidx30.i231 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i230, i32 0, i64 %idxprom28.i229
  %ubound31.i232 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i231, i32 0, i32 5
  store i32 %289, i32* %ubound31.i232, align 4
  %292 = load i32* %extent.i181, align 4
  %293 = load i32* %dx.addr.i173, align 4
  %idxprom32.i233 = sext i32 %293 to i64
  %294 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim33.i234 = getelementptr inbounds %struct.F90_Desc* %294, i32 0, i32 10
  %arrayidx34.i235 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i234, i32 0, i64 %idxprom32.i233
  %extent35.i236 = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i235, i32 0, i32 1
  store i32 %292, i32* %extent35.i236, align 4
  %295 = load i32* %lb.addr.i176, align 4
  %296 = load i32* %st.addr.i178, align 4
  %sub36.i237 = sub nsw i32 %295, %296
  store i32 %sub36.i237, i32* %myoffset.i183, align 4
  br label %if.end37.i268

if.end37.i268:                                    ; preds = %if.else23.i238, %cond.end.i224
  %297 = load i32* %dx.addr.i173, align 4
  %idxprom38.i239 = sext i32 %297 to i64
  %298 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim39.i240 = getelementptr inbounds %struct.F90_Desc* %298, i32 0, i32 10
  %arrayidx40.i241 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i240, i32 0, i64 %idxprom38.i239
  %sstride.i242 = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i241, i32 0, i32 2
  store i32 1, i32* %sstride.i242, align 4
  %299 = load i32* %dx.addr.i173, align 4
  %idxprom41.i243 = sext i32 %299 to i64
  %300 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim42.i244 = getelementptr inbounds %struct.F90_Desc* %300, i32 0, i32 10
  %arrayidx43.i245 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i244, i32 0, i64 %idxprom41.i243
  %soffset.i246 = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i245, i32 0, i32 3
  store i32 0, i32* %soffset.i246, align 4
  %301 = load i32* %ax.addr.i175, align 4
  %idxprom44.i247 = sext i32 %301 to i64
  %302 = load %struct.F90_Desc** %a.addr.i174, align 8
  %dim45.i248 = getelementptr inbounds %struct.F90_Desc* %302, i32 0, i32 10
  %arrayidx46.i249 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i248, i32 0, i64 %idxprom44.i247
  %lstride.i250 = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i249, i32 0, i32 4
  %303 = load i32* %lstride.i250, align 4
  %304 = load i32* %st.addr.i178, align 4
  %mul.i251 = mul nsw i32 %303, %304
  %305 = load i32* %dx.addr.i173, align 4
  %idxprom47.i252 = sext i32 %305 to i64
  %306 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim48.i253 = getelementptr inbounds %struct.F90_Desc* %306, i32 0, i32 10
  %arrayidx49.i254 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i253, i32 0, i64 %idxprom47.i252
  %lstride50.i255 = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i254, i32 0, i32 4
  store i32 %mul.i251, i32* %lstride50.i255, align 4
  %307 = load i32* %myoffset.i183, align 4
  %308 = load i32* %dx.addr.i173, align 4
  %idxprom51.i256 = sext i32 %308 to i64
  %309 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim52.i257 = getelementptr inbounds %struct.F90_Desc* %309, i32 0, i32 10
  %arrayidx53.i258 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i257, i32 0, i64 %idxprom51.i256
  %lstride54.i259 = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i258, i32 0, i32 4
  %310 = load i32* %lstride54.i259, align 4
  %mul55.i260 = mul nsw i32 %307, %310
  %311 = load %struct.F90_Desc** %d.addr.i172, align 8
  %lbase.i261 = getelementptr inbounds %struct.F90_Desc* %311, i32 0, i32 7
  %312 = load i32* %lbase.i261, align 4
  %add56.i262 = add nsw i32 %312, %mul55.i260
  store i32 %add56.i262, i32* %lbase.i261, align 4
  %313 = load i32* %dx.addr.i173, align 4
  %idxprom57.i263 = sext i32 %313 to i64
  %314 = load %struct.F90_Desc** %d.addr.i172, align 8
  %dim58.i264 = getelementptr inbounds %struct.F90_Desc* %314, i32 0, i32 10
  %arrayidx59.i265 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i264, i32 0, i64 %idxprom57.i263
  %lstride60.i266 = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i265, i32 0, i32 4
  %315 = load i32* %lstride60.i266, align 4
  %316 = load i32* %gsize.addr.i179, align 4
  %cmp61.i267 = icmp ne i32 %315, %316
  br i1 %cmp61.i267, label %if.then62.i271, label %pgf90_asection.exit273

if.then62.i271:                                   ; preds = %if.end37.i268
  %317 = load %struct.F90_Desc** %d.addr.i172, align 8
  %flags63.i269 = getelementptr inbounds %struct.F90_Desc* %317, i32 0, i32 4
  %318 = load i32* %flags63.i269, align 4
  %and64.i270 = and i32 %318, -536870913
  store i32 %and64.i270, i32* %flags63.i269, align 4
  br label %pgf90_asection.exit273

pgf90_asection.exit273:                           ; preds = %if.then62.i271, %if.end37.i268
  %319 = load i32* %extent.i181, align 4
  %320 = load i32* %gsize.addr.i179, align 4
  %mul66.i272 = mul nsw i32 %320, %319
  store i32 %mul66.i272, i32* %gsize.addr.i179, align 4
  %321 = load i32* %gsize.addr.i179, align 4
  store i32 %321, i32* %gsize, align 4
  %322 = load i32* %dx, align 4
  %inc46 = add nsw i32 %322, 1
  store i32 %inc46, i32* %dx, align 4
  br label %if.end47

if.end47:                                         ; preds = %pgf90_asection.exit273, %if.else40
  %323 = load i32* %ax, align 4
  %inc48 = add nsw i32 %323, 1
  store i32 %inc48, i32* %ax, align 4
  %324 = load i32* %flags.addr, align 4
  %325 = load i32* %ax, align 4
  %shl49 = shl i32 1, %325
  %and50 = and i32 %324, %shl49
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.end55

if.then52:                                        ; preds = %if.end47
  %326 = load %struct.F90_Desc** %d, align 8
  %327 = load i32* %dx, align 4
  %328 = load %struct.F90_Desc** %a, align 8
  %329 = load i32* %ax, align 4
  %330 = load i32* %lw1.addr, align 4
  %331 = load i32* %up1.addr, align 4
  %332 = load i32* %st1.addr, align 4
  %333 = load i32* %gsize, align 4
  %334 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %326, %struct.F90_Desc** %d.addr.i70, align 8
  store i32 %327, i32* %dx.addr.i71, align 4
  store %struct.F90_Desc* %328, %struct.F90_Desc** %a.addr.i72, align 8
  store i32 %329, i32* %ax.addr.i73, align 4
  store i32 %330, i32* %lb.addr.i74, align 4
  store i32 %331, i32* %ub.addr.i75, align 4
  store i32 %332, i32* %st.addr.i76, align 4
  store i32 %333, i32* %gsize.addr.i77, align 4
  store i32 %334, i32* %flags.addr.i78, align 4
  %335 = load i32* %ub.addr.i75, align 4
  %336 = load i32* %lb.addr.i74, align 4
  %sub.i82 = sub nsw i32 %335, %336
  %337 = load i32* %st.addr.i76, align 4
  %add.i83 = add nsw i32 %sub.i82, %337
  store i32 %add.i83, i32* %extent.i79, align 4
  %338 = load i32* %flags.addr.i78, align 4
  %and.i84 = and i32 %338, 33554432
  store i32 %and.i84, i32* %noreindex.i80, align 4
  %339 = load i32* %st.addr.i76, align 4
  %cmp.i85 = icmp ne i32 %339, 1
  br i1 %cmp.i85, label %if.then.i87, label %if.end4.i94

if.then.i87:                                      ; preds = %if.then52
  %340 = load i32* %st.addr.i76, align 4
  %cmp1.i86 = icmp eq i32 %340, -1
  br i1 %cmp1.i86, label %if.then2.i89, label %if.else.i91

if.then2.i89:                                     ; preds = %if.then.i87
  %341 = load i32* %extent.i79, align 4
  %sub3.i88 = sub nsw i32 0, %341
  store i32 %sub3.i88, i32* %extent.i79, align 4
  br label %if.end.i92

if.else.i91:                                      ; preds = %if.then.i87
  %342 = load i32* %st.addr.i76, align 4
  %343 = load i32* %extent.i79, align 4
  %div.i90 = sdiv i32 %343, %342
  store i32 %div.i90, i32* %extent.i79, align 4
  br label %if.end.i92

if.end.i92:                                       ; preds = %if.else.i91, %if.then2.i89
  br label %if.end4.i94

if.end4.i94:                                      ; preds = %if.end.i92, %if.then52
  %344 = load i32* %extent.i79, align 4
  %cmp5.i93 = icmp slt i32 %344, 0
  br i1 %cmp5.i93, label %if.then6.i95, label %if.end7.i97

if.then6.i95:                                     ; preds = %if.end4.i94
  store i32 0, i32* %extent.i79, align 4
  br label %if.end7.i97

if.end7.i97:                                      ; preds = %if.then6.i95, %if.end4.i94
  %345 = load i32* %noreindex.i80, align 4
  %tobool.i96 = icmp ne i32 %345, 0
  br i1 %tobool.i96, label %land.lhs.true.i99, label %if.else23.i136

land.lhs.true.i99:                                ; preds = %if.end7.i97
  %346 = load i32* %st.addr.i76, align 4
  %cmp8.i98 = icmp eq i32 %346, 1
  br i1 %cmp8.i98, label %if.then9.i105, label %if.else23.i136

if.then9.i105:                                    ; preds = %land.lhs.true.i99
  %347 = load i32* %dx.addr.i71, align 4
  %idxprom.i100 = sext i32 %347 to i64
  %348 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim.i101 = getelementptr inbounds %struct.F90_Desc* %348, i32 0, i32 10
  %arrayidx.i102 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i101, i32 0, i64 %idxprom.i100
  %lbound.i103 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i102, i32 0, i32 0
  store i32 1, i32* %lbound.i103, align 4
  %349 = load i32* %extent.i79, align 4
  %cmp10.i104 = icmp eq i32 %349, 0
  br i1 %cmp10.i104, label %cond.true.i107, label %cond.false.i108

cond.true.i107:                                   ; preds = %if.then9.i105
  %350 = load i32* %lb.addr.i74, align 4
  %sub11.i106 = sub nsw i32 %350, 1
  br label %cond.end.i122

cond.false.i108:                                  ; preds = %if.then9.i105
  %351 = load i32* %ub.addr.i75, align 4
  br label %cond.end.i122

cond.end.i122:                                    ; preds = %cond.false.i108, %cond.true.i107
  %cond.i109 = phi i32 [ %sub11.i106, %cond.true.i107 ], [ %351, %cond.false.i108 ]
  %352 = load i32* %dx.addr.i71, align 4
  %idxprom12.i110 = sext i32 %352 to i64
  %353 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim13.i111 = getelementptr inbounds %struct.F90_Desc* %353, i32 0, i32 10
  %arrayidx14.i112 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i111, i32 0, i64 %idxprom12.i110
  %ubound.i113 = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i112, i32 0, i32 5
  store i32 %cond.i109, i32* %ubound.i113, align 4
  %354 = load i32* %dx.addr.i71, align 4
  %idxprom15.i114 = sext i32 %354 to i64
  %355 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim16.i115 = getelementptr inbounds %struct.F90_Desc* %355, i32 0, i32 10
  %arrayidx17.i116 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i115, i32 0, i64 %idxprom15.i114
  %ubound18.i117 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i116, i32 0, i32 5
  %356 = load i32* %ubound18.i117, align 4
  %357 = load i32* %dx.addr.i71, align 4
  %idxprom19.i118 = sext i32 %357 to i64
  %358 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim20.i119 = getelementptr inbounds %struct.F90_Desc* %358, i32 0, i32 10
  %arrayidx21.i120 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i119, i32 0, i64 %idxprom19.i118
  %extent22.i121 = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i120, i32 0, i32 1
  store i32 %356, i32* %extent22.i121, align 4
  store i32 0, i32* %myoffset.i81, align 4
  br label %if.end37.i166

if.else23.i136:                                   ; preds = %land.lhs.true.i99, %if.end7.i97
  %359 = load i32* %dx.addr.i71, align 4
  %idxprom24.i123 = sext i32 %359 to i64
  %360 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim25.i124 = getelementptr inbounds %struct.F90_Desc* %360, i32 0, i32 10
  %arrayidx26.i125 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i124, i32 0, i64 %idxprom24.i123
  %lbound27.i126 = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i125, i32 0, i32 0
  store i32 1, i32* %lbound27.i126, align 4
  %361 = load i32* %extent.i79, align 4
  %362 = load i32* %dx.addr.i71, align 4
  %idxprom28.i127 = sext i32 %362 to i64
  %363 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim29.i128 = getelementptr inbounds %struct.F90_Desc* %363, i32 0, i32 10
  %arrayidx30.i129 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i128, i32 0, i64 %idxprom28.i127
  %ubound31.i130 = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i129, i32 0, i32 5
  store i32 %361, i32* %ubound31.i130, align 4
  %364 = load i32* %extent.i79, align 4
  %365 = load i32* %dx.addr.i71, align 4
  %idxprom32.i131 = sext i32 %365 to i64
  %366 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim33.i132 = getelementptr inbounds %struct.F90_Desc* %366, i32 0, i32 10
  %arrayidx34.i133 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i132, i32 0, i64 %idxprom32.i131
  %extent35.i134 = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i133, i32 0, i32 1
  store i32 %364, i32* %extent35.i134, align 4
  %367 = load i32* %lb.addr.i74, align 4
  %368 = load i32* %st.addr.i76, align 4
  %sub36.i135 = sub nsw i32 %367, %368
  store i32 %sub36.i135, i32* %myoffset.i81, align 4
  br label %if.end37.i166

if.end37.i166:                                    ; preds = %if.else23.i136, %cond.end.i122
  %369 = load i32* %dx.addr.i71, align 4
  %idxprom38.i137 = sext i32 %369 to i64
  %370 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim39.i138 = getelementptr inbounds %struct.F90_Desc* %370, i32 0, i32 10
  %arrayidx40.i139 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i138, i32 0, i64 %idxprom38.i137
  %sstride.i140 = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i139, i32 0, i32 2
  store i32 1, i32* %sstride.i140, align 4
  %371 = load i32* %dx.addr.i71, align 4
  %idxprom41.i141 = sext i32 %371 to i64
  %372 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim42.i142 = getelementptr inbounds %struct.F90_Desc* %372, i32 0, i32 10
  %arrayidx43.i143 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i142, i32 0, i64 %idxprom41.i141
  %soffset.i144 = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i143, i32 0, i32 3
  store i32 0, i32* %soffset.i144, align 4
  %373 = load i32* %ax.addr.i73, align 4
  %idxprom44.i145 = sext i32 %373 to i64
  %374 = load %struct.F90_Desc** %a.addr.i72, align 8
  %dim45.i146 = getelementptr inbounds %struct.F90_Desc* %374, i32 0, i32 10
  %arrayidx46.i147 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i146, i32 0, i64 %idxprom44.i145
  %lstride.i148 = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i147, i32 0, i32 4
  %375 = load i32* %lstride.i148, align 4
  %376 = load i32* %st.addr.i76, align 4
  %mul.i149 = mul nsw i32 %375, %376
  %377 = load i32* %dx.addr.i71, align 4
  %idxprom47.i150 = sext i32 %377 to i64
  %378 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim48.i151 = getelementptr inbounds %struct.F90_Desc* %378, i32 0, i32 10
  %arrayidx49.i152 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i151, i32 0, i64 %idxprom47.i150
  %lstride50.i153 = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i152, i32 0, i32 4
  store i32 %mul.i149, i32* %lstride50.i153, align 4
  %379 = load i32* %myoffset.i81, align 4
  %380 = load i32* %dx.addr.i71, align 4
  %idxprom51.i154 = sext i32 %380 to i64
  %381 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim52.i155 = getelementptr inbounds %struct.F90_Desc* %381, i32 0, i32 10
  %arrayidx53.i156 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i155, i32 0, i64 %idxprom51.i154
  %lstride54.i157 = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i156, i32 0, i32 4
  %382 = load i32* %lstride54.i157, align 4
  %mul55.i158 = mul nsw i32 %379, %382
  %383 = load %struct.F90_Desc** %d.addr.i70, align 8
  %lbase.i159 = getelementptr inbounds %struct.F90_Desc* %383, i32 0, i32 7
  %384 = load i32* %lbase.i159, align 4
  %add56.i160 = add nsw i32 %384, %mul55.i158
  store i32 %add56.i160, i32* %lbase.i159, align 4
  %385 = load i32* %dx.addr.i71, align 4
  %idxprom57.i161 = sext i32 %385 to i64
  %386 = load %struct.F90_Desc** %d.addr.i70, align 8
  %dim58.i162 = getelementptr inbounds %struct.F90_Desc* %386, i32 0, i32 10
  %arrayidx59.i163 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i162, i32 0, i64 %idxprom57.i161
  %lstride60.i164 = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i163, i32 0, i32 4
  %387 = load i32* %lstride60.i164, align 4
  %388 = load i32* %gsize.addr.i77, align 4
  %cmp61.i165 = icmp ne i32 %387, %388
  br i1 %cmp61.i165, label %if.then62.i169, label %pgf90_asection.exit171

if.then62.i169:                                   ; preds = %if.end37.i166
  %389 = load %struct.F90_Desc** %d.addr.i70, align 8
  %flags63.i167 = getelementptr inbounds %struct.F90_Desc* %389, i32 0, i32 4
  %390 = load i32* %flags63.i167, align 4
  %and64.i168 = and i32 %390, -536870913
  store i32 %and64.i168, i32* %flags63.i167, align 4
  br label %pgf90_asection.exit171

pgf90_asection.exit171:                           ; preds = %if.then62.i169, %if.end37.i166
  %391 = load i32* %extent.i79, align 4
  %392 = load i32* %gsize.addr.i77, align 4
  %mul66.i170 = mul nsw i32 %392, %391
  store i32 %mul66.i170, i32* %gsize.addr.i77, align 4
  %393 = load i32* %gsize.addr.i77, align 4
  store i32 %393, i32* %gsize, align 4
  %394 = load i32* %dx, align 4
  %inc54 = add nsw i32 %394, 1
  store i32 %inc54, i32* %dx, align 4
  br label %if.end55

if.end55:                                         ; preds = %pgf90_asection.exit171, %if.end47
  %395 = load i32* %ax, align 4
  %inc56 = add nsw i32 %395, 1
  store i32 %inc56, i32* %ax, align 4
  %396 = load i32* %flags.addr, align 4
  %397 = load i32* %ax, align 4
  %shl57 = shl i32 1, %397
  %and58 = and i32 %396, %shl57
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %if.then60, label %if.end63

if.then60:                                        ; preds = %if.end55
  %398 = load %struct.F90_Desc** %d, align 8
  %399 = load i32* %dx, align 4
  %400 = load %struct.F90_Desc** %a, align 8
  %401 = load i32* %ax, align 4
  %402 = load i32* %lw2.addr, align 4
  %403 = load i32* %up2.addr, align 4
  %404 = load i32* %st2.addr, align 4
  %405 = load i32* %gsize, align 4
  %406 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %398, %struct.F90_Desc** %d.addr.i67, align 8
  store i32 %399, i32* %dx.addr.i, align 4
  store %struct.F90_Desc* %400, %struct.F90_Desc** %a.addr.i68, align 8
  store i32 %401, i32* %ax.addr.i, align 4
  store i32 %402, i32* %lb.addr.i, align 4
  store i32 %403, i32* %ub.addr.i, align 4
  store i32 %404, i32* %st.addr.i, align 4
  store i32 %405, i32* %gsize.addr.i, align 4
  store i32 %406, i32* %flags.addr.i, align 4
  %407 = load i32* %ub.addr.i, align 4
  %408 = load i32* %lb.addr.i, align 4
  %sub.i = sub nsw i32 %407, %408
  %409 = load i32* %st.addr.i, align 4
  %add.i = add nsw i32 %sub.i, %409
  store i32 %add.i, i32* %extent.i, align 4
  %410 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %410, 33554432
  store i32 %and.i, i32* %noreindex.i, align 4
  %411 = load i32* %st.addr.i, align 4
  %cmp.i = icmp ne i32 %411, 1
  br i1 %cmp.i, label %if.then.i, label %if.end4.i

if.then.i:                                        ; preds = %if.then60
  %412 = load i32* %st.addr.i, align 4
  %cmp1.i = icmp eq i32 %412, -1
  br i1 %cmp1.i, label %if.then2.i, label %if.else.i

if.then2.i:                                       ; preds = %if.then.i
  %413 = load i32* %extent.i, align 4
  %sub3.i = sub nsw i32 0, %413
  store i32 %sub3.i, i32* %extent.i, align 4
  br label %if.end.i

if.else.i:                                        ; preds = %if.then.i
  %414 = load i32* %st.addr.i, align 4
  %415 = load i32* %extent.i, align 4
  %div.i = sdiv i32 %415, %414
  store i32 %div.i, i32* %extent.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then2.i
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.end.i, %if.then60
  %416 = load i32* %extent.i, align 4
  %cmp5.i = icmp slt i32 %416, 0
  br i1 %cmp5.i, label %if.then6.i, label %if.end7.i

if.then6.i:                                       ; preds = %if.end4.i
  store i32 0, i32* %extent.i, align 4
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then6.i, %if.end4.i
  %417 = load i32* %noreindex.i, align 4
  %tobool.i = icmp ne i32 %417, 0
  br i1 %tobool.i, label %land.lhs.true.i, label %if.else23.i

land.lhs.true.i:                                  ; preds = %if.end7.i
  %418 = load i32* %st.addr.i, align 4
  %cmp8.i = icmp eq i32 %418, 1
  br i1 %cmp8.i, label %if.then9.i, label %if.else23.i

if.then9.i:                                       ; preds = %land.lhs.true.i
  %419 = load i32* %dx.addr.i, align 4
  %idxprom.i = sext i32 %419 to i64
  %420 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim.i = getelementptr inbounds %struct.F90_Desc* %420, i32 0, i32 10
  %arrayidx.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i, i32 0, i64 %idxprom.i
  %lbound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i, i32 0, i32 0
  store i32 1, i32* %lbound.i, align 4
  %421 = load i32* %extent.i, align 4
  %cmp10.i = icmp eq i32 %421, 0
  br i1 %cmp10.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.then9.i
  %422 = load i32* %lb.addr.i, align 4
  %sub11.i = sub nsw i32 %422, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.then9.i
  %423 = load i32* %ub.addr.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub11.i, %cond.true.i ], [ %423, %cond.false.i ]
  %424 = load i32* %dx.addr.i, align 4
  %idxprom12.i = sext i32 %424 to i64
  %425 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim13.i = getelementptr inbounds %struct.F90_Desc* %425, i32 0, i32 10
  %arrayidx14.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i, i32 0, i64 %idxprom12.i
  %ubound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i, i32 0, i32 5
  store i32 %cond.i, i32* %ubound.i, align 4
  %426 = load i32* %dx.addr.i, align 4
  %idxprom15.i = sext i32 %426 to i64
  %427 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim16.i = getelementptr inbounds %struct.F90_Desc* %427, i32 0, i32 10
  %arrayidx17.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i, i32 0, i64 %idxprom15.i
  %ubound18.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i, i32 0, i32 5
  %428 = load i32* %ubound18.i, align 4
  %429 = load i32* %dx.addr.i, align 4
  %idxprom19.i = sext i32 %429 to i64
  %430 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim20.i = getelementptr inbounds %struct.F90_Desc* %430, i32 0, i32 10
  %arrayidx21.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i, i32 0, i64 %idxprom19.i
  %extent22.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i, i32 0, i32 1
  store i32 %428, i32* %extent22.i, align 4
  store i32 0, i32* %myoffset.i, align 4
  br label %if.end37.i

if.else23.i:                                      ; preds = %land.lhs.true.i, %if.end7.i
  %431 = load i32* %dx.addr.i, align 4
  %idxprom24.i = sext i32 %431 to i64
  %432 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim25.i = getelementptr inbounds %struct.F90_Desc* %432, i32 0, i32 10
  %arrayidx26.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i, i32 0, i64 %idxprom24.i
  %lbound27.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i, align 4
  %433 = load i32* %extent.i, align 4
  %434 = load i32* %dx.addr.i, align 4
  %idxprom28.i = sext i32 %434 to i64
  %435 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim29.i = getelementptr inbounds %struct.F90_Desc* %435, i32 0, i32 10
  %arrayidx30.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i, i32 0, i64 %idxprom28.i
  %ubound31.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i, i32 0, i32 5
  store i32 %433, i32* %ubound31.i, align 4
  %436 = load i32* %extent.i, align 4
  %437 = load i32* %dx.addr.i, align 4
  %idxprom32.i = sext i32 %437 to i64
  %438 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim33.i = getelementptr inbounds %struct.F90_Desc* %438, i32 0, i32 10
  %arrayidx34.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i, i32 0, i64 %idxprom32.i
  %extent35.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i, i32 0, i32 1
  store i32 %436, i32* %extent35.i, align 4
  %439 = load i32* %lb.addr.i, align 4
  %440 = load i32* %st.addr.i, align 4
  %sub36.i = sub nsw i32 %439, %440
  store i32 %sub36.i, i32* %myoffset.i, align 4
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.else23.i, %cond.end.i
  %441 = load i32* %dx.addr.i, align 4
  %idxprom38.i = sext i32 %441 to i64
  %442 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim39.i = getelementptr inbounds %struct.F90_Desc* %442, i32 0, i32 10
  %arrayidx40.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i, i32 0, i64 %idxprom38.i
  %sstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i, i32 0, i32 2
  store i32 1, i32* %sstride.i, align 4
  %443 = load i32* %dx.addr.i, align 4
  %idxprom41.i = sext i32 %443 to i64
  %444 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim42.i = getelementptr inbounds %struct.F90_Desc* %444, i32 0, i32 10
  %arrayidx43.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i, i32 0, i64 %idxprom41.i
  %soffset.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i, i32 0, i32 3
  store i32 0, i32* %soffset.i, align 4
  %445 = load i32* %ax.addr.i, align 4
  %idxprom44.i = sext i32 %445 to i64
  %446 = load %struct.F90_Desc** %a.addr.i68, align 8
  %dim45.i = getelementptr inbounds %struct.F90_Desc* %446, i32 0, i32 10
  %arrayidx46.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i, i32 0, i64 %idxprom44.i
  %lstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i, i32 0, i32 4
  %447 = load i32* %lstride.i, align 4
  %448 = load i32* %st.addr.i, align 4
  %mul.i = mul nsw i32 %447, %448
  %449 = load i32* %dx.addr.i, align 4
  %idxprom47.i = sext i32 %449 to i64
  %450 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim48.i = getelementptr inbounds %struct.F90_Desc* %450, i32 0, i32 10
  %arrayidx49.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i, i32 0, i64 %idxprom47.i
  %lstride50.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i, i32 0, i32 4
  store i32 %mul.i, i32* %lstride50.i, align 4
  %451 = load i32* %myoffset.i, align 4
  %452 = load i32* %dx.addr.i, align 4
  %idxprom51.i = sext i32 %452 to i64
  %453 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim52.i = getelementptr inbounds %struct.F90_Desc* %453, i32 0, i32 10
  %arrayidx53.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i, i32 0, i64 %idxprom51.i
  %lstride54.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i, i32 0, i32 4
  %454 = load i32* %lstride54.i, align 4
  %mul55.i = mul nsw i32 %451, %454
  %455 = load %struct.F90_Desc** %d.addr.i67, align 8
  %lbase.i69 = getelementptr inbounds %struct.F90_Desc* %455, i32 0, i32 7
  %456 = load i32* %lbase.i69, align 4
  %add56.i = add nsw i32 %456, %mul55.i
  store i32 %add56.i, i32* %lbase.i69, align 4
  %457 = load i32* %dx.addr.i, align 4
  %idxprom57.i = sext i32 %457 to i64
  %458 = load %struct.F90_Desc** %d.addr.i67, align 8
  %dim58.i = getelementptr inbounds %struct.F90_Desc* %458, i32 0, i32 10
  %arrayidx59.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i, i32 0, i64 %idxprom57.i
  %lstride60.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i, i32 0, i32 4
  %459 = load i32* %lstride60.i, align 4
  %460 = load i32* %gsize.addr.i, align 4
  %cmp61.i = icmp ne i32 %459, %460
  br i1 %cmp61.i, label %if.then62.i, label %pgf90_asection.exit

if.then62.i:                                      ; preds = %if.end37.i
  %461 = load %struct.F90_Desc** %d.addr.i67, align 8
  %flags63.i = getelementptr inbounds %struct.F90_Desc* %461, i32 0, i32 4
  %462 = load i32* %flags63.i, align 4
  %and64.i = and i32 %462, -536870913
  store i32 %and64.i, i32* %flags63.i, align 4
  br label %pgf90_asection.exit

pgf90_asection.exit:                              ; preds = %if.then62.i, %if.end37.i
  %463 = load i32* %extent.i, align 4
  %464 = load i32* %gsize.addr.i, align 4
  %mul66.i = mul nsw i32 %464, %463
  store i32 %mul66.i, i32* %gsize.addr.i, align 4
  %465 = load i32* %gsize.addr.i, align 4
  store i32 %465, i32* %gsize, align 4
  %466 = load i32* %dx, align 4
  %inc62 = add nsw i32 %466, 1
  store i32 %inc62, i32* %dx, align 4
  br label %if.end63

if.end63:                                         ; preds = %pgf90_asection.exit, %if.end55
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.end39
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %pgf90_bogus_sect.exit
  %467 = load i32* %gsize, align 4
  %468 = load %struct.F90_Desc** %d, align 8
  %gsize66 = getelementptr inbounds %struct.F90_Desc* %468, i32 0, i32 6
  store i32 %467, i32* %gsize66, align 4
  %469 = load i32* %gsize, align 4
  %470 = load %struct.F90_Desc** %d, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %470, i32 0, i32 5
  store i32 %469, i32* %lsize, align 4
  ret void
}

define  void @pgf90_sect3(i8* %d, i8* %a, i8* %prank, i8* %lw0, i8* %up0, i8* %st0, i8* %lw1, i8* %up1, i8* %st1, i8* %lw2, i8* %up2, i8* %st2, i8* %flags) nounwind alwaysinline {
entry:
  %d.addr.i456.i = alloca %struct.F90_Desc*, align 8
  %a.addr.i457.i = alloca %struct.F90_Desc*, align 8
  %flags.addr.i458.i = alloca i32, align 4
  %lower.addr.i.i = alloca i32*, align 8
  %upper.addr.i.i = alloca i32*, align 8
  %stride.addr.i.i = alloca i32*, align 8
  %gsize.i459.i = alloca i32, align 4
  %ax.i.i = alloca i32, align 4
  %dx.i.i = alloca i32, align 4
  %d.addr.i387.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i388.i = alloca i32, align 4
  %a.addr.i389.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i390.i = alloca i32, align 4
  %lb.addr.i391.i = alloca i32, align 4
  %ub.addr.i392.i = alloca i32, align 4
  %st.addr.i393.i = alloca i32, align 4
  %gsize.addr.i394.i = alloca i32, align 4
  %flags.addr.i395.i = alloca i32, align 4
  %extent.i396.i = alloca i32, align 4
  %d.addr.i318.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i319.i = alloca i32, align 4
  %a.addr.i320.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i321.i = alloca i32, align 4
  %lb.addr.i322.i = alloca i32, align 4
  %ub.addr.i323.i = alloca i32, align 4
  %st.addr.i324.i = alloca i32, align 4
  %gsize.addr.i325.i = alloca i32, align 4
  %flags.addr.i326.i = alloca i32, align 4
  %extent.i327.i = alloca i32, align 4
  %d.addr.i274.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i275.i = alloca i32, align 4
  %a.addr.i276.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i277.i = alloca i32, align 4
  %lb.addr.i278.i = alloca i32, align 4
  %ub.addr.i279.i = alloca i32, align 4
  %st.addr.i280.i = alloca i32, align 4
  %gsize.addr.i281.i = alloca i32, align 4
  %flags.addr.i282.i = alloca i32, align 4
  %extent.i283.i = alloca i32, align 4
  %d.addr.i172.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i173.i = alloca i32, align 4
  %a.addr.i174.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i175.i = alloca i32, align 4
  %lb.addr.i176.i = alloca i32, align 4
  %ub.addr.i177.i = alloca i32, align 4
  %st.addr.i178.i = alloca i32, align 4
  %gsize.addr.i179.i = alloca i32, align 4
  %flags.addr.i180.i = alloca i32, align 4
  %extent.i181.i = alloca i32, align 4
  %noreindex.i182.i = alloca i32, align 4
  %myoffset.i183.i = alloca i32, align 4
  %d.addr.i70.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i71.i = alloca i32, align 4
  %a.addr.i72.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i73.i = alloca i32, align 4
  %lb.addr.i74.i = alloca i32, align 4
  %ub.addr.i75.i = alloca i32, align 4
  %st.addr.i76.i = alloca i32, align 4
  %gsize.addr.i77.i = alloca i32, align 4
  %flags.addr.i78.i = alloca i32, align 4
  %extent.i79.i = alloca i32, align 4
  %noreindex.i80.i = alloca i32, align 4
  %myoffset.i81.i = alloca i32, align 4
  %d.addr.i67.i = alloca %struct.F90_Desc*, align 8
  %dx.addr.i.i = alloca i32, align 4
  %a.addr.i68.i = alloca %struct.F90_Desc*, align 8
  %ax.addr.i.i = alloca i32, align 4
  %lb.addr.i.i = alloca i32, align 4
  %ub.addr.i.i = alloca i32, align 4
  %st.addr.i.i = alloca i32, align 4
  %gsize.addr.i.i = alloca i32, align 4
  %flags.addr.i.i = alloca i32, align 4
  %extent.i.i = alloca i32, align 4
  %noreindex.i.i = alloca i32, align 4
  %myoffset.i.i = alloca i32, align 4
  %d.addr.i.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i.i = alloca i32, align 4
  %a.addr.i.i = alloca %struct.F90_Desc*, align 8
  %pd.addr.i = alloca i8*, align 8
  %pa.addr.i = alloca i8*, align 8
  %prank.addr.i = alloca i8*, align 8
  %lw0.addr.i = alloca i32, align 4
  %up0.addr.i = alloca i32, align 4
  %st0.addr.i = alloca i32, align 4
  %lw1.addr.i = alloca i32, align 4
  %up1.addr.i = alloca i32, align 4
  %st1.addr.i = alloca i32, align 4
  %lw2.addr.i = alloca i32, align 4
  %up2.addr.i = alloca i32, align 4
  %st2.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %gsize.i = alloca i32, align 4
  %dx.i = alloca i32, align 4
  %rank.i = alloca i32, align 4
  %d.i = alloca %struct.F90_Desc*, align 8
  %a.i = alloca %struct.F90_Desc*, align 8
  %lower.i = alloca [3 x i32], align 4
  %upper.i = alloca [3 x i32], align 4
  %stride.i = alloca [3 x i32], align 4
  %ax.i = alloca i32, align 4
  %d.addr = alloca i8*, align 8
  %a.addr = alloca i8*, align 8
  %prank.addr = alloca i8*, align 8
  %lw0.addr = alloca i8*, align 8
  %up0.addr = alloca i8*, align 8
  %st0.addr = alloca i8*, align 8
  %lw1.addr = alloca i8*, align 8
  %up1.addr = alloca i8*, align 8
  %st1.addr = alloca i8*, align 8
  %lw2.addr = alloca i8*, align 8
  %up2.addr = alloca i8*, align 8
  %st2.addr = alloca i8*, align 8
  %flags.addr = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %a, i8** %a.addr, align 8
  store i8* %prank, i8** %prank.addr, align 8
  store i8* %lw0, i8** %lw0.addr, align 8
  store i8* %up0, i8** %up0.addr, align 8
  store i8* %st0, i8** %st0.addr, align 8
  store i8* %lw1, i8** %lw1.addr, align 8
  store i8* %up1, i8** %up1.addr, align 8
  store i8* %st1, i8** %st1.addr, align 8
  store i8* %lw2, i8** %lw2.addr, align 8
  store i8* %up2, i8** %up2.addr, align 8
  store i8* %st2, i8** %st2.addr, align 8
  store i8* %flags, i8** %flags.addr, align 8
  %0 = load i8** %d.addr, align 8
  %1 = load i8** %a.addr, align 8
  %2 = load i8** %prank.addr, align 8
  %3 = load i8** %lw0.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4
  %6 = load i8** %up0.addr, align 8
  %7 = bitcast i8* %6 to i32*
  %8 = load i32* %7, align 4
  %9 = load i8** %st0.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %12 = load i8** %lw1.addr, align 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32* %13, align 4
  %15 = load i8** %up1.addr, align 8
  %16 = bitcast i8* %15 to i32*
  %17 = load i32* %16, align 4
  %18 = load i8** %st1.addr, align 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32* %19, align 4
  %21 = load i8** %lw2.addr, align 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32* %22, align 4
  %24 = load i8** %up2.addr, align 8
  %25 = bitcast i8* %24 to i32*
  %26 = load i32* %25, align 4
  %27 = load i8** %st2.addr, align 8
  %28 = bitcast i8* %27 to i32*
  %29 = load i32* %28, align 4
  %30 = load i8** %flags.addr, align 8
  %31 = bitcast i8* %30 to i32*
  %32 = load i32* %31, align 4
  store i8* %0, i8** %pd.addr.i, align 8
  store i8* %1, i8** %pa.addr.i, align 8
  store i8* %2, i8** %prank.addr.i, align 8
  store i32 %5, i32* %lw0.addr.i, align 4
  store i32 %8, i32* %up0.addr.i, align 4
  store i32 %11, i32* %st0.addr.i, align 4
  store i32 %14, i32* %lw1.addr.i, align 4
  store i32 %17, i32* %up1.addr.i, align 4
  store i32 %20, i32* %st1.addr.i, align 4
  store i32 %23, i32* %lw2.addr.i, align 4
  store i32 %26, i32* %up2.addr.i, align 4
  store i32 %29, i32* %st2.addr.i, align 4
  store i32 %32, i32* %flags.addr.i, align 4
  %33 = load i8** %pd.addr.i, align 8
  %34 = bitcast i8* %33 to %struct.F90_Desc*
  store %struct.F90_Desc* %34, %struct.F90_Desc** %d.i, align 8
  %35 = load i8** %pa.addr.i, align 8
  %36 = bitcast i8* %35 to %struct.F90_Desc*
  store %struct.F90_Desc* %36, %struct.F90_Desc** %a.i, align 8
  %37 = load i32* %flags.addr.i, align 4
  %and.i = and i32 %37, 5
  %38 = load i32* %flags.addr.i, align 4
  %shr.i = ashr i32 %38, 1
  %and1.i = and i32 %shr.i, 1
  %add.i = add nsw i32 %and.i, %and1.i
  store i32 %add.i, i32* %rank.i, align 4
  %39 = load i32* %rank.i, align 4
  %and2.i = and i32 %39, 3
  %40 = load i32* %rank.i, align 4
  %shr3.i = ashr i32 %40, 2
  %and4.i = and i32 %shr3.i, 1
  %add5.i = add nsw i32 %and2.i, %and4.i
  store i32 %add5.i, i32* %rank.i, align 4
  %41 = load %struct.F90_Desc** %d.i, align 8
  %42 = load i32* %rank.i, align 4
  %43 = load %struct.F90_Desc** %a.i, align 8
  store %struct.F90_Desc* %41, %struct.F90_Desc** %d.addr.i.i, align 8
  store i32 %42, i32* %rank.addr.i.i, align 4
  store %struct.F90_Desc* %43, %struct.F90_Desc** %a.addr.i.i, align 8
  %44 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %tag.i.i = getelementptr inbounds %struct.F90_Desc* %44, i32 0, i32 0
  store i32 35, i32* %tag.i.i, align 4
  %45 = load i32* %rank.addr.i.i, align 4
  %46 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %rank1.i.i = getelementptr inbounds %struct.F90_Desc* %46, i32 0, i32 1
  store i32 %45, i32* %rank1.i.i, align 4
  %47 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %kind.i.i = getelementptr inbounds %struct.F90_Desc* %47, i32 0, i32 2
  %48 = load i32* %kind.i.i, align 4
  %49 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %kind2.i.i = getelementptr inbounds %struct.F90_Desc* %49, i32 0, i32 2
  store i32 %48, i32* %kind2.i.i, align 4
  %50 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %len.i.i = getelementptr inbounds %struct.F90_Desc* %50, i32 0, i32 3
  %51 = load i32* %len.i.i, align 4
  %52 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %len3.i.i = getelementptr inbounds %struct.F90_Desc* %52, i32 0, i32 3
  store i32 %51, i32* %len3.i.i, align 4
  %53 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %flags.i.i = getelementptr inbounds %struct.F90_Desc* %53, i32 0, i32 4
  %54 = load i32* %flags.i.i, align 4
  %55 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags4.i.i = getelementptr inbounds %struct.F90_Desc* %55, i32 0, i32 4
  store i32 %54, i32* %flags4.i.i, align 4
  %56 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %gsize.i.i = getelementptr inbounds %struct.F90_Desc* %56, i32 0, i32 6
  %57 = load i32* %gsize.i.i, align 4
  %58 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gsize5.i.i = getelementptr inbounds %struct.F90_Desc* %58, i32 0, i32 6
  store i32 %57, i32* %gsize5.i.i, align 4
  %59 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %lsize.i.i = getelementptr inbounds %struct.F90_Desc* %59, i32 0, i32 5
  %60 = load i32* %lsize.i.i, align 4
  %61 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lsize6.i.i = getelementptr inbounds %struct.F90_Desc* %61, i32 0, i32 5
  store i32 %60, i32* %lsize6.i.i, align 4
  %62 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %gbase.i.i = getelementptr inbounds %struct.F90_Desc* %62, i32 0, i32 8
  %63 = load i32** %gbase.i.i, align 8
  %64 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gbase7.i.i = getelementptr inbounds %struct.F90_Desc* %64, i32 0, i32 8
  store i32* %63, i32** %gbase7.i.i, align 8
  %65 = load %struct.F90_Desc** %a.addr.i.i, align 8
  %lbase.i.i = getelementptr inbounds %struct.F90_Desc* %65, i32 0, i32 7
  %66 = load i32* %lbase.i.i, align 4
  %67 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lbase8.i.i = getelementptr inbounds %struct.F90_Desc* %67, i32 0, i32 7
  store i32 %66, i32* %lbase8.i.i, align 4
  store i32 1, i32* %gsize.i, align 4
  store i32 0, i32* %dx.i, align 4
  %68 = load i32* %flags.addr.i, align 4
  %and6.i = and i32 %68, 256
  %tobool.i = icmp ne i32 %and6.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %69 = load i32* %lw0.addr.i, align 4
  %arrayidx.i = getelementptr inbounds [3 x i32]* %lower.i, i32 0, i64 0
  store i32 %69, i32* %arrayidx.i, align 4
  %70 = load i32* %up0.addr.i, align 4
  %arrayidx7.i = getelementptr inbounds [3 x i32]* %upper.i, i32 0, i64 0
  store i32 %70, i32* %arrayidx7.i, align 4
  %71 = load i32* %st0.addr.i, align 4
  %arrayidx8.i = getelementptr inbounds [3 x i32]* %stride.i, i32 0, i64 0
  store i32 %71, i32* %arrayidx8.i, align 4
  %72 = load i32* %lw1.addr.i, align 4
  %arrayidx9.i = getelementptr inbounds [3 x i32]* %lower.i, i32 0, i64 1
  store i32 %72, i32* %arrayidx9.i, align 4
  %73 = load i32* %up1.addr.i, align 4
  %arrayidx10.i = getelementptr inbounds [3 x i32]* %upper.i, i32 0, i64 1
  store i32 %73, i32* %arrayidx10.i, align 4
  %74 = load i32* %st1.addr.i, align 4
  %arrayidx11.i = getelementptr inbounds [3 x i32]* %stride.i, i32 0, i64 1
  store i32 %74, i32* %arrayidx11.i, align 4
  %75 = load i32* %lw2.addr.i, align 4
  %arrayidx12.i = getelementptr inbounds [3 x i32]* %lower.i, i32 0, i64 2
  store i32 %75, i32* %arrayidx12.i, align 4
  %76 = load i32* %up2.addr.i, align 4
  %arrayidx13.i = getelementptr inbounds [3 x i32]* %upper.i, i32 0, i64 2
  store i32 %76, i32* %arrayidx13.i, align 4
  %77 = load i32* %st2.addr.i, align 4
  %arrayidx14.i = getelementptr inbounds [3 x i32]* %stride.i, i32 0, i64 2
  store i32 %77, i32* %arrayidx14.i, align 4
  %78 = load %struct.F90_Desc** %d.i, align 8
  %79 = load %struct.F90_Desc** %a.i, align 8
  %80 = load i32* %flags.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [3 x i32]* %lower.i, i32 0, i32 0
  %arraydecay15.i = getelementptr inbounds [3 x i32]* %upper.i, i32 0, i32 0
  %arraydecay16.i = getelementptr inbounds [3 x i32]* %stride.i, i32 0, i32 0
  store %struct.F90_Desc* %78, %struct.F90_Desc** %d.addr.i456.i, align 8
  store %struct.F90_Desc* %79, %struct.F90_Desc** %a.addr.i457.i, align 8
  store i32 %80, i32* %flags.addr.i458.i, align 4
  store i32* %arraydecay.i, i32** %lower.addr.i.i, align 8
  store i32* %arraydecay15.i, i32** %upper.addr.i.i, align 8
  store i32* %arraydecay16.i, i32** %stride.addr.i.i, align 8
  %81 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %flags1.i.i = getelementptr inbounds %struct.F90_Desc* %81, i32 0, i32 4
  %82 = load i32* %flags1.i.i, align 4
  %or.i.i = or i32 %82, 8388608
  store i32 %or.i.i, i32* %flags1.i.i, align 4
  store i32 1, i32* %gsize.i459.i, align 4
  store i32 0, i32* %dx.i.i, align 4
  store i32 0, i32* %ax.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %if.end33.i.i, %if.then.i
  %83 = load i32* %ax.i.i, align 4
  %84 = load %struct.F90_Desc** %a.addr.i457.i, align 8
  %rank.i.i = getelementptr inbounds %struct.F90_Desc* %84, i32 0, i32 1
  %85 = load i32* %rank.i.i, align 4
  %cmp.i460.i = icmp slt i32 %83, %85
  br i1 %cmp.i460.i, label %for.body.i.i, label %pgf90_bogus_sect.exit.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %86 = load i32* %flags.addr.i458.i, align 4
  %87 = load i32* %ax.i.i, align 4
  %shl.i.i = shl i32 1, %87
  %and.i461.i = and i32 %86, %shl.i.i
  %tobool.i462.i = icmp ne i32 %and.i461.i, 0
  br i1 %tobool.i462.i, label %if.then.i481.i, label %if.end33.i.i

if.then.i481.i:                                   ; preds = %for.body.i.i
  %88 = load i32* %dx.i.i, align 4
  %idxprom.i463.i = sext i32 %88 to i64
  %89 = load i32** %lower.addr.i.i, align 8
  %arrayidx.i464.i = getelementptr inbounds i32* %89, i64 %idxprom.i463.i
  %90 = load i32* %arrayidx.i464.i, align 4
  %91 = load i32* %dx.i.i, align 4
  %idxprom2.i.i = sext i32 %91 to i64
  %92 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %dim.i465.i = getelementptr inbounds %struct.F90_Desc* %92, i32 0, i32 10
  %arrayidx3.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i465.i, i32 0, i64 %idxprom2.i.i
  %lbound.i466.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx3.i.i, i32 0, i32 0
  store i32 %90, i32* %lbound.i466.i, align 4
  %93 = load i32* %dx.i.i, align 4
  %idxprom4.i.i = sext i32 %93 to i64
  %94 = load i32** %upper.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i32* %94, i64 %idxprom4.i.i
  %95 = load i32* %arrayidx5.i.i, align 4
  %96 = load i32* %dx.i.i, align 4
  %idxprom6.i.i = sext i32 %96 to i64
  %97 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %dim7.i.i = getelementptr inbounds %struct.F90_Desc* %97, i32 0, i32 10
  %arrayidx8.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7.i.i, i32 0, i64 %idxprom6.i.i
  %ubound.i467.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx8.i.i, i32 0, i32 5
  store i32 %95, i32* %ubound.i467.i, align 4
  %98 = load i32* %dx.i.i, align 4
  %idxprom9.i.i = sext i32 %98 to i64
  %99 = load i32** %upper.addr.i.i, align 8
  %arrayidx10.i468.i = getelementptr inbounds i32* %99, i64 %idxprom9.i.i
  %100 = load i32* %arrayidx10.i468.i, align 4
  %101 = load i32* %dx.i.i, align 4
  %idxprom11.i469.i = sext i32 %101 to i64
  %102 = load i32** %lower.addr.i.i, align 8
  %arrayidx12.i.i = getelementptr inbounds i32* %102, i64 %idxprom11.i469.i
  %103 = load i32* %arrayidx12.i.i, align 4
  %sub.i470.i = sub nsw i32 %100, %103
  %add.i471.i = add nsw i32 %sub.i470.i, 1
  %104 = load i32* %dx.i.i, align 4
  %idxprom13.i.i = sext i32 %104 to i64
  %105 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %dim14.i.i = getelementptr inbounds %struct.F90_Desc* %105, i32 0, i32 10
  %arrayidx15.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim14.i.i, i32 0, i64 %idxprom13.i.i
  %extent.i472.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx15.i.i, i32 0, i32 1
  store i32 %add.i471.i, i32* %extent.i472.i, align 4
  %106 = load i32* %dx.i.i, align 4
  %idxprom16.i.i = sext i32 %106 to i64
  %107 = load i32** %stride.addr.i.i, align 8
  %arrayidx17.i473.i = getelementptr inbounds i32* %107, i64 %idxprom16.i.i
  %108 = load i32* %arrayidx17.i473.i, align 4
  %109 = load i32* %dx.i.i, align 4
  %idxprom18.i474.i = sext i32 %109 to i64
  %110 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %dim19.i475.i = getelementptr inbounds %struct.F90_Desc* %110, i32 0, i32 10
  %arrayidx20.i476.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i475.i, i32 0, i64 %idxprom18.i474.i
  %lstride.i477.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i476.i, i32 0, i32 4
  store i32 %108, i32* %lstride.i477.i, align 4
  %111 = load i32* %dx.i.i, align 4
  %idxprom21.i478.i = sext i32 %111 to i64
  %112 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %dim22.i479.i = getelementptr inbounds %struct.F90_Desc* %112, i32 0, i32 10
  %arrayidx23.i480.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i479.i, i32 0, i64 %idxprom21.i478.i
  %lstride24.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i480.i, i32 0, i32 4
  %113 = load i32* %lstride24.i.i, align 4
  %114 = load i32* %gsize.i459.i, align 4
  %cmp25.i.i = icmp ne i32 %113, %114
  br i1 %cmp25.i.i, label %if.then26.i.i, label %if.end.i483.i

if.then26.i.i:                                    ; preds = %if.then.i481.i
  %115 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %flags27.i.i = getelementptr inbounds %struct.F90_Desc* %115, i32 0, i32 4
  %116 = load i32* %flags27.i.i, align 4
  %and28.i.i = and i32 %116, -536870913
  store i32 %and28.i.i, i32* %flags27.i.i, align 4
  br label %if.end.i483.i

if.end.i483.i:                                    ; preds = %if.then26.i.i, %if.then.i481.i
  %117 = load i32* %dx.i.i, align 4
  %idxprom29.i.i = sext i32 %117 to i64
  %118 = load %struct.F90_Desc** %d.addr.i456.i, align 8
  %dim30.i.i = getelementptr inbounds %struct.F90_Desc* %118, i32 0, i32 10
  %arrayidx31.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim30.i.i, i32 0, i64 %idxprom29.i.i
  %extent32.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx31.i.i, i32 0, i32 1
  %119 = load i32* %extent32.i.i, align 4
  %120 = load i32* %gsize.i459.i, align 4
  %mul.i482.i = mul nsw i32 %120, %119
  store i32 %mul.i482.i, i32* %gsize.i459.i, align 4
  %121 = load i32* %dx.i.i, align 4
  %inc.i.i = add nsw i32 %121, 1
  store i32 %inc.i.i, i32* %dx.i.i, align 4
  br label %if.end33.i.i

if.end33.i.i:                                     ; preds = %if.end.i483.i, %for.body.i.i
  %122 = load i32* %ax.i.i, align 4
  %inc34.i.i = add nsw i32 %122, 1
  store i32 %inc34.i.i, i32* %ax.i.i, align 4
  br label %for.cond.i.i

pgf90_bogus_sect.exit.i:                          ; preds = %for.cond.i.i
  %123 = load i32* %gsize.i459.i, align 4
  store i32 %123, i32* %gsize.i, align 4
  br label %pgf90_sect3v.exit

if.else.i:                                        ; preds = %entry
  store i32 0, i32* %ax.i, align 4
  %124 = load i32* %flags.addr.i, align 4
  %and17.i = and i32 %124, 4194304
  %tobool18.i = icmp ne i32 %and17.i, 0
  br i1 %tobool18.i, label %if.then19.i, label %if.else40.i

if.then19.i:                                      ; preds = %if.else.i
  %125 = load %struct.F90_Desc** %d.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %125, i32 0, i32 7
  store i32 1, i32* %lbase.i, align 4
  %126 = load i32* %flags.addr.i, align 4
  %127 = load i32* %ax.i, align 4
  %shl.i = shl i32 1, %127
  %and20.i = and i32 %126, %shl.i
  %tobool21.i = icmp ne i32 %and20.i, 0
  br i1 %tobool21.i, label %if.then22.i, label %if.end.i

if.then22.i:                                      ; preds = %if.then19.i
  %128 = load %struct.F90_Desc** %d.i, align 8
  %129 = load i32* %dx.i, align 4
  %130 = load %struct.F90_Desc** %a.i, align 8
  %131 = load i32* %ax.i, align 4
  %132 = load i32* %lw0.addr.i, align 4
  %133 = load i32* %up0.addr.i, align 4
  %134 = load i32* %st0.addr.i, align 4
  %135 = load i32* %gsize.i, align 4
  %136 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %128, %struct.F90_Desc** %d.addr.i387.i, align 8
  store i32 %129, i32* %dx.addr.i388.i, align 4
  store %struct.F90_Desc* %130, %struct.F90_Desc** %a.addr.i389.i, align 8
  store i32 %131, i32* %ax.addr.i390.i, align 4
  store i32 %132, i32* %lb.addr.i391.i, align 4
  store i32 %133, i32* %ub.addr.i392.i, align 4
  store i32 %134, i32* %st.addr.i393.i, align 4
  store i32 %135, i32* %gsize.addr.i394.i, align 4
  store i32 %136, i32* %flags.addr.i395.i, align 4
  %137 = load i32* %ub.addr.i392.i, align 4
  %138 = load i32* %lb.addr.i391.i, align 4
  %sub.i397.i = sub nsw i32 %137, %138
  %139 = load i32* %st.addr.i393.i, align 4
  %add.i398.i = add nsw i32 %sub.i397.i, %139
  store i32 %add.i398.i, i32* %extent.i396.i, align 4
  %140 = load i32* %st.addr.i393.i, align 4
  %cmp.i399.i = icmp ne i32 %140, 1
  br i1 %cmp.i399.i, label %if.then.i401.i, label %if.end4.i408.i

if.then.i401.i:                                   ; preds = %if.then22.i
  %141 = load i32* %st.addr.i393.i, align 4
  %cmp1.i400.i = icmp eq i32 %141, -1
  br i1 %cmp1.i400.i, label %if.then2.i403.i, label %if.else.i405.i

if.then2.i403.i:                                  ; preds = %if.then.i401.i
  %142 = load i32* %extent.i396.i, align 4
  %sub3.i402.i = sub nsw i32 0, %142
  store i32 %sub3.i402.i, i32* %extent.i396.i, align 4
  br label %if.end.i406.i

if.else.i405.i:                                   ; preds = %if.then.i401.i
  %143 = load i32* %st.addr.i393.i, align 4
  %144 = load i32* %extent.i396.i, align 4
  %div.i404.i = sdiv i32 %144, %143
  store i32 %div.i404.i, i32* %extent.i396.i, align 4
  br label %if.end.i406.i

if.end.i406.i:                                    ; preds = %if.else.i405.i, %if.then2.i403.i
  br label %if.end4.i408.i

if.end4.i408.i:                                   ; preds = %if.end.i406.i, %if.then22.i
  %145 = load i32* %extent.i396.i, align 4
  %cmp5.i407.i = icmp slt i32 %145, 0
  br i1 %cmp5.i407.i, label %if.then6.i409.i, label %if.end7.i450.i

if.then6.i409.i:                                  ; preds = %if.end4.i408.i
  store i32 0, i32* %extent.i396.i, align 4
  br label %if.end7.i450.i

if.end7.i450.i:                                   ; preds = %if.then6.i409.i, %if.end4.i408.i
  %146 = load i32* %dx.addr.i388.i, align 4
  %idxprom.i410.i = sext i32 %146 to i64
  %147 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim.i411.i = getelementptr inbounds %struct.F90_Desc* %147, i32 0, i32 10
  %arrayidx.i412.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i411.i, i32 0, i64 %idxprom.i410.i
  %lbound.i413.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i412.i, i32 0, i32 0
  store i32 1, i32* %lbound.i413.i, align 4
  %148 = load i32* %extent.i396.i, align 4
  %149 = load i32* %dx.addr.i388.i, align 4
  %idxprom8.i414.i = sext i32 %149 to i64
  %150 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim9.i415.i = getelementptr inbounds %struct.F90_Desc* %150, i32 0, i32 10
  %arrayidx10.i416.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i415.i, i32 0, i64 %idxprom8.i414.i
  %ubound.i417.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i416.i, i32 0, i32 5
  store i32 %148, i32* %ubound.i417.i, align 4
  %151 = load i32* %extent.i396.i, align 4
  %152 = load i32* %dx.addr.i388.i, align 4
  %idxprom11.i418.i = sext i32 %152 to i64
  %153 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim12.i419.i = getelementptr inbounds %struct.F90_Desc* %153, i32 0, i32 10
  %arrayidx13.i420.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i419.i, i32 0, i64 %idxprom11.i418.i
  %extent14.i421.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i420.i, i32 0, i32 1
  store i32 %151, i32* %extent14.i421.i, align 4
  %154 = load i32* %dx.addr.i388.i, align 4
  %idxprom15.i422.i = sext i32 %154 to i64
  %155 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim16.i423.i = getelementptr inbounds %struct.F90_Desc* %155, i32 0, i32 10
  %arrayidx17.i424.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i423.i, i32 0, i64 %idxprom15.i422.i
  %sstride.i425.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i424.i, i32 0, i32 2
  store i32 1, i32* %sstride.i425.i, align 4
  %156 = load i32* %dx.addr.i388.i, align 4
  %idxprom18.i426.i = sext i32 %156 to i64
  %157 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim19.i427.i = getelementptr inbounds %struct.F90_Desc* %157, i32 0, i32 10
  %arrayidx20.i428.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i427.i, i32 0, i64 %idxprom18.i426.i
  %soffset.i429.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i428.i, i32 0, i32 3
  store i32 0, i32* %soffset.i429.i, align 4
  %158 = load i32* %ax.addr.i390.i, align 4
  %idxprom21.i430.i = sext i32 %158 to i64
  %159 = load %struct.F90_Desc** %a.addr.i389.i, align 8
  %dim22.i431.i = getelementptr inbounds %struct.F90_Desc* %159, i32 0, i32 10
  %arrayidx23.i432.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i431.i, i32 0, i64 %idxprom21.i430.i
  %lstride.i433.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i432.i, i32 0, i32 4
  %160 = load i32* %lstride.i433.i, align 4
  %161 = load i32* %st.addr.i393.i, align 4
  %mul.i434.i = mul nsw i32 %160, %161
  %162 = load i32* %dx.addr.i388.i, align 4
  %idxprom24.i435.i = sext i32 %162 to i64
  %163 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim25.i436.i = getelementptr inbounds %struct.F90_Desc* %163, i32 0, i32 10
  %arrayidx26.i437.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i436.i, i32 0, i64 %idxprom24.i435.i
  %lstride27.i438.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i437.i, i32 0, i32 4
  store i32 %mul.i434.i, i32* %lstride27.i438.i, align 4
  %164 = load i32* %dx.addr.i388.i, align 4
  %idxprom28.i439.i = sext i32 %164 to i64
  %165 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim29.i440.i = getelementptr inbounds %struct.F90_Desc* %165, i32 0, i32 10
  %arrayidx30.i441.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i440.i, i32 0, i64 %idxprom28.i439.i
  %lstride31.i442.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i441.i, i32 0, i32 4
  %166 = load i32* %lstride31.i442.i, align 4
  %167 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %lbase.i443.i = getelementptr inbounds %struct.F90_Desc* %167, i32 0, i32 7
  %168 = load i32* %lbase.i443.i, align 4
  %sub32.i444.i = sub nsw i32 %168, %166
  store i32 %sub32.i444.i, i32* %lbase.i443.i, align 4
  %169 = load i32* %dx.addr.i388.i, align 4
  %idxprom33.i445.i = sext i32 %169 to i64
  %170 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %dim34.i446.i = getelementptr inbounds %struct.F90_Desc* %170, i32 0, i32 10
  %arrayidx35.i447.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i446.i, i32 0, i64 %idxprom33.i445.i
  %lstride36.i448.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i447.i, i32 0, i32 4
  %171 = load i32* %lstride36.i448.i, align 4
  %172 = load i32* %gsize.addr.i394.i, align 4
  %cmp37.i449.i = icmp ne i32 %171, %172
  br i1 %cmp37.i449.i, label %if.then38.i453.i, label %pgf90_tsection.exit455.i

if.then38.i453.i:                                 ; preds = %if.end7.i450.i
  %173 = load %struct.F90_Desc** %d.addr.i387.i, align 8
  %flags39.i451.i = getelementptr inbounds %struct.F90_Desc* %173, i32 0, i32 4
  %174 = load i32* %flags39.i451.i, align 4
  %and.i452.i = and i32 %174, -536870913
  store i32 %and.i452.i, i32* %flags39.i451.i, align 4
  br label %pgf90_tsection.exit455.i

pgf90_tsection.exit455.i:                         ; preds = %if.then38.i453.i, %if.end7.i450.i
  %175 = load i32* %extent.i396.i, align 4
  %176 = load i32* %gsize.addr.i394.i, align 4
  %mul41.i454.i = mul nsw i32 %176, %175
  store i32 %mul41.i454.i, i32* %gsize.addr.i394.i, align 4
  %177 = load i32* %gsize.addr.i394.i, align 4
  store i32 %177, i32* %gsize.i, align 4
  %178 = load i32* %dx.i, align 4
  %inc.i = add nsw i32 %178, 1
  store i32 %inc.i, i32* %dx.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %pgf90_tsection.exit455.i, %if.then19.i
  %179 = load i32* %ax.i, align 4
  %inc24.i = add nsw i32 %179, 1
  store i32 %inc24.i, i32* %ax.i, align 4
  %180 = load i32* %flags.addr.i, align 4
  %181 = load i32* %ax.i, align 4
  %shl25.i = shl i32 1, %181
  %and26.i = and i32 %180, %shl25.i
  %tobool27.i = icmp ne i32 %and26.i, 0
  br i1 %tobool27.i, label %if.then28.i, label %if.end31.i

if.then28.i:                                      ; preds = %if.end.i
  %182 = load %struct.F90_Desc** %d.i, align 8
  %183 = load i32* %dx.i, align 4
  %184 = load %struct.F90_Desc** %a.i, align 8
  %185 = load i32* %ax.i, align 4
  %186 = load i32* %lw1.addr.i, align 4
  %187 = load i32* %up1.addr.i, align 4
  %188 = load i32* %st1.addr.i, align 4
  %189 = load i32* %gsize.i, align 4
  %190 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %182, %struct.F90_Desc** %d.addr.i318.i, align 8
  store i32 %183, i32* %dx.addr.i319.i, align 4
  store %struct.F90_Desc* %184, %struct.F90_Desc** %a.addr.i320.i, align 8
  store i32 %185, i32* %ax.addr.i321.i, align 4
  store i32 %186, i32* %lb.addr.i322.i, align 4
  store i32 %187, i32* %ub.addr.i323.i, align 4
  store i32 %188, i32* %st.addr.i324.i, align 4
  store i32 %189, i32* %gsize.addr.i325.i, align 4
  store i32 %190, i32* %flags.addr.i326.i, align 4
  %191 = load i32* %ub.addr.i323.i, align 4
  %192 = load i32* %lb.addr.i322.i, align 4
  %sub.i328.i = sub nsw i32 %191, %192
  %193 = load i32* %st.addr.i324.i, align 4
  %add.i329.i = add nsw i32 %sub.i328.i, %193
  store i32 %add.i329.i, i32* %extent.i327.i, align 4
  %194 = load i32* %st.addr.i324.i, align 4
  %cmp.i330.i = icmp ne i32 %194, 1
  br i1 %cmp.i330.i, label %if.then.i332.i, label %if.end4.i339.i

if.then.i332.i:                                   ; preds = %if.then28.i
  %195 = load i32* %st.addr.i324.i, align 4
  %cmp1.i331.i = icmp eq i32 %195, -1
  br i1 %cmp1.i331.i, label %if.then2.i334.i, label %if.else.i336.i

if.then2.i334.i:                                  ; preds = %if.then.i332.i
  %196 = load i32* %extent.i327.i, align 4
  %sub3.i333.i = sub nsw i32 0, %196
  store i32 %sub3.i333.i, i32* %extent.i327.i, align 4
  br label %if.end.i337.i

if.else.i336.i:                                   ; preds = %if.then.i332.i
  %197 = load i32* %st.addr.i324.i, align 4
  %198 = load i32* %extent.i327.i, align 4
  %div.i335.i = sdiv i32 %198, %197
  store i32 %div.i335.i, i32* %extent.i327.i, align 4
  br label %if.end.i337.i

if.end.i337.i:                                    ; preds = %if.else.i336.i, %if.then2.i334.i
  br label %if.end4.i339.i

if.end4.i339.i:                                   ; preds = %if.end.i337.i, %if.then28.i
  %199 = load i32* %extent.i327.i, align 4
  %cmp5.i338.i = icmp slt i32 %199, 0
  br i1 %cmp5.i338.i, label %if.then6.i340.i, label %if.end7.i381.i

if.then6.i340.i:                                  ; preds = %if.end4.i339.i
  store i32 0, i32* %extent.i327.i, align 4
  br label %if.end7.i381.i

if.end7.i381.i:                                   ; preds = %if.then6.i340.i, %if.end4.i339.i
  %200 = load i32* %dx.addr.i319.i, align 4
  %idxprom.i341.i = sext i32 %200 to i64
  %201 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim.i342.i = getelementptr inbounds %struct.F90_Desc* %201, i32 0, i32 10
  %arrayidx.i343.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i342.i, i32 0, i64 %idxprom.i341.i
  %lbound.i344.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i343.i, i32 0, i32 0
  store i32 1, i32* %lbound.i344.i, align 4
  %202 = load i32* %extent.i327.i, align 4
  %203 = load i32* %dx.addr.i319.i, align 4
  %idxprom8.i345.i = sext i32 %203 to i64
  %204 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim9.i346.i = getelementptr inbounds %struct.F90_Desc* %204, i32 0, i32 10
  %arrayidx10.i347.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i346.i, i32 0, i64 %idxprom8.i345.i
  %ubound.i348.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i347.i, i32 0, i32 5
  store i32 %202, i32* %ubound.i348.i, align 4
  %205 = load i32* %extent.i327.i, align 4
  %206 = load i32* %dx.addr.i319.i, align 4
  %idxprom11.i349.i = sext i32 %206 to i64
  %207 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim12.i350.i = getelementptr inbounds %struct.F90_Desc* %207, i32 0, i32 10
  %arrayidx13.i351.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i350.i, i32 0, i64 %idxprom11.i349.i
  %extent14.i352.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i351.i, i32 0, i32 1
  store i32 %205, i32* %extent14.i352.i, align 4
  %208 = load i32* %dx.addr.i319.i, align 4
  %idxprom15.i353.i = sext i32 %208 to i64
  %209 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim16.i354.i = getelementptr inbounds %struct.F90_Desc* %209, i32 0, i32 10
  %arrayidx17.i355.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i354.i, i32 0, i64 %idxprom15.i353.i
  %sstride.i356.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i355.i, i32 0, i32 2
  store i32 1, i32* %sstride.i356.i, align 4
  %210 = load i32* %dx.addr.i319.i, align 4
  %idxprom18.i357.i = sext i32 %210 to i64
  %211 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim19.i358.i = getelementptr inbounds %struct.F90_Desc* %211, i32 0, i32 10
  %arrayidx20.i359.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i358.i, i32 0, i64 %idxprom18.i357.i
  %soffset.i360.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i359.i, i32 0, i32 3
  store i32 0, i32* %soffset.i360.i, align 4
  %212 = load i32* %ax.addr.i321.i, align 4
  %idxprom21.i361.i = sext i32 %212 to i64
  %213 = load %struct.F90_Desc** %a.addr.i320.i, align 8
  %dim22.i362.i = getelementptr inbounds %struct.F90_Desc* %213, i32 0, i32 10
  %arrayidx23.i363.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i362.i, i32 0, i64 %idxprom21.i361.i
  %lstride.i364.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i363.i, i32 0, i32 4
  %214 = load i32* %lstride.i364.i, align 4
  %215 = load i32* %st.addr.i324.i, align 4
  %mul.i365.i = mul nsw i32 %214, %215
  %216 = load i32* %dx.addr.i319.i, align 4
  %idxprom24.i366.i = sext i32 %216 to i64
  %217 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim25.i367.i = getelementptr inbounds %struct.F90_Desc* %217, i32 0, i32 10
  %arrayidx26.i368.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i367.i, i32 0, i64 %idxprom24.i366.i
  %lstride27.i369.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i368.i, i32 0, i32 4
  store i32 %mul.i365.i, i32* %lstride27.i369.i, align 4
  %218 = load i32* %dx.addr.i319.i, align 4
  %idxprom28.i370.i = sext i32 %218 to i64
  %219 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim29.i371.i = getelementptr inbounds %struct.F90_Desc* %219, i32 0, i32 10
  %arrayidx30.i372.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i371.i, i32 0, i64 %idxprom28.i370.i
  %lstride31.i373.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i372.i, i32 0, i32 4
  %220 = load i32* %lstride31.i373.i, align 4
  %221 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %lbase.i374.i = getelementptr inbounds %struct.F90_Desc* %221, i32 0, i32 7
  %222 = load i32* %lbase.i374.i, align 4
  %sub32.i375.i = sub nsw i32 %222, %220
  store i32 %sub32.i375.i, i32* %lbase.i374.i, align 4
  %223 = load i32* %dx.addr.i319.i, align 4
  %idxprom33.i376.i = sext i32 %223 to i64
  %224 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %dim34.i377.i = getelementptr inbounds %struct.F90_Desc* %224, i32 0, i32 10
  %arrayidx35.i378.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i377.i, i32 0, i64 %idxprom33.i376.i
  %lstride36.i379.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i378.i, i32 0, i32 4
  %225 = load i32* %lstride36.i379.i, align 4
  %226 = load i32* %gsize.addr.i325.i, align 4
  %cmp37.i380.i = icmp ne i32 %225, %226
  br i1 %cmp37.i380.i, label %if.then38.i384.i, label %pgf90_tsection.exit386.i

if.then38.i384.i:                                 ; preds = %if.end7.i381.i
  %227 = load %struct.F90_Desc** %d.addr.i318.i, align 8
  %flags39.i382.i = getelementptr inbounds %struct.F90_Desc* %227, i32 0, i32 4
  %228 = load i32* %flags39.i382.i, align 4
  %and.i383.i = and i32 %228, -536870913
  store i32 %and.i383.i, i32* %flags39.i382.i, align 4
  br label %pgf90_tsection.exit386.i

pgf90_tsection.exit386.i:                         ; preds = %if.then38.i384.i, %if.end7.i381.i
  %229 = load i32* %extent.i327.i, align 4
  %230 = load i32* %gsize.addr.i325.i, align 4
  %mul41.i385.i = mul nsw i32 %230, %229
  store i32 %mul41.i385.i, i32* %gsize.addr.i325.i, align 4
  %231 = load i32* %gsize.addr.i325.i, align 4
  store i32 %231, i32* %gsize.i, align 4
  %232 = load i32* %dx.i, align 4
  %inc30.i = add nsw i32 %232, 1
  store i32 %inc30.i, i32* %dx.i, align 4
  br label %if.end31.i

if.end31.i:                                       ; preds = %pgf90_tsection.exit386.i, %if.end.i
  %233 = load i32* %ax.i, align 4
  %inc32.i = add nsw i32 %233, 1
  store i32 %inc32.i, i32* %ax.i, align 4
  %234 = load i32* %flags.addr.i, align 4
  %235 = load i32* %ax.i, align 4
  %shl33.i = shl i32 1, %235
  %and34.i = and i32 %234, %shl33.i
  %tobool35.i = icmp ne i32 %and34.i, 0
  br i1 %tobool35.i, label %if.then36.i, label %if.end39.i

if.then36.i:                                      ; preds = %if.end31.i
  %236 = load %struct.F90_Desc** %d.i, align 8
  %237 = load i32* %dx.i, align 4
  %238 = load %struct.F90_Desc** %a.i, align 8
  %239 = load i32* %ax.i, align 4
  %240 = load i32* %lw2.addr.i, align 4
  %241 = load i32* %up2.addr.i, align 4
  %242 = load i32* %st2.addr.i, align 4
  %243 = load i32* %gsize.i, align 4
  %244 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %236, %struct.F90_Desc** %d.addr.i274.i, align 8
  store i32 %237, i32* %dx.addr.i275.i, align 4
  store %struct.F90_Desc* %238, %struct.F90_Desc** %a.addr.i276.i, align 8
  store i32 %239, i32* %ax.addr.i277.i, align 4
  store i32 %240, i32* %lb.addr.i278.i, align 4
  store i32 %241, i32* %ub.addr.i279.i, align 4
  store i32 %242, i32* %st.addr.i280.i, align 4
  store i32 %243, i32* %gsize.addr.i281.i, align 4
  store i32 %244, i32* %flags.addr.i282.i, align 4
  %245 = load i32* %ub.addr.i279.i, align 4
  %246 = load i32* %lb.addr.i278.i, align 4
  %sub.i284.i = sub nsw i32 %245, %246
  %247 = load i32* %st.addr.i280.i, align 4
  %add.i285.i = add nsw i32 %sub.i284.i, %247
  store i32 %add.i285.i, i32* %extent.i283.i, align 4
  %248 = load i32* %st.addr.i280.i, align 4
  %cmp.i286.i = icmp ne i32 %248, 1
  br i1 %cmp.i286.i, label %if.then.i288.i, label %if.end4.i295.i

if.then.i288.i:                                   ; preds = %if.then36.i
  %249 = load i32* %st.addr.i280.i, align 4
  %cmp1.i287.i = icmp eq i32 %249, -1
  br i1 %cmp1.i287.i, label %if.then2.i290.i, label %if.else.i292.i

if.then2.i290.i:                                  ; preds = %if.then.i288.i
  %250 = load i32* %extent.i283.i, align 4
  %sub3.i289.i = sub nsw i32 0, %250
  store i32 %sub3.i289.i, i32* %extent.i283.i, align 4
  br label %if.end.i293.i

if.else.i292.i:                                   ; preds = %if.then.i288.i
  %251 = load i32* %st.addr.i280.i, align 4
  %252 = load i32* %extent.i283.i, align 4
  %div.i291.i = sdiv i32 %252, %251
  store i32 %div.i291.i, i32* %extent.i283.i, align 4
  br label %if.end.i293.i

if.end.i293.i:                                    ; preds = %if.else.i292.i, %if.then2.i290.i
  br label %if.end4.i295.i

if.end4.i295.i:                                   ; preds = %if.end.i293.i, %if.then36.i
  %253 = load i32* %extent.i283.i, align 4
  %cmp5.i294.i = icmp slt i32 %253, 0
  br i1 %cmp5.i294.i, label %if.then6.i296.i, label %if.end7.i316.i

if.then6.i296.i:                                  ; preds = %if.end4.i295.i
  store i32 0, i32* %extent.i283.i, align 4
  br label %if.end7.i316.i

if.end7.i316.i:                                   ; preds = %if.then6.i296.i, %if.end4.i295.i
  %254 = load i32* %dx.addr.i275.i, align 4
  %idxprom.i297.i = sext i32 %254 to i64
  %255 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim.i298.i = getelementptr inbounds %struct.F90_Desc* %255, i32 0, i32 10
  %arrayidx.i299.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i298.i, i32 0, i64 %idxprom.i297.i
  %lbound.i300.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i299.i, i32 0, i32 0
  store i32 1, i32* %lbound.i300.i, align 4
  %256 = load i32* %extent.i283.i, align 4
  %257 = load i32* %dx.addr.i275.i, align 4
  %idxprom8.i.i = sext i32 %257 to i64
  %258 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim9.i.i = getelementptr inbounds %struct.F90_Desc* %258, i32 0, i32 10
  %arrayidx10.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim9.i.i, i32 0, i64 %idxprom8.i.i
  %ubound.i301.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx10.i.i, i32 0, i32 5
  store i32 %256, i32* %ubound.i301.i, align 4
  %259 = load i32* %extent.i283.i, align 4
  %260 = load i32* %dx.addr.i275.i, align 4
  %idxprom11.i.i = sext i32 %260 to i64
  %261 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim12.i.i = getelementptr inbounds %struct.F90_Desc* %261, i32 0, i32 10
  %arrayidx13.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim12.i.i, i32 0, i64 %idxprom11.i.i
  %extent14.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx13.i.i, i32 0, i32 1
  store i32 %259, i32* %extent14.i.i, align 4
  %262 = load i32* %dx.addr.i275.i, align 4
  %idxprom15.i302.i = sext i32 %262 to i64
  %263 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim16.i303.i = getelementptr inbounds %struct.F90_Desc* %263, i32 0, i32 10
  %arrayidx17.i304.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i303.i, i32 0, i64 %idxprom15.i302.i
  %sstride.i305.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i304.i, i32 0, i32 2
  store i32 1, i32* %sstride.i305.i, align 4
  %264 = load i32* %dx.addr.i275.i, align 4
  %idxprom18.i.i = sext i32 %264 to i64
  %265 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim19.i.i = getelementptr inbounds %struct.F90_Desc* %265, i32 0, i32 10
  %arrayidx20.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim19.i.i, i32 0, i64 %idxprom18.i.i
  %soffset.i306.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx20.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i306.i, align 4
  %266 = load i32* %ax.addr.i277.i, align 4
  %idxprom21.i.i = sext i32 %266 to i64
  %267 = load %struct.F90_Desc** %a.addr.i276.i, align 8
  %dim22.i.i = getelementptr inbounds %struct.F90_Desc* %267, i32 0, i32 10
  %arrayidx23.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim22.i.i, i32 0, i64 %idxprom21.i.i
  %lstride.i307.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx23.i.i, i32 0, i32 4
  %268 = load i32* %lstride.i307.i, align 4
  %269 = load i32* %st.addr.i280.i, align 4
  %mul.i308.i = mul nsw i32 %268, %269
  %270 = load i32* %dx.addr.i275.i, align 4
  %idxprom24.i309.i = sext i32 %270 to i64
  %271 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim25.i310.i = getelementptr inbounds %struct.F90_Desc* %271, i32 0, i32 10
  %arrayidx26.i311.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i310.i, i32 0, i64 %idxprom24.i309.i
  %lstride27.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i311.i, i32 0, i32 4
  store i32 %mul.i308.i, i32* %lstride27.i.i, align 4
  %272 = load i32* %dx.addr.i275.i, align 4
  %idxprom28.i312.i = sext i32 %272 to i64
  %273 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim29.i313.i = getelementptr inbounds %struct.F90_Desc* %273, i32 0, i32 10
  %arrayidx30.i314.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i313.i, i32 0, i64 %idxprom28.i312.i
  %lstride31.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i314.i, i32 0, i32 4
  %274 = load i32* %lstride31.i.i, align 4
  %275 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %lbase.i315.i = getelementptr inbounds %struct.F90_Desc* %275, i32 0, i32 7
  %276 = load i32* %lbase.i315.i, align 4
  %sub32.i.i = sub nsw i32 %276, %274
  store i32 %sub32.i.i, i32* %lbase.i315.i, align 4
  %277 = load i32* %dx.addr.i275.i, align 4
  %idxprom33.i.i = sext i32 %277 to i64
  %278 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %dim34.i.i = getelementptr inbounds %struct.F90_Desc* %278, i32 0, i32 10
  %arrayidx35.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim34.i.i, i32 0, i64 %idxprom33.i.i
  %lstride36.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx35.i.i, i32 0, i32 4
  %279 = load i32* %lstride36.i.i, align 4
  %280 = load i32* %gsize.addr.i281.i, align 4
  %cmp37.i.i = icmp ne i32 %279, %280
  br i1 %cmp37.i.i, label %if.then38.i.i, label %pgf90_tsection.exit.i

if.then38.i.i:                                    ; preds = %if.end7.i316.i
  %281 = load %struct.F90_Desc** %d.addr.i274.i, align 8
  %flags39.i.i = getelementptr inbounds %struct.F90_Desc* %281, i32 0, i32 4
  %282 = load i32* %flags39.i.i, align 4
  %and.i317.i = and i32 %282, -536870913
  store i32 %and.i317.i, i32* %flags39.i.i, align 4
  br label %pgf90_tsection.exit.i

pgf90_tsection.exit.i:                            ; preds = %if.then38.i.i, %if.end7.i316.i
  %283 = load i32* %extent.i283.i, align 4
  %284 = load i32* %gsize.addr.i281.i, align 4
  %mul41.i.i = mul nsw i32 %284, %283
  store i32 %mul41.i.i, i32* %gsize.addr.i281.i, align 4
  %285 = load i32* %gsize.addr.i281.i, align 4
  store i32 %285, i32* %gsize.i, align 4
  %286 = load i32* %dx.i, align 4
  %inc38.i = add nsw i32 %286, 1
  store i32 %inc38.i, i32* %dx.i, align 4
  br label %if.end39.i

if.end39.i:                                       ; preds = %pgf90_tsection.exit.i, %if.end31.i
  br label %if.end64.i

if.else40.i:                                      ; preds = %if.else.i
  %287 = load i32* %flags.addr.i, align 4
  %288 = load i32* %ax.i, align 4
  %shl41.i = shl i32 1, %288
  %and42.i = and i32 %287, %shl41.i
  %tobool43.i = icmp ne i32 %and42.i, 0
  br i1 %tobool43.i, label %if.then44.i, label %if.end47.i

if.then44.i:                                      ; preds = %if.else40.i
  %289 = load %struct.F90_Desc** %d.i, align 8
  %290 = load %struct.F90_Desc** %a.i, align 8
  %291 = load i32* %lw0.addr.i, align 4
  %292 = load i32* %up0.addr.i, align 4
  %293 = load i32* %st0.addr.i, align 4
  %294 = load i32* %gsize.i, align 4
  %295 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %289, %struct.F90_Desc** %d.addr.i172.i, align 8
  store i32 0, i32* %dx.addr.i173.i, align 4
  store %struct.F90_Desc* %290, %struct.F90_Desc** %a.addr.i174.i, align 8
  store i32 0, i32* %ax.addr.i175.i, align 4
  store i32 %291, i32* %lb.addr.i176.i, align 4
  store i32 %292, i32* %ub.addr.i177.i, align 4
  store i32 %293, i32* %st.addr.i178.i, align 4
  store i32 %294, i32* %gsize.addr.i179.i, align 4
  store i32 %295, i32* %flags.addr.i180.i, align 4
  %296 = load i32* %ub.addr.i177.i, align 4
  %297 = load i32* %lb.addr.i176.i, align 4
  %sub.i184.i = sub nsw i32 %296, %297
  %298 = load i32* %st.addr.i178.i, align 4
  %add.i185.i = add nsw i32 %sub.i184.i, %298
  store i32 %add.i185.i, i32* %extent.i181.i, align 4
  %299 = load i32* %flags.addr.i180.i, align 4
  %and.i186.i = and i32 %299, 33554432
  store i32 %and.i186.i, i32* %noreindex.i182.i, align 4
  %300 = load i32* %st.addr.i178.i, align 4
  %cmp.i187.i = icmp ne i32 %300, 1
  br i1 %cmp.i187.i, label %if.then.i189.i, label %if.end4.i196.i

if.then.i189.i:                                   ; preds = %if.then44.i
  %301 = load i32* %st.addr.i178.i, align 4
  %cmp1.i188.i = icmp eq i32 %301, -1
  br i1 %cmp1.i188.i, label %if.then2.i191.i, label %if.else.i193.i

if.then2.i191.i:                                  ; preds = %if.then.i189.i
  %302 = load i32* %extent.i181.i, align 4
  %sub3.i190.i = sub nsw i32 0, %302
  store i32 %sub3.i190.i, i32* %extent.i181.i, align 4
  br label %if.end.i194.i

if.else.i193.i:                                   ; preds = %if.then.i189.i
  %303 = load i32* %st.addr.i178.i, align 4
  %304 = load i32* %extent.i181.i, align 4
  %div.i192.i = sdiv i32 %304, %303
  store i32 %div.i192.i, i32* %extent.i181.i, align 4
  br label %if.end.i194.i

if.end.i194.i:                                    ; preds = %if.else.i193.i, %if.then2.i191.i
  br label %if.end4.i196.i

if.end4.i196.i:                                   ; preds = %if.end.i194.i, %if.then44.i
  %305 = load i32* %extent.i181.i, align 4
  %cmp5.i195.i = icmp slt i32 %305, 0
  br i1 %cmp5.i195.i, label %if.then6.i197.i, label %if.end7.i199.i

if.then6.i197.i:                                  ; preds = %if.end4.i196.i
  store i32 0, i32* %extent.i181.i, align 4
  br label %if.end7.i199.i

if.end7.i199.i:                                   ; preds = %if.then6.i197.i, %if.end4.i196.i
  %306 = load i32* %noreindex.i182.i, align 4
  %tobool.i198.i = icmp ne i32 %306, 0
  br i1 %tobool.i198.i, label %land.lhs.true.i201.i, label %if.else23.i238.i

land.lhs.true.i201.i:                             ; preds = %if.end7.i199.i
  %307 = load i32* %st.addr.i178.i, align 4
  %cmp8.i200.i = icmp eq i32 %307, 1
  br i1 %cmp8.i200.i, label %if.then9.i207.i, label %if.else23.i238.i

if.then9.i207.i:                                  ; preds = %land.lhs.true.i201.i
  %308 = load i32* %dx.addr.i173.i, align 4
  %idxprom.i202.i = sext i32 %308 to i64
  %309 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim.i203.i = getelementptr inbounds %struct.F90_Desc* %309, i32 0, i32 10
  %arrayidx.i204.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i203.i, i32 0, i64 %idxprom.i202.i
  %lbound.i205.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i204.i, i32 0, i32 0
  store i32 1, i32* %lbound.i205.i, align 4
  %310 = load i32* %extent.i181.i, align 4
  %cmp10.i206.i = icmp eq i32 %310, 0
  br i1 %cmp10.i206.i, label %cond.true.i209.i, label %cond.false.i210.i

cond.true.i209.i:                                 ; preds = %if.then9.i207.i
  %311 = load i32* %lb.addr.i176.i, align 4
  %sub11.i208.i = sub nsw i32 %311, 1
  br label %cond.end.i224.i

cond.false.i210.i:                                ; preds = %if.then9.i207.i
  %312 = load i32* %ub.addr.i177.i, align 4
  br label %cond.end.i224.i

cond.end.i224.i:                                  ; preds = %cond.false.i210.i, %cond.true.i209.i
  %cond.i211.i = phi i32 [ %sub11.i208.i, %cond.true.i209.i ], [ %312, %cond.false.i210.i ]
  %313 = load i32* %dx.addr.i173.i, align 4
  %idxprom12.i212.i = sext i32 %313 to i64
  %314 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim13.i213.i = getelementptr inbounds %struct.F90_Desc* %314, i32 0, i32 10
  %arrayidx14.i214.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i213.i, i32 0, i64 %idxprom12.i212.i
  %ubound.i215.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i214.i, i32 0, i32 5
  store i32 %cond.i211.i, i32* %ubound.i215.i, align 4
  %315 = load i32* %dx.addr.i173.i, align 4
  %idxprom15.i216.i = sext i32 %315 to i64
  %316 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim16.i217.i = getelementptr inbounds %struct.F90_Desc* %316, i32 0, i32 10
  %arrayidx17.i218.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i217.i, i32 0, i64 %idxprom15.i216.i
  %ubound18.i219.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i218.i, i32 0, i32 5
  %317 = load i32* %ubound18.i219.i, align 4
  %318 = load i32* %dx.addr.i173.i, align 4
  %idxprom19.i220.i = sext i32 %318 to i64
  %319 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim20.i221.i = getelementptr inbounds %struct.F90_Desc* %319, i32 0, i32 10
  %arrayidx21.i222.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i221.i, i32 0, i64 %idxprom19.i220.i
  %extent22.i223.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i222.i, i32 0, i32 1
  store i32 %317, i32* %extent22.i223.i, align 4
  store i32 0, i32* %myoffset.i183.i, align 4
  br label %if.end37.i268.i

if.else23.i238.i:                                 ; preds = %land.lhs.true.i201.i, %if.end7.i199.i
  %320 = load i32* %dx.addr.i173.i, align 4
  %idxprom24.i225.i = sext i32 %320 to i64
  %321 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim25.i226.i = getelementptr inbounds %struct.F90_Desc* %321, i32 0, i32 10
  %arrayidx26.i227.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i226.i, i32 0, i64 %idxprom24.i225.i
  %lbound27.i228.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i227.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i228.i, align 4
  %322 = load i32* %extent.i181.i, align 4
  %323 = load i32* %dx.addr.i173.i, align 4
  %idxprom28.i229.i = sext i32 %323 to i64
  %324 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim29.i230.i = getelementptr inbounds %struct.F90_Desc* %324, i32 0, i32 10
  %arrayidx30.i231.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i230.i, i32 0, i64 %idxprom28.i229.i
  %ubound31.i232.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i231.i, i32 0, i32 5
  store i32 %322, i32* %ubound31.i232.i, align 4
  %325 = load i32* %extent.i181.i, align 4
  %326 = load i32* %dx.addr.i173.i, align 4
  %idxprom32.i233.i = sext i32 %326 to i64
  %327 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim33.i234.i = getelementptr inbounds %struct.F90_Desc* %327, i32 0, i32 10
  %arrayidx34.i235.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i234.i, i32 0, i64 %idxprom32.i233.i
  %extent35.i236.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i235.i, i32 0, i32 1
  store i32 %325, i32* %extent35.i236.i, align 4
  %328 = load i32* %lb.addr.i176.i, align 4
  %329 = load i32* %st.addr.i178.i, align 4
  %sub36.i237.i = sub nsw i32 %328, %329
  store i32 %sub36.i237.i, i32* %myoffset.i183.i, align 4
  br label %if.end37.i268.i

if.end37.i268.i:                                  ; preds = %if.else23.i238.i, %cond.end.i224.i
  %330 = load i32* %dx.addr.i173.i, align 4
  %idxprom38.i239.i = sext i32 %330 to i64
  %331 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim39.i240.i = getelementptr inbounds %struct.F90_Desc* %331, i32 0, i32 10
  %arrayidx40.i241.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i240.i, i32 0, i64 %idxprom38.i239.i
  %sstride.i242.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i241.i, i32 0, i32 2
  store i32 1, i32* %sstride.i242.i, align 4
  %332 = load i32* %dx.addr.i173.i, align 4
  %idxprom41.i243.i = sext i32 %332 to i64
  %333 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim42.i244.i = getelementptr inbounds %struct.F90_Desc* %333, i32 0, i32 10
  %arrayidx43.i245.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i244.i, i32 0, i64 %idxprom41.i243.i
  %soffset.i246.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i245.i, i32 0, i32 3
  store i32 0, i32* %soffset.i246.i, align 4
  %334 = load i32* %ax.addr.i175.i, align 4
  %idxprom44.i247.i = sext i32 %334 to i64
  %335 = load %struct.F90_Desc** %a.addr.i174.i, align 8
  %dim45.i248.i = getelementptr inbounds %struct.F90_Desc* %335, i32 0, i32 10
  %arrayidx46.i249.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i248.i, i32 0, i64 %idxprom44.i247.i
  %lstride.i250.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i249.i, i32 0, i32 4
  %336 = load i32* %lstride.i250.i, align 4
  %337 = load i32* %st.addr.i178.i, align 4
  %mul.i251.i = mul nsw i32 %336, %337
  %338 = load i32* %dx.addr.i173.i, align 4
  %idxprom47.i252.i = sext i32 %338 to i64
  %339 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim48.i253.i = getelementptr inbounds %struct.F90_Desc* %339, i32 0, i32 10
  %arrayidx49.i254.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i253.i, i32 0, i64 %idxprom47.i252.i
  %lstride50.i255.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i254.i, i32 0, i32 4
  store i32 %mul.i251.i, i32* %lstride50.i255.i, align 4
  %340 = load i32* %myoffset.i183.i, align 4
  %341 = load i32* %dx.addr.i173.i, align 4
  %idxprom51.i256.i = sext i32 %341 to i64
  %342 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim52.i257.i = getelementptr inbounds %struct.F90_Desc* %342, i32 0, i32 10
  %arrayidx53.i258.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i257.i, i32 0, i64 %idxprom51.i256.i
  %lstride54.i259.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i258.i, i32 0, i32 4
  %343 = load i32* %lstride54.i259.i, align 4
  %mul55.i260.i = mul nsw i32 %340, %343
  %344 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %lbase.i261.i = getelementptr inbounds %struct.F90_Desc* %344, i32 0, i32 7
  %345 = load i32* %lbase.i261.i, align 4
  %add56.i262.i = add nsw i32 %345, %mul55.i260.i
  store i32 %add56.i262.i, i32* %lbase.i261.i, align 4
  %346 = load i32* %dx.addr.i173.i, align 4
  %idxprom57.i263.i = sext i32 %346 to i64
  %347 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %dim58.i264.i = getelementptr inbounds %struct.F90_Desc* %347, i32 0, i32 10
  %arrayidx59.i265.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i264.i, i32 0, i64 %idxprom57.i263.i
  %lstride60.i266.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i265.i, i32 0, i32 4
  %348 = load i32* %lstride60.i266.i, align 4
  %349 = load i32* %gsize.addr.i179.i, align 4
  %cmp61.i267.i = icmp ne i32 %348, %349
  br i1 %cmp61.i267.i, label %if.then62.i271.i, label %pgf90_asection.exit273.i

if.then62.i271.i:                                 ; preds = %if.end37.i268.i
  %350 = load %struct.F90_Desc** %d.addr.i172.i, align 8
  %flags63.i269.i = getelementptr inbounds %struct.F90_Desc* %350, i32 0, i32 4
  %351 = load i32* %flags63.i269.i, align 4
  %and64.i270.i = and i32 %351, -536870913
  store i32 %and64.i270.i, i32* %flags63.i269.i, align 4
  br label %pgf90_asection.exit273.i

pgf90_asection.exit273.i:                         ; preds = %if.then62.i271.i, %if.end37.i268.i
  %352 = load i32* %extent.i181.i, align 4
  %353 = load i32* %gsize.addr.i179.i, align 4
  %mul66.i272.i = mul nsw i32 %353, %352
  store i32 %mul66.i272.i, i32* %gsize.addr.i179.i, align 4
  %354 = load i32* %gsize.addr.i179.i, align 4
  store i32 %354, i32* %gsize.i, align 4
  %355 = load i32* %dx.i, align 4
  %inc46.i = add nsw i32 %355, 1
  store i32 %inc46.i, i32* %dx.i, align 4
  br label %if.end47.i

if.end47.i:                                       ; preds = %pgf90_asection.exit273.i, %if.else40.i
  %356 = load i32* %ax.i, align 4
  %inc48.i = add nsw i32 %356, 1
  store i32 %inc48.i, i32* %ax.i, align 4
  %357 = load i32* %flags.addr.i, align 4
  %358 = load i32* %ax.i, align 4
  %shl49.i = shl i32 1, %358
  %and50.i = and i32 %357, %shl49.i
  %tobool51.i = icmp ne i32 %and50.i, 0
  br i1 %tobool51.i, label %if.then52.i, label %if.end55.i

if.then52.i:                                      ; preds = %if.end47.i
  %359 = load %struct.F90_Desc** %d.i, align 8
  %360 = load i32* %dx.i, align 4
  %361 = load %struct.F90_Desc** %a.i, align 8
  %362 = load i32* %ax.i, align 4
  %363 = load i32* %lw1.addr.i, align 4
  %364 = load i32* %up1.addr.i, align 4
  %365 = load i32* %st1.addr.i, align 4
  %366 = load i32* %gsize.i, align 4
  %367 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %359, %struct.F90_Desc** %d.addr.i70.i, align 8
  store i32 %360, i32* %dx.addr.i71.i, align 4
  store %struct.F90_Desc* %361, %struct.F90_Desc** %a.addr.i72.i, align 8
  store i32 %362, i32* %ax.addr.i73.i, align 4
  store i32 %363, i32* %lb.addr.i74.i, align 4
  store i32 %364, i32* %ub.addr.i75.i, align 4
  store i32 %365, i32* %st.addr.i76.i, align 4
  store i32 %366, i32* %gsize.addr.i77.i, align 4
  store i32 %367, i32* %flags.addr.i78.i, align 4
  %368 = load i32* %ub.addr.i75.i, align 4
  %369 = load i32* %lb.addr.i74.i, align 4
  %sub.i82.i = sub nsw i32 %368, %369
  %370 = load i32* %st.addr.i76.i, align 4
  %add.i83.i = add nsw i32 %sub.i82.i, %370
  store i32 %add.i83.i, i32* %extent.i79.i, align 4
  %371 = load i32* %flags.addr.i78.i, align 4
  %and.i84.i = and i32 %371, 33554432
  store i32 %and.i84.i, i32* %noreindex.i80.i, align 4
  %372 = load i32* %st.addr.i76.i, align 4
  %cmp.i85.i = icmp ne i32 %372, 1
  br i1 %cmp.i85.i, label %if.then.i87.i, label %if.end4.i94.i

if.then.i87.i:                                    ; preds = %if.then52.i
  %373 = load i32* %st.addr.i76.i, align 4
  %cmp1.i86.i = icmp eq i32 %373, -1
  br i1 %cmp1.i86.i, label %if.then2.i89.i, label %if.else.i91.i

if.then2.i89.i:                                   ; preds = %if.then.i87.i
  %374 = load i32* %extent.i79.i, align 4
  %sub3.i88.i = sub nsw i32 0, %374
  store i32 %sub3.i88.i, i32* %extent.i79.i, align 4
  br label %if.end.i92.i

if.else.i91.i:                                    ; preds = %if.then.i87.i
  %375 = load i32* %st.addr.i76.i, align 4
  %376 = load i32* %extent.i79.i, align 4
  %div.i90.i = sdiv i32 %376, %375
  store i32 %div.i90.i, i32* %extent.i79.i, align 4
  br label %if.end.i92.i

if.end.i92.i:                                     ; preds = %if.else.i91.i, %if.then2.i89.i
  br label %if.end4.i94.i

if.end4.i94.i:                                    ; preds = %if.end.i92.i, %if.then52.i
  %377 = load i32* %extent.i79.i, align 4
  %cmp5.i93.i = icmp slt i32 %377, 0
  br i1 %cmp5.i93.i, label %if.then6.i95.i, label %if.end7.i97.i

if.then6.i95.i:                                   ; preds = %if.end4.i94.i
  store i32 0, i32* %extent.i79.i, align 4
  br label %if.end7.i97.i

if.end7.i97.i:                                    ; preds = %if.then6.i95.i, %if.end4.i94.i
  %378 = load i32* %noreindex.i80.i, align 4
  %tobool.i96.i = icmp ne i32 %378, 0
  br i1 %tobool.i96.i, label %land.lhs.true.i99.i, label %if.else23.i136.i

land.lhs.true.i99.i:                              ; preds = %if.end7.i97.i
  %379 = load i32* %st.addr.i76.i, align 4
  %cmp8.i98.i = icmp eq i32 %379, 1
  br i1 %cmp8.i98.i, label %if.then9.i105.i, label %if.else23.i136.i

if.then9.i105.i:                                  ; preds = %land.lhs.true.i99.i
  %380 = load i32* %dx.addr.i71.i, align 4
  %idxprom.i100.i = sext i32 %380 to i64
  %381 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim.i101.i = getelementptr inbounds %struct.F90_Desc* %381, i32 0, i32 10
  %arrayidx.i102.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i101.i, i32 0, i64 %idxprom.i100.i
  %lbound.i103.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i102.i, i32 0, i32 0
  store i32 1, i32* %lbound.i103.i, align 4
  %382 = load i32* %extent.i79.i, align 4
  %cmp10.i104.i = icmp eq i32 %382, 0
  br i1 %cmp10.i104.i, label %cond.true.i107.i, label %cond.false.i108.i

cond.true.i107.i:                                 ; preds = %if.then9.i105.i
  %383 = load i32* %lb.addr.i74.i, align 4
  %sub11.i106.i = sub nsw i32 %383, 1
  br label %cond.end.i122.i

cond.false.i108.i:                                ; preds = %if.then9.i105.i
  %384 = load i32* %ub.addr.i75.i, align 4
  br label %cond.end.i122.i

cond.end.i122.i:                                  ; preds = %cond.false.i108.i, %cond.true.i107.i
  %cond.i109.i = phi i32 [ %sub11.i106.i, %cond.true.i107.i ], [ %384, %cond.false.i108.i ]
  %385 = load i32* %dx.addr.i71.i, align 4
  %idxprom12.i110.i = sext i32 %385 to i64
  %386 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim13.i111.i = getelementptr inbounds %struct.F90_Desc* %386, i32 0, i32 10
  %arrayidx14.i112.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i111.i, i32 0, i64 %idxprom12.i110.i
  %ubound.i113.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i112.i, i32 0, i32 5
  store i32 %cond.i109.i, i32* %ubound.i113.i, align 4
  %387 = load i32* %dx.addr.i71.i, align 4
  %idxprom15.i114.i = sext i32 %387 to i64
  %388 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim16.i115.i = getelementptr inbounds %struct.F90_Desc* %388, i32 0, i32 10
  %arrayidx17.i116.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i115.i, i32 0, i64 %idxprom15.i114.i
  %ubound18.i117.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i116.i, i32 0, i32 5
  %389 = load i32* %ubound18.i117.i, align 4
  %390 = load i32* %dx.addr.i71.i, align 4
  %idxprom19.i118.i = sext i32 %390 to i64
  %391 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim20.i119.i = getelementptr inbounds %struct.F90_Desc* %391, i32 0, i32 10
  %arrayidx21.i120.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i119.i, i32 0, i64 %idxprom19.i118.i
  %extent22.i121.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i120.i, i32 0, i32 1
  store i32 %389, i32* %extent22.i121.i, align 4
  store i32 0, i32* %myoffset.i81.i, align 4
  br label %if.end37.i166.i

if.else23.i136.i:                                 ; preds = %land.lhs.true.i99.i, %if.end7.i97.i
  %392 = load i32* %dx.addr.i71.i, align 4
  %idxprom24.i123.i = sext i32 %392 to i64
  %393 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim25.i124.i = getelementptr inbounds %struct.F90_Desc* %393, i32 0, i32 10
  %arrayidx26.i125.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i124.i, i32 0, i64 %idxprom24.i123.i
  %lbound27.i126.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i125.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i126.i, align 4
  %394 = load i32* %extent.i79.i, align 4
  %395 = load i32* %dx.addr.i71.i, align 4
  %idxprom28.i127.i = sext i32 %395 to i64
  %396 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim29.i128.i = getelementptr inbounds %struct.F90_Desc* %396, i32 0, i32 10
  %arrayidx30.i129.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i128.i, i32 0, i64 %idxprom28.i127.i
  %ubound31.i130.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i129.i, i32 0, i32 5
  store i32 %394, i32* %ubound31.i130.i, align 4
  %397 = load i32* %extent.i79.i, align 4
  %398 = load i32* %dx.addr.i71.i, align 4
  %idxprom32.i131.i = sext i32 %398 to i64
  %399 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim33.i132.i = getelementptr inbounds %struct.F90_Desc* %399, i32 0, i32 10
  %arrayidx34.i133.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i132.i, i32 0, i64 %idxprom32.i131.i
  %extent35.i134.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i133.i, i32 0, i32 1
  store i32 %397, i32* %extent35.i134.i, align 4
  %400 = load i32* %lb.addr.i74.i, align 4
  %401 = load i32* %st.addr.i76.i, align 4
  %sub36.i135.i = sub nsw i32 %400, %401
  store i32 %sub36.i135.i, i32* %myoffset.i81.i, align 4
  br label %if.end37.i166.i

if.end37.i166.i:                                  ; preds = %if.else23.i136.i, %cond.end.i122.i
  %402 = load i32* %dx.addr.i71.i, align 4
  %idxprom38.i137.i = sext i32 %402 to i64
  %403 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim39.i138.i = getelementptr inbounds %struct.F90_Desc* %403, i32 0, i32 10
  %arrayidx40.i139.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i138.i, i32 0, i64 %idxprom38.i137.i
  %sstride.i140.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i139.i, i32 0, i32 2
  store i32 1, i32* %sstride.i140.i, align 4
  %404 = load i32* %dx.addr.i71.i, align 4
  %idxprom41.i141.i = sext i32 %404 to i64
  %405 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim42.i142.i = getelementptr inbounds %struct.F90_Desc* %405, i32 0, i32 10
  %arrayidx43.i143.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i142.i, i32 0, i64 %idxprom41.i141.i
  %soffset.i144.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i143.i, i32 0, i32 3
  store i32 0, i32* %soffset.i144.i, align 4
  %406 = load i32* %ax.addr.i73.i, align 4
  %idxprom44.i145.i = sext i32 %406 to i64
  %407 = load %struct.F90_Desc** %a.addr.i72.i, align 8
  %dim45.i146.i = getelementptr inbounds %struct.F90_Desc* %407, i32 0, i32 10
  %arrayidx46.i147.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i146.i, i32 0, i64 %idxprom44.i145.i
  %lstride.i148.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i147.i, i32 0, i32 4
  %408 = load i32* %lstride.i148.i, align 4
  %409 = load i32* %st.addr.i76.i, align 4
  %mul.i149.i = mul nsw i32 %408, %409
  %410 = load i32* %dx.addr.i71.i, align 4
  %idxprom47.i150.i = sext i32 %410 to i64
  %411 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim48.i151.i = getelementptr inbounds %struct.F90_Desc* %411, i32 0, i32 10
  %arrayidx49.i152.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i151.i, i32 0, i64 %idxprom47.i150.i
  %lstride50.i153.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i152.i, i32 0, i32 4
  store i32 %mul.i149.i, i32* %lstride50.i153.i, align 4
  %412 = load i32* %myoffset.i81.i, align 4
  %413 = load i32* %dx.addr.i71.i, align 4
  %idxprom51.i154.i = sext i32 %413 to i64
  %414 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim52.i155.i = getelementptr inbounds %struct.F90_Desc* %414, i32 0, i32 10
  %arrayidx53.i156.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i155.i, i32 0, i64 %idxprom51.i154.i
  %lstride54.i157.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i156.i, i32 0, i32 4
  %415 = load i32* %lstride54.i157.i, align 4
  %mul55.i158.i = mul nsw i32 %412, %415
  %416 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %lbase.i159.i = getelementptr inbounds %struct.F90_Desc* %416, i32 0, i32 7
  %417 = load i32* %lbase.i159.i, align 4
  %add56.i160.i = add nsw i32 %417, %mul55.i158.i
  store i32 %add56.i160.i, i32* %lbase.i159.i, align 4
  %418 = load i32* %dx.addr.i71.i, align 4
  %idxprom57.i161.i = sext i32 %418 to i64
  %419 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %dim58.i162.i = getelementptr inbounds %struct.F90_Desc* %419, i32 0, i32 10
  %arrayidx59.i163.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i162.i, i32 0, i64 %idxprom57.i161.i
  %lstride60.i164.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i163.i, i32 0, i32 4
  %420 = load i32* %lstride60.i164.i, align 4
  %421 = load i32* %gsize.addr.i77.i, align 4
  %cmp61.i165.i = icmp ne i32 %420, %421
  br i1 %cmp61.i165.i, label %if.then62.i169.i, label %pgf90_asection.exit171.i

if.then62.i169.i:                                 ; preds = %if.end37.i166.i
  %422 = load %struct.F90_Desc** %d.addr.i70.i, align 8
  %flags63.i167.i = getelementptr inbounds %struct.F90_Desc* %422, i32 0, i32 4
  %423 = load i32* %flags63.i167.i, align 4
  %and64.i168.i = and i32 %423, -536870913
  store i32 %and64.i168.i, i32* %flags63.i167.i, align 4
  br label %pgf90_asection.exit171.i

pgf90_asection.exit171.i:                         ; preds = %if.then62.i169.i, %if.end37.i166.i
  %424 = load i32* %extent.i79.i, align 4
  %425 = load i32* %gsize.addr.i77.i, align 4
  %mul66.i170.i = mul nsw i32 %425, %424
  store i32 %mul66.i170.i, i32* %gsize.addr.i77.i, align 4
  %426 = load i32* %gsize.addr.i77.i, align 4
  store i32 %426, i32* %gsize.i, align 4
  %427 = load i32* %dx.i, align 4
  %inc54.i = add nsw i32 %427, 1
  store i32 %inc54.i, i32* %dx.i, align 4
  br label %if.end55.i

if.end55.i:                                       ; preds = %pgf90_asection.exit171.i, %if.end47.i
  %428 = load i32* %ax.i, align 4
  %inc56.i = add nsw i32 %428, 1
  store i32 %inc56.i, i32* %ax.i, align 4
  %429 = load i32* %flags.addr.i, align 4
  %430 = load i32* %ax.i, align 4
  %shl57.i = shl i32 1, %430
  %and58.i = and i32 %429, %shl57.i
  %tobool59.i = icmp ne i32 %and58.i, 0
  br i1 %tobool59.i, label %if.then60.i, label %if.end63.i

if.then60.i:                                      ; preds = %if.end55.i
  %431 = load %struct.F90_Desc** %d.i, align 8
  %432 = load i32* %dx.i, align 4
  %433 = load %struct.F90_Desc** %a.i, align 8
  %434 = load i32* %ax.i, align 4
  %435 = load i32* %lw2.addr.i, align 4
  %436 = load i32* %up2.addr.i, align 4
  %437 = load i32* %st2.addr.i, align 4
  %438 = load i32* %gsize.i, align 4
  %439 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %431, %struct.F90_Desc** %d.addr.i67.i, align 8
  store i32 %432, i32* %dx.addr.i.i, align 4
  store %struct.F90_Desc* %433, %struct.F90_Desc** %a.addr.i68.i, align 8
  store i32 %434, i32* %ax.addr.i.i, align 4
  store i32 %435, i32* %lb.addr.i.i, align 4
  store i32 %436, i32* %ub.addr.i.i, align 4
  store i32 %437, i32* %st.addr.i.i, align 4
  store i32 %438, i32* %gsize.addr.i.i, align 4
  store i32 %439, i32* %flags.addr.i.i, align 4
  %440 = load i32* %ub.addr.i.i, align 4
  %441 = load i32* %lb.addr.i.i, align 4
  %sub.i.i = sub nsw i32 %440, %441
  %442 = load i32* %st.addr.i.i, align 4
  %add.i.i = add nsw i32 %sub.i.i, %442
  store i32 %add.i.i, i32* %extent.i.i, align 4
  %443 = load i32* %flags.addr.i.i, align 4
  %and.i.i = and i32 %443, 33554432
  store i32 %and.i.i, i32* %noreindex.i.i, align 4
  %444 = load i32* %st.addr.i.i, align 4
  %cmp.i.i = icmp ne i32 %444, 1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %if.then60.i
  %445 = load i32* %st.addr.i.i, align 4
  %cmp1.i.i = icmp eq i32 %445, -1
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else.i.i

if.then2.i.i:                                     ; preds = %if.then.i.i
  %446 = load i32* %extent.i.i, align 4
  %sub3.i.i = sub nsw i32 0, %446
  store i32 %sub3.i.i, i32* %extent.i.i, align 4
  br label %if.end.i.i

if.else.i.i:                                      ; preds = %if.then.i.i
  %447 = load i32* %st.addr.i.i, align 4
  %448 = load i32* %extent.i.i, align 4
  %div.i.i = sdiv i32 %448, %447
  store i32 %div.i.i, i32* %extent.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i.i, %if.then2.i.i
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end.i.i, %if.then60.i
  %449 = load i32* %extent.i.i, align 4
  %cmp5.i.i = icmp slt i32 %449, 0
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.end7.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  store i32 0, i32* %extent.i.i, align 4
  br label %if.end7.i.i

if.end7.i.i:                                      ; preds = %if.then6.i.i, %if.end4.i.i
  %450 = load i32* %noreindex.i.i, align 4
  %tobool.i.i = icmp ne i32 %450, 0
  br i1 %tobool.i.i, label %land.lhs.true.i.i, label %if.else23.i.i

land.lhs.true.i.i:                                ; preds = %if.end7.i.i
  %451 = load i32* %st.addr.i.i, align 4
  %cmp8.i.i = icmp eq i32 %451, 1
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.else23.i.i

if.then9.i.i:                                     ; preds = %land.lhs.true.i.i
  %452 = load i32* %dx.addr.i.i, align 4
  %idxprom.i.i = sext i32 %452 to i64
  %453 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim.i.i = getelementptr inbounds %struct.F90_Desc* %453, i32 0, i32 10
  %arrayidx.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i.i, i32 0, i64 %idxprom.i.i
  %lbound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i.i, i32 0, i32 0
  store i32 1, i32* %lbound.i.i, align 4
  %454 = load i32* %extent.i.i, align 4
  %cmp10.i.i = icmp eq i32 %454, 0
  br i1 %cmp10.i.i, label %cond.true.i.i, label %cond.false.i.i

cond.true.i.i:                                    ; preds = %if.then9.i.i
  %455 = load i32* %lb.addr.i.i, align 4
  %sub11.i.i = sub nsw i32 %455, 1
  br label %cond.end.i.i

cond.false.i.i:                                   ; preds = %if.then9.i.i
  %456 = load i32* %ub.addr.i.i, align 4
  br label %cond.end.i.i

cond.end.i.i:                                     ; preds = %cond.false.i.i, %cond.true.i.i
  %cond.i.i = phi i32 [ %sub11.i.i, %cond.true.i.i ], [ %456, %cond.false.i.i ]
  %457 = load i32* %dx.addr.i.i, align 4
  %idxprom12.i.i = sext i32 %457 to i64
  %458 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim13.i.i = getelementptr inbounds %struct.F90_Desc* %458, i32 0, i32 10
  %arrayidx14.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i.i, i32 0, i64 %idxprom12.i.i
  %ubound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i.i, i32 0, i32 5
  store i32 %cond.i.i, i32* %ubound.i.i, align 4
  %459 = load i32* %dx.addr.i.i, align 4
  %idxprom15.i.i = sext i32 %459 to i64
  %460 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim16.i.i = getelementptr inbounds %struct.F90_Desc* %460, i32 0, i32 10
  %arrayidx17.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i.i, i32 0, i64 %idxprom15.i.i
  %ubound18.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i.i, i32 0, i32 5
  %461 = load i32* %ubound18.i.i, align 4
  %462 = load i32* %dx.addr.i.i, align 4
  %idxprom19.i.i = sext i32 %462 to i64
  %463 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim20.i.i = getelementptr inbounds %struct.F90_Desc* %463, i32 0, i32 10
  %arrayidx21.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim20.i.i, i32 0, i64 %idxprom19.i.i
  %extent22.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx21.i.i, i32 0, i32 1
  store i32 %461, i32* %extent22.i.i, align 4
  store i32 0, i32* %myoffset.i.i, align 4
  br label %if.end37.i.i

if.else23.i.i:                                    ; preds = %land.lhs.true.i.i, %if.end7.i.i
  %464 = load i32* %dx.addr.i.i, align 4
  %idxprom24.i.i = sext i32 %464 to i64
  %465 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim25.i.i = getelementptr inbounds %struct.F90_Desc* %465, i32 0, i32 10
  %arrayidx26.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim25.i.i, i32 0, i64 %idxprom24.i.i
  %lbound27.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx26.i.i, i32 0, i32 0
  store i32 1, i32* %lbound27.i.i, align 4
  %466 = load i32* %extent.i.i, align 4
  %467 = load i32* %dx.addr.i.i, align 4
  %idxprom28.i.i = sext i32 %467 to i64
  %468 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim29.i.i = getelementptr inbounds %struct.F90_Desc* %468, i32 0, i32 10
  %arrayidx30.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim29.i.i, i32 0, i64 %idxprom28.i.i
  %ubound31.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx30.i.i, i32 0, i32 5
  store i32 %466, i32* %ubound31.i.i, align 4
  %469 = load i32* %extent.i.i, align 4
  %470 = load i32* %dx.addr.i.i, align 4
  %idxprom32.i.i = sext i32 %470 to i64
  %471 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim33.i.i = getelementptr inbounds %struct.F90_Desc* %471, i32 0, i32 10
  %arrayidx34.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33.i.i, i32 0, i64 %idxprom32.i.i
  %extent35.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx34.i.i, i32 0, i32 1
  store i32 %469, i32* %extent35.i.i, align 4
  %472 = load i32* %lb.addr.i.i, align 4
  %473 = load i32* %st.addr.i.i, align 4
  %sub36.i.i = sub nsw i32 %472, %473
  store i32 %sub36.i.i, i32* %myoffset.i.i, align 4
  br label %if.end37.i.i

if.end37.i.i:                                     ; preds = %if.else23.i.i, %cond.end.i.i
  %474 = load i32* %dx.addr.i.i, align 4
  %idxprom38.i.i = sext i32 %474 to i64
  %475 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim39.i.i = getelementptr inbounds %struct.F90_Desc* %475, i32 0, i32 10
  %arrayidx40.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim39.i.i, i32 0, i64 %idxprom38.i.i
  %sstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx40.i.i, i32 0, i32 2
  store i32 1, i32* %sstride.i.i, align 4
  %476 = load i32* %dx.addr.i.i, align 4
  %idxprom41.i.i = sext i32 %476 to i64
  %477 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim42.i.i = getelementptr inbounds %struct.F90_Desc* %477, i32 0, i32 10
  %arrayidx43.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim42.i.i, i32 0, i64 %idxprom41.i.i
  %soffset.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx43.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i.i, align 4
  %478 = load i32* %ax.addr.i.i, align 4
  %idxprom44.i.i = sext i32 %478 to i64
  %479 = load %struct.F90_Desc** %a.addr.i68.i, align 8
  %dim45.i.i = getelementptr inbounds %struct.F90_Desc* %479, i32 0, i32 10
  %arrayidx46.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim45.i.i, i32 0, i64 %idxprom44.i.i
  %lstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx46.i.i, i32 0, i32 4
  %480 = load i32* %lstride.i.i, align 4
  %481 = load i32* %st.addr.i.i, align 4
  %mul.i.i = mul nsw i32 %480, %481
  %482 = load i32* %dx.addr.i.i, align 4
  %idxprom47.i.i = sext i32 %482 to i64
  %483 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim48.i.i = getelementptr inbounds %struct.F90_Desc* %483, i32 0, i32 10
  %arrayidx49.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim48.i.i, i32 0, i64 %idxprom47.i.i
  %lstride50.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx49.i.i, i32 0, i32 4
  store i32 %mul.i.i, i32* %lstride50.i.i, align 4
  %484 = load i32* %myoffset.i.i, align 4
  %485 = load i32* %dx.addr.i.i, align 4
  %idxprom51.i.i = sext i32 %485 to i64
  %486 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim52.i.i = getelementptr inbounds %struct.F90_Desc* %486, i32 0, i32 10
  %arrayidx53.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim52.i.i, i32 0, i64 %idxprom51.i.i
  %lstride54.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx53.i.i, i32 0, i32 4
  %487 = load i32* %lstride54.i.i, align 4
  %mul55.i.i = mul nsw i32 %484, %487
  %488 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %lbase.i69.i = getelementptr inbounds %struct.F90_Desc* %488, i32 0, i32 7
  %489 = load i32* %lbase.i69.i, align 4
  %add56.i.i = add nsw i32 %489, %mul55.i.i
  store i32 %add56.i.i, i32* %lbase.i69.i, align 4
  %490 = load i32* %dx.addr.i.i, align 4
  %idxprom57.i.i = sext i32 %490 to i64
  %491 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %dim58.i.i = getelementptr inbounds %struct.F90_Desc* %491, i32 0, i32 10
  %arrayidx59.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim58.i.i, i32 0, i64 %idxprom57.i.i
  %lstride60.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx59.i.i, i32 0, i32 4
  %492 = load i32* %lstride60.i.i, align 4
  %493 = load i32* %gsize.addr.i.i, align 4
  %cmp61.i.i = icmp ne i32 %492, %493
  br i1 %cmp61.i.i, label %if.then62.i.i, label %pgf90_asection.exit.i

if.then62.i.i:                                    ; preds = %if.end37.i.i
  %494 = load %struct.F90_Desc** %d.addr.i67.i, align 8
  %flags63.i.i = getelementptr inbounds %struct.F90_Desc* %494, i32 0, i32 4
  %495 = load i32* %flags63.i.i, align 4
  %and64.i.i = and i32 %495, -536870913
  store i32 %and64.i.i, i32* %flags63.i.i, align 4
  br label %pgf90_asection.exit.i

pgf90_asection.exit.i:                            ; preds = %if.then62.i.i, %if.end37.i.i
  %496 = load i32* %extent.i.i, align 4
  %497 = load i32* %gsize.addr.i.i, align 4
  %mul66.i.i = mul nsw i32 %497, %496
  store i32 %mul66.i.i, i32* %gsize.addr.i.i, align 4
  %498 = load i32* %gsize.addr.i.i, align 4
  store i32 %498, i32* %gsize.i, align 4
  %499 = load i32* %dx.i, align 4
  %inc62.i = add nsw i32 %499, 1
  store i32 %inc62.i, i32* %dx.i, align 4
  br label %if.end63.i

if.end63.i:                                       ; preds = %pgf90_asection.exit.i, %if.end55.i
  br label %if.end64.i

if.end64.i:                                       ; preds = %if.end63.i, %if.end39.i
  br label %pgf90_sect3v.exit

pgf90_sect3v.exit:                                ; preds = %if.end64.i, %pgf90_bogus_sect.exit.i
  %500 = load i32* %gsize.i, align 4
  %501 = load %struct.F90_Desc** %d.i, align 8
  %gsize66.i = getelementptr inbounds %struct.F90_Desc* %501, i32 0, i32 6
  store i32 %500, i32* %gsize66.i, align 4
  %502 = load i32* %gsize.i, align 4
  %503 = load %struct.F90_Desc** %d.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %503, i32 0, i32 5
  store i32 %502, i32* %lsize.i, align 4
  ret void
}

define  i32 @pgf90_templatexx(%struct.F90_Desc* %d, i32 %i, i32 %lb, i32 %ub, i32* %lbase, i32 %gsize) nounwind alwaysinline {
entry:
  %d.addr = alloca %struct.F90_Desc*, align 8
  %i.addr = alloca i32, align 4
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %lbase.addr = alloca i32*, align 8
  %gsize.addr = alloca i32, align 4
  %extent = alloca i32, align 4
  store %struct.F90_Desc* %d, %struct.F90_Desc** %d.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32* %lbase, i32** %lbase.addr, align 8
  store i32 %gsize, i32* %gsize.addr, align 4
  %0 = load i32* %ub.addr, align 4
  %1 = load i32* %lb.addr, align 4
  %sub = sub nsw i32 %0, %1
  %add = add nsw i32 %sub, 1
  store i32 %add, i32* %extent, align 4
  %2 = load i32* %extent, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %extent, align 4
  %3 = load i32* %lb.addr, align 4
  %sub1 = sub nsw i32 %3, 1
  store i32 %sub1, i32* %ub.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32* %lb.addr, align 4
  %5 = load i32* %i.addr, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.F90_Desc** %d.addr, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom
  %lbound = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 0
  store i32 %4, i32* %lbound, align 4
  %7 = load i32* %ub.addr, align 4
  %8 = load i32* %i.addr, align 4
  %idxprom2 = sext i32 %8 to i64
  %9 = load %struct.F90_Desc** %d.addr, align 8
  %dim3 = getelementptr inbounds %struct.F90_Desc* %9, i32 0, i32 10
  %arrayidx4 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3, i32 0, i64 %idxprom2
  %ubound = getelementptr inbounds %struct.F90_DescDim* %arrayidx4, i32 0, i32 5
  store i32 %7, i32* %ubound, align 4
  %10 = load i32* %extent, align 4
  %11 = load i32* %i.addr, align 4
  %idxprom5 = sext i32 %11 to i64
  %12 = load %struct.F90_Desc** %d.addr, align 8
  %dim6 = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 10
  %arrayidx7 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6, i32 0, i64 %idxprom5
  %extent8 = getelementptr inbounds %struct.F90_DescDim* %arrayidx7, i32 0, i32 1
  store i32 %10, i32* %extent8, align 4
  %13 = load i32* %i.addr, align 4
  %idxprom9 = sext i32 %13 to i64
  %14 = load %struct.F90_Desc** %d.addr, align 8
  %dim10 = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 10
  %arrayidx11 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10, i32 0, i64 %idxprom9
  %sstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx11, i32 0, i32 2
  store i32 1, i32* %sstride, align 4
  %15 = load i32* %i.addr, align 4
  %idxprom12 = sext i32 %15 to i64
  %16 = load %struct.F90_Desc** %d.addr, align 8
  %dim13 = getelementptr inbounds %struct.F90_Desc* %16, i32 0, i32 10
  %arrayidx14 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13, i32 0, i64 %idxprom12
  %soffset = getelementptr inbounds %struct.F90_DescDim* %arrayidx14, i32 0, i32 3
  store i32 0, i32* %soffset, align 4
  %17 = load i32* %gsize.addr, align 4
  %18 = load i32* %i.addr, align 4
  %idxprom15 = sext i32 %18 to i64
  %19 = load %struct.F90_Desc** %d.addr, align 8
  %dim16 = getelementptr inbounds %struct.F90_Desc* %19, i32 0, i32 10
  %arrayidx17 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16, i32 0, i64 %idxprom15
  %lstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx17, i32 0, i32 4
  store i32 %17, i32* %lstride, align 4
  %20 = load i32* %gsize.addr, align 4
  %21 = load i32* %lb.addr, align 4
  %mul = mul nsw i32 %20, %21
  %22 = load i32** %lbase.addr, align 8
  %23 = load i32* %22, align 4
  %sub18 = sub nsw i32 %23, %mul
  store i32 %sub18, i32* %22, align 4
  %24 = load i32* %extent, align 4
  %25 = load i32* %gsize.addr, align 4
  %mul19 = mul nsw i32 %25, %24
  store i32 %mul19, i32* %gsize.addr, align 4
  %26 = load i32* %gsize.addr, align 4
  ret i32 %26
}

define  void @pgf90_template1v(i8* %pd, i32 %flags, i32 %kind, i32 %len, i32 %l1, i32 %u1) nounwind alwaysinline {
entry:
  %d.addr.i3 = alloca %struct.F90_Desc*, align 8
  %i.addr.i = alloca i32, align 4
  %lb.addr.i = alloca i32, align 4
  %ub.addr.i = alloca i32, align 4
  %lbase.addr.i = alloca i32*, align 8
  %gsize.addr.i = alloca i32, align 4
  %extent.i = alloca i32, align 4
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %kind.addr.i = alloca i32, align 4
  %len.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %pd.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %l1.addr = alloca i32, align 4
  %u1.addr = alloca i32, align 4
  %gsize = alloca i32, align 4
  %lbase = alloca i32, align 4
  %d = alloca %struct.F90_Desc*, align 8
  store i8* %pd, i8** %pd.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %kind, i32* %kind.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %l1, i32* %l1.addr, align 4
  store i32 %u1, i32* %u1.addr, align 4
  %0 = load i8** %pd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %d, align 8
  %2 = load %struct.F90_Desc** %d, align 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i32* %len.addr, align 4
  %5 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %2, %struct.F90_Desc** %d.addr.i, align 8
  store i32 1, i32* %rank.addr.i, align 4
  store i32 %3, i32* %kind.addr.i, align 4
  store i32 %4, i32* %len.addr.i, align 4
  store i32 %5, i32* %flags.addr.i, align 4
  %6 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %7 = load i32* %rank.addr.i, align 4
  %8 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %8, i32 0, i32 1
  store i32 %7, i32* %rank1.i, align 4
  %9 = load i32* %kind.addr.i, align 4
  %10 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %10, i32 0, i32 2
  store i32 %9, i32* %kind2.i, align 4
  %11 = load i32* %len.addr.i, align 4
  %12 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 3
  store i32 %11, i32* %len3.i, align 4
  %13 = load i32* %flags.addr.i, align 4
  %or.i = or i32 %13, 65536
  %or4.i = or i32 %or.i, 536870912
  %14 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags5.i = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 4
  store i32 %or4.i, i32* %flags5.i, align 4
  %15 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags6.i = getelementptr inbounds %struct.F90_Desc* %15, i32 0, i32 4
  %16 = load i32* %flags6.i, align 4
  %and.i = and i32 %16, -17301505
  store i32 %and.i, i32* %flags6.i, align 4
  %17 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 6
  store i32 0, i32* %gsize.i, align 4
  %18 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 5
  store i32 0, i32* %lsize.i, align 4
  %19 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %19, i32 0, i32 8
  store i32* null, i32** %gbase.i, align 8
  %20 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 7
  store i32 1, i32* %lbase.i, align 4
  store i32 1, i32* %lbase, align 4
  store i32 1, i32* %gsize, align 4
  %21 = load %struct.F90_Desc** %d, align 8
  %22 = load i32* %l1.addr, align 4
  %23 = load i32* %u1.addr, align 4
  %24 = load i32* %gsize, align 4
  store %struct.F90_Desc* %21, %struct.F90_Desc** %d.addr.i3, align 8
  store i32 0, i32* %i.addr.i, align 4
  store i32 %22, i32* %lb.addr.i, align 4
  store i32 %23, i32* %ub.addr.i, align 4
  store i32* %lbase, i32** %lbase.addr.i, align 8
  store i32 %24, i32* %gsize.addr.i, align 4
  %25 = load i32* %ub.addr.i, align 4
  %26 = load i32* %lb.addr.i, align 4
  %sub.i = sub nsw i32 %25, %26
  %add.i = add nsw i32 %sub.i, 1
  store i32 %add.i, i32* %extent.i, align 4
  %27 = load i32* %extent.i, align 4
  %cmp.i = icmp slt i32 %27, 0
  br i1 %cmp.i, label %if.then.i, label %pgf90_templatexx.exit

if.then.i:                                        ; preds = %entry
  store i32 0, i32* %extent.i, align 4
  %28 = load i32* %lb.addr.i, align 4
  %sub1.i = sub nsw i32 %28, 1
  store i32 %sub1.i, i32* %ub.addr.i, align 4
  br label %pgf90_templatexx.exit

pgf90_templatexx.exit:                            ; preds = %if.then.i, %entry
  %29 = load i32* %lb.addr.i, align 4
  %30 = load i32* %i.addr.i, align 4
  %idxprom.i = sext i32 %30 to i64
  %31 = load %struct.F90_Desc** %d.addr.i3, align 8
  %dim.i = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 10
  %arrayidx.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i, i32 0, i64 %idxprom.i
  %lbound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i, i32 0, i32 0
  store i32 %29, i32* %lbound.i, align 4
  %32 = load i32* %ub.addr.i, align 4
  %33 = load i32* %i.addr.i, align 4
  %idxprom2.i = sext i32 %33 to i64
  %34 = load %struct.F90_Desc** %d.addr.i3, align 8
  %dim3.i = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 10
  %arrayidx4.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i, i32 0, i64 %idxprom2.i
  %ubound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i, i32 0, i32 5
  store i32 %32, i32* %ubound.i, align 4
  %35 = load i32* %extent.i, align 4
  %36 = load i32* %i.addr.i, align 4
  %idxprom5.i = sext i32 %36 to i64
  %37 = load %struct.F90_Desc** %d.addr.i3, align 8
  %dim6.i = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 10
  %arrayidx7.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i, i32 0, i64 %idxprom5.i
  %extent8.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i, i32 0, i32 1
  store i32 %35, i32* %extent8.i, align 4
  %38 = load i32* %i.addr.i, align 4
  %idxprom9.i = sext i32 %38 to i64
  %39 = load %struct.F90_Desc** %d.addr.i3, align 8
  %dim10.i = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 10
  %arrayidx11.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i, i32 0, i64 %idxprom9.i
  %sstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i, i32 0, i32 2
  store i32 1, i32* %sstride.i, align 4
  %40 = load i32* %i.addr.i, align 4
  %idxprom12.i = sext i32 %40 to i64
  %41 = load %struct.F90_Desc** %d.addr.i3, align 8
  %dim13.i = getelementptr inbounds %struct.F90_Desc* %41, i32 0, i32 10
  %arrayidx14.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i, i32 0, i64 %idxprom12.i
  %soffset.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i, i32 0, i32 3
  store i32 0, i32* %soffset.i, align 4
  %42 = load i32* %gsize.addr.i, align 4
  %43 = load i32* %i.addr.i, align 4
  %idxprom15.i = sext i32 %43 to i64
  %44 = load %struct.F90_Desc** %d.addr.i3, align 8
  %dim16.i = getelementptr inbounds %struct.F90_Desc* %44, i32 0, i32 10
  %arrayidx17.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i, i32 0, i64 %idxprom15.i
  %lstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i, i32 0, i32 4
  store i32 %42, i32* %lstride.i, align 4
  %45 = load i32* %gsize.addr.i, align 4
  %46 = load i32* %lb.addr.i, align 4
  %mul.i = mul nsw i32 %45, %46
  %47 = load i32** %lbase.addr.i, align 8
  %48 = load i32* %47, align 4
  %sub18.i = sub nsw i32 %48, %mul.i
  store i32 %sub18.i, i32* %47, align 4
  %49 = load i32* %extent.i, align 4
  %50 = load i32* %gsize.addr.i, align 4
  %mul19.i = mul nsw i32 %50, %49
  store i32 %mul19.i, i32* %gsize.addr.i, align 4
  %51 = load i32* %gsize.addr.i, align 4
  store i32 %51, i32* %gsize, align 4
  %52 = load i32* %lbase, align 4
  %53 = load %struct.F90_Desc** %d, align 8
  %lbase1 = getelementptr inbounds %struct.F90_Desc* %53, i32 0, i32 7
  store i32 %52, i32* %lbase1, align 4
  %54 = load i32* %gsize, align 4
  %55 = load %struct.F90_Desc** %d, align 8
  %gsize2 = getelementptr inbounds %struct.F90_Desc* %55, i32 0, i32 6
  store i32 %54, i32* %gsize2, align 4
  %56 = load i32* %gsize, align 4
  %57 = load %struct.F90_Desc** %d, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %57, i32 0, i32 5
  store i32 %56, i32* %lsize, align 4
  ret void
}

define  void @pgf90_template1(i8* %d, i8* %flags, i8* %kind, i8* %len, i8* %l1, i8* %u1) nounwind alwaysinline {
entry:
  %d.addr.i3.i = alloca %struct.F90_Desc*, align 8
  %i.addr.i.i = alloca i32, align 4
  %lb.addr.i.i = alloca i32, align 4
  %ub.addr.i.i = alloca i32, align 4
  %lbase.addr.i.i = alloca i32*, align 8
  %gsize.addr.i.i = alloca i32, align 4
  %extent.i.i = alloca i32, align 4
  %d.addr.i.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i.i = alloca i32, align 4
  %kind.addr.i.i = alloca i32, align 4
  %len.addr.i.i = alloca i32, align 4
  %flags.addr.i.i = alloca i32, align 4
  %pd.addr.i = alloca i8*, align 8
  %flags.addr.i = alloca i32, align 4
  %kind.addr.i = alloca i32, align 4
  %len.addr.i = alloca i32, align 4
  %l1.addr.i = alloca i32, align 4
  %u1.addr.i = alloca i32, align 4
  %gsize.i = alloca i32, align 4
  %lbase.i = alloca i32, align 4
  %d.i = alloca %struct.F90_Desc*, align 8
  %d.addr = alloca i8*, align 8
  %flags.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %l1.addr = alloca i8*, align 8
  %u1.addr = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %flags, i8** %flags.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %l1, i8** %l1.addr, align 8
  store i8* %u1, i8** %u1.addr, align 8
  %0 = load i8** %d.addr, align 8
  %1 = load i8** %flags.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %4 = load i8** %kind.addr, align 8
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4
  %7 = load i8** %len.addr, align 8
  %8 = bitcast i8* %7 to i32*
  %9 = load i32* %8, align 4
  %10 = load i8** %l1.addr, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %11, align 4
  %13 = load i8** %u1.addr, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32* %14, align 4
  store i8* %0, i8** %pd.addr.i, align 8
  store i32 %3, i32* %flags.addr.i, align 4
  store i32 %6, i32* %kind.addr.i, align 4
  store i32 %9, i32* %len.addr.i, align 4
  store i32 %12, i32* %l1.addr.i, align 4
  store i32 %15, i32* %u1.addr.i, align 4
  %16 = load i8** %pd.addr.i, align 8
  %17 = bitcast i8* %16 to %struct.F90_Desc*
  store %struct.F90_Desc* %17, %struct.F90_Desc** %d.i, align 8
  %18 = load %struct.F90_Desc** %d.i, align 8
  %19 = load i32* %kind.addr.i, align 4
  %20 = load i32* %len.addr.i, align 4
  %21 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %18, %struct.F90_Desc** %d.addr.i.i, align 8
  store i32 1, i32* %rank.addr.i.i, align 4
  store i32 %19, i32* %kind.addr.i.i, align 4
  store i32 %20, i32* %len.addr.i.i, align 4
  store i32 %21, i32* %flags.addr.i.i, align 4
  %22 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %tag.i.i = getelementptr inbounds %struct.F90_Desc* %22, i32 0, i32 0
  store i32 35, i32* %tag.i.i, align 4
  %23 = load i32* %rank.addr.i.i, align 4
  %24 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %rank1.i.i = getelementptr inbounds %struct.F90_Desc* %24, i32 0, i32 1
  store i32 %23, i32* %rank1.i.i, align 4
  %25 = load i32* %kind.addr.i.i, align 4
  %26 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %kind2.i.i = getelementptr inbounds %struct.F90_Desc* %26, i32 0, i32 2
  store i32 %25, i32* %kind2.i.i, align 4
  %27 = load i32* %len.addr.i.i, align 4
  %28 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %len3.i.i = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 3
  store i32 %27, i32* %len3.i.i, align 4
  %29 = load i32* %flags.addr.i.i, align 4
  %or.i.i = or i32 %29, 65536
  %or4.i.i = or i32 %or.i.i, 536870912
  %30 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags5.i.i = getelementptr inbounds %struct.F90_Desc* %30, i32 0, i32 4
  store i32 %or4.i.i, i32* %flags5.i.i, align 4
  %31 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags6.i.i = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 4
  %32 = load i32* %flags6.i.i, align 4
  %and.i.i = and i32 %32, -17301505
  store i32 %and.i.i, i32* %flags6.i.i, align 4
  %33 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gsize.i.i = getelementptr inbounds %struct.F90_Desc* %33, i32 0, i32 6
  store i32 0, i32* %gsize.i.i, align 4
  %34 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lsize.i.i = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 5
  store i32 0, i32* %lsize.i.i, align 4
  %35 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gbase.i.i = getelementptr inbounds %struct.F90_Desc* %35, i32 0, i32 8
  store i32* null, i32** %gbase.i.i, align 8
  %36 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lbase.i.i = getelementptr inbounds %struct.F90_Desc* %36, i32 0, i32 7
  store i32 1, i32* %lbase.i.i, align 4
  store i32 1, i32* %lbase.i, align 4
  store i32 1, i32* %gsize.i, align 4
  %37 = load %struct.F90_Desc** %d.i, align 8
  %38 = load i32* %l1.addr.i, align 4
  %39 = load i32* %u1.addr.i, align 4
  %40 = load i32* %gsize.i, align 4
  store %struct.F90_Desc* %37, %struct.F90_Desc** %d.addr.i3.i, align 8
  store i32 0, i32* %i.addr.i.i, align 4
  store i32 %38, i32* %lb.addr.i.i, align 4
  store i32 %39, i32* %ub.addr.i.i, align 4
  store i32* %lbase.i, i32** %lbase.addr.i.i, align 8
  store i32 %40, i32* %gsize.addr.i.i, align 4
  %41 = load i32* %ub.addr.i.i, align 4
  %42 = load i32* %lb.addr.i.i, align 4
  %sub.i.i = sub nsw i32 %41, %42
  %add.i.i = add nsw i32 %sub.i.i, 1
  store i32 %add.i.i, i32* %extent.i.i, align 4
  %43 = load i32* %extent.i.i, align 4
  %cmp.i.i = icmp slt i32 %43, 0
  br i1 %cmp.i.i, label %if.then.i.i, label %pgf90_template1v.exit

if.then.i.i:                                      ; preds = %entry
  store i32 0, i32* %extent.i.i, align 4
  %44 = load i32* %lb.addr.i.i, align 4
  %sub1.i.i = sub nsw i32 %44, 1
  store i32 %sub1.i.i, i32* %ub.addr.i.i, align 4
  br label %pgf90_template1v.exit

pgf90_template1v.exit:                            ; preds = %if.then.i.i, %entry
  %45 = load i32* %lb.addr.i.i, align 4
  %46 = load i32* %i.addr.i.i, align 4
  %idxprom.i.i = sext i32 %46 to i64
  %47 = load %struct.F90_Desc** %d.addr.i3.i, align 8
  %dim.i.i = getelementptr inbounds %struct.F90_Desc* %47, i32 0, i32 10
  %arrayidx.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i.i, i32 0, i64 %idxprom.i.i
  %lbound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i.i, i32 0, i32 0
  store i32 %45, i32* %lbound.i.i, align 4
  %48 = load i32* %ub.addr.i.i, align 4
  %49 = load i32* %i.addr.i.i, align 4
  %idxprom2.i.i = sext i32 %49 to i64
  %50 = load %struct.F90_Desc** %d.addr.i3.i, align 8
  %dim3.i.i = getelementptr inbounds %struct.F90_Desc* %50, i32 0, i32 10
  %arrayidx4.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i.i, i32 0, i64 %idxprom2.i.i
  %ubound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i.i, i32 0, i32 5
  store i32 %48, i32* %ubound.i.i, align 4
  %51 = load i32* %extent.i.i, align 4
  %52 = load i32* %i.addr.i.i, align 4
  %idxprom5.i.i = sext i32 %52 to i64
  %53 = load %struct.F90_Desc** %d.addr.i3.i, align 8
  %dim6.i.i = getelementptr inbounds %struct.F90_Desc* %53, i32 0, i32 10
  %arrayidx7.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i.i, i32 0, i64 %idxprom5.i.i
  %extent8.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i.i, i32 0, i32 1
  store i32 %51, i32* %extent8.i.i, align 4
  %54 = load i32* %i.addr.i.i, align 4
  %idxprom9.i.i = sext i32 %54 to i64
  %55 = load %struct.F90_Desc** %d.addr.i3.i, align 8
  %dim10.i.i = getelementptr inbounds %struct.F90_Desc* %55, i32 0, i32 10
  %arrayidx11.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i.i, i32 0, i64 %idxprom9.i.i
  %sstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i.i, i32 0, i32 2
  store i32 1, i32* %sstride.i.i, align 4
  %56 = load i32* %i.addr.i.i, align 4
  %idxprom12.i.i = sext i32 %56 to i64
  %57 = load %struct.F90_Desc** %d.addr.i3.i, align 8
  %dim13.i.i = getelementptr inbounds %struct.F90_Desc* %57, i32 0, i32 10
  %arrayidx14.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i.i, i32 0, i64 %idxprom12.i.i
  %soffset.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i.i, align 4
  %58 = load i32* %gsize.addr.i.i, align 4
  %59 = load i32* %i.addr.i.i, align 4
  %idxprom15.i.i = sext i32 %59 to i64
  %60 = load %struct.F90_Desc** %d.addr.i3.i, align 8
  %dim16.i.i = getelementptr inbounds %struct.F90_Desc* %60, i32 0, i32 10
  %arrayidx17.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i.i, i32 0, i64 %idxprom15.i.i
  %lstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i.i, i32 0, i32 4
  store i32 %58, i32* %lstride.i.i, align 4
  %61 = load i32* %gsize.addr.i.i, align 4
  %62 = load i32* %lb.addr.i.i, align 4
  %mul.i.i = mul nsw i32 %61, %62
  %63 = load i32** %lbase.addr.i.i, align 8
  %64 = load i32* %63, align 4
  %sub18.i.i = sub nsw i32 %64, %mul.i.i
  store i32 %sub18.i.i, i32* %63, align 4
  %65 = load i32* %extent.i.i, align 4
  %66 = load i32* %gsize.addr.i.i, align 4
  %mul19.i.i = mul nsw i32 %66, %65
  store i32 %mul19.i.i, i32* %gsize.addr.i.i, align 4
  %67 = load i32* %gsize.addr.i.i, align 4
  store i32 %67, i32* %gsize.i, align 4
  %68 = load i32* %lbase.i, align 4
  %69 = load %struct.F90_Desc** %d.i, align 8
  %lbase1.i = getelementptr inbounds %struct.F90_Desc* %69, i32 0, i32 7
  store i32 %68, i32* %lbase1.i, align 4
  %70 = load i32* %gsize.i, align 4
  %71 = load %struct.F90_Desc** %d.i, align 8
  %gsize2.i = getelementptr inbounds %struct.F90_Desc* %71, i32 0, i32 6
  store i32 %70, i32* %gsize2.i, align 4
  %72 = load i32* %gsize.i, align 4
  %73 = load %struct.F90_Desc** %d.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %73, i32 0, i32 5
  store i32 %72, i32* %lsize.i, align 4
  ret void
}

define  void @pgf90_template2v(i8* %pd, i32 %flags, i32 %kind, i32 %len, i32 %l1, i32 %u1, i32 %l2, i32 %u2) nounwind alwaysinline {
entry:
  %d.addr.i5 = alloca %struct.F90_Desc*, align 8
  %i.addr.i6 = alloca i32, align 4
  %lb.addr.i7 = alloca i32, align 4
  %ub.addr.i8 = alloca i32, align 4
  %lbase.addr.i9 = alloca i32*, align 8
  %gsize.addr.i10 = alloca i32, align 4
  %extent.i11 = alloca i32, align 4
  %d.addr.i4 = alloca %struct.F90_Desc*, align 8
  %i.addr.i = alloca i32, align 4
  %lb.addr.i = alloca i32, align 4
  %ub.addr.i = alloca i32, align 4
  %lbase.addr.i = alloca i32*, align 8
  %gsize.addr.i = alloca i32, align 4
  %extent.i = alloca i32, align 4
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %kind.addr.i = alloca i32, align 4
  %len.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %pd.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %l1.addr = alloca i32, align 4
  %u1.addr = alloca i32, align 4
  %l2.addr = alloca i32, align 4
  %u2.addr = alloca i32, align 4
  %gsize = alloca i32, align 4
  %lbase = alloca i32, align 4
  %d = alloca %struct.F90_Desc*, align 8
  store i8* %pd, i8** %pd.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %kind, i32* %kind.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %l1, i32* %l1.addr, align 4
  store i32 %u1, i32* %u1.addr, align 4
  store i32 %l2, i32* %l2.addr, align 4
  store i32 %u2, i32* %u2.addr, align 4
  %0 = load i8** %pd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %d, align 8
  %2 = load %struct.F90_Desc** %d, align 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i32* %len.addr, align 4
  %5 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %2, %struct.F90_Desc** %d.addr.i, align 8
  store i32 2, i32* %rank.addr.i, align 4
  store i32 %3, i32* %kind.addr.i, align 4
  store i32 %4, i32* %len.addr.i, align 4
  store i32 %5, i32* %flags.addr.i, align 4
  %6 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %7 = load i32* %rank.addr.i, align 4
  %8 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %8, i32 0, i32 1
  store i32 %7, i32* %rank1.i, align 4
  %9 = load i32* %kind.addr.i, align 4
  %10 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %10, i32 0, i32 2
  store i32 %9, i32* %kind2.i, align 4
  %11 = load i32* %len.addr.i, align 4
  %12 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 3
  store i32 %11, i32* %len3.i, align 4
  %13 = load i32* %flags.addr.i, align 4
  %or.i = or i32 %13, 65536
  %or4.i = or i32 %or.i, 536870912
  %14 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags5.i = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 4
  store i32 %or4.i, i32* %flags5.i, align 4
  %15 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags6.i = getelementptr inbounds %struct.F90_Desc* %15, i32 0, i32 4
  %16 = load i32* %flags6.i, align 4
  %and.i = and i32 %16, -17301505
  store i32 %and.i, i32* %flags6.i, align 4
  %17 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 6
  store i32 0, i32* %gsize.i, align 4
  %18 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 5
  store i32 0, i32* %lsize.i, align 4
  %19 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %19, i32 0, i32 8
  store i32* null, i32** %gbase.i, align 8
  %20 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 7
  store i32 1, i32* %lbase.i, align 4
  store i32 1, i32* %lbase, align 4
  store i32 1, i32* %gsize, align 4
  %21 = load %struct.F90_Desc** %d, align 8
  %22 = load i32* %l1.addr, align 4
  %23 = load i32* %u1.addr, align 4
  %24 = load i32* %gsize, align 4
  store %struct.F90_Desc* %21, %struct.F90_Desc** %d.addr.i5, align 8
  store i32 0, i32* %i.addr.i6, align 4
  store i32 %22, i32* %lb.addr.i7, align 4
  store i32 %23, i32* %ub.addr.i8, align 4
  store i32* %lbase, i32** %lbase.addr.i9, align 8
  store i32 %24, i32* %gsize.addr.i10, align 4
  %25 = load i32* %ub.addr.i8, align 4
  %26 = load i32* %lb.addr.i7, align 4
  %sub.i12 = sub nsw i32 %25, %26
  %add.i13 = add nsw i32 %sub.i12, 1
  store i32 %add.i13, i32* %extent.i11, align 4
  %27 = load i32* %extent.i11, align 4
  %cmp.i14 = icmp slt i32 %27, 0
  br i1 %cmp.i14, label %if.then.i16, label %pgf90_templatexx.exit44

if.then.i16:                                      ; preds = %entry
  store i32 0, i32* %extent.i11, align 4
  %28 = load i32* %lb.addr.i7, align 4
  %sub1.i15 = sub nsw i32 %28, 1
  store i32 %sub1.i15, i32* %ub.addr.i8, align 4
  br label %pgf90_templatexx.exit44

pgf90_templatexx.exit44:                          ; preds = %if.then.i16, %entry
  %29 = load i32* %lb.addr.i7, align 4
  %30 = load i32* %i.addr.i6, align 4
  %idxprom.i17 = sext i32 %30 to i64
  %31 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim.i18 = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 10
  %arrayidx.i19 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i18, i32 0, i64 %idxprom.i17
  %lbound.i20 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i19, i32 0, i32 0
  store i32 %29, i32* %lbound.i20, align 4
  %32 = load i32* %ub.addr.i8, align 4
  %33 = load i32* %i.addr.i6, align 4
  %idxprom2.i21 = sext i32 %33 to i64
  %34 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim3.i22 = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 10
  %arrayidx4.i23 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i22, i32 0, i64 %idxprom2.i21
  %ubound.i24 = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i23, i32 0, i32 5
  store i32 %32, i32* %ubound.i24, align 4
  %35 = load i32* %extent.i11, align 4
  %36 = load i32* %i.addr.i6, align 4
  %idxprom5.i25 = sext i32 %36 to i64
  %37 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim6.i26 = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 10
  %arrayidx7.i27 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i26, i32 0, i64 %idxprom5.i25
  %extent8.i28 = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i27, i32 0, i32 1
  store i32 %35, i32* %extent8.i28, align 4
  %38 = load i32* %i.addr.i6, align 4
  %idxprom9.i29 = sext i32 %38 to i64
  %39 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim10.i30 = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 10
  %arrayidx11.i31 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i30, i32 0, i64 %idxprom9.i29
  %sstride.i32 = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i31, i32 0, i32 2
  store i32 1, i32* %sstride.i32, align 4
  %40 = load i32* %i.addr.i6, align 4
  %idxprom12.i33 = sext i32 %40 to i64
  %41 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim13.i34 = getelementptr inbounds %struct.F90_Desc* %41, i32 0, i32 10
  %arrayidx14.i35 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i34, i32 0, i64 %idxprom12.i33
  %soffset.i36 = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i35, i32 0, i32 3
  store i32 0, i32* %soffset.i36, align 4
  %42 = load i32* %gsize.addr.i10, align 4
  %43 = load i32* %i.addr.i6, align 4
  %idxprom15.i37 = sext i32 %43 to i64
  %44 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim16.i38 = getelementptr inbounds %struct.F90_Desc* %44, i32 0, i32 10
  %arrayidx17.i39 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i38, i32 0, i64 %idxprom15.i37
  %lstride.i40 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i39, i32 0, i32 4
  store i32 %42, i32* %lstride.i40, align 4
  %45 = load i32* %gsize.addr.i10, align 4
  %46 = load i32* %lb.addr.i7, align 4
  %mul.i41 = mul nsw i32 %45, %46
  %47 = load i32** %lbase.addr.i9, align 8
  %48 = load i32* %47, align 4
  %sub18.i42 = sub nsw i32 %48, %mul.i41
  store i32 %sub18.i42, i32* %47, align 4
  %49 = load i32* %extent.i11, align 4
  %50 = load i32* %gsize.addr.i10, align 4
  %mul19.i43 = mul nsw i32 %50, %49
  store i32 %mul19.i43, i32* %gsize.addr.i10, align 4
  %51 = load i32* %gsize.addr.i10, align 4
  store i32 %51, i32* %gsize, align 4
  %52 = load %struct.F90_Desc** %d, align 8
  %53 = load i32* %l2.addr, align 4
  %54 = load i32* %u2.addr, align 4
  %55 = load i32* %gsize, align 4
  store %struct.F90_Desc* %52, %struct.F90_Desc** %d.addr.i4, align 8
  store i32 1, i32* %i.addr.i, align 4
  store i32 %53, i32* %lb.addr.i, align 4
  store i32 %54, i32* %ub.addr.i, align 4
  store i32* %lbase, i32** %lbase.addr.i, align 8
  store i32 %55, i32* %gsize.addr.i, align 4
  %56 = load i32* %ub.addr.i, align 4
  %57 = load i32* %lb.addr.i, align 4
  %sub.i = sub nsw i32 %56, %57
  %add.i = add nsw i32 %sub.i, 1
  store i32 %add.i, i32* %extent.i, align 4
  %58 = load i32* %extent.i, align 4
  %cmp.i = icmp slt i32 %58, 0
  br i1 %cmp.i, label %if.then.i, label %pgf90_templatexx.exit

if.then.i:                                        ; preds = %pgf90_templatexx.exit44
  store i32 0, i32* %extent.i, align 4
  %59 = load i32* %lb.addr.i, align 4
  %sub1.i = sub nsw i32 %59, 1
  store i32 %sub1.i, i32* %ub.addr.i, align 4
  br label %pgf90_templatexx.exit

pgf90_templatexx.exit:                            ; preds = %if.then.i, %pgf90_templatexx.exit44
  %60 = load i32* %lb.addr.i, align 4
  %61 = load i32* %i.addr.i, align 4
  %idxprom.i = sext i32 %61 to i64
  %62 = load %struct.F90_Desc** %d.addr.i4, align 8
  %dim.i = getelementptr inbounds %struct.F90_Desc* %62, i32 0, i32 10
  %arrayidx.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i, i32 0, i64 %idxprom.i
  %lbound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i, i32 0, i32 0
  store i32 %60, i32* %lbound.i, align 4
  %63 = load i32* %ub.addr.i, align 4
  %64 = load i32* %i.addr.i, align 4
  %idxprom2.i = sext i32 %64 to i64
  %65 = load %struct.F90_Desc** %d.addr.i4, align 8
  %dim3.i = getelementptr inbounds %struct.F90_Desc* %65, i32 0, i32 10
  %arrayidx4.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i, i32 0, i64 %idxprom2.i
  %ubound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i, i32 0, i32 5
  store i32 %63, i32* %ubound.i, align 4
  %66 = load i32* %extent.i, align 4
  %67 = load i32* %i.addr.i, align 4
  %idxprom5.i = sext i32 %67 to i64
  %68 = load %struct.F90_Desc** %d.addr.i4, align 8
  %dim6.i = getelementptr inbounds %struct.F90_Desc* %68, i32 0, i32 10
  %arrayidx7.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i, i32 0, i64 %idxprom5.i
  %extent8.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i, i32 0, i32 1
  store i32 %66, i32* %extent8.i, align 4
  %69 = load i32* %i.addr.i, align 4
  %idxprom9.i = sext i32 %69 to i64
  %70 = load %struct.F90_Desc** %d.addr.i4, align 8
  %dim10.i = getelementptr inbounds %struct.F90_Desc* %70, i32 0, i32 10
  %arrayidx11.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i, i32 0, i64 %idxprom9.i
  %sstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i, i32 0, i32 2
  store i32 1, i32* %sstride.i, align 4
  %71 = load i32* %i.addr.i, align 4
  %idxprom12.i = sext i32 %71 to i64
  %72 = load %struct.F90_Desc** %d.addr.i4, align 8
  %dim13.i = getelementptr inbounds %struct.F90_Desc* %72, i32 0, i32 10
  %arrayidx14.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i, i32 0, i64 %idxprom12.i
  %soffset.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i, i32 0, i32 3
  store i32 0, i32* %soffset.i, align 4
  %73 = load i32* %gsize.addr.i, align 4
  %74 = load i32* %i.addr.i, align 4
  %idxprom15.i = sext i32 %74 to i64
  %75 = load %struct.F90_Desc** %d.addr.i4, align 8
  %dim16.i = getelementptr inbounds %struct.F90_Desc* %75, i32 0, i32 10
  %arrayidx17.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i, i32 0, i64 %idxprom15.i
  %lstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i, i32 0, i32 4
  store i32 %73, i32* %lstride.i, align 4
  %76 = load i32* %gsize.addr.i, align 4
  %77 = load i32* %lb.addr.i, align 4
  %mul.i = mul nsw i32 %76, %77
  %78 = load i32** %lbase.addr.i, align 8
  %79 = load i32* %78, align 4
  %sub18.i = sub nsw i32 %79, %mul.i
  store i32 %sub18.i, i32* %78, align 4
  %80 = load i32* %extent.i, align 4
  %81 = load i32* %gsize.addr.i, align 4
  %mul19.i = mul nsw i32 %81, %80
  store i32 %mul19.i, i32* %gsize.addr.i, align 4
  %82 = load i32* %gsize.addr.i, align 4
  store i32 %82, i32* %gsize, align 4
  %83 = load i32* %lbase, align 4
  %84 = load %struct.F90_Desc** %d, align 8
  %lbase2 = getelementptr inbounds %struct.F90_Desc* %84, i32 0, i32 7
  store i32 %83, i32* %lbase2, align 4
  %85 = load i32* %gsize, align 4
  %86 = load %struct.F90_Desc** %d, align 8
  %gsize3 = getelementptr inbounds %struct.F90_Desc* %86, i32 0, i32 6
  store i32 %85, i32* %gsize3, align 4
  %87 = load i32* %gsize, align 4
  %88 = load %struct.F90_Desc** %d, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %88, i32 0, i32 5
  store i32 %87, i32* %lsize, align 4
  ret void
}

define  void @pgf90_template2(i8* %d, i8* %flags, i8* %kind, i8* %len, i8* %l1, i8* %u1, i8* %l2, i8* %u2) nounwind alwaysinline {
entry:
  %d.addr.i5.i = alloca %struct.F90_Desc*, align 8
  %i.addr.i6.i = alloca i32, align 4
  %lb.addr.i7.i = alloca i32, align 4
  %ub.addr.i8.i = alloca i32, align 4
  %lbase.addr.i9.i = alloca i32*, align 8
  %gsize.addr.i10.i = alloca i32, align 4
  %extent.i11.i = alloca i32, align 4
  %d.addr.i4.i = alloca %struct.F90_Desc*, align 8
  %i.addr.i.i = alloca i32, align 4
  %lb.addr.i.i = alloca i32, align 4
  %ub.addr.i.i = alloca i32, align 4
  %lbase.addr.i.i = alloca i32*, align 8
  %gsize.addr.i.i = alloca i32, align 4
  %extent.i.i = alloca i32, align 4
  %d.addr.i.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i.i = alloca i32, align 4
  %kind.addr.i.i = alloca i32, align 4
  %len.addr.i.i = alloca i32, align 4
  %flags.addr.i.i = alloca i32, align 4
  %pd.addr.i = alloca i8*, align 8
  %flags.addr.i = alloca i32, align 4
  %kind.addr.i = alloca i32, align 4
  %len.addr.i = alloca i32, align 4
  %l1.addr.i = alloca i32, align 4
  %u1.addr.i = alloca i32, align 4
  %l2.addr.i = alloca i32, align 4
  %u2.addr.i = alloca i32, align 4
  %gsize.i = alloca i32, align 4
  %lbase.i = alloca i32, align 4
  %d.i = alloca %struct.F90_Desc*, align 8
  %d.addr = alloca i8*, align 8
  %flags.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %l1.addr = alloca i8*, align 8
  %u1.addr = alloca i8*, align 8
  %l2.addr = alloca i8*, align 8
  %u2.addr = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %flags, i8** %flags.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %l1, i8** %l1.addr, align 8
  store i8* %u1, i8** %u1.addr, align 8
  store i8* %l2, i8** %l2.addr, align 8
  store i8* %u2, i8** %u2.addr, align 8
  %0 = load i8** %d.addr, align 8
  %1 = load i8** %flags.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %4 = load i8** %kind.addr, align 8
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4
  %7 = load i8** %len.addr, align 8
  %8 = bitcast i8* %7 to i32*
  %9 = load i32* %8, align 4
  %10 = load i8** %l1.addr, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %11, align 4
  %13 = load i8** %u1.addr, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32* %14, align 4
  %16 = load i8** %l2.addr, align 8
  %17 = bitcast i8* %16 to i32*
  %18 = load i32* %17, align 4
  %19 = load i8** %u2.addr, align 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32* %20, align 4
  store i8* %0, i8** %pd.addr.i, align 8
  store i32 %3, i32* %flags.addr.i, align 4
  store i32 %6, i32* %kind.addr.i, align 4
  store i32 %9, i32* %len.addr.i, align 4
  store i32 %12, i32* %l1.addr.i, align 4
  store i32 %15, i32* %u1.addr.i, align 4
  store i32 %18, i32* %l2.addr.i, align 4
  store i32 %21, i32* %u2.addr.i, align 4
  %22 = load i8** %pd.addr.i, align 8
  %23 = bitcast i8* %22 to %struct.F90_Desc*
  store %struct.F90_Desc* %23, %struct.F90_Desc** %d.i, align 8
  %24 = load %struct.F90_Desc** %d.i, align 8
  %25 = load i32* %kind.addr.i, align 4
  %26 = load i32* %len.addr.i, align 4
  %27 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %24, %struct.F90_Desc** %d.addr.i.i, align 8
  store i32 2, i32* %rank.addr.i.i, align 4
  store i32 %25, i32* %kind.addr.i.i, align 4
  store i32 %26, i32* %len.addr.i.i, align 4
  store i32 %27, i32* %flags.addr.i.i, align 4
  %28 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %tag.i.i = getelementptr inbounds %struct.F90_Desc* %28, i32 0, i32 0
  store i32 35, i32* %tag.i.i, align 4
  %29 = load i32* %rank.addr.i.i, align 4
  %30 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %rank1.i.i = getelementptr inbounds %struct.F90_Desc* %30, i32 0, i32 1
  store i32 %29, i32* %rank1.i.i, align 4
  %31 = load i32* %kind.addr.i.i, align 4
  %32 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %kind2.i.i = getelementptr inbounds %struct.F90_Desc* %32, i32 0, i32 2
  store i32 %31, i32* %kind2.i.i, align 4
  %33 = load i32* %len.addr.i.i, align 4
  %34 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %len3.i.i = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 3
  store i32 %33, i32* %len3.i.i, align 4
  %35 = load i32* %flags.addr.i.i, align 4
  %or.i.i = or i32 %35, 65536
  %or4.i.i = or i32 %or.i.i, 536870912
  %36 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags5.i.i = getelementptr inbounds %struct.F90_Desc* %36, i32 0, i32 4
  store i32 %or4.i.i, i32* %flags5.i.i, align 4
  %37 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags6.i.i = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 4
  %38 = load i32* %flags6.i.i, align 4
  %and.i.i = and i32 %38, -17301505
  store i32 %and.i.i, i32* %flags6.i.i, align 4
  %39 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gsize.i.i = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 6
  store i32 0, i32* %gsize.i.i, align 4
  %40 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lsize.i.i = getelementptr inbounds %struct.F90_Desc* %40, i32 0, i32 5
  store i32 0, i32* %lsize.i.i, align 4
  %41 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gbase.i.i = getelementptr inbounds %struct.F90_Desc* %41, i32 0, i32 8
  store i32* null, i32** %gbase.i.i, align 8
  %42 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lbase.i.i = getelementptr inbounds %struct.F90_Desc* %42, i32 0, i32 7
  store i32 1, i32* %lbase.i.i, align 4
  store i32 1, i32* %lbase.i, align 4
  store i32 1, i32* %gsize.i, align 4
  %43 = load %struct.F90_Desc** %d.i, align 8
  %44 = load i32* %l1.addr.i, align 4
  %45 = load i32* %u1.addr.i, align 4
  %46 = load i32* %gsize.i, align 4
  store %struct.F90_Desc* %43, %struct.F90_Desc** %d.addr.i5.i, align 8
  store i32 0, i32* %i.addr.i6.i, align 4
  store i32 %44, i32* %lb.addr.i7.i, align 4
  store i32 %45, i32* %ub.addr.i8.i, align 4
  store i32* %lbase.i, i32** %lbase.addr.i9.i, align 8
  store i32 %46, i32* %gsize.addr.i10.i, align 4
  %47 = load i32* %ub.addr.i8.i, align 4
  %48 = load i32* %lb.addr.i7.i, align 4
  %sub.i12.i = sub nsw i32 %47, %48
  %add.i13.i = add nsw i32 %sub.i12.i, 1
  store i32 %add.i13.i, i32* %extent.i11.i, align 4
  %49 = load i32* %extent.i11.i, align 4
  %cmp.i14.i = icmp slt i32 %49, 0
  br i1 %cmp.i14.i, label %if.then.i16.i, label %pgf90_templatexx.exit44.i

if.then.i16.i:                                    ; preds = %entry
  store i32 0, i32* %extent.i11.i, align 4
  %50 = load i32* %lb.addr.i7.i, align 4
  %sub1.i15.i = sub nsw i32 %50, 1
  store i32 %sub1.i15.i, i32* %ub.addr.i8.i, align 4
  br label %pgf90_templatexx.exit44.i

pgf90_templatexx.exit44.i:                        ; preds = %if.then.i16.i, %entry
  %51 = load i32* %lb.addr.i7.i, align 4
  %52 = load i32* %i.addr.i6.i, align 4
  %idxprom.i17.i = sext i32 %52 to i64
  %53 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim.i18.i = getelementptr inbounds %struct.F90_Desc* %53, i32 0, i32 10
  %arrayidx.i19.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i18.i, i32 0, i64 %idxprom.i17.i
  %lbound.i20.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i19.i, i32 0, i32 0
  store i32 %51, i32* %lbound.i20.i, align 4
  %54 = load i32* %ub.addr.i8.i, align 4
  %55 = load i32* %i.addr.i6.i, align 4
  %idxprom2.i21.i = sext i32 %55 to i64
  %56 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim3.i22.i = getelementptr inbounds %struct.F90_Desc* %56, i32 0, i32 10
  %arrayidx4.i23.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i22.i, i32 0, i64 %idxprom2.i21.i
  %ubound.i24.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i23.i, i32 0, i32 5
  store i32 %54, i32* %ubound.i24.i, align 4
  %57 = load i32* %extent.i11.i, align 4
  %58 = load i32* %i.addr.i6.i, align 4
  %idxprom5.i25.i = sext i32 %58 to i64
  %59 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim6.i26.i = getelementptr inbounds %struct.F90_Desc* %59, i32 0, i32 10
  %arrayidx7.i27.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i26.i, i32 0, i64 %idxprom5.i25.i
  %extent8.i28.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i27.i, i32 0, i32 1
  store i32 %57, i32* %extent8.i28.i, align 4
  %60 = load i32* %i.addr.i6.i, align 4
  %idxprom9.i29.i = sext i32 %60 to i64
  %61 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim10.i30.i = getelementptr inbounds %struct.F90_Desc* %61, i32 0, i32 10
  %arrayidx11.i31.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i30.i, i32 0, i64 %idxprom9.i29.i
  %sstride.i32.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i31.i, i32 0, i32 2
  store i32 1, i32* %sstride.i32.i, align 4
  %62 = load i32* %i.addr.i6.i, align 4
  %idxprom12.i33.i = sext i32 %62 to i64
  %63 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim13.i34.i = getelementptr inbounds %struct.F90_Desc* %63, i32 0, i32 10
  %arrayidx14.i35.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i34.i, i32 0, i64 %idxprom12.i33.i
  %soffset.i36.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i35.i, i32 0, i32 3
  store i32 0, i32* %soffset.i36.i, align 4
  %64 = load i32* %gsize.addr.i10.i, align 4
  %65 = load i32* %i.addr.i6.i, align 4
  %idxprom15.i37.i = sext i32 %65 to i64
  %66 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim16.i38.i = getelementptr inbounds %struct.F90_Desc* %66, i32 0, i32 10
  %arrayidx17.i39.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i38.i, i32 0, i64 %idxprom15.i37.i
  %lstride.i40.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i39.i, i32 0, i32 4
  store i32 %64, i32* %lstride.i40.i, align 4
  %67 = load i32* %gsize.addr.i10.i, align 4
  %68 = load i32* %lb.addr.i7.i, align 4
  %mul.i41.i = mul nsw i32 %67, %68
  %69 = load i32** %lbase.addr.i9.i, align 8
  %70 = load i32* %69, align 4
  %sub18.i42.i = sub nsw i32 %70, %mul.i41.i
  store i32 %sub18.i42.i, i32* %69, align 4
  %71 = load i32* %extent.i11.i, align 4
  %72 = load i32* %gsize.addr.i10.i, align 4
  %mul19.i43.i = mul nsw i32 %72, %71
  store i32 %mul19.i43.i, i32* %gsize.addr.i10.i, align 4
  %73 = load i32* %gsize.addr.i10.i, align 4
  store i32 %73, i32* %gsize.i, align 4
  %74 = load %struct.F90_Desc** %d.i, align 8
  %75 = load i32* %l2.addr.i, align 4
  %76 = load i32* %u2.addr.i, align 4
  %77 = load i32* %gsize.i, align 4
  store %struct.F90_Desc* %74, %struct.F90_Desc** %d.addr.i4.i, align 8
  store i32 1, i32* %i.addr.i.i, align 4
  store i32 %75, i32* %lb.addr.i.i, align 4
  store i32 %76, i32* %ub.addr.i.i, align 4
  store i32* %lbase.i, i32** %lbase.addr.i.i, align 8
  store i32 %77, i32* %gsize.addr.i.i, align 4
  %78 = load i32* %ub.addr.i.i, align 4
  %79 = load i32* %lb.addr.i.i, align 4
  %sub.i.i = sub nsw i32 %78, %79
  %add.i.i = add nsw i32 %sub.i.i, 1
  store i32 %add.i.i, i32* %extent.i.i, align 4
  %80 = load i32* %extent.i.i, align 4
  %cmp.i.i = icmp slt i32 %80, 0
  br i1 %cmp.i.i, label %if.then.i.i, label %pgf90_template2v.exit

if.then.i.i:                                      ; preds = %pgf90_templatexx.exit44.i
  store i32 0, i32* %extent.i.i, align 4
  %81 = load i32* %lb.addr.i.i, align 4
  %sub1.i.i = sub nsw i32 %81, 1
  store i32 %sub1.i.i, i32* %ub.addr.i.i, align 4
  br label %pgf90_template2v.exit

pgf90_template2v.exit:                            ; preds = %if.then.i.i, %pgf90_templatexx.exit44.i
  %82 = load i32* %lb.addr.i.i, align 4
  %83 = load i32* %i.addr.i.i, align 4
  %idxprom.i.i = sext i32 %83 to i64
  %84 = load %struct.F90_Desc** %d.addr.i4.i, align 8
  %dim.i.i = getelementptr inbounds %struct.F90_Desc* %84, i32 0, i32 10
  %arrayidx.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i.i, i32 0, i64 %idxprom.i.i
  %lbound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i.i, i32 0, i32 0
  store i32 %82, i32* %lbound.i.i, align 4
  %85 = load i32* %ub.addr.i.i, align 4
  %86 = load i32* %i.addr.i.i, align 4
  %idxprom2.i.i = sext i32 %86 to i64
  %87 = load %struct.F90_Desc** %d.addr.i4.i, align 8
  %dim3.i.i = getelementptr inbounds %struct.F90_Desc* %87, i32 0, i32 10
  %arrayidx4.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i.i, i32 0, i64 %idxprom2.i.i
  %ubound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i.i, i32 0, i32 5
  store i32 %85, i32* %ubound.i.i, align 4
  %88 = load i32* %extent.i.i, align 4
  %89 = load i32* %i.addr.i.i, align 4
  %idxprom5.i.i = sext i32 %89 to i64
  %90 = load %struct.F90_Desc** %d.addr.i4.i, align 8
  %dim6.i.i = getelementptr inbounds %struct.F90_Desc* %90, i32 0, i32 10
  %arrayidx7.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i.i, i32 0, i64 %idxprom5.i.i
  %extent8.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i.i, i32 0, i32 1
  store i32 %88, i32* %extent8.i.i, align 4
  %91 = load i32* %i.addr.i.i, align 4
  %idxprom9.i.i = sext i32 %91 to i64
  %92 = load %struct.F90_Desc** %d.addr.i4.i, align 8
  %dim10.i.i = getelementptr inbounds %struct.F90_Desc* %92, i32 0, i32 10
  %arrayidx11.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i.i, i32 0, i64 %idxprom9.i.i
  %sstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i.i, i32 0, i32 2
  store i32 1, i32* %sstride.i.i, align 4
  %93 = load i32* %i.addr.i.i, align 4
  %idxprom12.i.i = sext i32 %93 to i64
  %94 = load %struct.F90_Desc** %d.addr.i4.i, align 8
  %dim13.i.i = getelementptr inbounds %struct.F90_Desc* %94, i32 0, i32 10
  %arrayidx14.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i.i, i32 0, i64 %idxprom12.i.i
  %soffset.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i.i, align 4
  %95 = load i32* %gsize.addr.i.i, align 4
  %96 = load i32* %i.addr.i.i, align 4
  %idxprom15.i.i = sext i32 %96 to i64
  %97 = load %struct.F90_Desc** %d.addr.i4.i, align 8
  %dim16.i.i = getelementptr inbounds %struct.F90_Desc* %97, i32 0, i32 10
  %arrayidx17.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i.i, i32 0, i64 %idxprom15.i.i
  %lstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i.i, i32 0, i32 4
  store i32 %95, i32* %lstride.i.i, align 4
  %98 = load i32* %gsize.addr.i.i, align 4
  %99 = load i32* %lb.addr.i.i, align 4
  %mul.i.i = mul nsw i32 %98, %99
  %100 = load i32** %lbase.addr.i.i, align 8
  %101 = load i32* %100, align 4
  %sub18.i.i = sub nsw i32 %101, %mul.i.i
  store i32 %sub18.i.i, i32* %100, align 4
  %102 = load i32* %extent.i.i, align 4
  %103 = load i32* %gsize.addr.i.i, align 4
  %mul19.i.i = mul nsw i32 %103, %102
  store i32 %mul19.i.i, i32* %gsize.addr.i.i, align 4
  %104 = load i32* %gsize.addr.i.i, align 4
  store i32 %104, i32* %gsize.i, align 4
  %105 = load i32* %lbase.i, align 4
  %106 = load %struct.F90_Desc** %d.i, align 8
  %lbase2.i = getelementptr inbounds %struct.F90_Desc* %106, i32 0, i32 7
  store i32 %105, i32* %lbase2.i, align 4
  %107 = load i32* %gsize.i, align 4
  %108 = load %struct.F90_Desc** %d.i, align 8
  %gsize3.i = getelementptr inbounds %struct.F90_Desc* %108, i32 0, i32 6
  store i32 %107, i32* %gsize3.i, align 4
  %109 = load i32* %gsize.i, align 4
  %110 = load %struct.F90_Desc** %d.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %110, i32 0, i32 5
  store i32 %109, i32* %lsize.i, align 4
  ret void
}

define  void @pgf90_template3v(i8* %pd, i32 %flags, i32 %kind, i32 %len, i32 %l1, i32 %u1, i32 %l2, i32 %u2, i32 %l3, i32 %u3) nounwind alwaysinline {
entry:
  %d.addr.i46 = alloca %struct.F90_Desc*, align 8
  %i.addr.i47 = alloca i32, align 4
  %lb.addr.i48 = alloca i32, align 4
  %ub.addr.i49 = alloca i32, align 4
  %lbase.addr.i50 = alloca i32*, align 8
  %gsize.addr.i51 = alloca i32, align 4
  %extent.i52 = alloca i32, align 4
  %d.addr.i6 = alloca %struct.F90_Desc*, align 8
  %i.addr.i7 = alloca i32, align 4
  %lb.addr.i8 = alloca i32, align 4
  %ub.addr.i9 = alloca i32, align 4
  %lbase.addr.i10 = alloca i32*, align 8
  %gsize.addr.i11 = alloca i32, align 4
  %extent.i12 = alloca i32, align 4
  %d.addr.i5 = alloca %struct.F90_Desc*, align 8
  %i.addr.i = alloca i32, align 4
  %lb.addr.i = alloca i32, align 4
  %ub.addr.i = alloca i32, align 4
  %lbase.addr.i = alloca i32*, align 8
  %gsize.addr.i = alloca i32, align 4
  %extent.i = alloca i32, align 4
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %kind.addr.i = alloca i32, align 4
  %len.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %pd.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %l1.addr = alloca i32, align 4
  %u1.addr = alloca i32, align 4
  %l2.addr = alloca i32, align 4
  %u2.addr = alloca i32, align 4
  %l3.addr = alloca i32, align 4
  %u3.addr = alloca i32, align 4
  %gsize = alloca i32, align 4
  %lbase = alloca i32, align 4
  %d = alloca %struct.F90_Desc*, align 8
  store i8* %pd, i8** %pd.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %kind, i32* %kind.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %l1, i32* %l1.addr, align 4
  store i32 %u1, i32* %u1.addr, align 4
  store i32 %l2, i32* %l2.addr, align 4
  store i32 %u2, i32* %u2.addr, align 4
  store i32 %l3, i32* %l3.addr, align 4
  store i32 %u3, i32* %u3.addr, align 4
  %0 = load i8** %pd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %d, align 8
  %2 = load %struct.F90_Desc** %d, align 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i32* %len.addr, align 4
  %5 = load i32* %flags.addr, align 4
  store %struct.F90_Desc* %2, %struct.F90_Desc** %d.addr.i, align 8
  store i32 3, i32* %rank.addr.i, align 4
  store i32 %3, i32* %kind.addr.i, align 4
  store i32 %4, i32* %len.addr.i, align 4
  store i32 %5, i32* %flags.addr.i, align 4
  %6 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %7 = load i32* %rank.addr.i, align 4
  %8 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %8, i32 0, i32 1
  store i32 %7, i32* %rank1.i, align 4
  %9 = load i32* %kind.addr.i, align 4
  %10 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %10, i32 0, i32 2
  store i32 %9, i32* %kind2.i, align 4
  %11 = load i32* %len.addr.i, align 4
  %12 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %12, i32 0, i32 3
  store i32 %11, i32* %len3.i, align 4
  %13 = load i32* %flags.addr.i, align 4
  %or.i = or i32 %13, 65536
  %or4.i = or i32 %or.i, 536870912
  %14 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags5.i = getelementptr inbounds %struct.F90_Desc* %14, i32 0, i32 4
  store i32 %or4.i, i32* %flags5.i, align 4
  %15 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags6.i = getelementptr inbounds %struct.F90_Desc* %15, i32 0, i32 4
  %16 = load i32* %flags6.i, align 4
  %and.i = and i32 %16, -17301505
  store i32 %and.i, i32* %flags6.i, align 4
  %17 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %17, i32 0, i32 6
  store i32 0, i32* %gsize.i, align 4
  %18 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %18, i32 0, i32 5
  store i32 0, i32* %lsize.i, align 4
  %19 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %19, i32 0, i32 8
  store i32* null, i32** %gbase.i, align 8
  %20 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %20, i32 0, i32 7
  store i32 1, i32* %lbase.i, align 4
  store i32 1, i32* %lbase, align 4
  store i32 1, i32* %gsize, align 4
  %21 = load %struct.F90_Desc** %d, align 8
  %22 = load i32* %l1.addr, align 4
  %23 = load i32* %u1.addr, align 4
  %24 = load i32* %gsize, align 4
  store %struct.F90_Desc* %21, %struct.F90_Desc** %d.addr.i46, align 8
  store i32 0, i32* %i.addr.i47, align 4
  store i32 %22, i32* %lb.addr.i48, align 4
  store i32 %23, i32* %ub.addr.i49, align 4
  store i32* %lbase, i32** %lbase.addr.i50, align 8
  store i32 %24, i32* %gsize.addr.i51, align 4
  %25 = load i32* %ub.addr.i49, align 4
  %26 = load i32* %lb.addr.i48, align 4
  %sub.i53 = sub nsw i32 %25, %26
  %add.i54 = add nsw i32 %sub.i53, 1
  store i32 %add.i54, i32* %extent.i52, align 4
  %27 = load i32* %extent.i52, align 4
  %cmp.i55 = icmp slt i32 %27, 0
  br i1 %cmp.i55, label %if.then.i57, label %pgf90_templatexx.exit85

if.then.i57:                                      ; preds = %entry
  store i32 0, i32* %extent.i52, align 4
  %28 = load i32* %lb.addr.i48, align 4
  %sub1.i56 = sub nsw i32 %28, 1
  store i32 %sub1.i56, i32* %ub.addr.i49, align 4
  br label %pgf90_templatexx.exit85

pgf90_templatexx.exit85:                          ; preds = %if.then.i57, %entry
  %29 = load i32* %lb.addr.i48, align 4
  %30 = load i32* %i.addr.i47, align 4
  %idxprom.i58 = sext i32 %30 to i64
  %31 = load %struct.F90_Desc** %d.addr.i46, align 8
  %dim.i59 = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 10
  %arrayidx.i60 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i59, i32 0, i64 %idxprom.i58
  %lbound.i61 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i60, i32 0, i32 0
  store i32 %29, i32* %lbound.i61, align 4
  %32 = load i32* %ub.addr.i49, align 4
  %33 = load i32* %i.addr.i47, align 4
  %idxprom2.i62 = sext i32 %33 to i64
  %34 = load %struct.F90_Desc** %d.addr.i46, align 8
  %dim3.i63 = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 10
  %arrayidx4.i64 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i63, i32 0, i64 %idxprom2.i62
  %ubound.i65 = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i64, i32 0, i32 5
  store i32 %32, i32* %ubound.i65, align 4
  %35 = load i32* %extent.i52, align 4
  %36 = load i32* %i.addr.i47, align 4
  %idxprom5.i66 = sext i32 %36 to i64
  %37 = load %struct.F90_Desc** %d.addr.i46, align 8
  %dim6.i67 = getelementptr inbounds %struct.F90_Desc* %37, i32 0, i32 10
  %arrayidx7.i68 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i67, i32 0, i64 %idxprom5.i66
  %extent8.i69 = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i68, i32 0, i32 1
  store i32 %35, i32* %extent8.i69, align 4
  %38 = load i32* %i.addr.i47, align 4
  %idxprom9.i70 = sext i32 %38 to i64
  %39 = load %struct.F90_Desc** %d.addr.i46, align 8
  %dim10.i71 = getelementptr inbounds %struct.F90_Desc* %39, i32 0, i32 10
  %arrayidx11.i72 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i71, i32 0, i64 %idxprom9.i70
  %sstride.i73 = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i72, i32 0, i32 2
  store i32 1, i32* %sstride.i73, align 4
  %40 = load i32* %i.addr.i47, align 4
  %idxprom12.i74 = sext i32 %40 to i64
  %41 = load %struct.F90_Desc** %d.addr.i46, align 8
  %dim13.i75 = getelementptr inbounds %struct.F90_Desc* %41, i32 0, i32 10
  %arrayidx14.i76 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i75, i32 0, i64 %idxprom12.i74
  %soffset.i77 = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i76, i32 0, i32 3
  store i32 0, i32* %soffset.i77, align 4
  %42 = load i32* %gsize.addr.i51, align 4
  %43 = load i32* %i.addr.i47, align 4
  %idxprom15.i78 = sext i32 %43 to i64
  %44 = load %struct.F90_Desc** %d.addr.i46, align 8
  %dim16.i79 = getelementptr inbounds %struct.F90_Desc* %44, i32 0, i32 10
  %arrayidx17.i80 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i79, i32 0, i64 %idxprom15.i78
  %lstride.i81 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i80, i32 0, i32 4
  store i32 %42, i32* %lstride.i81, align 4
  %45 = load i32* %gsize.addr.i51, align 4
  %46 = load i32* %lb.addr.i48, align 4
  %mul.i82 = mul nsw i32 %45, %46
  %47 = load i32** %lbase.addr.i50, align 8
  %48 = load i32* %47, align 4
  %sub18.i83 = sub nsw i32 %48, %mul.i82
  store i32 %sub18.i83, i32* %47, align 4
  %49 = load i32* %extent.i52, align 4
  %50 = load i32* %gsize.addr.i51, align 4
  %mul19.i84 = mul nsw i32 %50, %49
  store i32 %mul19.i84, i32* %gsize.addr.i51, align 4
  %51 = load i32* %gsize.addr.i51, align 4
  store i32 %51, i32* %gsize, align 4
  %52 = load %struct.F90_Desc** %d, align 8
  %53 = load i32* %l2.addr, align 4
  %54 = load i32* %u2.addr, align 4
  %55 = load i32* %gsize, align 4
  store %struct.F90_Desc* %52, %struct.F90_Desc** %d.addr.i6, align 8
  store i32 1, i32* %i.addr.i7, align 4
  store i32 %53, i32* %lb.addr.i8, align 4
  store i32 %54, i32* %ub.addr.i9, align 4
  store i32* %lbase, i32** %lbase.addr.i10, align 8
  store i32 %55, i32* %gsize.addr.i11, align 4
  %56 = load i32* %ub.addr.i9, align 4
  %57 = load i32* %lb.addr.i8, align 4
  %sub.i13 = sub nsw i32 %56, %57
  %add.i14 = add nsw i32 %sub.i13, 1
  store i32 %add.i14, i32* %extent.i12, align 4
  %58 = load i32* %extent.i12, align 4
  %cmp.i15 = icmp slt i32 %58, 0
  br i1 %cmp.i15, label %if.then.i17, label %pgf90_templatexx.exit45

if.then.i17:                                      ; preds = %pgf90_templatexx.exit85
  store i32 0, i32* %extent.i12, align 4
  %59 = load i32* %lb.addr.i8, align 4
  %sub1.i16 = sub nsw i32 %59, 1
  store i32 %sub1.i16, i32* %ub.addr.i9, align 4
  br label %pgf90_templatexx.exit45

pgf90_templatexx.exit45:                          ; preds = %if.then.i17, %pgf90_templatexx.exit85
  %60 = load i32* %lb.addr.i8, align 4
  %61 = load i32* %i.addr.i7, align 4
  %idxprom.i18 = sext i32 %61 to i64
  %62 = load %struct.F90_Desc** %d.addr.i6, align 8
  %dim.i19 = getelementptr inbounds %struct.F90_Desc* %62, i32 0, i32 10
  %arrayidx.i20 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i19, i32 0, i64 %idxprom.i18
  %lbound.i21 = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i20, i32 0, i32 0
  store i32 %60, i32* %lbound.i21, align 4
  %63 = load i32* %ub.addr.i9, align 4
  %64 = load i32* %i.addr.i7, align 4
  %idxprom2.i22 = sext i32 %64 to i64
  %65 = load %struct.F90_Desc** %d.addr.i6, align 8
  %dim3.i23 = getelementptr inbounds %struct.F90_Desc* %65, i32 0, i32 10
  %arrayidx4.i24 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i23, i32 0, i64 %idxprom2.i22
  %ubound.i25 = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i24, i32 0, i32 5
  store i32 %63, i32* %ubound.i25, align 4
  %66 = load i32* %extent.i12, align 4
  %67 = load i32* %i.addr.i7, align 4
  %idxprom5.i26 = sext i32 %67 to i64
  %68 = load %struct.F90_Desc** %d.addr.i6, align 8
  %dim6.i27 = getelementptr inbounds %struct.F90_Desc* %68, i32 0, i32 10
  %arrayidx7.i28 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i27, i32 0, i64 %idxprom5.i26
  %extent8.i29 = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i28, i32 0, i32 1
  store i32 %66, i32* %extent8.i29, align 4
  %69 = load i32* %i.addr.i7, align 4
  %idxprom9.i30 = sext i32 %69 to i64
  %70 = load %struct.F90_Desc** %d.addr.i6, align 8
  %dim10.i31 = getelementptr inbounds %struct.F90_Desc* %70, i32 0, i32 10
  %arrayidx11.i32 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i31, i32 0, i64 %idxprom9.i30
  %sstride.i33 = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i32, i32 0, i32 2
  store i32 1, i32* %sstride.i33, align 4
  %71 = load i32* %i.addr.i7, align 4
  %idxprom12.i34 = sext i32 %71 to i64
  %72 = load %struct.F90_Desc** %d.addr.i6, align 8
  %dim13.i35 = getelementptr inbounds %struct.F90_Desc* %72, i32 0, i32 10
  %arrayidx14.i36 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i35, i32 0, i64 %idxprom12.i34
  %soffset.i37 = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i36, i32 0, i32 3
  store i32 0, i32* %soffset.i37, align 4
  %73 = load i32* %gsize.addr.i11, align 4
  %74 = load i32* %i.addr.i7, align 4
  %idxprom15.i38 = sext i32 %74 to i64
  %75 = load %struct.F90_Desc** %d.addr.i6, align 8
  %dim16.i39 = getelementptr inbounds %struct.F90_Desc* %75, i32 0, i32 10
  %arrayidx17.i40 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i39, i32 0, i64 %idxprom15.i38
  %lstride.i41 = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i40, i32 0, i32 4
  store i32 %73, i32* %lstride.i41, align 4
  %76 = load i32* %gsize.addr.i11, align 4
  %77 = load i32* %lb.addr.i8, align 4
  %mul.i42 = mul nsw i32 %76, %77
  %78 = load i32** %lbase.addr.i10, align 8
  %79 = load i32* %78, align 4
  %sub18.i43 = sub nsw i32 %79, %mul.i42
  store i32 %sub18.i43, i32* %78, align 4
  %80 = load i32* %extent.i12, align 4
  %81 = load i32* %gsize.addr.i11, align 4
  %mul19.i44 = mul nsw i32 %81, %80
  store i32 %mul19.i44, i32* %gsize.addr.i11, align 4
  %82 = load i32* %gsize.addr.i11, align 4
  store i32 %82, i32* %gsize, align 4
  %83 = load %struct.F90_Desc** %d, align 8
  %84 = load i32* %l3.addr, align 4
  %85 = load i32* %u3.addr, align 4
  %86 = load i32* %gsize, align 4
  store %struct.F90_Desc* %83, %struct.F90_Desc** %d.addr.i5, align 8
  store i32 2, i32* %i.addr.i, align 4
  store i32 %84, i32* %lb.addr.i, align 4
  store i32 %85, i32* %ub.addr.i, align 4
  store i32* %lbase, i32** %lbase.addr.i, align 8
  store i32 %86, i32* %gsize.addr.i, align 4
  %87 = load i32* %ub.addr.i, align 4
  %88 = load i32* %lb.addr.i, align 4
  %sub.i = sub nsw i32 %87, %88
  %add.i = add nsw i32 %sub.i, 1
  store i32 %add.i, i32* %extent.i, align 4
  %89 = load i32* %extent.i, align 4
  %cmp.i = icmp slt i32 %89, 0
  br i1 %cmp.i, label %if.then.i, label %pgf90_templatexx.exit

if.then.i:                                        ; preds = %pgf90_templatexx.exit45
  store i32 0, i32* %extent.i, align 4
  %90 = load i32* %lb.addr.i, align 4
  %sub1.i = sub nsw i32 %90, 1
  store i32 %sub1.i, i32* %ub.addr.i, align 4
  br label %pgf90_templatexx.exit

pgf90_templatexx.exit:                            ; preds = %if.then.i, %pgf90_templatexx.exit45
  %91 = load i32* %lb.addr.i, align 4
  %92 = load i32* %i.addr.i, align 4
  %idxprom.i = sext i32 %92 to i64
  %93 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim.i = getelementptr inbounds %struct.F90_Desc* %93, i32 0, i32 10
  %arrayidx.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i, i32 0, i64 %idxprom.i
  %lbound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i, i32 0, i32 0
  store i32 %91, i32* %lbound.i, align 4
  %94 = load i32* %ub.addr.i, align 4
  %95 = load i32* %i.addr.i, align 4
  %idxprom2.i = sext i32 %95 to i64
  %96 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim3.i = getelementptr inbounds %struct.F90_Desc* %96, i32 0, i32 10
  %arrayidx4.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i, i32 0, i64 %idxprom2.i
  %ubound.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i, i32 0, i32 5
  store i32 %94, i32* %ubound.i, align 4
  %97 = load i32* %extent.i, align 4
  %98 = load i32* %i.addr.i, align 4
  %idxprom5.i = sext i32 %98 to i64
  %99 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim6.i = getelementptr inbounds %struct.F90_Desc* %99, i32 0, i32 10
  %arrayidx7.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i, i32 0, i64 %idxprom5.i
  %extent8.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i, i32 0, i32 1
  store i32 %97, i32* %extent8.i, align 4
  %100 = load i32* %i.addr.i, align 4
  %idxprom9.i = sext i32 %100 to i64
  %101 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim10.i = getelementptr inbounds %struct.F90_Desc* %101, i32 0, i32 10
  %arrayidx11.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i, i32 0, i64 %idxprom9.i
  %sstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i, i32 0, i32 2
  store i32 1, i32* %sstride.i, align 4
  %102 = load i32* %i.addr.i, align 4
  %idxprom12.i = sext i32 %102 to i64
  %103 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim13.i = getelementptr inbounds %struct.F90_Desc* %103, i32 0, i32 10
  %arrayidx14.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i, i32 0, i64 %idxprom12.i
  %soffset.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i, i32 0, i32 3
  store i32 0, i32* %soffset.i, align 4
  %104 = load i32* %gsize.addr.i, align 4
  %105 = load i32* %i.addr.i, align 4
  %idxprom15.i = sext i32 %105 to i64
  %106 = load %struct.F90_Desc** %d.addr.i5, align 8
  %dim16.i = getelementptr inbounds %struct.F90_Desc* %106, i32 0, i32 10
  %arrayidx17.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i, i32 0, i64 %idxprom15.i
  %lstride.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i, i32 0, i32 4
  store i32 %104, i32* %lstride.i, align 4
  %107 = load i32* %gsize.addr.i, align 4
  %108 = load i32* %lb.addr.i, align 4
  %mul.i = mul nsw i32 %107, %108
  %109 = load i32** %lbase.addr.i, align 8
  %110 = load i32* %109, align 4
  %sub18.i = sub nsw i32 %110, %mul.i
  store i32 %sub18.i, i32* %109, align 4
  %111 = load i32* %extent.i, align 4
  %112 = load i32* %gsize.addr.i, align 4
  %mul19.i = mul nsw i32 %112, %111
  store i32 %mul19.i, i32* %gsize.addr.i, align 4
  %113 = load i32* %gsize.addr.i, align 4
  store i32 %113, i32* %gsize, align 4
  %114 = load i32* %lbase, align 4
  %115 = load %struct.F90_Desc** %d, align 8
  %lbase3 = getelementptr inbounds %struct.F90_Desc* %115, i32 0, i32 7
  store i32 %114, i32* %lbase3, align 4
  %116 = load i32* %gsize, align 4
  %117 = load %struct.F90_Desc** %d, align 8
  %gsize4 = getelementptr inbounds %struct.F90_Desc* %117, i32 0, i32 6
  store i32 %116, i32* %gsize4, align 4
  %118 = load i32* %gsize, align 4
  %119 = load %struct.F90_Desc** %d, align 8
  %lsize = getelementptr inbounds %struct.F90_Desc* %119, i32 0, i32 5
  store i32 %118, i32* %lsize, align 4
  ret void
}

define  void @pgf90_template3(i8* %d, i8* %flags, i8* %kind, i8* %len, i8* %l1, i8* %u1, i8* %l2, i8* %u2, i8* %l3, i8* %u3) nounwind alwaysinline {
entry:
  %d.addr.i46.i = alloca %struct.F90_Desc*, align 8
  %i.addr.i47.i = alloca i32, align 4
  %lb.addr.i48.i = alloca i32, align 4
  %ub.addr.i49.i = alloca i32, align 4
  %lbase.addr.i50.i = alloca i32*, align 8
  %gsize.addr.i51.i = alloca i32, align 4
  %extent.i52.i = alloca i32, align 4
  %d.addr.i6.i = alloca %struct.F90_Desc*, align 8
  %i.addr.i7.i = alloca i32, align 4
  %lb.addr.i8.i = alloca i32, align 4
  %ub.addr.i9.i = alloca i32, align 4
  %lbase.addr.i10.i = alloca i32*, align 8
  %gsize.addr.i11.i = alloca i32, align 4
  %extent.i12.i = alloca i32, align 4
  %d.addr.i5.i = alloca %struct.F90_Desc*, align 8
  %i.addr.i.i = alloca i32, align 4
  %lb.addr.i.i = alloca i32, align 4
  %ub.addr.i.i = alloca i32, align 4
  %lbase.addr.i.i = alloca i32*, align 8
  %gsize.addr.i.i = alloca i32, align 4
  %extent.i.i = alloca i32, align 4
  %d.addr.i.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i.i = alloca i32, align 4
  %kind.addr.i.i = alloca i32, align 4
  %len.addr.i.i = alloca i32, align 4
  %flags.addr.i.i = alloca i32, align 4
  %pd.addr.i = alloca i8*, align 8
  %flags.addr.i = alloca i32, align 4
  %kind.addr.i = alloca i32, align 4
  %len.addr.i = alloca i32, align 4
  %l1.addr.i = alloca i32, align 4
  %u1.addr.i = alloca i32, align 4
  %l2.addr.i = alloca i32, align 4
  %u2.addr.i = alloca i32, align 4
  %l3.addr.i = alloca i32, align 4
  %u3.addr.i = alloca i32, align 4
  %gsize.i = alloca i32, align 4
  %lbase.i = alloca i32, align 4
  %d.i = alloca %struct.F90_Desc*, align 8
  %d.addr = alloca i8*, align 8
  %flags.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %l1.addr = alloca i8*, align 8
  %u1.addr = alloca i8*, align 8
  %l2.addr = alloca i8*, align 8
  %u2.addr = alloca i8*, align 8
  %l3.addr = alloca i8*, align 8
  %u3.addr = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %flags, i8** %flags.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %l1, i8** %l1.addr, align 8
  store i8* %u1, i8** %u1.addr, align 8
  store i8* %l2, i8** %l2.addr, align 8
  store i8* %u2, i8** %u2.addr, align 8
  store i8* %l3, i8** %l3.addr, align 8
  store i8* %u3, i8** %u3.addr, align 8
  %0 = load i8** %d.addr, align 8
  %1 = load i8** %flags.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %4 = load i8** %kind.addr, align 8
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4
  %7 = load i8** %len.addr, align 8
  %8 = bitcast i8* %7 to i32*
  %9 = load i32* %8, align 4
  %10 = load i8** %l1.addr, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %11, align 4
  %13 = load i8** %u1.addr, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32* %14, align 4
  %16 = load i8** %l2.addr, align 8
  %17 = bitcast i8* %16 to i32*
  %18 = load i32* %17, align 4
  %19 = load i8** %u2.addr, align 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32* %20, align 4
  %22 = load i8** %l3.addr, align 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32* %23, align 4
  %25 = load i8** %u3.addr, align 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32* %26, align 4
  store i8* %0, i8** %pd.addr.i, align 8
  store i32 %3, i32* %flags.addr.i, align 4
  store i32 %6, i32* %kind.addr.i, align 4
  store i32 %9, i32* %len.addr.i, align 4
  store i32 %12, i32* %l1.addr.i, align 4
  store i32 %15, i32* %u1.addr.i, align 4
  store i32 %18, i32* %l2.addr.i, align 4
  store i32 %21, i32* %u2.addr.i, align 4
  store i32 %24, i32* %l3.addr.i, align 4
  store i32 %27, i32* %u3.addr.i, align 4
  %28 = load i8** %pd.addr.i, align 8
  %29 = bitcast i8* %28 to %struct.F90_Desc*
  store %struct.F90_Desc* %29, %struct.F90_Desc** %d.i, align 8
  %30 = load %struct.F90_Desc** %d.i, align 8
  %31 = load i32* %kind.addr.i, align 4
  %32 = load i32* %len.addr.i, align 4
  %33 = load i32* %flags.addr.i, align 4
  store %struct.F90_Desc* %30, %struct.F90_Desc** %d.addr.i.i, align 8
  store i32 3, i32* %rank.addr.i.i, align 4
  store i32 %31, i32* %kind.addr.i.i, align 4
  store i32 %32, i32* %len.addr.i.i, align 4
  store i32 %33, i32* %flags.addr.i.i, align 4
  %34 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %tag.i.i = getelementptr inbounds %struct.F90_Desc* %34, i32 0, i32 0
  store i32 35, i32* %tag.i.i, align 4
  %35 = load i32* %rank.addr.i.i, align 4
  %36 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %rank1.i.i = getelementptr inbounds %struct.F90_Desc* %36, i32 0, i32 1
  store i32 %35, i32* %rank1.i.i, align 4
  %37 = load i32* %kind.addr.i.i, align 4
  %38 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %kind2.i.i = getelementptr inbounds %struct.F90_Desc* %38, i32 0, i32 2
  store i32 %37, i32* %kind2.i.i, align 4
  %39 = load i32* %len.addr.i.i, align 4
  %40 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %len3.i.i = getelementptr inbounds %struct.F90_Desc* %40, i32 0, i32 3
  store i32 %39, i32* %len3.i.i, align 4
  %41 = load i32* %flags.addr.i.i, align 4
  %or.i.i = or i32 %41, 65536
  %or4.i.i = or i32 %or.i.i, 536870912
  %42 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags5.i.i = getelementptr inbounds %struct.F90_Desc* %42, i32 0, i32 4
  store i32 %or4.i.i, i32* %flags5.i.i, align 4
  %43 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %flags6.i.i = getelementptr inbounds %struct.F90_Desc* %43, i32 0, i32 4
  %44 = load i32* %flags6.i.i, align 4
  %and.i.i = and i32 %44, -17301505
  store i32 %and.i.i, i32* %flags6.i.i, align 4
  %45 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gsize.i.i = getelementptr inbounds %struct.F90_Desc* %45, i32 0, i32 6
  store i32 0, i32* %gsize.i.i, align 4
  %46 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lsize.i.i = getelementptr inbounds %struct.F90_Desc* %46, i32 0, i32 5
  store i32 0, i32* %lsize.i.i, align 4
  %47 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %gbase.i.i = getelementptr inbounds %struct.F90_Desc* %47, i32 0, i32 8
  store i32* null, i32** %gbase.i.i, align 8
  %48 = load %struct.F90_Desc** %d.addr.i.i, align 8
  %lbase.i.i = getelementptr inbounds %struct.F90_Desc* %48, i32 0, i32 7
  store i32 1, i32* %lbase.i.i, align 4
  store i32 1, i32* %lbase.i, align 4
  store i32 1, i32* %gsize.i, align 4
  %49 = load %struct.F90_Desc** %d.i, align 8
  %50 = load i32* %l1.addr.i, align 4
  %51 = load i32* %u1.addr.i, align 4
  %52 = load i32* %gsize.i, align 4
  store %struct.F90_Desc* %49, %struct.F90_Desc** %d.addr.i46.i, align 8
  store i32 0, i32* %i.addr.i47.i, align 4
  store i32 %50, i32* %lb.addr.i48.i, align 4
  store i32 %51, i32* %ub.addr.i49.i, align 4
  store i32* %lbase.i, i32** %lbase.addr.i50.i, align 8
  store i32 %52, i32* %gsize.addr.i51.i, align 4
  %53 = load i32* %ub.addr.i49.i, align 4
  %54 = load i32* %lb.addr.i48.i, align 4
  %sub.i53.i = sub nsw i32 %53, %54
  %add.i54.i = add nsw i32 %sub.i53.i, 1
  store i32 %add.i54.i, i32* %extent.i52.i, align 4
  %55 = load i32* %extent.i52.i, align 4
  %cmp.i55.i = icmp slt i32 %55, 0
  br i1 %cmp.i55.i, label %if.then.i57.i, label %pgf90_templatexx.exit85.i

if.then.i57.i:                                    ; preds = %entry
  store i32 0, i32* %extent.i52.i, align 4
  %56 = load i32* %lb.addr.i48.i, align 4
  %sub1.i56.i = sub nsw i32 %56, 1
  store i32 %sub1.i56.i, i32* %ub.addr.i49.i, align 4
  br label %pgf90_templatexx.exit85.i

pgf90_templatexx.exit85.i:                        ; preds = %if.then.i57.i, %entry
  %57 = load i32* %lb.addr.i48.i, align 4
  %58 = load i32* %i.addr.i47.i, align 4
  %idxprom.i58.i = sext i32 %58 to i64
  %59 = load %struct.F90_Desc** %d.addr.i46.i, align 8
  %dim.i59.i = getelementptr inbounds %struct.F90_Desc* %59, i32 0, i32 10
  %arrayidx.i60.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i59.i, i32 0, i64 %idxprom.i58.i
  %lbound.i61.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i60.i, i32 0, i32 0
  store i32 %57, i32* %lbound.i61.i, align 4
  %60 = load i32* %ub.addr.i49.i, align 4
  %61 = load i32* %i.addr.i47.i, align 4
  %idxprom2.i62.i = sext i32 %61 to i64
  %62 = load %struct.F90_Desc** %d.addr.i46.i, align 8
  %dim3.i63.i = getelementptr inbounds %struct.F90_Desc* %62, i32 0, i32 10
  %arrayidx4.i64.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i63.i, i32 0, i64 %idxprom2.i62.i
  %ubound.i65.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i64.i, i32 0, i32 5
  store i32 %60, i32* %ubound.i65.i, align 4
  %63 = load i32* %extent.i52.i, align 4
  %64 = load i32* %i.addr.i47.i, align 4
  %idxprom5.i66.i = sext i32 %64 to i64
  %65 = load %struct.F90_Desc** %d.addr.i46.i, align 8
  %dim6.i67.i = getelementptr inbounds %struct.F90_Desc* %65, i32 0, i32 10
  %arrayidx7.i68.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i67.i, i32 0, i64 %idxprom5.i66.i
  %extent8.i69.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i68.i, i32 0, i32 1
  store i32 %63, i32* %extent8.i69.i, align 4
  %66 = load i32* %i.addr.i47.i, align 4
  %idxprom9.i70.i = sext i32 %66 to i64
  %67 = load %struct.F90_Desc** %d.addr.i46.i, align 8
  %dim10.i71.i = getelementptr inbounds %struct.F90_Desc* %67, i32 0, i32 10
  %arrayidx11.i72.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i71.i, i32 0, i64 %idxprom9.i70.i
  %sstride.i73.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i72.i, i32 0, i32 2
  store i32 1, i32* %sstride.i73.i, align 4
  %68 = load i32* %i.addr.i47.i, align 4
  %idxprom12.i74.i = sext i32 %68 to i64
  %69 = load %struct.F90_Desc** %d.addr.i46.i, align 8
  %dim13.i75.i = getelementptr inbounds %struct.F90_Desc* %69, i32 0, i32 10
  %arrayidx14.i76.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i75.i, i32 0, i64 %idxprom12.i74.i
  %soffset.i77.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i76.i, i32 0, i32 3
  store i32 0, i32* %soffset.i77.i, align 4
  %70 = load i32* %gsize.addr.i51.i, align 4
  %71 = load i32* %i.addr.i47.i, align 4
  %idxprom15.i78.i = sext i32 %71 to i64
  %72 = load %struct.F90_Desc** %d.addr.i46.i, align 8
  %dim16.i79.i = getelementptr inbounds %struct.F90_Desc* %72, i32 0, i32 10
  %arrayidx17.i80.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i79.i, i32 0, i64 %idxprom15.i78.i
  %lstride.i81.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i80.i, i32 0, i32 4
  store i32 %70, i32* %lstride.i81.i, align 4
  %73 = load i32* %gsize.addr.i51.i, align 4
  %74 = load i32* %lb.addr.i48.i, align 4
  %mul.i82.i = mul nsw i32 %73, %74
  %75 = load i32** %lbase.addr.i50.i, align 8
  %76 = load i32* %75, align 4
  %sub18.i83.i = sub nsw i32 %76, %mul.i82.i
  store i32 %sub18.i83.i, i32* %75, align 4
  %77 = load i32* %extent.i52.i, align 4
  %78 = load i32* %gsize.addr.i51.i, align 4
  %mul19.i84.i = mul nsw i32 %78, %77
  store i32 %mul19.i84.i, i32* %gsize.addr.i51.i, align 4
  %79 = load i32* %gsize.addr.i51.i, align 4
  store i32 %79, i32* %gsize.i, align 4
  %80 = load %struct.F90_Desc** %d.i, align 8
  %81 = load i32* %l2.addr.i, align 4
  %82 = load i32* %u2.addr.i, align 4
  %83 = load i32* %gsize.i, align 4
  store %struct.F90_Desc* %80, %struct.F90_Desc** %d.addr.i6.i, align 8
  store i32 1, i32* %i.addr.i7.i, align 4
  store i32 %81, i32* %lb.addr.i8.i, align 4
  store i32 %82, i32* %ub.addr.i9.i, align 4
  store i32* %lbase.i, i32** %lbase.addr.i10.i, align 8
  store i32 %83, i32* %gsize.addr.i11.i, align 4
  %84 = load i32* %ub.addr.i9.i, align 4
  %85 = load i32* %lb.addr.i8.i, align 4
  %sub.i13.i = sub nsw i32 %84, %85
  %add.i14.i = add nsw i32 %sub.i13.i, 1
  store i32 %add.i14.i, i32* %extent.i12.i, align 4
  %86 = load i32* %extent.i12.i, align 4
  %cmp.i15.i = icmp slt i32 %86, 0
  br i1 %cmp.i15.i, label %if.then.i17.i, label %pgf90_templatexx.exit45.i

if.then.i17.i:                                    ; preds = %pgf90_templatexx.exit85.i
  store i32 0, i32* %extent.i12.i, align 4
  %87 = load i32* %lb.addr.i8.i, align 4
  %sub1.i16.i = sub nsw i32 %87, 1
  store i32 %sub1.i16.i, i32* %ub.addr.i9.i, align 4
  br label %pgf90_templatexx.exit45.i

pgf90_templatexx.exit45.i:                        ; preds = %if.then.i17.i, %pgf90_templatexx.exit85.i
  %88 = load i32* %lb.addr.i8.i, align 4
  %89 = load i32* %i.addr.i7.i, align 4
  %idxprom.i18.i = sext i32 %89 to i64
  %90 = load %struct.F90_Desc** %d.addr.i6.i, align 8
  %dim.i19.i = getelementptr inbounds %struct.F90_Desc* %90, i32 0, i32 10
  %arrayidx.i20.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i19.i, i32 0, i64 %idxprom.i18.i
  %lbound.i21.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i20.i, i32 0, i32 0
  store i32 %88, i32* %lbound.i21.i, align 4
  %91 = load i32* %ub.addr.i9.i, align 4
  %92 = load i32* %i.addr.i7.i, align 4
  %idxprom2.i22.i = sext i32 %92 to i64
  %93 = load %struct.F90_Desc** %d.addr.i6.i, align 8
  %dim3.i23.i = getelementptr inbounds %struct.F90_Desc* %93, i32 0, i32 10
  %arrayidx4.i24.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i23.i, i32 0, i64 %idxprom2.i22.i
  %ubound.i25.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i24.i, i32 0, i32 5
  store i32 %91, i32* %ubound.i25.i, align 4
  %94 = load i32* %extent.i12.i, align 4
  %95 = load i32* %i.addr.i7.i, align 4
  %idxprom5.i26.i = sext i32 %95 to i64
  %96 = load %struct.F90_Desc** %d.addr.i6.i, align 8
  %dim6.i27.i = getelementptr inbounds %struct.F90_Desc* %96, i32 0, i32 10
  %arrayidx7.i28.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i27.i, i32 0, i64 %idxprom5.i26.i
  %extent8.i29.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i28.i, i32 0, i32 1
  store i32 %94, i32* %extent8.i29.i, align 4
  %97 = load i32* %i.addr.i7.i, align 4
  %idxprom9.i30.i = sext i32 %97 to i64
  %98 = load %struct.F90_Desc** %d.addr.i6.i, align 8
  %dim10.i31.i = getelementptr inbounds %struct.F90_Desc* %98, i32 0, i32 10
  %arrayidx11.i32.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i31.i, i32 0, i64 %idxprom9.i30.i
  %sstride.i33.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i32.i, i32 0, i32 2
  store i32 1, i32* %sstride.i33.i, align 4
  %99 = load i32* %i.addr.i7.i, align 4
  %idxprom12.i34.i = sext i32 %99 to i64
  %100 = load %struct.F90_Desc** %d.addr.i6.i, align 8
  %dim13.i35.i = getelementptr inbounds %struct.F90_Desc* %100, i32 0, i32 10
  %arrayidx14.i36.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i35.i, i32 0, i64 %idxprom12.i34.i
  %soffset.i37.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i36.i, i32 0, i32 3
  store i32 0, i32* %soffset.i37.i, align 4
  %101 = load i32* %gsize.addr.i11.i, align 4
  %102 = load i32* %i.addr.i7.i, align 4
  %idxprom15.i38.i = sext i32 %102 to i64
  %103 = load %struct.F90_Desc** %d.addr.i6.i, align 8
  %dim16.i39.i = getelementptr inbounds %struct.F90_Desc* %103, i32 0, i32 10
  %arrayidx17.i40.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i39.i, i32 0, i64 %idxprom15.i38.i
  %lstride.i41.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i40.i, i32 0, i32 4
  store i32 %101, i32* %lstride.i41.i, align 4
  %104 = load i32* %gsize.addr.i11.i, align 4
  %105 = load i32* %lb.addr.i8.i, align 4
  %mul.i42.i = mul nsw i32 %104, %105
  %106 = load i32** %lbase.addr.i10.i, align 8
  %107 = load i32* %106, align 4
  %sub18.i43.i = sub nsw i32 %107, %mul.i42.i
  store i32 %sub18.i43.i, i32* %106, align 4
  %108 = load i32* %extent.i12.i, align 4
  %109 = load i32* %gsize.addr.i11.i, align 4
  %mul19.i44.i = mul nsw i32 %109, %108
  store i32 %mul19.i44.i, i32* %gsize.addr.i11.i, align 4
  %110 = load i32* %gsize.addr.i11.i, align 4
  store i32 %110, i32* %gsize.i, align 4
  %111 = load %struct.F90_Desc** %d.i, align 8
  %112 = load i32* %l3.addr.i, align 4
  %113 = load i32* %u3.addr.i, align 4
  %114 = load i32* %gsize.i, align 4
  store %struct.F90_Desc* %111, %struct.F90_Desc** %d.addr.i5.i, align 8
  store i32 2, i32* %i.addr.i.i, align 4
  store i32 %112, i32* %lb.addr.i.i, align 4
  store i32 %113, i32* %ub.addr.i.i, align 4
  store i32* %lbase.i, i32** %lbase.addr.i.i, align 8
  store i32 %114, i32* %gsize.addr.i.i, align 4
  %115 = load i32* %ub.addr.i.i, align 4
  %116 = load i32* %lb.addr.i.i, align 4
  %sub.i.i = sub nsw i32 %115, %116
  %add.i.i = add nsw i32 %sub.i.i, 1
  store i32 %add.i.i, i32* %extent.i.i, align 4
  %117 = load i32* %extent.i.i, align 4
  %cmp.i.i = icmp slt i32 %117, 0
  br i1 %cmp.i.i, label %if.then.i.i, label %pgf90_template3v.exit

if.then.i.i:                                      ; preds = %pgf90_templatexx.exit45.i
  store i32 0, i32* %extent.i.i, align 4
  %118 = load i32* %lb.addr.i.i, align 4
  %sub1.i.i = sub nsw i32 %118, 1
  store i32 %sub1.i.i, i32* %ub.addr.i.i, align 4
  br label %pgf90_template3v.exit

pgf90_template3v.exit:                            ; preds = %if.then.i.i, %pgf90_templatexx.exit45.i
  %119 = load i32* %lb.addr.i.i, align 4
  %120 = load i32* %i.addr.i.i, align 4
  %idxprom.i.i = sext i32 %120 to i64
  %121 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim.i.i = getelementptr inbounds %struct.F90_Desc* %121, i32 0, i32 10
  %arrayidx.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim.i.i, i32 0, i64 %idxprom.i.i
  %lbound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx.i.i, i32 0, i32 0
  store i32 %119, i32* %lbound.i.i, align 4
  %122 = load i32* %ub.addr.i.i, align 4
  %123 = load i32* %i.addr.i.i, align 4
  %idxprom2.i.i = sext i32 %123 to i64
  %124 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim3.i.i = getelementptr inbounds %struct.F90_Desc* %124, i32 0, i32 10
  %arrayidx4.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3.i.i, i32 0, i64 %idxprom2.i.i
  %ubound.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx4.i.i, i32 0, i32 5
  store i32 %122, i32* %ubound.i.i, align 4
  %125 = load i32* %extent.i.i, align 4
  %126 = load i32* %i.addr.i.i, align 4
  %idxprom5.i.i = sext i32 %126 to i64
  %127 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim6.i.i = getelementptr inbounds %struct.F90_Desc* %127, i32 0, i32 10
  %arrayidx7.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6.i.i, i32 0, i64 %idxprom5.i.i
  %extent8.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx7.i.i, i32 0, i32 1
  store i32 %125, i32* %extent8.i.i, align 4
  %128 = load i32* %i.addr.i.i, align 4
  %idxprom9.i.i = sext i32 %128 to i64
  %129 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim10.i.i = getelementptr inbounds %struct.F90_Desc* %129, i32 0, i32 10
  %arrayidx11.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim10.i.i, i32 0, i64 %idxprom9.i.i
  %sstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx11.i.i, i32 0, i32 2
  store i32 1, i32* %sstride.i.i, align 4
  %130 = load i32* %i.addr.i.i, align 4
  %idxprom12.i.i = sext i32 %130 to i64
  %131 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim13.i.i = getelementptr inbounds %struct.F90_Desc* %131, i32 0, i32 10
  %arrayidx14.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim13.i.i, i32 0, i64 %idxprom12.i.i
  %soffset.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx14.i.i, i32 0, i32 3
  store i32 0, i32* %soffset.i.i, align 4
  %132 = load i32* %gsize.addr.i.i, align 4
  %133 = load i32* %i.addr.i.i, align 4
  %idxprom15.i.i = sext i32 %133 to i64
  %134 = load %struct.F90_Desc** %d.addr.i5.i, align 8
  %dim16.i.i = getelementptr inbounds %struct.F90_Desc* %134, i32 0, i32 10
  %arrayidx17.i.i = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim16.i.i, i32 0, i64 %idxprom15.i.i
  %lstride.i.i = getelementptr inbounds %struct.F90_DescDim* %arrayidx17.i.i, i32 0, i32 4
  store i32 %132, i32* %lstride.i.i, align 4
  %135 = load i32* %gsize.addr.i.i, align 4
  %136 = load i32* %lb.addr.i.i, align 4
  %mul.i.i = mul nsw i32 %135, %136
  %137 = load i32** %lbase.addr.i.i, align 8
  %138 = load i32* %137, align 4
  %sub18.i.i = sub nsw i32 %138, %mul.i.i
  store i32 %sub18.i.i, i32* %137, align 4
  %139 = load i32* %extent.i.i, align 4
  %140 = load i32* %gsize.addr.i.i, align 4
  %mul19.i.i = mul nsw i32 %140, %139
  store i32 %mul19.i.i, i32* %gsize.addr.i.i, align 4
  %141 = load i32* %gsize.addr.i.i, align 4
  store i32 %141, i32* %gsize.i, align 4
  %142 = load i32* %lbase.i, align 4
  %143 = load %struct.F90_Desc** %d.i, align 8
  %lbase3.i = getelementptr inbounds %struct.F90_Desc* %143, i32 0, i32 7
  store i32 %142, i32* %lbase3.i, align 4
  %144 = load i32* %gsize.i, align 4
  %145 = load %struct.F90_Desc** %d.i, align 8
  %gsize4.i = getelementptr inbounds %struct.F90_Desc* %145, i32 0, i32 6
  store i32 %144, i32* %gsize4.i, align 4
  %146 = load i32* %gsize.i, align 4
  %147 = load %struct.F90_Desc** %d.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %147, i32 0, i32 5
  store i32 %146, i32* %lsize.i, align 4
  ret void
}

define  double @__pgi_spacingd(double %f) nounwind alwaysinline {
entry:
  %f.addr = alloca double, align 8
  %e = alloca i64, align 8
  %i = alloca i64, align 8
  store double %f, double* %f.addr, align 8
  %0 = load double* %f.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %0)
  store i64 %call, i64* %i, align 8
  %1 = load i64* %i, align 8
  %shr = ashr i64 %1, 52
  %and = and i64 %shr, 2047
  %sub = sub nsw i64 %and, 52
  store i64 %sub, i64* %e, align 8
  %2 = load i64* %e, align 8
  %cmp = icmp slt i64 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 1, i64* %e, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64* %e, align 8
  %shl = shl i64 %3, 52
  store i64 %shl, i64* %i, align 8
  %4 = load i64* %i, align 8
  %call1 = call  double @__nv_longlong_as_double(i64 %4)
  ret double %call1
}

define  void @__pgi_memcpy(i8* %dst, i8* %src, i32 %num_bytes) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %num_bytes.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i32 %num_bytes, i32* %num_bytes.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %num_bytes.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8* %3, i64 %idxprom
  %4 = load i8* %arrayidx, align 1
  %5 = load i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i8** %dst.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %6, i64 %idxprom1
  store i8 %4, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define  i32 @__pgi_memcmp(i8* %s1, i8* %s2, i32 %num_bytes) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %num_bytes.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  store i32 %num_bytes, i32* %num_bytes.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %num_bytes.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i8** %s1.addr, align 8
  %arrayidx = getelementptr inbounds i8* %3, i64 %idxprom
  %4 = load i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %5 = load i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i8** %s2.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %6, i64 %idxprom1
  %7 = load i8* %arrayidx2, align 1
  %conv3 = sext i8 %7 to i32
  %cmp4 = icmp slt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %8 = load i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load i8** %s1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8* %9, i64 %idxprom6
  %10 = load i8* %arrayidx7, align 1
  %conv8 = sext i8 %10 to i32
  %11 = load i32* %i, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load i8** %s2.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %12, i64 %idxprom9
  %13 = load i8* %arrayidx10, align 1
  %conv11 = sext i8 %13 to i32
  %cmp12 = icmp sgt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %14 = load i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %15 = load i32* %retval
  ret i32 %15
}

define  void @__pgi_memset(i8* %dst, i8 %src, i32 %num_bytes) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8, align 1
  %num_bytes.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i8 %src, i8* %src.addr, align 1
  store i32 %num_bytes, i32* %num_bytes.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %num_bytes.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8* %src.addr, align 1
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8** %dst.addr, align 8
  %arrayidx = getelementptr inbounds i8* %4, i64 %idxprom
  store i8 %2, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define  i32 @__pgi_transfer_real2int(float %x, i32 %i) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %i.addr = alloca i32, align 4
  store float %x, float* %x.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %0)
  ret i32 %call
}

define  float @__pgi_transfer_int2real(i32 %i, float %x) nounwind alwaysinline {
entry:
  %i.addr = alloca i32, align 4
  %x.addr = alloca float, align 4
  store i32 %i, i32* %i.addr, align 4
  store float %x, float* %x.addr, align 4
  %0 = load i32* %i.addr, align 4
  %call = call  float @__nv_int_as_float(i32 %0)
  ret float %call
}

define  i64 @__pgi_transfer_dbl2long(double %x, i64 %i) nounwind alwaysinline {
entry:
  %x.addr = alloca double, align 8
  %i.addr = alloca i64, align 8
  store double %x, double* %x.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %0)
  ret i64 %call
}

define  double @__pgi_transfer_long2dbl(i64 %i, double %x) nounwind alwaysinline {
entry:
  %i.addr = alloca i64, align 8
  %x.addr = alloca double, align 8
  store i64 %i, i64* %i.addr, align 8
  store double %x, double* %x.addr, align 8
  %0 = load i64* %i.addr, align 8
  %call = call  double @__nv_longlong_as_double(i64 %0)
  ret double %call
}

define  i32 @__pgi_transfer_char2int(i8* %x, i32 %i, i64 %n) nounwind alwaysinline {
entry:
  %x.addr = alloca i8*, align 8
  %i.addr = alloca i32, align 4
  %n.addr = alloca i64, align 8
  store i8* %x, i8** %x.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %x.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %1, align 4
  ret i32 %2
}

define  void @__pgi_transfer_int2char(i8* %x, i8* %y, i8* %z, i64 %len1, i64 %len2) nounwind alwaysinline {
entry:
  %dst.addr.i = alloca i8*, align 8
  %src.addr.i = alloca i8*, align 8
  %num_bytes.addr.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %z.addr = alloca i8*, align 8
  %len1.addr = alloca i64, align 8
  %len2.addr = alloca i64, align 8
  store i8* %x, i8** %x.addr, align 8
  store i8* %y, i8** %y.addr, align 8
  store i8* %z, i8** %z.addr, align 8
  store i64 %len1, i64* %len1.addr, align 8
  store i64 %len2, i64* %len2.addr, align 8
  %0 = load i8** %x.addr, align 8
  %1 = load i8** %y.addr, align 8
  %2 = load i64* %len1.addr, align 8
  %conv = trunc i64 %2 to i32
  store i8* %0, i8** %dst.addr.i, align 8
  store i8* %1, i8** %src.addr.i, align 8
  store i32 %conv, i32* %num_bytes.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %entry
  %3 = load i32* %i.i, align 4
  %4 = load i32* %num_bytes.addr.i, align 4
  %cmp.i = icmp slt i32 %3, %4
  br i1 %cmp.i, label %for.body.i, label %__pgi_memcpy.exit

for.body.i:                                       ; preds = %for.cond.i
  %5 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %5 to i64
  %6 = load i8** %src.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %6, i64 %idxprom.i
  %7 = load i8* %arrayidx.i, align 1
  %8 = load i32* %i.i, align 4
  %idxprom1.i = sext i32 %8 to i64
  %9 = load i8** %dst.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8* %9, i64 %idxprom1.i
  store i8 %7, i8* %arrayidx2.i, align 1
  %10 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %10, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

__pgi_memcpy.exit:                                ; preds = %for.cond.i
  ret void
}

define  void @pghpf_transfer(i8* %rb, i8* %sb, i8* %rs, i8* %ss, i8* %rd, i8* %sd, i8* %rsd, i8* %msd) nounwind alwaysinline {
entry:
  %dst.addr.i209 = alloca i8*, align 8
  %src.addr.i210 = alloca i8*, align 8
  %num_bytes.addr.i211 = alloca i32, align 4
  %i.i212 = alloca i32, align 4
  %dst.addr.i196 = alloca i8*, align 8
  %src.addr.i197 = alloca i8*, align 8
  %num_bytes.addr.i198 = alloca i32, align 4
  %i.i199 = alloca i32, align 4
  %dst.addr.i183 = alloca i8*, align 8
  %src.addr.i184 = alloca i8*, align 8
  %num_bytes.addr.i185 = alloca i32, align 4
  %i.i186 = alloca i32, align 4
  %dst.addr.i = alloca i8*, align 8
  %src.addr.i = alloca i8*, align 8
  %num_bytes.addr.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %rb.addr = alloca i8*, align 8
  %sb.addr = alloca i8*, align 8
  %rs.addr = alloca i8*, align 8
  %ss.addr = alloca i8*, align 8
  %rd.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %rsd.addr = alloca i8*, align 8
  %msd.addr = alloca i8*, align 8
  %result_scalar = alloca i32, align 4
  %source_scalar = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %size = alloca i32, align 4
  %rsize = alloca i32, align 4
  %ssize = alloca i32, align 4
  %extent = alloca i32, align 4
  %contiguous = alloca i32, align 4
  %offset = alloca i32, align 4
  %lbi = alloca i32, align 4
  %extenti = alloca i32, align 4
  %stridei = alloca i32, align 4
  %ioff = alloca i32, align 4
  %cntr = alloca i32*, align 8
  %result = alloca %struct.F90_Desc*, align 8
  %source = alloca %struct.F90_Desc*, align 8
  store i8* %rb, i8** %rb.addr, align 8
  store i8* %sb, i8** %sb.addr, align 8
  store i8* %rs, i8** %rs.addr, align 8
  store i8* %ss, i8** %ss.addr, align 8
  store i8* %rd, i8** %rd.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i8* %rsd, i8** %rsd.addr, align 8
  store i8* %msd, i8** %msd.addr, align 8
  %0 = load i8** %rd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %result, align 8
  %2 = load i8** %sd.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc*
  store %struct.F90_Desc* %3, %struct.F90_Desc** %source, align 8
  %4 = load %struct.F90_Desc** %result, align 8
  %tag = getelementptr inbounds %struct.F90_Desc* %4, i32 0, i32 0
  %5 = load i32* %tag, align 4
  %cmp = icmp ne i32 %5, 35
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %result_scalar, align 4
  %6 = load %struct.F90_Desc** %source, align 8
  %tag1 = getelementptr inbounds %struct.F90_Desc* %6, i32 0, i32 0
  %7 = load i32* %tag1, align 4
  %cmp2 = icmp ne i32 %7, 35
  %conv3 = zext i1 %cmp2 to i32
  store i32 %conv3, i32* %source_scalar, align 4
  %8 = load i8** %rs.addr, align 8
  %9 = bitcast i8* %8 to i32*
  %10 = load i32* %9, align 4
  store i32 %10, i32* %rsize, align 4
  %11 = load i8** %ss.addr, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  store i32 %13, i32* %ssize, align 4
  %14 = load i32* %result_scalar, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %15 = load i32* %source_scalar, align 4
  %tobool4 = icmp ne i32 %15, 0
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %16 = load i32* %rsize, align 4
  %17 = load i32* %ssize, align 4
  %cmp5 = icmp sgt i32 %16, %17
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.then
  %18 = load i32* %ssize, align 4
  store i32 %18, i32* %rsize, align 4
  br label %if.end

if.end:                                           ; preds = %if.then7, %if.then
  %19 = load i8** %rb.addr, align 8
  %20 = load i8** %sb.addr, align 8
  %21 = load i32* %rsize, align 4
  store i8* %19, i8** %dst.addr.i, align 8
  store i8* %20, i8** %src.addr.i, align 8
  store i32 %21, i32* %num_bytes.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.end
  %22 = load i32* %i.i, align 4
  %23 = load i32* %num_bytes.addr.i, align 4
  %cmp.i = icmp slt i32 %22, %23
  br i1 %cmp.i, label %for.body.i, label %__pgi_memcpy.exit

for.body.i:                                       ; preds = %for.cond.i
  %24 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %24 to i64
  %25 = load i8** %src.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %25, i64 %idxprom.i
  %26 = load i8* %arrayidx.i, align 1
  %27 = load i32* %i.i, align 4
  %idxprom1.i = sext i32 %27 to i64
  %28 = load i8** %dst.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8* %28, i64 %idxprom1.i
  store i8 %26, i8* %arrayidx2.i, align 1
  %29 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %29, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

__pgi_memcpy.exit:                                ; preds = %for.cond.i
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %30 = load i32* %source_scalar, align 4
  %tobool8 = icmp ne i32 %30, 0
  br i1 %tobool8, label %if.then9, label %if.end26

if.then9:                                         ; preds = %if.else
  %31 = load %struct.F90_Desc** %result, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %31, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent10 = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %32 = load i32* %extent10, align 4
  store i32 %32, i32* %extent, align 4
  %33 = load i32* %extent, align 4
  %cmp11 = icmp slt i32 %33, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.then9
  store i32 0, i32* %extent, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.then9
  %34 = load i32* %extent, align 4
  %35 = load i32* %rsize, align 4
  %mul = mul nsw i32 %35, %34
  store i32 %mul, i32* %rsize, align 4
  br label %while.cond

while.cond:                                       ; preds = %__pgi_memcpy.exit221, %if.end14
  %36 = load i32* %ssize, align 4
  %cmp15 = icmp sgt i32 %36, 0
  br i1 %cmp15, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %37 = load i32* %rsize, align 4
  %cmp17 = icmp sgt i32 %37, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %38 = phi i1 [ false, %while.cond ], [ %cmp17, %land.rhs ]
  br i1 %38, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %39 = load i32* %rsize, align 4
  store i32 %39, i32* %size, align 4
  %40 = load i32* %size, align 4
  %41 = load i32* %ssize, align 4
  %cmp19 = icmp sgt i32 %40, %41
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %while.body
  %42 = load i32* %ssize, align 4
  store i32 %42, i32* %size, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %while.body
  %43 = load i8** %rb.addr, align 8
  %44 = load i8** %sb.addr, align 8
  %45 = load i32* %size, align 4
  store i8* %43, i8** %dst.addr.i209, align 8
  store i8* %44, i8** %src.addr.i210, align 8
  store i32 %45, i32* %num_bytes.addr.i211, align 4
  store i32 0, i32* %i.i212, align 4
  br label %for.cond.i214

for.cond.i214:                                    ; preds = %for.body.i219, %if.end22
  %46 = load i32* %i.i212, align 4
  %47 = load i32* %num_bytes.addr.i211, align 4
  %cmp.i213 = icmp slt i32 %46, %47
  br i1 %cmp.i213, label %for.body.i219, label %__pgi_memcpy.exit221

for.body.i219:                                    ; preds = %for.cond.i214
  %48 = load i32* %i.i212, align 4
  %idxprom.i215 = sext i32 %48 to i64
  %49 = load i8** %src.addr.i210, align 8
  %arrayidx.i216 = getelementptr inbounds i8* %49, i64 %idxprom.i215
  %50 = load i8* %arrayidx.i216, align 1
  %51 = load i32* %i.i212, align 4
  %idxprom1.i217 = sext i32 %51 to i64
  %52 = load i8** %dst.addr.i209, align 8
  %arrayidx2.i218 = getelementptr inbounds i8* %52, i64 %idxprom1.i217
  store i8 %50, i8* %arrayidx2.i218, align 1
  %53 = load i32* %i.i212, align 4
  %inc.i220 = add nsw i32 %53, 1
  store i32 %inc.i220, i32* %i.i212, align 4
  br label %for.cond.i214

__pgi_memcpy.exit221:                             ; preds = %for.cond.i214
  %54 = load i32* %size, align 4
  %55 = load i8** %rb.addr, align 8
  %idx.ext = sext i32 %54 to i64
  %add.ptr = getelementptr inbounds i8* %55, i64 %idx.ext
  store i8* %add.ptr, i8** %rb.addr, align 8
  %56 = load i32* %size, align 4
  %57 = load i8** %sb.addr, align 8
  %idx.ext23 = sext i32 %56 to i64
  %add.ptr24 = getelementptr inbounds i8* %57, i64 %idx.ext23
  store i8* %add.ptr24, i8** %sb.addr, align 8
  %58 = load i32* %size, align 4
  %59 = load i32* %ssize, align 4
  %sub = sub nsw i32 %59, %58
  store i32 %sub, i32* %ssize, align 4
  %60 = load i32* %size, align 4
  %61 = load i32* %rsize, align 4
  %sub25 = sub nsw i32 %61, %60
  store i32 %sub25, i32* %rsize, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %return

if.end26:                                         ; preds = %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  store i32 1, i32* %extent, align 4
  store i32 1, i32* %contiguous, align 4
  %62 = load %struct.F90_Desc** %source, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc* %62, i32 0, i32 7
  %63 = load i32* %lbase, align 4
  store i32 %63, i32* %offset, align 4
  %64 = load i8** %rd.addr, align 8
  %65 = bitcast i8* %64 to i32*
  %add.ptr28 = getelementptr inbounds i32* %65, i64 6
  store i32* %add.ptr28, i32** %cntr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end27
  %66 = load i32* %i, align 4
  %67 = load %struct.F90_Desc** %source, align 8
  %rank = getelementptr inbounds %struct.F90_Desc* %67, i32 0, i32 1
  %68 = load i32* %rank, align 4
  %cmp29 = icmp slt i32 %66, %68
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %69 = load i32* %i, align 4
  %idxprom = sext i32 %69 to i64
  %70 = load i32** %cntr, align 8
  %arrayidx31 = getelementptr inbounds i32* %70, i64 %idxprom
  store i32 0, i32* %arrayidx31, align 4
  %71 = load i32* %i, align 4
  %idxprom32 = sext i32 %71 to i64
  %72 = load %struct.F90_Desc** %source, align 8
  %dim33 = getelementptr inbounds %struct.F90_Desc* %72, i32 0, i32 10
  %arrayidx34 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim33, i32 0, i64 %idxprom32
  %lbound = getelementptr inbounds %struct.F90_DescDim* %arrayidx34, i32 0, i32 0
  %73 = load i32* %lbound, align 4
  store i32 %73, i32* %lbi, align 4
  %74 = load i32* %i, align 4
  %idxprom35 = sext i32 %74 to i64
  %75 = load %struct.F90_Desc** %source, align 8
  %dim36 = getelementptr inbounds %struct.F90_Desc* %75, i32 0, i32 10
  %arrayidx37 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim36, i32 0, i64 %idxprom35
  %extent38 = getelementptr inbounds %struct.F90_DescDim* %arrayidx37, i32 0, i32 1
  %76 = load i32* %extent38, align 4
  store i32 %76, i32* %extenti, align 4
  %77 = load i32* %i, align 4
  %idxprom39 = sext i32 %77 to i64
  %78 = load %struct.F90_Desc** %source, align 8
  %dim40 = getelementptr inbounds %struct.F90_Desc* %78, i32 0, i32 10
  %arrayidx41 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim40, i32 0, i64 %idxprom39
  %lstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx41, i32 0, i32 4
  %79 = load i32* %lstride, align 4
  store i32 %79, i32* %stridei, align 4
  %80 = load i32* %i, align 4
  %cmp42 = icmp eq i32 %80, 0
  br i1 %cmp42, label %if.then44, label %if.else67

if.then44:                                        ; preds = %for.body
  %81 = load i32* %stridei, align 4
  %82 = load i32* %extent, align 4
  %cmp45 = icmp ne i32 %81, %82
  br i1 %cmp45, label %if.then47, label %if.else49

if.then47:                                        ; preds = %if.then44
  store i32 0, i32* %contiguous, align 4
  %83 = load i32* %stridei, align 4
  %84 = load i32* %lbi, align 4
  %sub48 = sub nsw i32 %83, %84
  %85 = load i32* %offset, align 4
  %add = add nsw i32 %85, %sub48
  store i32 %add, i32* %offset, align 4
  br label %if.end52

if.else49:                                        ; preds = %if.then44
  %86 = load i32* %lbi, align 4
  %sub50 = sub nsw i32 %86, 1
  %87 = load i32* %offset, align 4
  %add51 = add nsw i32 %87, %sub50
  store i32 %add51, i32* %offset, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.else49, %if.then47
  %88 = load i32* %stridei, align 4
  %cmp53 = icmp sge i32 %88, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end52
  %89 = load i32* %extenti, align 4
  %sub56 = sub nsw i32 %89, 1
  %90 = load i32* %stridei, align 4
  %mul57 = mul nsw i32 %sub56, %90
  %91 = load i32* %extent, align 4
  %add58 = add nsw i32 %mul57, %91
  store i32 %add58, i32* %extent, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end52
  %92 = load i32* %stridei, align 4
  %cmp60 = icmp slt i32 %92, 0
  br i1 %cmp60, label %if.then62, label %if.end66

if.then62:                                        ; preds = %if.end59
  %93 = load i32* %extenti, align 4
  %sub63 = sub nsw i32 %93, 1
  %94 = load i32* %stridei, align 4
  %mul64 = mul nsw i32 %sub63, %94
  %95 = load i32* %extent, align 4
  %sub65 = sub nsw i32 %mul64, %95
  store i32 %sub65, i32* %extent, align 4
  br label %if.end66

if.end66:                                         ; preds = %if.then62, %if.end59
  br label %if.end91

if.else67:                                        ; preds = %for.body
  %96 = load i32* %stridei, align 4
  %97 = load i32* %extent, align 4
  %cmp68 = icmp ne i32 %96, %97
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.else67
  store i32 0, i32* %contiguous, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.else67
  %98 = load i32* %lbi, align 4
  %99 = load i32* %stridei, align 4
  %mul72 = mul nsw i32 %98, %99
  %100 = load i32* %offset, align 4
  %add73 = add nsw i32 %100, %mul72
  store i32 %add73, i32* %offset, align 4
  %101 = load i32* %extenti, align 4
  %sub74 = sub nsw i32 %101, 1
  %102 = load i32* %stridei, align 4
  %mul75 = mul nsw i32 %sub74, %102
  store i32 %mul75, i32* %ioff, align 4
  %103 = load i32* %ioff, align 4
  %cmp76 = icmp slt i32 %103, 0
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end71
  %104 = load i32* %ioff, align 4
  %sub79 = sub nsw i32 0, %104
  store i32 %sub79, i32* %ioff, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.end71
  %105 = load i32* %extent, align 4
  %cmp81 = icmp sge i32 %105, 0
  br i1 %cmp81, label %if.then83, label %if.end85

if.then83:                                        ; preds = %if.end80
  %106 = load i32* %ioff, align 4
  %107 = load i32* %extent, align 4
  %add84 = add nsw i32 %107, %106
  store i32 %add84, i32* %extent, align 4
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %if.end80
  %108 = load i32* %extent, align 4
  %cmp86 = icmp slt i32 %108, 0
  br i1 %cmp86, label %if.then88, label %if.end90

if.then88:                                        ; preds = %if.end85
  %109 = load i32* %ioff, align 4
  %110 = load i32* %extent, align 4
  %sub89 = sub nsw i32 %110, %109
  store i32 %sub89, i32* %extent, align 4
  br label %if.end90

if.end90:                                         ; preds = %if.then88, %if.end85
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end66
  %111 = load i32* %extenti, align 4
  %112 = load i32* %ssize, align 4
  %mul92 = mul nsw i32 %112, %111
  store i32 %mul92, i32* %ssize, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end91
  %113 = load i32* %i, align 4
  %inc = add nsw i32 %113, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %114 = load i32* %contiguous, align 4
  %tobool93 = icmp ne i32 %114, 0
  br i1 %tobool93, label %if.then94, label %if.else100

if.then94:                                        ; preds = %for.end
  %115 = load i8** %ss.addr, align 8
  %116 = load i8* %115, align 1
  %conv95 = sext i8 %116 to i32
  store i32 %conv95, i32* %ssize, align 4
  %117 = load i8** %rb.addr, align 8
  %118 = load i8** %sb.addr, align 8
  %119 = load i32* %ssize, align 4
  %120 = load i32* %offset, align 4
  %mul96 = mul nsw i32 %119, %120
  %idx.ext97 = sext i32 %mul96 to i64
  %add.ptr98 = getelementptr inbounds i8* %118, i64 %idx.ext97
  %121 = load i32* %ssize, align 4
  %122 = load i32* %extent, align 4
  %mul99 = mul nsw i32 %121, %122
  store i8* %117, i8** %dst.addr.i196, align 8
  store i8* %add.ptr98, i8** %src.addr.i197, align 8
  store i32 %mul99, i32* %num_bytes.addr.i198, align 4
  store i32 0, i32* %i.i199, align 4
  br label %for.cond.i201

for.cond.i201:                                    ; preds = %for.body.i206, %if.then94
  %123 = load i32* %i.i199, align 4
  %124 = load i32* %num_bytes.addr.i198, align 4
  %cmp.i200 = icmp slt i32 %123, %124
  br i1 %cmp.i200, label %for.body.i206, label %__pgi_memcpy.exit208

for.body.i206:                                    ; preds = %for.cond.i201
  %125 = load i32* %i.i199, align 4
  %idxprom.i202 = sext i32 %125 to i64
  %126 = load i8** %src.addr.i197, align 8
  %arrayidx.i203 = getelementptr inbounds i8* %126, i64 %idxprom.i202
  %127 = load i8* %arrayidx.i203, align 1
  %128 = load i32* %i.i199, align 4
  %idxprom1.i204 = sext i32 %128 to i64
  %129 = load i8** %dst.addr.i196, align 8
  %arrayidx2.i205 = getelementptr inbounds i8* %129, i64 %idxprom1.i204
  store i8 %127, i8* %arrayidx2.i205, align 1
  %130 = load i32* %i.i199, align 4
  %inc.i207 = add nsw i32 %130, 1
  store i32 %inc.i207, i32* %i.i199, align 4
  br label %for.cond.i201

__pgi_memcpy.exit208:                             ; preds = %for.cond.i201
  br label %if.end182

if.else100:                                       ; preds = %for.end
  %131 = load %struct.F90_Desc** %result, align 8
  %dim101 = getelementptr inbounds %struct.F90_Desc* %131, i32 0, i32 10
  %arrayidx102 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim101, i32 0, i64 0
  %extent103 = getelementptr inbounds %struct.F90_DescDim* %arrayidx102, i32 0, i32 1
  %132 = load i32* %extent103, align 4
  store i32 %132, i32* %extent, align 4
  %133 = load i32* %extent, align 4
  %cmp104 = icmp slt i32 %133, 0
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.else100
  store i32 0, i32* %extent, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.else100
  %134 = load i32* %extent, align 4
  %135 = load i32* %rsize, align 4
  %mul108 = mul nsw i32 %135, %134
  store i32 %mul108, i32* %rsize, align 4
  br label %while.cond109

while.cond109:                                    ; preds = %__pgi_memcpy.exit195, %if.end107
  %136 = load i32* %ssize, align 4
  %cmp110 = icmp sgt i32 %136, 0
  br i1 %cmp110, label %land.rhs112, label %land.end115

land.rhs112:                                      ; preds = %while.cond109
  %137 = load i32* %rsize, align 4
  %cmp113 = icmp sgt i32 %137, 0
  br label %land.end115

land.end115:                                      ; preds = %land.rhs112, %while.cond109
  %138 = phi i1 [ false, %while.cond109 ], [ %cmp113, %land.rhs112 ]
  br i1 %138, label %while.body116, label %while.end181

while.body116:                                    ; preds = %land.end115
  store i32 0, i32* %ioff, align 4
  %139 = load %struct.F90_Desc** %source, align 8
  %rank117 = getelementptr inbounds %struct.F90_Desc* %139, i32 0, i32 1
  %140 = load i32* %rank117, align 4
  %sub118 = sub nsw i32 %140, 1
  store i32 %sub118, i32* %i, align 4
  br label %for.cond119

for.cond119:                                      ; preds = %for.inc164, %while.body116
  %141 = load i32* %i, align 4
  %cmp120 = icmp sge i32 %141, 0
  br i1 %cmp120, label %for.body122, label %for.end165

for.body122:                                      ; preds = %for.cond119
  %142 = load i32* %i, align 4
  %idxprom123 = sext i32 %142 to i64
  %143 = load %struct.F90_Desc** %source, align 8
  %dim124 = getelementptr inbounds %struct.F90_Desc* %143, i32 0, i32 10
  %arrayidx125 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim124, i32 0, i64 %idxprom123
  %extent126 = getelementptr inbounds %struct.F90_DescDim* %arrayidx125, i32 0, i32 1
  %144 = load i32* %extent126, align 4
  store i32 %144, i32* %extenti, align 4
  %145 = load i32* %i, align 4
  %idxprom127 = sext i32 %145 to i64
  %146 = load %struct.F90_Desc** %source, align 8
  %dim128 = getelementptr inbounds %struct.F90_Desc* %146, i32 0, i32 10
  %arrayidx129 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim128, i32 0, i64 %idxprom127
  %lstride130 = getelementptr inbounds %struct.F90_DescDim* %arrayidx129, i32 0, i32 4
  %147 = load i32* %lstride130, align 4
  store i32 %147, i32* %stridei, align 4
  %148 = load i32* %i, align 4
  %idxprom131 = sext i32 %148 to i64
  %149 = load i32** %cntr, align 8
  %arrayidx132 = getelementptr inbounds i32* %149, i64 %idxprom131
  %150 = load i32* %arrayidx132, align 4
  %151 = load i32* %stridei, align 4
  %mul133 = mul nsw i32 %150, %151
  %152 = load i32* %ioff, align 4
  %add134 = add nsw i32 %152, %mul133
  store i32 %add134, i32* %ioff, align 4
  %153 = load i32* %i, align 4
  %cmp135 = icmp eq i32 %153, 0
  br i1 %cmp135, label %if.then137, label %if.end163

if.then137:                                       ; preds = %for.body122
  store i32 0, i32* %j, align 4
  %154 = load i32* %j, align 4
  %idxprom138 = sext i32 %154 to i64
  %155 = load i32** %cntr, align 8
  %arrayidx139 = getelementptr inbounds i32* %155, i64 %idxprom138
  %156 = load i32* %arrayidx139, align 4
  %inc140 = add nsw i32 %156, 1
  store i32 %inc140, i32* %arrayidx139, align 4
  br label %while.cond141

while.cond141:                                    ; preds = %if.end154, %if.then137
  %157 = load i32* %j, align 4
  %idxprom142 = sext i32 %157 to i64
  %158 = load i32** %cntr, align 8
  %arrayidx143 = getelementptr inbounds i32* %158, i64 %idxprom142
  %159 = load i32* %arrayidx143, align 4
  %160 = load i32* %extenti, align 4
  %cmp144 = icmp eq i32 %159, %160
  br i1 %cmp144, label %while.body146, label %while.end162

while.body146:                                    ; preds = %while.cond141
  %161 = load i32* %j, align 4
  %inc147 = add nsw i32 %161, 1
  store i32 %inc147, i32* %j, align 4
  %idxprom148 = sext i32 %161 to i64
  %162 = load i32** %cntr, align 8
  %arrayidx149 = getelementptr inbounds i32* %162, i64 %idxprom148
  store i32 0, i32* %arrayidx149, align 4
  %163 = load i32* %j, align 4
  %164 = load %struct.F90_Desc** %source, align 8
  %rank150 = getelementptr inbounds %struct.F90_Desc* %164, i32 0, i32 1
  %165 = load i32* %rank150, align 4
  %cmp151 = icmp eq i32 %163, %165
  br i1 %cmp151, label %if.then153, label %if.end154

if.then153:                                       ; preds = %while.body146
  br label %while.end162

if.end154:                                        ; preds = %while.body146
  %166 = load i32* %j, align 4
  %idxprom155 = sext i32 %166 to i64
  %167 = load i32** %cntr, align 8
  %arrayidx156 = getelementptr inbounds i32* %167, i64 %idxprom155
  %168 = load i32* %arrayidx156, align 4
  %inc157 = add nsw i32 %168, 1
  store i32 %inc157, i32* %arrayidx156, align 4
  %169 = load i32* %j, align 4
  %idxprom158 = sext i32 %169 to i64
  %170 = load %struct.F90_Desc** %source, align 8
  %dim159 = getelementptr inbounds %struct.F90_Desc* %170, i32 0, i32 10
  %arrayidx160 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim159, i32 0, i64 %idxprom158
  %extent161 = getelementptr inbounds %struct.F90_DescDim* %arrayidx160, i32 0, i32 1
  %171 = load i32* %extent161, align 4
  store i32 %171, i32* %extenti, align 4
  br label %while.cond141

while.end162:                                     ; preds = %if.then153, %while.cond141
  br label %if.end163

if.end163:                                        ; preds = %while.end162, %for.body122
  br label %for.inc164

for.inc164:                                       ; preds = %if.end163
  %172 = load i32* %i, align 4
  %dec = add nsw i32 %172, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond119

for.end165:                                       ; preds = %for.cond119
  %173 = load i32* %rsize, align 4
  store i32 %173, i32* %size, align 4
  %174 = load i32* %size, align 4
  %175 = load i8** %ss.addr, align 8
  %176 = load i8* %175, align 1
  %conv166 = sext i8 %176 to i32
  %cmp167 = icmp sgt i32 %174, %conv166
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %for.end165
  %177 = load i8** %ss.addr, align 8
  %178 = load i8* %177, align 1
  %conv170 = sext i8 %178 to i32
  store i32 %conv170, i32* %size, align 4
  br label %if.end171

if.end171:                                        ; preds = %if.then169, %for.end165
  %179 = load i8** %rb.addr, align 8
  %180 = load i8** %sb.addr, align 8
  %181 = load i8** %ss.addr, align 8
  %182 = load i8* %181, align 1
  %conv172 = sext i8 %182 to i32
  %183 = load i32* %offset, align 4
  %184 = load i32* %ioff, align 4
  %add173 = add nsw i32 %183, %184
  %mul174 = mul nsw i32 %conv172, %add173
  %idx.ext175 = sext i32 %mul174 to i64
  %add.ptr176 = getelementptr inbounds i8* %180, i64 %idx.ext175
  %185 = load i32* %size, align 4
  store i8* %179, i8** %dst.addr.i183, align 8
  store i8* %add.ptr176, i8** %src.addr.i184, align 8
  store i32 %185, i32* %num_bytes.addr.i185, align 4
  store i32 0, i32* %i.i186, align 4
  br label %for.cond.i188

for.cond.i188:                                    ; preds = %for.body.i193, %if.end171
  %186 = load i32* %i.i186, align 4
  %187 = load i32* %num_bytes.addr.i185, align 4
  %cmp.i187 = icmp slt i32 %186, %187
  br i1 %cmp.i187, label %for.body.i193, label %__pgi_memcpy.exit195

for.body.i193:                                    ; preds = %for.cond.i188
  %188 = load i32* %i.i186, align 4
  %idxprom.i189 = sext i32 %188 to i64
  %189 = load i8** %src.addr.i184, align 8
  %arrayidx.i190 = getelementptr inbounds i8* %189, i64 %idxprom.i189
  %190 = load i8* %arrayidx.i190, align 1
  %191 = load i32* %i.i186, align 4
  %idxprom1.i191 = sext i32 %191 to i64
  %192 = load i8** %dst.addr.i183, align 8
  %arrayidx2.i192 = getelementptr inbounds i8* %192, i64 %idxprom1.i191
  store i8 %190, i8* %arrayidx2.i192, align 1
  %193 = load i32* %i.i186, align 4
  %inc.i194 = add nsw i32 %193, 1
  store i32 %inc.i194, i32* %i.i186, align 4
  br label %for.cond.i188

__pgi_memcpy.exit195:                             ; preds = %for.cond.i188
  %194 = load i32* %size, align 4
  %195 = load i8** %rb.addr, align 8
  %idx.ext177 = sext i32 %194 to i64
  %add.ptr178 = getelementptr inbounds i8* %195, i64 %idx.ext177
  store i8* %add.ptr178, i8** %rb.addr, align 8
  %196 = load i32* %size, align 4
  %197 = load i32* %ssize, align 4
  %sub179 = sub nsw i32 %197, %196
  store i32 %sub179, i32* %ssize, align 4
  %198 = load i32* %size, align 4
  %199 = load i32* %rsize, align 4
  %sub180 = sub nsw i32 %199, %198
  store i32 %sub180, i32* %rsize, align 4
  br label %while.cond109

while.end181:                                     ; preds = %land.end115
  br label %if.end182

if.end182:                                        ; preds = %while.end181, %__pgi_memcpy.exit208
  br label %return

return:                                           ; preds = %if.end182, %while.end, %__pgi_memcpy.exit
  ret void
}

define  void @pghpf_transfer_i8(i8* %rb, i8* %sb, i8* %rs, i8* %ss, i8* %rd, i8* %sd, i8* %rsd, i8* %msd) nounwind alwaysinline {
entry:
  %dst.addr.i221 = alloca i8*, align 8
  %src.addr.i222 = alloca i8*, align 8
  %num_bytes.addr.i223 = alloca i32, align 4
  %i.i224 = alloca i32, align 4
  %dst.addr.i208 = alloca i8*, align 8
  %src.addr.i209 = alloca i8*, align 8
  %num_bytes.addr.i210 = alloca i32, align 4
  %i.i211 = alloca i32, align 4
  %dst.addr.i195 = alloca i8*, align 8
  %src.addr.i196 = alloca i8*, align 8
  %num_bytes.addr.i197 = alloca i32, align 4
  %i.i198 = alloca i32, align 4
  %dst.addr.i = alloca i8*, align 8
  %src.addr.i = alloca i8*, align 8
  %num_bytes.addr.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %rb.addr = alloca i8*, align 8
  %sb.addr = alloca i8*, align 8
  %rs.addr = alloca i8*, align 8
  %ss.addr = alloca i8*, align 8
  %rd.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %rsd.addr = alloca i8*, align 8
  %msd.addr = alloca i8*, align 8
  %result_scalar = alloca i32, align 4
  %source_scalar = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %size = alloca i32, align 4
  %rsize = alloca i32, align 4
  %ssize = alloca i32, align 4
  %extent = alloca i32, align 4
  %contiguous = alloca i32, align 4
  %offset = alloca i32, align 4
  %lbi = alloca i32, align 4
  %extenti = alloca i32, align 4
  %stridei = alloca i32, align 4
  %ioff = alloca i32, align 4
  %cntr = alloca i32*, align 8
  %result = alloca %struct.F90_Desc_la*, align 8
  %source = alloca %struct.F90_Desc_la*, align 8
  store i8* %rb, i8** %rb.addr, align 8
  store i8* %sb, i8** %sb.addr, align 8
  store i8* %rs, i8** %rs.addr, align 8
  store i8* %ss, i8** %ss.addr, align 8
  store i8* %rd, i8** %rd.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i8* %rsd, i8** %rsd.addr, align 8
  store i8* %msd, i8** %msd.addr, align 8
  %0 = load i8** %rd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %result, align 8
  %2 = load i8** %sd.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %3, %struct.F90_Desc_la** %source, align 8
  %4 = load %struct.F90_Desc_la** %result, align 8
  %tag = getelementptr inbounds %struct.F90_Desc_la* %4, i32 0, i32 0
  %5 = load i64* %tag, align 8
  %cmp = icmp ne i64 %5, 35
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %result_scalar, align 4
  %6 = load %struct.F90_Desc_la** %source, align 8
  %tag1 = getelementptr inbounds %struct.F90_Desc_la* %6, i32 0, i32 0
  %7 = load i64* %tag1, align 8
  %cmp2 = icmp ne i64 %7, 35
  %conv3 = zext i1 %cmp2 to i32
  store i32 %conv3, i32* %source_scalar, align 4
  %8 = load i8** %rs.addr, align 8
  %9 = bitcast i8* %8 to i32*
  %10 = load i32* %9, align 4
  store i32 %10, i32* %rsize, align 4
  %11 = load i8** %ss.addr, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  store i32 %13, i32* %ssize, align 4
  %14 = load i32* %result_scalar, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %15 = load i32* %source_scalar, align 4
  %tobool4 = icmp ne i32 %15, 0
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %16 = load i32* %rsize, align 4
  %17 = load i32* %ssize, align 4
  %cmp5 = icmp sgt i32 %16, %17
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.then
  %18 = load i32* %ssize, align 4
  store i32 %18, i32* %rsize, align 4
  br label %if.end

if.end:                                           ; preds = %if.then7, %if.then
  %19 = load i8** %rb.addr, align 8
  %20 = load i8** %sb.addr, align 8
  %21 = load i32* %rsize, align 4
  store i8* %19, i8** %dst.addr.i, align 8
  store i8* %20, i8** %src.addr.i, align 8
  store i32 %21, i32* %num_bytes.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.end
  %22 = load i32* %i.i, align 4
  %23 = load i32* %num_bytes.addr.i, align 4
  %cmp.i = icmp slt i32 %22, %23
  br i1 %cmp.i, label %for.body.i, label %__pgi_memcpy.exit

for.body.i:                                       ; preds = %for.cond.i
  %24 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %24 to i64
  %25 = load i8** %src.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %25, i64 %idxprom.i
  %26 = load i8* %arrayidx.i, align 1
  %27 = load i32* %i.i, align 4
  %idxprom1.i = sext i32 %27 to i64
  %28 = load i8** %dst.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8* %28, i64 %idxprom1.i
  store i8 %26, i8* %arrayidx2.i, align 1
  %29 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %29, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

__pgi_memcpy.exit:                                ; preds = %for.cond.i
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %30 = load i32* %source_scalar, align 4
  %tobool8 = icmp ne i32 %30, 0
  br i1 %tobool8, label %if.then9, label %if.end27

if.then9:                                         ; preds = %if.else
  %31 = load %struct.F90_Desc_la** %result, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %31, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent10 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %32 = load i64* %extent10, align 8
  %conv11 = trunc i64 %32 to i32
  store i32 %conv11, i32* %extent, align 4
  %33 = load i32* %extent, align 4
  %cmp12 = icmp slt i32 %33, 0
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then9
  store i32 0, i32* %extent, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.then9
  %34 = load i32* %extent, align 4
  %35 = load i32* %rsize, align 4
  %mul = mul nsw i32 %35, %34
  store i32 %mul, i32* %rsize, align 4
  br label %while.cond

while.cond:                                       ; preds = %__pgi_memcpy.exit233, %if.end15
  %36 = load i32* %ssize, align 4
  %cmp16 = icmp sgt i32 %36, 0
  br i1 %cmp16, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %37 = load i32* %rsize, align 4
  %cmp18 = icmp sgt i32 %37, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %38 = phi i1 [ false, %while.cond ], [ %cmp18, %land.rhs ]
  br i1 %38, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %39 = load i32* %rsize, align 4
  store i32 %39, i32* %size, align 4
  %40 = load i32* %size, align 4
  %41 = load i32* %ssize, align 4
  %cmp20 = icmp sgt i32 %40, %41
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %while.body
  %42 = load i32* %ssize, align 4
  store i32 %42, i32* %size, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %while.body
  %43 = load i8** %rb.addr, align 8
  %44 = load i8** %sb.addr, align 8
  %45 = load i32* %size, align 4
  store i8* %43, i8** %dst.addr.i221, align 8
  store i8* %44, i8** %src.addr.i222, align 8
  store i32 %45, i32* %num_bytes.addr.i223, align 4
  store i32 0, i32* %i.i224, align 4
  br label %for.cond.i226

for.cond.i226:                                    ; preds = %for.body.i231, %if.end23
  %46 = load i32* %i.i224, align 4
  %47 = load i32* %num_bytes.addr.i223, align 4
  %cmp.i225 = icmp slt i32 %46, %47
  br i1 %cmp.i225, label %for.body.i231, label %__pgi_memcpy.exit233

for.body.i231:                                    ; preds = %for.cond.i226
  %48 = load i32* %i.i224, align 4
  %idxprom.i227 = sext i32 %48 to i64
  %49 = load i8** %src.addr.i222, align 8
  %arrayidx.i228 = getelementptr inbounds i8* %49, i64 %idxprom.i227
  %50 = load i8* %arrayidx.i228, align 1
  %51 = load i32* %i.i224, align 4
  %idxprom1.i229 = sext i32 %51 to i64
  %52 = load i8** %dst.addr.i221, align 8
  %arrayidx2.i230 = getelementptr inbounds i8* %52, i64 %idxprom1.i229
  store i8 %50, i8* %arrayidx2.i230, align 1
  %53 = load i32* %i.i224, align 4
  %inc.i232 = add nsw i32 %53, 1
  store i32 %inc.i232, i32* %i.i224, align 4
  br label %for.cond.i226

__pgi_memcpy.exit233:                             ; preds = %for.cond.i226
  %54 = load i32* %size, align 4
  %55 = load i8** %rb.addr, align 8
  %idx.ext = sext i32 %54 to i64
  %add.ptr = getelementptr inbounds i8* %55, i64 %idx.ext
  store i8* %add.ptr, i8** %rb.addr, align 8
  %56 = load i32* %size, align 4
  %57 = load i8** %sb.addr, align 8
  %idx.ext24 = sext i32 %56 to i64
  %add.ptr25 = getelementptr inbounds i8* %57, i64 %idx.ext24
  store i8* %add.ptr25, i8** %sb.addr, align 8
  %58 = load i32* %size, align 4
  %59 = load i32* %ssize, align 4
  %sub = sub nsw i32 %59, %58
  store i32 %sub, i32* %ssize, align 4
  %60 = load i32* %size, align 4
  %61 = load i32* %rsize, align 4
  %sub26 = sub nsw i32 %61, %60
  store i32 %sub26, i32* %rsize, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %return

if.end27:                                         ; preds = %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27
  store i32 1, i32* %extent, align 4
  store i32 1, i32* %contiguous, align 4
  %62 = load %struct.F90_Desc_la** %source, align 8
  %lbase = getelementptr inbounds %struct.F90_Desc_la* %62, i32 0, i32 7
  %63 = load i64* %lbase, align 8
  %conv29 = trunc i64 %63 to i32
  store i32 %conv29, i32* %offset, align 4
  %64 = load i8** %rd.addr, align 8
  %65 = bitcast i8* %64 to i32*
  %add.ptr30 = getelementptr inbounds i32* %65, i64 6
  store i32* %add.ptr30, i32** %cntr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end28
  %66 = load i32* %i, align 4
  %conv31 = sext i32 %66 to i64
  %67 = load %struct.F90_Desc_la** %source, align 8
  %rank = getelementptr inbounds %struct.F90_Desc_la* %67, i32 0, i32 1
  %68 = load i64* %rank, align 8
  %cmp32 = icmp slt i64 %conv31, %68
  br i1 %cmp32, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %69 = load i32* %i, align 4
  %idxprom = sext i32 %69 to i64
  %70 = load i32** %cntr, align 8
  %arrayidx34 = getelementptr inbounds i32* %70, i64 %idxprom
  store i32 0, i32* %arrayidx34, align 4
  %71 = load i32* %i, align 4
  %idxprom35 = sext i32 %71 to i64
  %72 = load %struct.F90_Desc_la** %source, align 8
  %dim36 = getelementptr inbounds %struct.F90_Desc_la* %72, i32 0, i32 10
  %arrayidx37 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim36, i32 0, i64 %idxprom35
  %lbound = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx37, i32 0, i32 0
  %73 = load i64* %lbound, align 8
  %conv38 = trunc i64 %73 to i32
  store i32 %conv38, i32* %lbi, align 4
  %74 = load i32* %i, align 4
  %idxprom39 = sext i32 %74 to i64
  %75 = load %struct.F90_Desc_la** %source, align 8
  %dim40 = getelementptr inbounds %struct.F90_Desc_la* %75, i32 0, i32 10
  %arrayidx41 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim40, i32 0, i64 %idxprom39
  %extent42 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx41, i32 0, i32 1
  %76 = load i64* %extent42, align 8
  %conv43 = trunc i64 %76 to i32
  store i32 %conv43, i32* %extenti, align 4
  %77 = load i32* %i, align 4
  %idxprom44 = sext i32 %77 to i64
  %78 = load %struct.F90_Desc_la** %source, align 8
  %dim45 = getelementptr inbounds %struct.F90_Desc_la* %78, i32 0, i32 10
  %arrayidx46 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim45, i32 0, i64 %idxprom44
  %lstride = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx46, i32 0, i32 4
  %79 = load i64* %lstride, align 8
  %conv47 = trunc i64 %79 to i32
  store i32 %conv47, i32* %stridei, align 4
  %80 = load i32* %i, align 4
  %cmp48 = icmp eq i32 %80, 0
  br i1 %cmp48, label %if.then50, label %if.else73

if.then50:                                        ; preds = %for.body
  %81 = load i32* %stridei, align 4
  %82 = load i32* %extent, align 4
  %cmp51 = icmp ne i32 %81, %82
  br i1 %cmp51, label %if.then53, label %if.else55

if.then53:                                        ; preds = %if.then50
  store i32 0, i32* %contiguous, align 4
  %83 = load i32* %stridei, align 4
  %84 = load i32* %lbi, align 4
  %sub54 = sub nsw i32 %83, %84
  %85 = load i32* %offset, align 4
  %add = add nsw i32 %85, %sub54
  store i32 %add, i32* %offset, align 4
  br label %if.end58

if.else55:                                        ; preds = %if.then50
  %86 = load i32* %lbi, align 4
  %sub56 = sub nsw i32 %86, 1
  %87 = load i32* %offset, align 4
  %add57 = add nsw i32 %87, %sub56
  store i32 %add57, i32* %offset, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %88 = load i32* %stridei, align 4
  %cmp59 = icmp sge i32 %88, 0
  br i1 %cmp59, label %if.then61, label %if.end65

if.then61:                                        ; preds = %if.end58
  %89 = load i32* %extenti, align 4
  %sub62 = sub nsw i32 %89, 1
  %90 = load i32* %stridei, align 4
  %mul63 = mul nsw i32 %sub62, %90
  %91 = load i32* %extent, align 4
  %add64 = add nsw i32 %mul63, %91
  store i32 %add64, i32* %extent, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then61, %if.end58
  %92 = load i32* %stridei, align 4
  %cmp66 = icmp slt i32 %92, 0
  br i1 %cmp66, label %if.then68, label %if.end72

if.then68:                                        ; preds = %if.end65
  %93 = load i32* %extenti, align 4
  %sub69 = sub nsw i32 %93, 1
  %94 = load i32* %stridei, align 4
  %mul70 = mul nsw i32 %sub69, %94
  %95 = load i32* %extent, align 4
  %sub71 = sub nsw i32 %mul70, %95
  store i32 %sub71, i32* %extent, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.then68, %if.end65
  br label %if.end97

if.else73:                                        ; preds = %for.body
  %96 = load i32* %stridei, align 4
  %97 = load i32* %extent, align 4
  %cmp74 = icmp ne i32 %96, %97
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.else73
  store i32 0, i32* %contiguous, align 4
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %if.else73
  %98 = load i32* %lbi, align 4
  %99 = load i32* %stridei, align 4
  %mul78 = mul nsw i32 %98, %99
  %100 = load i32* %offset, align 4
  %add79 = add nsw i32 %100, %mul78
  store i32 %add79, i32* %offset, align 4
  %101 = load i32* %extenti, align 4
  %sub80 = sub nsw i32 %101, 1
  %102 = load i32* %stridei, align 4
  %mul81 = mul nsw i32 %sub80, %102
  store i32 %mul81, i32* %ioff, align 4
  %103 = load i32* %ioff, align 4
  %cmp82 = icmp slt i32 %103, 0
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end77
  %104 = load i32* %ioff, align 4
  %sub85 = sub nsw i32 0, %104
  store i32 %sub85, i32* %ioff, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end77
  %105 = load i32* %extent, align 4
  %cmp87 = icmp sge i32 %105, 0
  br i1 %cmp87, label %if.then89, label %if.end91

if.then89:                                        ; preds = %if.end86
  %106 = load i32* %ioff, align 4
  %107 = load i32* %extent, align 4
  %add90 = add nsw i32 %107, %106
  store i32 %add90, i32* %extent, align 4
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %if.end86
  %108 = load i32* %extent, align 4
  %cmp92 = icmp slt i32 %108, 0
  br i1 %cmp92, label %if.then94, label %if.end96

if.then94:                                        ; preds = %if.end91
  %109 = load i32* %ioff, align 4
  %110 = load i32* %extent, align 4
  %sub95 = sub nsw i32 %110, %109
  store i32 %sub95, i32* %extent, align 4
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %if.end91
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.end72
  %111 = load i32* %extenti, align 4
  %112 = load i32* %ssize, align 4
  %mul98 = mul nsw i32 %112, %111
  store i32 %mul98, i32* %ssize, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end97
  %113 = load i32* %i, align 4
  %inc = add nsw i32 %113, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %114 = load i32* %contiguous, align 4
  %tobool99 = icmp ne i32 %114, 0
  br i1 %tobool99, label %if.then100, label %if.else106

if.then100:                                       ; preds = %for.end
  %115 = load i8** %ss.addr, align 8
  %116 = load i8* %115, align 1
  %conv101 = sext i8 %116 to i32
  store i32 %conv101, i32* %ssize, align 4
  %117 = load i8** %rb.addr, align 8
  %118 = load i8** %sb.addr, align 8
  %119 = load i32* %ssize, align 4
  %120 = load i32* %offset, align 4
  %mul102 = mul nsw i32 %119, %120
  %idx.ext103 = sext i32 %mul102 to i64
  %add.ptr104 = getelementptr inbounds i8* %118, i64 %idx.ext103
  %121 = load i32* %ssize, align 4
  %122 = load i32* %extent, align 4
  %mul105 = mul nsw i32 %121, %122
  store i8* %117, i8** %dst.addr.i208, align 8
  store i8* %add.ptr104, i8** %src.addr.i209, align 8
  store i32 %mul105, i32* %num_bytes.addr.i210, align 4
  store i32 0, i32* %i.i211, align 4
  br label %for.cond.i213

for.cond.i213:                                    ; preds = %for.body.i218, %if.then100
  %123 = load i32* %i.i211, align 4
  %124 = load i32* %num_bytes.addr.i210, align 4
  %cmp.i212 = icmp slt i32 %123, %124
  br i1 %cmp.i212, label %for.body.i218, label %__pgi_memcpy.exit220

for.body.i218:                                    ; preds = %for.cond.i213
  %125 = load i32* %i.i211, align 4
  %idxprom.i214 = sext i32 %125 to i64
  %126 = load i8** %src.addr.i209, align 8
  %arrayidx.i215 = getelementptr inbounds i8* %126, i64 %idxprom.i214
  %127 = load i8* %arrayidx.i215, align 1
  %128 = load i32* %i.i211, align 4
  %idxprom1.i216 = sext i32 %128 to i64
  %129 = load i8** %dst.addr.i208, align 8
  %arrayidx2.i217 = getelementptr inbounds i8* %129, i64 %idxprom1.i216
  store i8 %127, i8* %arrayidx2.i217, align 1
  %130 = load i32* %i.i211, align 4
  %inc.i219 = add nsw i32 %130, 1
  store i32 %inc.i219, i32* %i.i211, align 4
  br label %for.cond.i213

__pgi_memcpy.exit220:                             ; preds = %for.cond.i213
  br label %if.end194

if.else106:                                       ; preds = %for.end
  %131 = load %struct.F90_Desc_la** %result, align 8
  %dim107 = getelementptr inbounds %struct.F90_Desc_la* %131, i32 0, i32 10
  %arrayidx108 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim107, i32 0, i64 0
  %extent109 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx108, i32 0, i32 1
  %132 = load i64* %extent109, align 8
  %conv110 = trunc i64 %132 to i32
  store i32 %conv110, i32* %extent, align 4
  %133 = load i32* %extent, align 4
  %cmp111 = icmp slt i32 %133, 0
  br i1 %cmp111, label %if.then113, label %if.end114

if.then113:                                       ; preds = %if.else106
  store i32 0, i32* %extent, align 4
  br label %if.end114

if.end114:                                        ; preds = %if.then113, %if.else106
  %134 = load i32* %extent, align 4
  %135 = load i32* %rsize, align 4
  %mul115 = mul nsw i32 %135, %134
  store i32 %mul115, i32* %rsize, align 4
  br label %while.cond116

while.cond116:                                    ; preds = %__pgi_memcpy.exit207, %if.end114
  %136 = load i32* %ssize, align 4
  %cmp117 = icmp sgt i32 %136, 0
  br i1 %cmp117, label %land.rhs119, label %land.end122

land.rhs119:                                      ; preds = %while.cond116
  %137 = load i32* %rsize, align 4
  %cmp120 = icmp sgt i32 %137, 0
  br label %land.end122

land.end122:                                      ; preds = %land.rhs119, %while.cond116
  %138 = phi i1 [ false, %while.cond116 ], [ %cmp120, %land.rhs119 ]
  br i1 %138, label %while.body123, label %while.end193

while.body123:                                    ; preds = %land.end122
  store i32 0, i32* %ioff, align 4
  %139 = load %struct.F90_Desc_la** %source, align 8
  %rank124 = getelementptr inbounds %struct.F90_Desc_la* %139, i32 0, i32 1
  %140 = load i64* %rank124, align 8
  %sub125 = sub nsw i64 %140, 1
  %conv126 = trunc i64 %sub125 to i32
  store i32 %conv126, i32* %i, align 4
  br label %for.cond127

for.cond127:                                      ; preds = %for.inc176, %while.body123
  %141 = load i32* %i, align 4
  %cmp128 = icmp sge i32 %141, 0
  br i1 %cmp128, label %for.body130, label %for.end177

for.body130:                                      ; preds = %for.cond127
  %142 = load i32* %i, align 4
  %idxprom131 = sext i32 %142 to i64
  %143 = load %struct.F90_Desc_la** %source, align 8
  %dim132 = getelementptr inbounds %struct.F90_Desc_la* %143, i32 0, i32 10
  %arrayidx133 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim132, i32 0, i64 %idxprom131
  %extent134 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx133, i32 0, i32 1
  %144 = load i64* %extent134, align 8
  %conv135 = trunc i64 %144 to i32
  store i32 %conv135, i32* %extenti, align 4
  %145 = load i32* %i, align 4
  %idxprom136 = sext i32 %145 to i64
  %146 = load %struct.F90_Desc_la** %source, align 8
  %dim137 = getelementptr inbounds %struct.F90_Desc_la* %146, i32 0, i32 10
  %arrayidx138 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim137, i32 0, i64 %idxprom136
  %lstride139 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx138, i32 0, i32 4
  %147 = load i64* %lstride139, align 8
  %conv140 = trunc i64 %147 to i32
  store i32 %conv140, i32* %stridei, align 4
  %148 = load i32* %i, align 4
  %idxprom141 = sext i32 %148 to i64
  %149 = load i32** %cntr, align 8
  %arrayidx142 = getelementptr inbounds i32* %149, i64 %idxprom141
  %150 = load i32* %arrayidx142, align 4
  %151 = load i32* %stridei, align 4
  %mul143 = mul nsw i32 %150, %151
  %152 = load i32* %ioff, align 4
  %add144 = add nsw i32 %152, %mul143
  store i32 %add144, i32* %ioff, align 4
  %153 = load i32* %i, align 4
  %cmp145 = icmp eq i32 %153, 0
  br i1 %cmp145, label %if.then147, label %if.end175

if.then147:                                       ; preds = %for.body130
  store i32 0, i32* %j, align 4
  %154 = load i32* %j, align 4
  %idxprom148 = sext i32 %154 to i64
  %155 = load i32** %cntr, align 8
  %arrayidx149 = getelementptr inbounds i32* %155, i64 %idxprom148
  %156 = load i32* %arrayidx149, align 4
  %inc150 = add nsw i32 %156, 1
  store i32 %inc150, i32* %arrayidx149, align 4
  br label %while.cond151

while.cond151:                                    ; preds = %if.end165, %if.then147
  %157 = load i32* %j, align 4
  %idxprom152 = sext i32 %157 to i64
  %158 = load i32** %cntr, align 8
  %arrayidx153 = getelementptr inbounds i32* %158, i64 %idxprom152
  %159 = load i32* %arrayidx153, align 4
  %160 = load i32* %extenti, align 4
  %cmp154 = icmp eq i32 %159, %160
  br i1 %cmp154, label %while.body156, label %while.end174

while.body156:                                    ; preds = %while.cond151
  %161 = load i32* %j, align 4
  %inc157 = add nsw i32 %161, 1
  store i32 %inc157, i32* %j, align 4
  %idxprom158 = sext i32 %161 to i64
  %162 = load i32** %cntr, align 8
  %arrayidx159 = getelementptr inbounds i32* %162, i64 %idxprom158
  store i32 0, i32* %arrayidx159, align 4
  %163 = load i32* %j, align 4
  %conv160 = sext i32 %163 to i64
  %164 = load %struct.F90_Desc_la** %source, align 8
  %rank161 = getelementptr inbounds %struct.F90_Desc_la* %164, i32 0, i32 1
  %165 = load i64* %rank161, align 8
  %cmp162 = icmp eq i64 %conv160, %165
  br i1 %cmp162, label %if.then164, label %if.end165

if.then164:                                       ; preds = %while.body156
  br label %while.end174

if.end165:                                        ; preds = %while.body156
  %166 = load i32* %j, align 4
  %idxprom166 = sext i32 %166 to i64
  %167 = load i32** %cntr, align 8
  %arrayidx167 = getelementptr inbounds i32* %167, i64 %idxprom166
  %168 = load i32* %arrayidx167, align 4
  %inc168 = add nsw i32 %168, 1
  store i32 %inc168, i32* %arrayidx167, align 4
  %169 = load i32* %j, align 4
  %idxprom169 = sext i32 %169 to i64
  %170 = load %struct.F90_Desc_la** %source, align 8
  %dim170 = getelementptr inbounds %struct.F90_Desc_la* %170, i32 0, i32 10
  %arrayidx171 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim170, i32 0, i64 %idxprom169
  %extent172 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx171, i32 0, i32 1
  %171 = load i64* %extent172, align 8
  %conv173 = trunc i64 %171 to i32
  store i32 %conv173, i32* %extenti, align 4
  br label %while.cond151

while.end174:                                     ; preds = %if.then164, %while.cond151
  br label %if.end175

if.end175:                                        ; preds = %while.end174, %for.body130
  br label %for.inc176

for.inc176:                                       ; preds = %if.end175
  %172 = load i32* %i, align 4
  %dec = add nsw i32 %172, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond127

for.end177:                                       ; preds = %for.cond127
  %173 = load i32* %rsize, align 4
  store i32 %173, i32* %size, align 4
  %174 = load i32* %size, align 4
  %175 = load i8** %ss.addr, align 8
  %176 = load i8* %175, align 1
  %conv178 = sext i8 %176 to i32
  %cmp179 = icmp sgt i32 %174, %conv178
  br i1 %cmp179, label %if.then181, label %if.end183

if.then181:                                       ; preds = %for.end177
  %177 = load i8** %ss.addr, align 8
  %178 = load i8* %177, align 1
  %conv182 = sext i8 %178 to i32
  store i32 %conv182, i32* %size, align 4
  br label %if.end183

if.end183:                                        ; preds = %if.then181, %for.end177
  %179 = load i8** %rb.addr, align 8
  %180 = load i8** %sb.addr, align 8
  %181 = load i8** %ss.addr, align 8
  %182 = load i8* %181, align 1
  %conv184 = sext i8 %182 to i32
  %183 = load i32* %offset, align 4
  %184 = load i32* %ioff, align 4
  %add185 = add nsw i32 %183, %184
  %mul186 = mul nsw i32 %conv184, %add185
  %idx.ext187 = sext i32 %mul186 to i64
  %add.ptr188 = getelementptr inbounds i8* %180, i64 %idx.ext187
  %185 = load i32* %size, align 4
  store i8* %179, i8** %dst.addr.i195, align 8
  store i8* %add.ptr188, i8** %src.addr.i196, align 8
  store i32 %185, i32* %num_bytes.addr.i197, align 4
  store i32 0, i32* %i.i198, align 4
  br label %for.cond.i200

for.cond.i200:                                    ; preds = %for.body.i205, %if.end183
  %186 = load i32* %i.i198, align 4
  %187 = load i32* %num_bytes.addr.i197, align 4
  %cmp.i199 = icmp slt i32 %186, %187
  br i1 %cmp.i199, label %for.body.i205, label %__pgi_memcpy.exit207

for.body.i205:                                    ; preds = %for.cond.i200
  %188 = load i32* %i.i198, align 4
  %idxprom.i201 = sext i32 %188 to i64
  %189 = load i8** %src.addr.i196, align 8
  %arrayidx.i202 = getelementptr inbounds i8* %189, i64 %idxprom.i201
  %190 = load i8* %arrayidx.i202, align 1
  %191 = load i32* %i.i198, align 4
  %idxprom1.i203 = sext i32 %191 to i64
  %192 = load i8** %dst.addr.i195, align 8
  %arrayidx2.i204 = getelementptr inbounds i8* %192, i64 %idxprom1.i203
  store i8 %190, i8* %arrayidx2.i204, align 1
  %193 = load i32* %i.i198, align 4
  %inc.i206 = add nsw i32 %193, 1
  store i32 %inc.i206, i32* %i.i198, align 4
  br label %for.cond.i200

__pgi_memcpy.exit207:                             ; preds = %for.cond.i200
  %194 = load i32* %size, align 4
  %195 = load i8** %rb.addr, align 8
  %idx.ext189 = sext i32 %194 to i64
  %add.ptr190 = getelementptr inbounds i8* %195, i64 %idx.ext189
  store i8* %add.ptr190, i8** %rb.addr, align 8
  %196 = load i32* %size, align 4
  %197 = load i32* %ssize, align 4
  %sub191 = sub nsw i32 %197, %196
  store i32 %sub191, i32* %ssize, align 4
  %198 = load i32* %size, align 4
  %199 = load i32* %rsize, align 4
  %sub192 = sub nsw i32 %199, %198
  store i32 %sub192, i32* %rsize, align 4
  br label %while.cond116

while.end193:                                     ; preds = %land.end122
  br label %if.end194

if.end194:                                        ; preds = %while.end193, %__pgi_memcpy.exit220
  br label %return

return:                                           ; preds = %if.end194, %while.end, %__pgi_memcpy.exit
  ret void
}

define  i32 @__get_size_of(i8* %x) nounwind alwaysinline {
entry:
  %x.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %y = alloca i32, align 4
  %ival = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 8
  %0 = load i8** %x.addr, align 8
  %1 = load i8* %0, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %i, align 4
  %2 = load i32* %i, align 4
  %cmp = icmp slt i32 %2, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32* %i, align 4
  %add = add nsw i32 %3, 1
  %shr = ashr i32 %add, 1
  %mul = mul nsw i32 2, %shr
  store i32 %mul, i32* %y, align 4
  br label %if.end43

if.else:                                          ; preds = %entry
  %4 = load i32* %i, align 4
  %cmp2 = icmp slt i32 %4, 13
  br i1 %cmp2, label %if.then4, label %if.else7

if.then4:                                         ; preds = %if.else
  store i32 4403763, i32* %ival, align 4
  %5 = load i32* %ival, align 4
  %6 = load i32* %i, align 4
  %sub = sub nsw i32 %6, 5
  %mul5 = mul nsw i32 4, %sub
  %shr6 = ashr i32 %5, %mul5
  %and = and i32 15, %shr6
  %shl = shl i32 1, %and
  store i32 %shl, i32* %y, align 4
  br label %if.end42

if.else7:                                         ; preds = %if.else
  %7 = load i32* %i, align 4
  %cmp8 = icmp slt i32 %7, 21
  br i1 %cmp8, label %if.then10, label %if.else16

if.then10:                                        ; preds = %if.else7
  store i32 839922435, i32* %ival, align 4
  %8 = load i32* %ival, align 4
  %9 = load i32* %i, align 4
  %sub11 = sub nsw i32 %9, 13
  %mul12 = mul nsw i32 4, %sub11
  %shr13 = ashr i32 %8, %mul12
  %and14 = and i32 15, %shr13
  %shl15 = shl i32 1, %and14
  store i32 %shl15, i32* %y, align 4
  br label %if.end41

if.else16:                                        ; preds = %if.else7
  %10 = load i32* %i, align 4
  %cmp17 = icmp slt i32 %10, 29
  br i1 %cmp17, label %if.then19, label %if.else25

if.then19:                                        ; preds = %if.else16
  store i32 842142002, i32* %ival, align 4
  %11 = load i32* %ival, align 4
  %12 = load i32* %i, align 4
  %sub20 = sub nsw i32 %12, 21
  %mul21 = mul nsw i32 4, %sub20
  %shr22 = ashr i32 %11, %mul21
  %and23 = and i32 15, %shr22
  %shl24 = shl i32 1, %and23
  store i32 %shl24, i32* %y, align 4
  br label %if.end40

if.else25:                                        ; preds = %if.else16
  %13 = load i32* %i, align 4
  %cmp26 = icmp slt i32 %13, 37
  br i1 %cmp26, label %if.then28, label %if.else34

if.then28:                                        ; preds = %if.else25
  store i32 835, i32* %ival, align 4
  %14 = load i32* %ival, align 4
  %15 = load i32* %i, align 4
  %sub29 = sub nsw i32 %15, 29
  %mul30 = mul nsw i32 4, %sub29
  %shr31 = ashr i32 %14, %mul30
  %and32 = and i32 15, %shr31
  %shl33 = shl i32 1, %and32
  store i32 %shl33, i32* %y, align 4
  br label %if.end

if.else34:                                        ; preds = %if.else25
  store i32 5522516, i32* %ival, align 4
  %16 = load i32* %ival, align 4
  %17 = load i32* %i, align 4
  %sub35 = sub nsw i32 %17, 37
  %mul36 = mul nsw i32 4, %sub35
  %shr37 = ashr i32 %16, %mul36
  %and38 = and i32 15, %shr37
  %shl39 = shl i32 1, %and38
  store i32 %shl39, i32* %y, align 4
  br label %if.end

if.end:                                           ; preds = %if.else34, %if.then28
  br label %if.end40

if.end40:                                         ; preds = %if.end, %if.then19
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then10
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then4
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then
  %18 = load i32* %y, align 4
  ret i32 %18
}

define  void @__pgf90io_src_info(i8* %x, i8* %str, i32 %lineno) nounwind alwaysinline {
entry:
  %x.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %lineno.addr = alloca i32, align 4
  store i8* %x, i8** %x.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i32 %lineno, i32* %lineno.addr, align 4
  ret void
}

define  void @__pgf90io_src_info03(i32 %n, i8* %x, i8* %str, i64 %lineno) nounwind alwaysinline {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %lineno.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  store i8* %x, i8** %x.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %lineno, i64* %lineno.addr, align 8
  ret void
}

define  void @__pgf90io_src_info03a(i32 %n, i8* %x, i8* %str, i64 %lineno) nounwind alwaysinline {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %lineno.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  store i8* %x, i8** %x.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %lineno, i64* %lineno.addr, align 8
  ret void
}

define  void @pgf90_mp_bcs_nest() nounwind alwaysinline {
entry:
  ret void
}

define  void @pgf90_mp_ecs_nest() nounwind alwaysinline {
entry:
  ret void
}

define  i32 @__pgf90io_ldw_init(i8* %a, i8* %b, i8* %c, i8* %d, i8* %p) nounwind alwaysinline {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %c.addr = alloca i8*, align 8
  %d.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  store i8* %c, i8** %c.addr, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %call = call  i8* @malloc(i64 85)
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  store i8* %call, i8** %1, align 8
  %2 = load i8** %p.addr, align 8
  %3 = bitcast i8* %2 to i8**
  %4 = load i8** %3, align 8
  store i8* %4, i8** %s, align 8
  %5 = load i8** %s, align 8
  %arrayidx = getelementptr inbounds i8* %5, i64 0
  store i8 2, i8* %arrayidx, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32* %i, align 4
  %cmp = icmp slt i32 %6, 83
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8** %s, align 8
  %arrayidx1 = getelementptr inbounds i8* %8, i64 %idxprom
  store i8 32, i8* %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8** %s, align 8
  %arrayidx2 = getelementptr inbounds i8* %10, i64 83
  store i8 0, i8* %arrayidx2, align 1
  %11 = load i8** %s, align 8
  %arrayidx3 = getelementptr inbounds i8* %11, i64 84
  store i8 0, i8* %arrayidx3, align 1
  ret i32 0
}

declare  i8* @malloc(i64)

define  i32 @__pgf90io_print_init(i8* %a, i8* %b, i8* %c, i8* %d, i8* %p) nounwind alwaysinline {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %c.addr = alloca i8*, align 8
  %d.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  store i8* %c, i8** %c.addr, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %call = call  i8* @malloc(i64 85)
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  store i8* %call, i8** %1, align 8
  %2 = load i8** %p.addr, align 8
  %3 = bitcast i8* %2 to i8**
  %4 = load i8** %3, align 8
  store i8* %4, i8** %s, align 8
  %5 = load i8** %s, align 8
  %arrayidx = getelementptr inbounds i8* %5, i64 0
  store i8 2, i8* %arrayidx, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32* %i, align 4
  %cmp = icmp slt i32 %6, 83
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8** %s, align 8
  %arrayidx1 = getelementptr inbounds i8* %8, i64 %idxprom
  store i8 32, i8* %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8** %s, align 8
  %arrayidx2 = getelementptr inbounds i8* %10, i64 83
  store i8 0, i8* %arrayidx2, align 1
  %11 = load i8** %s, align 8
  %arrayidx3 = getelementptr inbounds i8* %11, i64 84
  store i8 0, i8* %arrayidx3, align 1
  ret i32 0
}

define  i32 @__pgf90io_fmtw_init(i8* %a, i8* %b, i8* %c, i8* %d, i8* %fmt, i8* %advp, i64 %advv, i8* %p) nounwind alwaysinline {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %c.addr = alloca i8*, align 8
  %d.addr = alloca i8*, align 8
  %fmt.addr = alloca i8*, align 8
  %advp.addr = alloca i8*, align 8
  %advv.addr = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  store i8* %c, i8** %c.addr, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  store i8* %advp, i8** %advp.addr, align 8
  store i64 %advv, i64* %advv.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %call = call  i8* @malloc(i64 85)
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  store i8* %call, i8** %1, align 8
  %2 = load i8** %p.addr, align 8
  %3 = bitcast i8* %2 to i8**
  %4 = load i8** %3, align 8
  store i8* %4, i8** %s, align 8
  %5 = load i8** %s, align 8
  %arrayidx = getelementptr inbounds i8* %5, i64 0
  store i8 2, i8* %arrayidx, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32* %i, align 4
  %cmp = icmp slt i32 %6, 83
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8** %s, align 8
  %arrayidx1 = getelementptr inbounds i8* %8, i64 %idxprom
  store i8 32, i8* %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8** %s, align 8
  %arrayidx2 = getelementptr inbounds i8* %10, i64 83
  store i8 0, i8* %arrayidx2, align 1
  %11 = load i8** %s, align 8
  %arrayidx3 = getelementptr inbounds i8* %11, i64 84
  store i8 0, i8* %arrayidx3, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_fp_ldw(double %x, i8* %ffmt, i32 %w, i32 %d, i32 %ldw) nounwind alwaysinline {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca double, align 8
  %ffmt.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %ldw.addr = alloca i32, align 4
  %iexp = alloca i32, align 4
  %iwd0 = alloca i32, align 4
  %iwdm1 = alloca i32, align 4
  %iwdm2 = alloca i32, align 4
  %icarr = alloca i32, align 4
  %iextb = alloca [104 x i32], align 4
  %iexta = alloca i32*, align 8
  %iextc = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %kmx = alloca i32, align 4
  %firstdigit = alloca i32, align 4
  %pose = alloca i32, align 4
  %firstfwd = alloca i32, align 4
  %ii = alloca i32, align 4
  %usee = alloca i32, align 4
  %digit = alloca i32, align 4
  %ndigits = alloca i32, align 4
  %prdigits = alloca i32, align 4
  %kbk = alloca i32, align 4
  %m = alloca i32, align 4
  %lw = alloca i32, align 4
  %sgn = alloca i32, align 4
  %space = alloca i32, align 4
  %lb0 = alloca i64, align 8
  %lb1 = alloca i64, align 8
  %ibt0 = alloca i32, align 4
  %c = alloca i32, align 4
  %rndval = alloca i32, align 4
  %sticky = alloca i32, align 4
  %rndup = alloca i32, align 4
  %loc = alloca i32, align 4
  %keepon = alloca i32, align 4
  %roundcarry = alloca i32, align 4
  %sh1 = alloca i32, align 4
  %sh3 = alloca i32, align 4
  %savecarry = alloca i32, align 4
  %savek = alloca i32, align 4
  %ix = alloca i32, align 4
  %ixa = alloca i32, align 4
  %ixb = alloca i32, align 4
  %ixc = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  store i8* %ffmt, i8** %ffmt.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %ldw, i32* %ldw.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 104
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx1 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 70
  store i32* %arrayidx1, i32** %iexta, align 8
  %arrayidx2 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 35
  store i32* %arrayidx2, i32** %iextc, align 8
  %3 = bitcast double* %x.addr to i64*
  %4 = load i64* %3, align 8
  store i64 %4, i64* %lb0, align 8
  %5 = load i64* %lb0, align 8
  %and = and i64 %5, 9218868437227405312
  %shr = lshr i64 %and, 52
  %sub = sub i64 %shr, 1023
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %iexp, align 4
  %6 = load i64* %lb0, align 8
  %and3 = and i64 %6, -9223372036854775808
  %shr4 = lshr i64 %and3, 63
  %conv5 = trunc i64 %shr4 to i32
  store i32 %conv5, i32* %sgn, align 4
  %7 = load i64* %lb0, align 8
  %and6 = and i64 %7, 4503599627370495
  store i64 %and6, i64* %lb1, align 8
  %8 = load i32* %iexp, align 4
  %cmp7 = icmp eq i32 %8, 1024
  br i1 %cmp7, label %if.then, label %if.end52

if.then:                                          ; preds = %for.end
  %9 = load i32* %ldw.addr, align 4
  %and9 = and i32 %9, 4
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %10 = load i32* %w.addr, align 4
  %inc11 = add nsw i32 %10, 1
  store i32 %inc11, i32* %w.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc18, %if.end
  %11 = load i32* %i, align 4
  %12 = load i32* %w.addr, align 4
  %add = add nsw i32 %12, 4
  %cmp13 = icmp slt i32 %11, %add
  br i1 %cmp13, label %for.body15, label %for.end20

for.body15:                                       ; preds = %for.cond12
  %13 = load i32* %i, align 4
  %idxprom16 = sext i32 %13 to i64
  %14 = load i8** %ffmt.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %14, i64 %idxprom16
  store i8 32, i8* %arrayidx17, align 1
  br label %for.inc18

for.inc18:                                        ; preds = %for.body15
  %15 = load i32* %i, align 4
  %inc19 = add nsw i32 %15, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond12

for.end20:                                        ; preds = %for.cond12
  %16 = load i64* %lb1, align 8
  %tobool21 = icmp ne i64 %16, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %for.end20
  %17 = load i32* %w.addr, align 4
  %add23 = add nsw i32 %17, 4
  %idxprom24 = sext i32 %add23 to i64
  %18 = load i8** %ffmt.addr, align 8
  %arrayidx25 = getelementptr inbounds i8* %18, i64 %idxprom24
  store i8 78, i8* %arrayidx25, align 1
  %19 = load i32* %w.addr, align 4
  %add26 = add nsw i32 %19, 5
  %idxprom27 = sext i32 %add26 to i64
  %20 = load i8** %ffmt.addr, align 8
  %arrayidx28 = getelementptr inbounds i8* %20, i64 %idxprom27
  store i8 97, i8* %arrayidx28, align 1
  %21 = load i32* %w.addr, align 4
  %add29 = add nsw i32 %21, 6
  %idxprom30 = sext i32 %add29 to i64
  %22 = load i8** %ffmt.addr, align 8
  %arrayidx31 = getelementptr inbounds i8* %22, i64 %idxprom30
  store i8 78, i8* %arrayidx31, align 1
  br label %if.end47

if.else:                                          ; preds = %for.end20
  %23 = load i32* %sgn, align 4
  %tobool32 = icmp ne i32 %23, 0
  br i1 %tobool32, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.else
  %24 = load i32* %w.addr, align 4
  %add34 = add nsw i32 %24, 3
  %idxprom35 = sext i32 %add34 to i64
  %25 = load i8** %ffmt.addr, align 8
  %arrayidx36 = getelementptr inbounds i8* %25, i64 %idxprom35
  store i8 45, i8* %arrayidx36, align 1
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.else
  %26 = load i32* %w.addr, align 4
  %add38 = add nsw i32 %26, 4
  %idxprom39 = sext i32 %add38 to i64
  %27 = load i8** %ffmt.addr, align 8
  %arrayidx40 = getelementptr inbounds i8* %27, i64 %idxprom39
  store i8 73, i8* %arrayidx40, align 1
  %28 = load i32* %w.addr, align 4
  %add41 = add nsw i32 %28, 5
  %idxprom42 = sext i32 %add41 to i64
  %29 = load i8** %ffmt.addr, align 8
  %arrayidx43 = getelementptr inbounds i8* %29, i64 %idxprom42
  store i8 110, i8* %arrayidx43, align 1
  %30 = load i32* %w.addr, align 4
  %add44 = add nsw i32 %30, 6
  %idxprom45 = sext i32 %add44 to i64
  %31 = load i8** %ffmt.addr, align 8
  %arrayidx46 = getelementptr inbounds i8* %31, i64 %idxprom45
  store i8 102, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.end37, %if.then22
  %32 = load i32* %w.addr, align 4
  %add48 = add nsw i32 %32, 7
  %idxprom49 = sext i32 %add48 to i64
  %33 = load i8** %ffmt.addr, align 8
  %arrayidx50 = getelementptr inbounds i8* %33, i64 %idxprom49
  store i8 0, i8* %arrayidx50, align 1
  %34 = load i32* %w.addr, align 4
  %add51 = add nsw i32 %34, 7
  store i32 %add51, i32* %retval
  br label %return

if.end52:                                         ; preds = %for.end
  %35 = load i32* %iexp, align 4
  %add53 = add nsw i32 %35, 1023
  %tobool54 = icmp ne i32 %add53, 0
  br i1 %tobool54, label %if.then55, label %if.else56

if.then55:                                        ; preds = %if.end52
  %36 = load i64* %lb1, align 8
  %or = or i64 %36, 4503599627370496
  store i64 %or, i64* %lb1, align 8
  br label %if.end85

if.else56:                                        ; preds = %if.end52
  %37 = load i64* %lb1, align 8
  %tobool57 = icmp ne i64 %37, 0
  br i1 %tobool57, label %if.then58, label %if.else60

if.then58:                                        ; preds = %if.else56
  %38 = load i32* %iexp, align 4
  %inc59 = add nsw i32 %38, 1
  store i32 %inc59, i32* %iexp, align 4
  br label %if.end84

if.else60:                                        ; preds = %if.else56
  %39 = load i8** %ffmt.addr, align 8
  %arrayidx61 = getelementptr inbounds i8* %39, i64 0
  store i8 32, i8* %arrayidx61, align 1
  %40 = load i32* %sgn, align 4
  %tobool62 = icmp ne i32 %40, 0
  br i1 %tobool62, label %if.then63, label %if.else65

if.then63:                                        ; preds = %if.else60
  %41 = load i8** %ffmt.addr, align 8
  %arrayidx64 = getelementptr inbounds i8* %41, i64 1
  store i8 45, i8* %arrayidx64, align 1
  br label %if.end67

if.else65:                                        ; preds = %if.else60
  %42 = load i8** %ffmt.addr, align 8
  %arrayidx66 = getelementptr inbounds i8* %42, i64 1
  store i8 32, i8* %arrayidx66, align 1
  br label %if.end67

if.end67:                                         ; preds = %if.else65, %if.then63
  %43 = load i8** %ffmt.addr, align 8
  %arrayidx68 = getelementptr inbounds i8* %43, i64 2
  store i8 48, i8* %arrayidx68, align 1
  %44 = load i8** %ffmt.addr, align 8
  %arrayidx69 = getelementptr inbounds i8* %44, i64 3
  store i8 46, i8* %arrayidx69, align 1
  store i32 4, i32* %i, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc77, %if.end67
  %45 = load i32* %i, align 4
  %46 = load i32* %w.addr, align 4
  %add71 = add nsw i32 %46, 3
  %cmp72 = icmp slt i32 %45, %add71
  br i1 %cmp72, label %for.body74, label %for.end79

for.body74:                                       ; preds = %for.cond70
  %47 = load i32* %i, align 4
  %idxprom75 = sext i32 %47 to i64
  %48 = load i8** %ffmt.addr, align 8
  %arrayidx76 = getelementptr inbounds i8* %48, i64 %idxprom75
  store i8 48, i8* %arrayidx76, align 1
  br label %for.inc77

for.inc77:                                        ; preds = %for.body74
  %49 = load i32* %i, align 4
  %inc78 = add nsw i32 %49, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond70

for.end79:                                        ; preds = %for.cond70
  %50 = load i32* %w.addr, align 4
  %add80 = add nsw i32 %50, 3
  %idxprom81 = sext i32 %add80 to i64
  %51 = load i8** %ffmt.addr, align 8
  %arrayidx82 = getelementptr inbounds i8* %51, i64 %idxprom81
  store i8 0, i8* %arrayidx82, align 1
  %52 = load i32* %w.addr, align 4
  %add83 = add nsw i32 %52, 3
  store i32 %add83, i32* %retval
  br label %return

if.end84:                                         ; preds = %if.then58
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then55
  %53 = load i32* %iexp, align 4
  %cmp86 = icmp sge i32 %53, 0
  br i1 %cmp86, label %if.then88, label %if.else90

if.then88:                                        ; preds = %if.end85
  %54 = load i32* %iexp, align 4
  %div = sdiv i32 %54, 32
  store i32 %div, i32* %iwd0, align 4
  %55 = load i32* %iexp, align 4
  %56 = load i32* %iwd0, align 4
  %mul = mul nsw i32 %56, 32
  %sub89 = sub nsw i32 %55, %mul
  store i32 %sub89, i32* %ibt0, align 4
  br label %if.end97

if.else90:                                        ; preds = %if.end85
  %57 = load i32* %iexp, align 4
  %add91 = add nsw i32 %57, 1
  %div92 = sdiv i32 %add91, 32
  store i32 %div92, i32* %iwd0, align 4
  %58 = load i32* %iexp, align 4
  %add93 = add nsw i32 %58, 32
  %59 = load i32* %iwd0, align 4
  %mul94 = mul nsw i32 %59, 32
  %sub95 = sub nsw i32 %add93, %mul94
  store i32 %sub95, i32* %ibt0, align 4
  %60 = load i32* %iwd0, align 4
  %add96 = add nsw i32 %60, 33
  store i32 %add96, i32* %iwd0, align 4
  br label %if.end97

if.end97:                                         ; preds = %if.else90, %if.then88
  %61 = load i32* %iwd0, align 4
  %tobool98 = icmp ne i32 %61, 0
  br i1 %tobool98, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end97
  %62 = load i32* %iwd0, align 4
  %sub99 = sub nsw i32 %62, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end97
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub99, %cond.true ], [ 33, %cond.false ]
  store i32 %cond, i32* %iwdm1, align 4
  %63 = load i32* %iwdm1, align 4
  %tobool100 = icmp ne i32 %63, 0
  br i1 %tobool100, label %cond.true101, label %cond.false103

cond.true101:                                     ; preds = %cond.end
  %64 = load i32* %iwdm1, align 4
  %sub102 = sub nsw i32 %64, 1
  br label %cond.end104

cond.false103:                                    ; preds = %cond.end
  br label %cond.end104

cond.end104:                                      ; preds = %cond.false103, %cond.true101
  %cond105 = phi i32 [ %sub102, %cond.true101 ], [ 33, %cond.false103 ]
  store i32 %cond105, i32* %iwdm2, align 4
  %65 = load i32* %ibt0, align 4
  %cmp106 = icmp ult i32 %65, 20
  br i1 %cmp106, label %if.then108, label %if.else127

if.then108:                                       ; preds = %cond.end104
  %66 = load i64* %lb1, align 8
  %67 = load i32* %ibt0, align 4
  %sub109 = sub i32 52, %67
  %sh_prom = zext i32 %sub109 to i64
  %shr110 = lshr i64 %66, %sh_prom
  %conv111 = trunc i64 %shr110 to i32
  %68 = load i32* %iwd0, align 4
  %idxprom112 = sext i32 %68 to i64
  %69 = load i32** %iexta, align 8
  %arrayidx113 = getelementptr inbounds i32* %69, i64 %idxprom112
  store i32 %conv111, i32* %arrayidx113, align 4
  %70 = load i64* %lb1, align 8
  %71 = load i32* %ibt0, align 4
  %sub114 = sub i32 20, %71
  %sh_prom115 = zext i32 %sub114 to i64
  %shr116 = lshr i64 %70, %sh_prom115
  %and117 = and i64 %shr116, 4294967295
  %conv118 = trunc i64 %and117 to i32
  %72 = load i32* %iwdm1, align 4
  %idxprom119 = sext i32 %72 to i64
  %73 = load i32** %iexta, align 8
  %arrayidx120 = getelementptr inbounds i32* %73, i64 %idxprom119
  store i32 %conv118, i32* %arrayidx120, align 4
  %74 = load i64* %lb1, align 8
  %75 = load i32* %ibt0, align 4
  %add121 = add i32 %75, 12
  %sh_prom122 = zext i32 %add121 to i64
  %shl = shl i64 %74, %sh_prom122
  %and123 = and i64 %shl, 4294967295
  %conv124 = trunc i64 %and123 to i32
  %76 = load i32* %iwdm2, align 4
  %idxprom125 = sext i32 %76 to i64
  %77 = load i32** %iexta, align 8
  %arrayidx126 = getelementptr inbounds i32* %77, i64 %idxprom125
  store i32 %conv124, i32* %arrayidx126, align 4
  br label %if.end141

if.else127:                                       ; preds = %cond.end104
  %78 = load i64* %lb1, align 8
  %79 = load i32* %ibt0, align 4
  %sub128 = sub i32 52, %79
  %sh_prom129 = zext i32 %sub128 to i64
  %shr130 = lshr i64 %78, %sh_prom129
  %conv131 = trunc i64 %shr130 to i32
  %80 = load i32* %iwd0, align 4
  %idxprom132 = sext i32 %80 to i64
  %81 = load i32** %iexta, align 8
  %arrayidx133 = getelementptr inbounds i32* %81, i64 %idxprom132
  store i32 %conv131, i32* %arrayidx133, align 4
  %82 = load i64* %lb1, align 8
  %83 = load i32* %ibt0, align 4
  %sub134 = sub i32 %83, 20
  %sh_prom135 = zext i32 %sub134 to i64
  %shl136 = shl i64 %82, %sh_prom135
  %and137 = and i64 %shl136, 4294967295
  %conv138 = trunc i64 %and137 to i32
  %84 = load i32* %iwdm1, align 4
  %idxprom139 = sext i32 %84 to i64
  %85 = load i32** %iexta, align 8
  %arrayidx140 = getelementptr inbounds i32* %85, i64 %idxprom139
  store i32 %conv138, i32* %arrayidx140, align 4
  br label %if.end141

if.end141:                                        ; preds = %if.else127, %if.then108
  %86 = load i32** %iextc, align 8
  %arrayidx142 = getelementptr inbounds i32* %86, i64 0
  store i32 1, i32* %arrayidx142, align 4
  store i32 1, i32* %kmx, align 4
  %87 = load i32* %iexp, align 4
  %cmp143 = icmp sge i32 %87, 0
  br i1 %cmp143, label %if.then145, label %if.end228

if.then145:                                       ; preds = %if.end141
  store i32 0, i32* %i, align 4
  br label %for.cond146

for.cond146:                                      ; preds = %for.inc225, %if.then145
  %88 = load i32* %i, align 4
  %89 = load i32* %iwd0, align 4
  %cmp147 = icmp sle i32 %88, %89
  br i1 %cmp147, label %for.body149, label %for.end227

for.body149:                                      ; preds = %for.cond146
  store i32 0, i32* %j, align 4
  br label %for.cond150

for.cond150:                                      ; preds = %for.inc222, %for.body149
  %90 = load i32* %j, align 4
  %cmp151 = icmp slt i32 %90, 32
  br i1 %cmp151, label %for.body153, label %for.end224

for.body153:                                      ; preds = %for.cond150
  %91 = load i32* %i, align 4
  %idxprom154 = sext i32 %91 to i64
  %92 = load i32** %iexta, align 8
  %arrayidx155 = getelementptr inbounds i32* %92, i64 %idxprom154
  %93 = load i32* %arrayidx155, align 4
  %94 = load i32* %j, align 4
  %shl156 = shl i32 1, %94
  %and157 = and i32 %93, %shl156
  %tobool158 = icmp ne i32 %and157, 0
  br i1 %tobool158, label %if.then159, label %if.end190

if.then159:                                       ; preds = %for.body153
  store i32 0, i32* %icarr, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond160

for.cond160:                                      ; preds = %for.inc184, %if.then159
  %95 = load i32* %k, align 4
  %96 = load i32* %kmx, align 4
  %cmp161 = icmp slt i32 %95, %96
  br i1 %cmp161, label %for.body163, label %for.end186

for.body163:                                      ; preds = %for.cond160
  %97 = load i32* %k, align 4
  %idxprom164 = sext i32 %97 to i64
  %arrayidx165 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom164
  %98 = load i32* %arrayidx165, align 4
  %99 = load i32* %k, align 4
  %idxprom166 = sext i32 %99 to i64
  %100 = load i32** %iextc, align 8
  %arrayidx167 = getelementptr inbounds i32* %100, i64 %idxprom166
  %101 = load i32* %arrayidx167, align 4
  %add168 = add i32 %98, %101
  %102 = load i32* %icarr, align 4
  %add169 = add i32 %add168, %102
  %103 = load i32* %k, align 4
  %idxprom170 = sext i32 %103 to i64
  %arrayidx171 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom170
  store i32 %add169, i32* %arrayidx171, align 4
  %104 = load i32* %k, align 4
  %idxprom172 = sext i32 %104 to i64
  %arrayidx173 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom172
  %105 = load i32* %arrayidx173, align 4
  %cmp174 = icmp uge i32 %105, 1000000000
  br i1 %cmp174, label %if.then176, label %if.else182

if.then176:                                       ; preds = %for.body163
  %106 = load i32* %k, align 4
  %idxprom177 = sext i32 %106 to i64
  %arrayidx178 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom177
  %107 = load i32* %arrayidx178, align 4
  %sub179 = sub i32 %107, 1000000000
  %108 = load i32* %k, align 4
  %idxprom180 = sext i32 %108 to i64
  %arrayidx181 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom180
  store i32 %sub179, i32* %arrayidx181, align 4
  store i32 1, i32* %icarr, align 4
  br label %if.end183

if.else182:                                       ; preds = %for.body163
  store i32 0, i32* %icarr, align 4
  br label %if.end183

if.end183:                                        ; preds = %if.else182, %if.then176
  br label %for.inc184

for.inc184:                                       ; preds = %if.end183
  %109 = load i32* %k, align 4
  %inc185 = add nsw i32 %109, 1
  store i32 %inc185, i32* %k, align 4
  br label %for.cond160

for.end186:                                       ; preds = %for.cond160
  %110 = load i32* %icarr, align 4
  %111 = load i32* %kmx, align 4
  %idxprom187 = sext i32 %111 to i64
  %arrayidx188 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom187
  %112 = load i32* %arrayidx188, align 4
  %add189 = add i32 %112, %110
  store i32 %add189, i32* %arrayidx188, align 4
  br label %if.end190

if.end190:                                        ; preds = %for.end186, %for.body153
  store i32 0, i32* %icarr, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond191

for.cond191:                                      ; preds = %for.inc215, %if.end190
  %113 = load i32* %k, align 4
  %114 = load i32* %kmx, align 4
  %cmp192 = icmp slt i32 %113, %114
  br i1 %cmp192, label %for.body194, label %for.end217

for.body194:                                      ; preds = %for.cond191
  %115 = load i32* %k, align 4
  %idxprom195 = sext i32 %115 to i64
  %116 = load i32** %iextc, align 8
  %arrayidx196 = getelementptr inbounds i32* %116, i64 %idxprom195
  %117 = load i32* %arrayidx196, align 4
  %118 = load i32* %k, align 4
  %idxprom197 = sext i32 %118 to i64
  %119 = load i32** %iextc, align 8
  %arrayidx198 = getelementptr inbounds i32* %119, i64 %idxprom197
  %120 = load i32* %arrayidx198, align 4
  %add199 = add i32 %117, %120
  %121 = load i32* %icarr, align 4
  %add200 = add i32 %add199, %121
  %122 = load i32* %k, align 4
  %idxprom201 = sext i32 %122 to i64
  %123 = load i32** %iextc, align 8
  %arrayidx202 = getelementptr inbounds i32* %123, i64 %idxprom201
  store i32 %add200, i32* %arrayidx202, align 4
  %124 = load i32* %k, align 4
  %idxprom203 = sext i32 %124 to i64
  %125 = load i32** %iextc, align 8
  %arrayidx204 = getelementptr inbounds i32* %125, i64 %idxprom203
  %126 = load i32* %arrayidx204, align 4
  %cmp205 = icmp uge i32 %126, 1000000000
  br i1 %cmp205, label %if.then207, label %if.else213

if.then207:                                       ; preds = %for.body194
  %127 = load i32* %k, align 4
  %idxprom208 = sext i32 %127 to i64
  %128 = load i32** %iextc, align 8
  %arrayidx209 = getelementptr inbounds i32* %128, i64 %idxprom208
  %129 = load i32* %arrayidx209, align 4
  %sub210 = sub i32 %129, 1000000000
  %130 = load i32* %k, align 4
  %idxprom211 = sext i32 %130 to i64
  %131 = load i32** %iextc, align 8
  %arrayidx212 = getelementptr inbounds i32* %131, i64 %idxprom211
  store i32 %sub210, i32* %arrayidx212, align 4
  store i32 1, i32* %icarr, align 4
  br label %if.end214

if.else213:                                       ; preds = %for.body194
  store i32 0, i32* %icarr, align 4
  br label %if.end214

if.end214:                                        ; preds = %if.else213, %if.then207
  br label %for.inc215

for.inc215:                                       ; preds = %if.end214
  %132 = load i32* %k, align 4
  %inc216 = add nsw i32 %132, 1
  store i32 %inc216, i32* %k, align 4
  br label %for.cond191

for.end217:                                       ; preds = %for.cond191
  %133 = load i32* %icarr, align 4
  %134 = load i32* %kmx, align 4
  %idxprom218 = sext i32 %134 to i64
  %135 = load i32** %iextc, align 8
  %arrayidx219 = getelementptr inbounds i32* %135, i64 %idxprom218
  %136 = load i32* %arrayidx219, align 4
  %add220 = add i32 %136, %133
  store i32 %add220, i32* %arrayidx219, align 4
  %137 = load i32* %icarr, align 4
  %138 = load i32* %kmx, align 4
  %add221 = add i32 %138, %137
  store i32 %add221, i32* %kmx, align 4
  br label %for.inc222

for.inc222:                                       ; preds = %for.end217
  %139 = load i32* %j, align 4
  %inc223 = add nsw i32 %139, 1
  store i32 %inc223, i32* %j, align 4
  br label %for.cond150

for.end224:                                       ; preds = %for.cond150
  br label %for.inc225

for.inc225:                                       ; preds = %for.end224
  %140 = load i32* %i, align 4
  %inc226 = add nsw i32 %140, 1
  store i32 %inc226, i32* %i, align 4
  br label %for.cond146

for.end227:                                       ; preds = %for.cond146
  br label %if.end228

if.end228:                                        ; preds = %for.end227, %if.end141
  %141 = load i32* %kmx, align 4
  %sub229 = sub nsw i32 %141, 1
  %idxprom230 = sext i32 %sub229 to i64
  %arrayidx231 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom230
  %142 = load i32* %arrayidx231, align 4
  %cmp232 = icmp eq i32 %142, 0
  br i1 %cmp232, label %if.then234, label %if.end235

if.then234:                                       ; preds = %if.end228
  %143 = load i32* %kmx, align 4
  %dec = add nsw i32 %143, -1
  store i32 %dec, i32* %kmx, align 4
  br label %if.end235

if.end235:                                        ; preds = %if.then234, %if.end228
  %144 = load i32* %kmx, align 4
  %dec236 = add nsw i32 %144, -1
  store i32 %dec236, i32* %kmx, align 4
  store i32 0, i32* %prdigits, align 4
  %145 = load i32* %kmx, align 4
  %cmp237 = icmp sge i32 %145, 0
  br i1 %cmp237, label %if.then239, label %if.end392

if.then239:                                       ; preds = %if.end235
  store i32 1, i32* %digit, align 4
  %146 = load i32* %kmx, align 4
  %idxprom240 = sext i32 %146 to i64
  %arrayidx241 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom240
  %147 = load i32* %arrayidx241, align 4
  store i32 %147, i32* %k, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond242

for.cond242:                                      ; preds = %for.inc251, %if.then239
  %148 = load i32* %i, align 4
  %cmp243 = icmp slt i32 %148, 9
  br i1 %cmp243, label %for.body245, label %for.end253

for.body245:                                      ; preds = %for.cond242
  %149 = load i32* %k, align 4
  %150 = load i32* %digit, align 4
  %cmp246 = icmp uge i32 %149, %150
  br i1 %cmp246, label %if.then248, label %if.end249

if.then248:                                       ; preds = %for.body245
  %151 = load i32* %i, align 4
  store i32 %151, i32* %pose, align 4
  br label %if.end249

if.end249:                                        ; preds = %if.then248, %for.body245
  %152 = load i32* %digit, align 4
  %mul250 = mul i32 %152, 10
  store i32 %mul250, i32* %digit, align 4
  br label %for.inc251

for.inc251:                                       ; preds = %if.end249
  %153 = load i32* %i, align 4
  %inc252 = add nsw i32 %153, 1
  store i32 %inc252, i32* %i, align 4
  br label %for.cond242

for.end253:                                       ; preds = %for.cond242
  %154 = load i32* %kmx, align 4
  %mul254 = mul nsw i32 %154, 9
  %155 = load i32* %pose, align 4
  %add255 = add nsw i32 %mul254, %155
  %add256 = add nsw i32 %add255, 1
  store i32 %add256, i32* %prdigits, align 4
  %156 = load i32* %prdigits, align 4
  %157 = load i32* %w.addr, align 4
  %cmp257 = icmp ugt i32 %156, %157
  br i1 %cmp257, label %if.then259, label %if.end372

if.then259:                                       ; preds = %for.end253
  %158 = load i32* %prdigits, align 4
  %159 = load i32* %w.addr, align 4
  %sub260 = sub i32 %158, %159
  store i32 %sub260, i32* %loc, align 4
  store i32 0, i32* %kbk, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then259
  %160 = load i32* %loc, align 4
  %cmp261 = icmp sgt i32 %160, 9
  br i1 %cmp261, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %161 = load i32* %loc, align 4
  %sub263 = sub nsw i32 %161, 9
  store i32 %sub263, i32* %loc, align 4
  %162 = load i32* %kbk, align 4
  %inc264 = add nsw i32 %162, 1
  store i32 %inc264, i32* %kbk, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %163 = load i32* %kbk, align 4
  %idxprom265 = sext i32 %163 to i64
  %arrayidx266 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom265
  %164 = load i32* %arrayidx266, align 4
  store i32 %164, i32* %k, align 4
  store i32 1, i32* %m, align 4
  store i32 10, i32* %c, align 4
  store i32 0, i32* %rndup, align 4
  store i32 0, i32* %sticky, align 4
  store i32 0, i32* %rndval, align 4
  %165 = load i32* %loc, align 4
  %cmp267 = icmp sgt i32 %165, 1
  br i1 %cmp267, label %if.then269, label %if.else308

if.then269:                                       ; preds = %while.end
  br label %while.cond270

while.cond270:                                    ; preds = %if.end294, %if.then269
  %166 = load i32* %loc, align 4
  %dec271 = add nsw i32 %166, -1
  store i32 %dec271, i32* %loc, align 4
  %tobool272 = icmp ne i32 %166, 0
  br i1 %tobool272, label %while.body273, label %while.end296

while.body273:                                    ; preds = %while.cond270
  %167 = load i32* %k, align 4
  %div274 = sdiv i32 %167, 10
  store i32 %div274, i32* %j, align 4
  %168 = load i32* %k, align 4
  %169 = load i32* %j, align 4
  %mul275 = mul nsw i32 %169, 10
  %sub276 = sub nsw i32 %168, %mul275
  store i32 %sub276, i32* %digit, align 4
  %170 = load i32* %loc, align 4
  %cmp277 = icmp sgt i32 %170, 0
  br i1 %cmp277, label %if.then279, label %if.end283

if.then279:                                       ; preds = %while.body273
  %171 = load i32* %c, align 4
  %172 = load i32* %digit, align 4
  %sub280 = sub i32 %171, %172
  %173 = load i32* %m, align 4
  %mul281 = mul i32 %sub280, %173
  %174 = load i32* %rndup, align 4
  %add282 = add i32 %174, %mul281
  store i32 %add282, i32* %rndup, align 4
  br label %if.end283

if.end283:                                        ; preds = %if.then279, %while.body273
  %175 = load i32* %loc, align 4
  %cmp284 = icmp sgt i32 %175, 1
  br i1 %cmp284, label %if.then286, label %if.end290

if.then286:                                       ; preds = %if.end283
  %176 = load i32* %digit, align 4
  %cmp287 = icmp ugt i32 %176, 0
  %conv288 = zext i1 %cmp287 to i32
  %177 = load i32* %sticky, align 4
  %or289 = or i32 %177, %conv288
  store i32 %or289, i32* %sticky, align 4
  br label %if.end290

if.end290:                                        ; preds = %if.then286, %if.end283
  %178 = load i32* %loc, align 4
  %cmp291 = icmp eq i32 %178, 1
  br i1 %cmp291, label %if.then293, label %if.end294

if.then293:                                       ; preds = %if.end290
  %179 = load i32* %digit, align 4
  store i32 %179, i32* %rndval, align 4
  br label %if.end294

if.end294:                                        ; preds = %if.then293, %if.end290
  %180 = load i32* %j, align 4
  store i32 %180, i32* %k, align 4
  %181 = load i32* %m, align 4
  %mul295 = mul nsw i32 %181, 10
  store i32 %mul295, i32* %m, align 4
  store i32 9, i32* %c, align 4
  br label %while.cond270

while.end296:                                     ; preds = %while.cond270
  %182 = load i32* %kbk, align 4
  store i32 %182, i32* %i, align 4
  br label %while.cond297

while.cond297:                                    ; preds = %while.body300, %while.end296
  %183 = load i32* %i, align 4
  %tobool298 = icmp ne i32 %183, 0
  br i1 %tobool298, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond297
  %184 = load i32* %sticky, align 4
  %tobool299 = icmp ne i32 %184, 0
  %lnot = xor i1 %tobool299, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond297
  %185 = phi i1 [ false, %while.cond297 ], [ %lnot, %land.rhs ]
  br i1 %185, label %while.body300, label %while.end307

while.body300:                                    ; preds = %land.end
  %186 = load i32* %i, align 4
  %dec301 = add nsw i32 %186, -1
  store i32 %dec301, i32* %i, align 4
  %idxprom302 = sext i32 %dec301 to i64
  %arrayidx303 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom302
  %187 = load i32* %arrayidx303, align 4
  %cmp304 = icmp ne i32 %187, 0
  %conv305 = zext i1 %cmp304 to i32
  %188 = load i32* %sticky, align 4
  %or306 = or i32 %188, %conv305
  store i32 %or306, i32* %sticky, align 4
  br label %while.cond297

while.end307:                                     ; preds = %land.end
  br label %if.end341

if.else308:                                       ; preds = %while.end
  %189 = load i32* %kbk, align 4
  %cmp309 = icmp sgt i32 %189, 0
  br i1 %cmp309, label %if.then311, label %if.end340

if.then311:                                       ; preds = %if.else308
  %190 = load i32* %kbk, align 4
  %dec312 = add nsw i32 %190, -1
  store i32 %dec312, i32* %kbk, align 4
  %idxprom313 = sext i32 %dec312 to i64
  %arrayidx314 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom313
  %191 = load i32* %arrayidx314, align 4
  store i32 %191, i32* %k, align 4
  %192 = load i32* %k, align 4
  %cmp315 = icmp sge i32 %192, 500000000
  br i1 %cmp315, label %if.then317, label %if.end339

if.then317:                                       ; preds = %if.then311
  store i32 5, i32* %rndval, align 4
  %193 = load i32* %k, align 4
  %sub318 = sub nsw i32 1000000000, %193
  store i32 %sub318, i32* %rndup, align 4
  %194 = load i32* %k, align 4
  %cmp319 = icmp sgt i32 %194, 500000000
  br i1 %cmp319, label %if.then321, label %if.else322

if.then321:                                       ; preds = %if.then317
  store i32 1, i32* %sticky, align 4
  br label %if.end338

if.else322:                                       ; preds = %if.then317
  %195 = load i32* %kbk, align 4
  %sub323 = sub nsw i32 %195, 1
  store i32 %sub323, i32* %i, align 4
  br label %while.cond324

while.cond324:                                    ; preds = %while.body330, %if.else322
  %196 = load i32* %i, align 4
  %tobool325 = icmp ne i32 %196, 0
  br i1 %tobool325, label %land.rhs326, label %land.end329

land.rhs326:                                      ; preds = %while.cond324
  %197 = load i32* %sticky, align 4
  %tobool327 = icmp ne i32 %197, 0
  %lnot328 = xor i1 %tobool327, true
  br label %land.end329

land.end329:                                      ; preds = %land.rhs326, %while.cond324
  %198 = phi i1 [ false, %while.cond324 ], [ %lnot328, %land.rhs326 ]
  br i1 %198, label %while.body330, label %while.end337

while.body330:                                    ; preds = %land.end329
  %199 = load i32* %i, align 4
  %dec331 = add nsw i32 %199, -1
  store i32 %dec331, i32* %i, align 4
  %idxprom332 = sext i32 %199 to i64
  %arrayidx333 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom332
  %200 = load i32* %arrayidx333, align 4
  %cmp334 = icmp ne i32 %200, 0
  %conv335 = zext i1 %cmp334 to i32
  %201 = load i32* %sticky, align 4
  %or336 = or i32 %201, %conv335
  store i32 %or336, i32* %sticky, align 4
  br label %while.cond324

while.end337:                                     ; preds = %land.end329
  br label %if.end338

if.end338:                                        ; preds = %while.end337, %if.then321
  br label %if.end339

if.end339:                                        ; preds = %if.end338, %if.then311
  br label %if.end340

if.end340:                                        ; preds = %if.end339, %if.else308
  br label %if.end341

if.end341:                                        ; preds = %if.end340, %while.end307
  %202 = load i32* %rndval, align 4
  %cmp342 = icmp sgt i32 %202, 5
  br i1 %cmp342, label %if.then347, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end341
  %203 = load i32* %rndval, align 4
  %cmp344 = icmp eq i32 %203, 5
  br i1 %cmp344, label %land.lhs.true, label %if.end351

land.lhs.true:                                    ; preds = %lor.lhs.false
  %204 = load i32* %sticky, align 4
  %tobool346 = icmp ne i32 %204, 0
  br i1 %tobool346, label %if.then347, label %if.end351

if.then347:                                       ; preds = %land.lhs.true, %if.end341
  %205 = load i32* %rndup, align 4
  %206 = load i32* %kbk, align 4
  %idxprom348 = sext i32 %206 to i64
  %arrayidx349 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom348
  %207 = load i32* %arrayidx349, align 4
  %add350 = add i32 %207, %205
  store i32 %add350, i32* %arrayidx349, align 4
  br label %if.end351

if.end351:                                        ; preds = %if.then347, %land.lhs.true, %lor.lhs.false
  br label %while.cond352

while.cond352:                                    ; preds = %while.body357, %if.end351
  %208 = load i32* %kbk, align 4
  %idxprom353 = sext i32 %208 to i64
  %arrayidx354 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom353
  %209 = load i32* %arrayidx354, align 4
  %cmp355 = icmp uge i32 %209, 1000000000
  br i1 %cmp355, label %while.body357, label %while.end371

while.body357:                                    ; preds = %while.cond352
  %210 = load i32* %kbk, align 4
  %idxprom358 = sext i32 %210 to i64
  %arrayidx359 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom358
  %211 = load i32* %arrayidx359, align 4
  %sub360 = sub i32 %211, 1000000000
  %212 = load i32* %kbk, align 4
  %idxprom361 = sext i32 %212 to i64
  %arrayidx362 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom361
  store i32 %sub360, i32* %arrayidx362, align 4
  %213 = load i32* %kbk, align 4
  %add363 = add nsw i32 %213, 1
  %idxprom364 = sext i32 %add363 to i64
  %arrayidx365 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom364
  %214 = load i32* %arrayidx365, align 4
  %add366 = add i32 %214, 1
  %215 = load i32* %kbk, align 4
  %add367 = add nsw i32 %215, 1
  %idxprom368 = sext i32 %add367 to i64
  %arrayidx369 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom368
  store i32 %add366, i32* %arrayidx369, align 4
  %216 = load i32* %kbk, align 4
  %inc370 = add nsw i32 %216, 1
  store i32 %inc370, i32* %kbk, align 4
  br label %while.cond352

while.end371:                                     ; preds = %while.cond352
  br label %if.end372

if.end372:                                        ; preds = %while.end371, %for.end253
  store i32 0, i32* %i, align 4
  br label %for.cond373

for.cond373:                                      ; preds = %for.inc389, %if.end372
  %217 = load i32* %i, align 4
  %218 = load i32* %kmx, align 4
  %add374 = add nsw i32 %218, 1
  %div375 = sdiv i32 %add374, 2
  %cmp376 = icmp slt i32 %217, %div375
  br i1 %cmp376, label %for.body378, label %for.end391

for.body378:                                      ; preds = %for.cond373
  %219 = load i32* %i, align 4
  %idxprom379 = sext i32 %219 to i64
  %arrayidx380 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom379
  %220 = load i32* %arrayidx380, align 4
  store i32 %220, i32* %k, align 4
  %221 = load i32* %kmx, align 4
  %222 = load i32* %i, align 4
  %sub381 = sub nsw i32 %221, %222
  %idxprom382 = sext i32 %sub381 to i64
  %arrayidx383 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom382
  %223 = load i32* %arrayidx383, align 4
  %224 = load i32* %i, align 4
  %idxprom384 = sext i32 %224 to i64
  %arrayidx385 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom384
  store i32 %223, i32* %arrayidx385, align 4
  %225 = load i32* %k, align 4
  %226 = load i32* %kmx, align 4
  %227 = load i32* %i, align 4
  %sub386 = sub nsw i32 %226, %227
  %idxprom387 = sext i32 %sub386 to i64
  %arrayidx388 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom387
  store i32 %225, i32* %arrayidx388, align 4
  br label %for.inc389

for.inc389:                                       ; preds = %for.body378
  %228 = load i32* %i, align 4
  %inc390 = add nsw i32 %228, 1
  store i32 %inc390, i32* %i, align 4
  br label %for.cond373

for.end391:                                       ; preds = %for.cond373
  br label %if.end392

if.end392:                                        ; preds = %for.end391, %if.end235
  %229 = load i32* %iexp, align 4
  %cmp393 = icmp sle i32 %229, 51
  br i1 %cmp393, label %land.lhs.true395, label %if.end620

land.lhs.true395:                                 ; preds = %if.end392
  %230 = load i32* %prdigits, align 4
  %231 = load i32* %w.addr, align 4
  %cmp396 = icmp ule i32 %230, %231
  br i1 %cmp396, label %if.then398, label %if.end620

if.then398:                                       ; preds = %land.lhs.true395
  store i32 0, i32* %digit, align 4
  store i32 0, i32* %keepon, align 4
  store i32 0, i32* %ndigits, align 4
  %232 = load i32* %kmx, align 4
  %add399 = add nsw i32 %232, 1
  store i32 %add399, i32* %j, align 4
  %233 = load i32* %kmx, align 4
  %add400 = add nsw i32 %233, 1
  store i32 %add400, i32* %k, align 4
  store i32 0, i32* %firstdigit, align 4
  store i32 0, i32* %savecarry, align 4
  %234 = load i32* %w.addr, align 4
  store i32 %234, i32* %lw, align 4
  br label %while.cond401

while.cond401:                                    ; preds = %if.end543, %if.then398
  %235 = load i32* %iwdm2, align 4
  %cmp402 = icmp slt i32 %235, 34
  br i1 %cmp402, label %while.body404, label %while.end544

while.body404:                                    ; preds = %while.cond401
  store i32 0, i32* %sh1, align 4
  store i32 0, i32* %sh3, align 4
  store i32 0, i32* %icarr, align 4
  %236 = load i32* %iwdm2, align 4
  store i32 %236, i32* %i, align 4
  br label %for.cond405

for.cond405:                                      ; preds = %for.inc431, %while.body404
  %237 = load i32* %i, align 4
  %cmp406 = icmp slt i32 %237, 34
  br i1 %cmp406, label %for.body408, label %for.end433

for.body408:                                      ; preds = %for.cond405
  %238 = load i32* %i, align 4
  %idxprom409 = sext i32 %238 to i64
  %239 = load i32** %iexta, align 8
  %arrayidx410 = getelementptr inbounds i32* %239, i64 %idxprom409
  %240 = load i32* %arrayidx410, align 4
  store i32 %240, i32* %ix, align 4
  %241 = load i32* %ix, align 4
  %shl411 = shl i32 %241, 1
  %242 = load i32* %sh1, align 4
  %add412 = add i32 %shl411, %242
  store i32 %add412, i32* %ixa, align 4
  %243 = load i32* %ix, align 4
  %shl413 = shl i32 %243, 3
  %244 = load i32* %sh3, align 4
  %add414 = add i32 %shl413, %244
  store i32 %add414, i32* %ixb, align 4
  %245 = load i32* %ix, align 4
  %shr415 = lshr i32 %245, 31
  store i32 %shr415, i32* %sh1, align 4
  %246 = load i32* %ix, align 4
  %shr416 = lshr i32 %246, 29
  store i32 %shr416, i32* %sh3, align 4
  %247 = load i32* %ixa, align 4
  %248 = load i32* %ixb, align 4
  %add417 = add i32 %247, %248
  %249 = load i32* %icarr, align 4
  %add418 = add i32 %add417, %249
  store i32 %add418, i32* %ixc, align 4
  %250 = load i32* %ixc, align 4
  %251 = load i32* %ixa, align 4
  %cmp419 = icmp ult i32 %250, %251
  br i1 %cmp419, label %lor.end, label %lor.lhs.false421

lor.lhs.false421:                                 ; preds = %for.body408
  %252 = load i32* %ixc, align 4
  %253 = load i32* %ixb, align 4
  %cmp422 = icmp ult i32 %252, %253
  br i1 %cmp422, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false421
  %254 = load i32* %ixa, align 4
  %255 = load i32* %ixb, align 4
  %and424 = and i32 %254, %255
  %256 = load i32* %ixc, align 4
  %and425 = and i32 %and424, %256
  %cmp426 = icmp eq i32 %and425, -1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false421, %for.body408
  %257 = phi i1 [ true, %lor.lhs.false421 ], [ true, %for.body408 ], [ %cmp426, %lor.rhs ]
  %cond428 = select i1 %257, i32 1, i32 0
  store i32 %cond428, i32* %icarr, align 4
  %258 = load i32* %ixc, align 4
  %259 = load i32* %i, align 4
  %idxprom429 = sext i32 %259 to i64
  %260 = load i32** %iexta, align 8
  %arrayidx430 = getelementptr inbounds i32* %260, i64 %idxprom429
  store i32 %258, i32* %arrayidx430, align 4
  br label %for.inc431

for.inc431:                                       ; preds = %lor.end
  %261 = load i32* %i, align 4
  %inc432 = add nsw i32 %261, 1
  store i32 %inc432, i32* %i, align 4
  br label %for.cond405

for.end433:                                       ; preds = %for.cond405
  %262 = load i32* %iwdm2, align 4
  %idxprom434 = sext i32 %262 to i64
  %263 = load i32** %iexta, align 8
  %arrayidx435 = getelementptr inbounds i32* %263, i64 %idxprom434
  %264 = load i32* %arrayidx435, align 4
  %cmp436 = icmp eq i32 %264, 0
  br i1 %cmp436, label %if.then438, label %if.end440

if.then438:                                       ; preds = %for.end433
  %265 = load i32* %iwdm2, align 4
  %inc439 = add nsw i32 %265, 1
  store i32 %inc439, i32* %iwdm2, align 4
  br label %if.end440

if.end440:                                        ; preds = %if.then438, %for.end433
  %266 = load i32* %digit, align 4
  %mul441 = mul i32 %266, 10
  %267 = load i32* %sh3, align 4
  %268 = load i32* %sh1, align 4
  %add442 = add i32 %267, %268
  %269 = load i32* %icarr, align 4
  %add443 = add i32 %add442, %269
  %add444 = add i32 %mul441, %add443
  store i32 %add444, i32* %digit, align 4
  %270 = load i32* %ndigits, align 4
  %inc445 = add i32 %270, 1
  store i32 %inc445, i32* %ndigits, align 4
  %271 = load i32* %digit, align 4
  %tobool446 = icmp ne i32 %271, 0
  br i1 %tobool446, label %land.lhs.true447, label %if.end461

land.lhs.true447:                                 ; preds = %if.end440
  %272 = load i32* %firstdigit, align 4
  %tobool448 = icmp ne i32 %272, 0
  br i1 %tobool448, label %if.end461, label %if.then449

if.then449:                                       ; preds = %land.lhs.true447
  %273 = load i32* %ndigits, align 4
  store i32 %273, i32* %firstdigit, align 4
  %274 = load i32* %j, align 4
  store i32 %274, i32* %firstfwd, align 4
  %275 = load i32* %ndigits, align 4
  %cmp450 = icmp ugt i32 %275, 1
  br i1 %cmp450, label %land.lhs.true455, label %lor.lhs.false452

lor.lhs.false452:                                 ; preds = %if.then449
  %276 = load i32* %j, align 4
  %277 = load i32* %k, align 4
  %cmp453 = icmp ne i32 %276, %277
  br i1 %cmp453, label %land.lhs.true455, label %if.end460

land.lhs.true455:                                 ; preds = %lor.lhs.false452, %if.then449
  %278 = load i32* %prdigits, align 4
  %cmp456 = icmp eq i32 %278, 0
  br i1 %cmp456, label %if.then458, label %if.end460

if.then458:                                       ; preds = %land.lhs.true455
  %279 = load i32* %lw, align 4
  %inc459 = add nsw i32 %279, 1
  store i32 %inc459, i32* %lw, align 4
  br label %if.end460

if.end460:                                        ; preds = %if.then458, %land.lhs.true455, %lor.lhs.false452
  br label %if.end461

if.end461:                                        ; preds = %if.end460, %land.lhs.true447, %if.end440
  %280 = load i32* %firstdigit, align 4
  %tobool462 = icmp ne i32 %280, 0
  br i1 %tobool462, label %if.then465, label %lor.lhs.false463

lor.lhs.false463:                                 ; preds = %if.end461
  %281 = load i32* %prdigits, align 4
  %tobool464 = icmp ne i32 %281, 0
  br i1 %tobool464, label %if.then465, label %if.end521

if.then465:                                       ; preds = %lor.lhs.false463, %if.end461
  %282 = load i32* %prdigits, align 4
  %inc466 = add i32 %282, 1
  store i32 %inc466, i32* %prdigits, align 4
  %283 = load i32* %prdigits, align 4
  %284 = load i32* %lw, align 4
  %cmp467 = icmp ugt i32 %283, %284
  br i1 %cmp467, label %if.then469, label %if.end520

if.then469:                                       ; preds = %if.then465
  %285 = load i32* %keepon, align 4
  %tobool470 = icmp ne i32 %285, 0
  br i1 %tobool470, label %if.else477, label %land.lhs.true471

land.lhs.true471:                                 ; preds = %if.then469
  %286 = load i32* %sh3, align 4
  %287 = load i32* %sh1, align 4
  %add472 = add i32 %286, %287
  %288 = load i32* %icarr, align 4
  %add473 = add i32 %add472, %288
  %cmp474 = icmp ult i32 %add473, 5
  br i1 %cmp474, label %if.then476, label %if.else477

if.then476:                                       ; preds = %land.lhs.true471
  br label %while.end544

if.else477:                                       ; preds = %land.lhs.true471, %if.then469
  %289 = load i32* %keepon, align 4
  %tobool478 = icmp ne i32 %289, 0
  br i1 %tobool478, label %if.else489, label %land.lhs.true479

land.lhs.true479:                                 ; preds = %if.else477
  %290 = load i32* %sh3, align 4
  %291 = load i32* %sh1, align 4
  %add480 = add i32 %290, %291
  %292 = load i32* %icarr, align 4
  %add481 = add i32 %add480, %292
  %cmp482 = icmp ugt i32 %add481, 5
  br i1 %cmp482, label %if.then484, label %if.else489

if.then484:                                       ; preds = %land.lhs.true479
  %293 = load i32* %sh3, align 4
  %294 = load i32* %sh1, align 4
  %add485 = add i32 %293, %294
  %295 = load i32* %icarr, align 4
  %add486 = add i32 %add485, %295
  %sub487 = sub i32 10, %add486
  %296 = load i32* %digit, align 4
  %add488 = add i32 %296, %sub487
  store i32 %add488, i32* %digit, align 4
  br label %while.end544

if.else489:                                       ; preds = %land.lhs.true479, %if.else477
  %297 = load i32* %keepon, align 4
  %tobool490 = icmp ne i32 %297, 0
  br i1 %tobool490, label %land.lhs.true491, label %if.else509

land.lhs.true491:                                 ; preds = %if.else489
  %298 = load i32* %sh3, align 4
  %299 = load i32* %sh1, align 4
  %add492 = add i32 %298, %299
  %300 = load i32* %icarr, align 4
  %add493 = add i32 %add492, %300
  %cmp494 = icmp ugt i32 %add493, 0
  br i1 %cmp494, label %if.then496, label %if.else509

if.then496:                                       ; preds = %land.lhs.true491
  %301 = load i32* %savecarry, align 4
  %tobool497 = icmp ne i32 %301, 0
  br i1 %tobool497, label %if.then498, label %if.else502

if.then498:                                       ; preds = %if.then496
  %302 = load i32* %savek, align 4
  %idxprom499 = sext i32 %302 to i64
  %arrayidx500 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom499
  %303 = load i32* %arrayidx500, align 4
  store i32 %303, i32* %digit, align 4
  %304 = load i32* %savecarry, align 4
  %305 = load i32* %digit, align 4
  %add501 = add i32 %305, %304
  store i32 %add501, i32* %digit, align 4
  %306 = load i32* %savek, align 4
  store i32 %306, i32* %k, align 4
  store i32 9, i32* %ndigits, align 4
  br label %if.end508

if.else502:                                       ; preds = %if.then496
  %307 = load i32* %roundcarry, align 4
  %mul503 = mul i32 %307, 10
  store i32 %mul503, i32* %roundcarry, align 4
  %308 = load i32* %roundcarry, align 4
  %309 = load i32* %sh3, align 4
  %310 = load i32* %sh1, align 4
  %add504 = add i32 %309, %310
  %311 = load i32* %icarr, align 4
  %add505 = add i32 %add504, %311
  %sub506 = sub i32 %308, %add505
  %312 = load i32* %digit, align 4
  %add507 = add i32 %312, %sub506
  store i32 %add507, i32* %digit, align 4
  br label %if.end508

if.end508:                                        ; preds = %if.else502, %if.then498
  store i32 0, i32* %keepon, align 4
  br label %while.end544

if.else509:                                       ; preds = %land.lhs.true491, %if.else489
  %313 = load i32* %keepon, align 4
  %tobool510 = icmp ne i32 %313, 0
  br i1 %tobool510, label %if.then511, label %if.else514

if.then511:                                       ; preds = %if.else509
  %314 = load i32* %keepon, align 4
  %inc512 = add i32 %314, 1
  store i32 %inc512, i32* %keepon, align 4
  %315 = load i32* %roundcarry, align 4
  %mul513 = mul i32 %315, 10
  store i32 %mul513, i32* %roundcarry, align 4
  br label %if.end516

if.else514:                                       ; preds = %if.else509
  store i32 5, i32* %roundcarry, align 4
  %316 = load i32* %keepon, align 4
  %inc515 = add i32 %316, 1
  store i32 %inc515, i32* %keepon, align 4
  br label %if.end516

if.end516:                                        ; preds = %if.else514, %if.then511
  br label %if.end517

if.end517:                                        ; preds = %if.end516
  br label %if.end518

if.end518:                                        ; preds = %if.end517
  br label %if.end519

if.end519:                                        ; preds = %if.end518
  br label %if.end520

if.end520:                                        ; preds = %if.end519, %if.then465
  br label %if.end521

if.end521:                                        ; preds = %if.end520, %lor.lhs.false463
  %317 = load i32* %ndigits, align 4
  %cmp522 = icmp eq i32 %317, 9
  br i1 %cmp522, label %if.then524, label %if.end543

if.then524:                                       ; preds = %if.end521
  %318 = load i32* %digit, align 4
  %tobool525 = icmp ne i32 %318, 0
  br i1 %tobool525, label %if.then531, label %lor.lhs.false526

lor.lhs.false526:                                 ; preds = %if.then524
  %319 = load i32* %firstdigit, align 4
  %tobool527 = icmp ne i32 %319, 0
  br i1 %tobool527, label %if.then531, label %lor.lhs.false528

lor.lhs.false528:                                 ; preds = %lor.lhs.false526
  %320 = load i32* %iexp, align 4
  %cmp529 = icmp sge i32 %320, 0
  br i1 %cmp529, label %if.then531, label %if.end535

if.then531:                                       ; preds = %lor.lhs.false528, %lor.lhs.false526, %if.then524
  %321 = load i32* %digit, align 4
  %322 = load i32* %k, align 4
  %inc532 = add nsw i32 %322, 1
  store i32 %inc532, i32* %k, align 4
  %idxprom533 = sext i32 %322 to i64
  %arrayidx534 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom533
  store i32 %321, i32* %arrayidx534, align 4
  br label %if.end535

if.end535:                                        ; preds = %if.then531, %lor.lhs.false528
  %323 = load i32* %j, align 4
  %inc536 = add nsw i32 %323, 1
  store i32 %inc536, i32* %j, align 4
  store i32 0, i32* %digit, align 4
  store i32 0, i32* %ndigits, align 4
  %324 = load i32* %keepon, align 4
  %tobool537 = icmp ne i32 %324, 0
  br i1 %tobool537, label %land.lhs.true538, label %if.end542

land.lhs.true538:                                 ; preds = %if.end535
  %325 = load i32* %savecarry, align 4
  %tobool539 = icmp ne i32 %325, 0
  br i1 %tobool539, label %if.end542, label %if.then540

if.then540:                                       ; preds = %land.lhs.true538
  %326 = load i32* %roundcarry, align 4
  store i32 %326, i32* %savecarry, align 4
  %327 = load i32* %k, align 4
  %sub541 = sub nsw i32 %327, 1
  store i32 %sub541, i32* %savek, align 4
  br label %if.end542

if.end542:                                        ; preds = %if.then540, %land.lhs.true538, %if.end535
  br label %if.end543

if.end543:                                        ; preds = %if.end542, %if.end521
  br label %while.cond401

while.end544:                                     ; preds = %if.end508, %if.then484, %if.then476, %while.cond401
  %328 = load i32* %keepon, align 4
  %tobool545 = icmp ne i32 %328, 0
  br i1 %tobool545, label %if.then546, label %if.end558

if.then546:                                       ; preds = %while.end544
  %329 = load i32* %savecarry, align 4
  %tobool547 = icmp ne i32 %329, 0
  br i1 %tobool547, label %if.then548, label %if.else552

if.then548:                                       ; preds = %if.then546
  %330 = load i32* %savek, align 4
  %idxprom549 = sext i32 %330 to i64
  %arrayidx550 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom549
  %331 = load i32* %arrayidx550, align 4
  store i32 %331, i32* %digit, align 4
  %332 = load i32* %savecarry, align 4
  %333 = load i32* %digit, align 4
  %add551 = add i32 %333, %332
  store i32 %add551, i32* %digit, align 4
  %334 = load i32* %savek, align 4
  store i32 %334, i32* %k, align 4
  store i32 9, i32* %ndigits, align 4
  br label %if.end557

if.else552:                                       ; preds = %if.then546
  %335 = load i32* %roundcarry, align 4
  %tobool553 = icmp ne i32 %335, 0
  br i1 %tobool553, label %if.then554, label %if.end556

if.then554:                                       ; preds = %if.else552
  %336 = load i32* %roundcarry, align 4
  %337 = load i32* %digit, align 4
  %add555 = add i32 %337, %336
  store i32 %add555, i32* %digit, align 4
  br label %if.end556

if.end556:                                        ; preds = %if.then554, %if.else552
  br label %if.end557

if.end557:                                        ; preds = %if.end556, %if.then548
  br label %if.end558

if.end558:                                        ; preds = %if.end557, %while.end544
  %338 = load i32* %digit, align 4
  %tobool559 = icmp ne i32 %338, 0
  br i1 %tobool559, label %if.then560, label %if.end619

if.then560:                                       ; preds = %if.end558
  br label %for.cond561

for.cond561:                                      ; preds = %for.inc566, %if.then560
  %339 = load i32* %ndigits, align 4
  %cmp562 = icmp ult i32 %339, 9
  br i1 %cmp562, label %for.body564, label %for.end568

for.body564:                                      ; preds = %for.cond561
  %340 = load i32* %digit, align 4
  %mul565 = mul i32 %340, 10
  store i32 %mul565, i32* %digit, align 4
  br label %for.inc566

for.inc566:                                       ; preds = %for.body564
  %341 = load i32* %ndigits, align 4
  %inc567 = add i32 %341, 1
  store i32 %inc567, i32* %ndigits, align 4
  br label %for.cond561

for.end568:                                       ; preds = %for.cond561
  %342 = load i32* %digit, align 4
  %343 = load i32* %k, align 4
  %idxprom569 = sext i32 %343 to i64
  %arrayidx570 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom569
  store i32 %342, i32* %arrayidx570, align 4
  %344 = load i32* %digit, align 4
  %cmp571 = icmp eq i32 %344, 1000000000
  br i1 %cmp571, label %if.then573, label %if.end618

if.then573:                                       ; preds = %for.end568
  store i32 0, i32* %digit, align 4
  %345 = load i32* %digit, align 4
  %346 = load i32* %k, align 4
  %idxprom574 = sext i32 %346 to i64
  %arrayidx575 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom574
  store i32 %345, i32* %arrayidx575, align 4
  %347 = load i32* %k, align 4
  %sub576 = sub nsw i32 %347, 1
  store i32 %sub576, i32* %kbk, align 4
  %348 = load i32* %kbk, align 4
  %idxprom577 = sext i32 %348 to i64
  %arrayidx578 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom577
  %349 = load i32* %arrayidx578, align 4
  %inc579 = add i32 %349, 1
  store i32 %inc579, i32* %arrayidx578, align 4
  br label %while.cond580

while.cond580:                                    ; preds = %while.body585, %if.then573
  %350 = load i32* %kbk, align 4
  %idxprom581 = sext i32 %350 to i64
  %arrayidx582 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom581
  %351 = load i32* %arrayidx582, align 4
  %cmp583 = icmp eq i32 %351, 1000000000
  br i1 %cmp583, label %while.body585, label %while.end592

while.body585:                                    ; preds = %while.cond580
  %352 = load i32* %kbk, align 4
  %idxprom586 = sext i32 %352 to i64
  %arrayidx587 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom586
  store i32 0, i32* %arrayidx587, align 4
  %353 = load i32* %k, align 4
  %sub588 = sub nsw i32 %353, 1
  store i32 %sub588, i32* %kbk, align 4
  %354 = load i32* %kbk, align 4
  %idxprom589 = sext i32 %354 to i64
  %arrayidx590 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom589
  %355 = load i32* %arrayidx590, align 4
  %inc591 = add i32 %355, 1
  store i32 %inc591, i32* %arrayidx590, align 4
  br label %while.cond580

while.end592:                                     ; preds = %while.cond580
  %356 = load i32* %kmx, align 4
  %cmp593 = icmp slt i32 %356, 0
  br i1 %cmp593, label %if.then595, label %if.end617

if.then595:                                       ; preds = %while.end592
  %357 = load i32* %firstdigit, align 4
  %sub596 = sub nsw i32 10, %357
  store i32 %sub596, i32* %pose, align 4
  %358 = load i32* %pose, align 4
  %cmp597 = icmp sge i32 %358, 9
  br i1 %cmp597, label %if.then599, label %if.end601

if.then599:                                       ; preds = %if.then595
  %359 = load i32* %pose, align 4
  %sub600 = sub nsw i32 %359, 9
  store i32 %sub600, i32* %pose, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then599, %if.then595
  store i32 1, i32* %digit, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond602

for.cond602:                                      ; preds = %for.inc607, %if.end601
  %360 = load i32* %i, align 4
  %361 = load i32* %pose, align 4
  %cmp603 = icmp slt i32 %360, %361
  br i1 %cmp603, label %for.body605, label %for.end609

for.body605:                                      ; preds = %for.cond602
  %362 = load i32* %digit, align 4
  %mul606 = mul i32 %362, 10
  store i32 %mul606, i32* %digit, align 4
  br label %for.inc607

for.inc607:                                       ; preds = %for.body605
  %363 = load i32* %i, align 4
  %inc608 = add nsw i32 %363, 1
  store i32 %inc608, i32* %i, align 4
  br label %for.cond602

for.end609:                                       ; preds = %for.cond602
  %364 = load i32* %kbk, align 4
  %idxprom610 = sext i32 %364 to i64
  %arrayidx611 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom610
  %365 = load i32* %arrayidx611, align 4
  %366 = load i32* %digit, align 4
  %cmp612 = icmp eq i32 %365, %366
  br i1 %cmp612, label %if.then614, label %if.end616

if.then614:                                       ; preds = %for.end609
  %367 = load i32* %firstdigit, align 4
  %dec615 = add nsw i32 %367, -1
  store i32 %dec615, i32* %firstdigit, align 4
  br label %if.end616

if.end616:                                        ; preds = %if.then614, %for.end609
  br label %if.end617

if.end617:                                        ; preds = %if.end616, %while.end592
  br label %if.end618

if.end618:                                        ; preds = %if.end617, %for.end568
  br label %if.end619

if.end619:                                        ; preds = %if.end618, %if.end558
  br label %if.end620

if.end620:                                        ; preds = %if.end619, %land.lhs.true395, %if.end392
  %arrayidx621 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 0
  %368 = load i32* %arrayidx621, align 4
  store i32 %368, i32* %k, align 4
  store i32 1, i32* %digit, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond622

for.cond622:                                      ; preds = %for.inc631, %if.end620
  %369 = load i32* %i, align 4
  %cmp623 = icmp slt i32 %369, 9
  br i1 %cmp623, label %for.body625, label %for.end633

for.body625:                                      ; preds = %for.cond622
  %370 = load i32* %k, align 4
  %371 = load i32* %digit, align 4
  %cmp626 = icmp uge i32 %370, %371
  br i1 %cmp626, label %if.then628, label %if.end629

if.then628:                                       ; preds = %for.body625
  %372 = load i32* %i, align 4
  store i32 %372, i32* %pose, align 4
  br label %if.end629

if.end629:                                        ; preds = %if.then628, %for.body625
  %373 = load i32* %digit, align 4
  %mul630 = mul i32 %373, 10
  store i32 %mul630, i32* %digit, align 4
  br label %for.inc631

for.inc631:                                       ; preds = %if.end629
  %374 = load i32* %i, align 4
  %inc632 = add nsw i32 %374, 1
  store i32 %inc632, i32* %i, align 4
  br label %for.cond622

for.end633:                                       ; preds = %for.cond622
  store i32 1, i32* %m, align 4
  %375 = load i32* %ldw.addr, align 4
  %and634 = and i32 %375, 1
  store i32 %and634, i32* %space, align 4
  %376 = load i32* %kmx, align 4
  %cmp635 = icmp sge i32 %376, 0
  br i1 %cmp635, label %if.then637, label %if.else655

if.then637:                                       ; preds = %for.end633
  %377 = load i32* %kmx, align 4
  %mul638 = mul nsw i32 %377, 9
  %378 = load i32* %pose, align 4
  %add639 = add nsw i32 %mul638, %378
  store i32 %add639, i32* %iexp, align 4
  %379 = load i32* %iexp, align 4
  %380 = load i32* %w.addr, align 4
  %cmp640 = icmp sge i32 %379, %380
  %conv641 = zext i1 %cmp640 to i32
  store i32 %conv641, i32* %usee, align 4
  %381 = load i32* %usee, align 4
  %tobool642 = icmp ne i32 %381, 0
  br i1 %tobool642, label %if.end645, label %if.then643

if.then643:                                       ; preds = %if.then637
  %382 = load i8** %ffmt.addr, align 8
  %arrayidx644 = getelementptr inbounds i8* %382, i64 0
  store i8 32, i8* %arrayidx644, align 1
  %383 = load i32* %space, align 4
  %384 = load i8** %ffmt.addr, align 8
  %idx.ext = sext i32 %383 to i64
  %add.ptr = getelementptr inbounds i8* %384, i64 %idx.ext
  store i8* %add.ptr, i8** %ffmt.addr, align 8
  store i32 0, i32* %m, align 4
  br label %if.end645

if.end645:                                        ; preds = %if.then643, %if.then637
  %385 = load i32* %sgn, align 4
  %tobool646 = icmp ne i32 %385, 0
  br i1 %tobool646, label %if.then647, label %if.else649

if.then647:                                       ; preds = %if.end645
  %386 = load i8** %ffmt.addr, align 8
  %arrayidx648 = getelementptr inbounds i8* %386, i64 0
  store i8 45, i8* %arrayidx648, align 1
  br label %if.end651

if.else649:                                       ; preds = %if.end645
  %387 = load i8** %ffmt.addr, align 8
  %arrayidx650 = getelementptr inbounds i8* %387, i64 0
  store i8 32, i8* %arrayidx650, align 1
  br label %if.end651

if.end651:                                        ; preds = %if.else649, %if.then647
  %388 = load i32* %space, align 4
  %389 = load i32* %sgn, align 4
  %or652 = or i32 %388, %389
  %390 = load i8** %ffmt.addr, align 8
  %idx.ext653 = sext i32 %or652 to i64
  %add.ptr654 = getelementptr inbounds i8* %390, i64 %idx.ext653
  store i8* %add.ptr654, i8** %ffmt.addr, align 8
  br label %if.end675

if.else655:                                       ; preds = %for.end633
  %391 = load i32* %firstfwd, align 4
  %mul656 = mul nsw i32 %391, 9
  %392 = load i32* %firstdigit, align 4
  %add657 = add nsw i32 %mul656, %392
  %sub658 = sub nsw i32 0, %add657
  store i32 %sub658, i32* %iexp, align 4
  %393 = load i32* %iexp, align 4
  %cmp659 = icmp slt i32 %393, -1
  %conv660 = zext i1 %cmp659 to i32
  store i32 %conv660, i32* %usee, align 4
  %394 = load i32* %sgn, align 4
  %tobool661 = icmp ne i32 %394, 0
  br i1 %tobool661, label %if.then662, label %if.else664

if.then662:                                       ; preds = %if.else655
  %395 = load i8** %ffmt.addr, align 8
  %arrayidx663 = getelementptr inbounds i8* %395, i64 0
  store i8 45, i8* %arrayidx663, align 1
  br label %if.end666

if.else664:                                       ; preds = %if.else655
  %396 = load i8** %ffmt.addr, align 8
  %arrayidx665 = getelementptr inbounds i8* %396, i64 0
  store i8 32, i8* %arrayidx665, align 1
  br label %if.end666

if.end666:                                        ; preds = %if.else664, %if.then662
  %397 = load i32* %space, align 4
  %398 = load i32* %sgn, align 4
  %or667 = or i32 %397, %398
  %399 = load i8** %ffmt.addr, align 8
  %idx.ext668 = sext i32 %or667 to i64
  %add.ptr669 = getelementptr inbounds i8* %399, i64 %idx.ext668
  store i8* %add.ptr669, i8** %ffmt.addr, align 8
  %400 = load i32* %usee, align 4
  %tobool670 = icmp ne i32 %400, 0
  br i1 %tobool670, label %if.end674, label %if.then671

if.then671:                                       ; preds = %if.end666
  %401 = load i8** %ffmt.addr, align 8
  %arrayidx672 = getelementptr inbounds i8* %401, i64 0
  store i8 48, i8* %arrayidx672, align 1
  %402 = load i8** %ffmt.addr, align 8
  %arrayidx673 = getelementptr inbounds i8* %402, i64 1
  store i8 46, i8* %arrayidx673, align 1
  store i32 2, i32* %m, align 4
  br label %if.end674

if.end674:                                        ; preds = %if.then671, %if.end666
  br label %if.end675

if.end675:                                        ; preds = %if.end674, %if.end651
  %403 = load i32* %usee, align 4
  %tobool676 = icmp ne i32 %403, 0
  br i1 %tobool676, label %if.then677, label %if.end679

if.then677:                                       ; preds = %if.end675
  %404 = load i32* %w.addr, align 4
  %inc678 = add nsw i32 %404, 1
  store i32 %inc678, i32* %w.addr, align 4
  br label %if.end679

if.end679:                                        ; preds = %if.then677, %if.end675
  store i32 0, i32* %kbk, align 4
  %405 = load i32* %kbk, align 4
  %inc680 = add nsw i32 %405, 1
  store i32 %inc680, i32* %kbk, align 4
  %idxprom681 = sext i32 %405 to i64
  %arrayidx682 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom681
  %406 = load i32* %arrayidx682, align 4
  store i32 %406, i32* %k, align 4
  %407 = load i32* %pose, align 4
  store i32 %407, i32* %i, align 4
  br label %for.cond683

for.cond683:                                      ; preds = %for.inc699, %if.end679
  %408 = load i32* %i, align 4
  %cmp684 = icmp sge i32 %408, 0
  br i1 %cmp684, label %for.body686, label %for.end701

for.body686:                                      ; preds = %for.cond683
  %409 = load i32* %k, align 4
  %div687 = sdiv i32 %409, 10
  store i32 %div687, i32* %j, align 4
  %410 = load i32* %k, align 4
  %411 = load i32* %j, align 4
  %mul688 = mul nsw i32 %411, 10
  %sub689 = sub nsw i32 %410, %mul688
  store i32 %sub689, i32* %k, align 4
  %412 = load i32* %i, align 4
  %413 = load i32* %w.addr, align 4
  %cmp690 = icmp slt i32 %412, %413
  br i1 %cmp690, label %if.then692, label %if.end698

if.then692:                                       ; preds = %for.body686
  %414 = load i32* %k, align 4
  %add693 = add nsw i32 48, %414
  %conv694 = trunc i32 %add693 to i8
  %415 = load i32* %i, align 4
  %416 = load i32* %m, align 4
  %add695 = add nsw i32 %415, %416
  %idxprom696 = sext i32 %add695 to i64
  %417 = load i8** %ffmt.addr, align 8
  %arrayidx697 = getelementptr inbounds i8* %417, i64 %idxprom696
  store i8 %conv694, i8* %arrayidx697, align 1
  br label %if.end698

if.end698:                                        ; preds = %if.then692, %for.body686
  %418 = load i32* %j, align 4
  store i32 %418, i32* %k, align 4
  br label %for.inc699

for.inc699:                                       ; preds = %if.end698
  %419 = load i32* %i, align 4
  %dec700 = add nsw i32 %419, -1
  store i32 %dec700, i32* %i, align 4
  br label %for.cond683

for.end701:                                       ; preds = %for.cond683
  %420 = load i32* %pose, align 4
  %add702 = add nsw i32 %420, 1
  store i32 %add702, i32* %ii, align 4
  %421 = load i32* %kbk, align 4
  %422 = load i32* %kmx, align 4
  %add703 = add nsw i32 %422, 1
  %cmp704 = icmp eq i32 %421, %add703
  br i1 %cmp704, label %if.then706, label %if.end723

if.then706:                                       ; preds = %for.end701
  %423 = load i32* %ii, align 4
  %424 = load i32* %m, align 4
  %add707 = add nsw i32 %423, %424
  %idxprom708 = sext i32 %add707 to i64
  %425 = load i8** %ffmt.addr, align 8
  %arrayidx709 = getelementptr inbounds i8* %425, i64 %idxprom708
  store i8 46, i8* %arrayidx709, align 1
  %426 = load i32* %ii, align 4
  %427 = load i32* %w.addr, align 4
  %cmp710 = icmp slt i32 %426, %427
  br i1 %cmp710, label %if.then712, label %if.end714

if.then712:                                       ; preds = %if.then706
  %428 = load i32* %w.addr, align 4
  %inc713 = add nsw i32 %428, 1
  store i32 %inc713, i32* %w.addr, align 4
  br label %if.end714

if.end714:                                        ; preds = %if.then712, %if.then706
  %429 = load i32* %ii, align 4
  %430 = load i32* %w.addr, align 4
  %cmp715 = icmp eq i32 %429, %430
  br i1 %cmp715, label %land.lhs.true717, label %if.end721

land.lhs.true717:                                 ; preds = %if.end714
  %431 = load i32* %usee, align 4
  %tobool718 = icmp ne i32 %431, 0
  br i1 %tobool718, label %if.end721, label %if.then719

if.then719:                                       ; preds = %land.lhs.true717
  %432 = load i32* %w.addr, align 4
  %inc720 = add nsw i32 %432, 1
  store i32 %inc720, i32* %w.addr, align 4
  br label %if.end721

if.end721:                                        ; preds = %if.then719, %land.lhs.true717, %if.end714
  %433 = load i32* %ii, align 4
  %inc722 = add nsw i32 %433, 1
  store i32 %inc722, i32* %ii, align 4
  br label %if.end723

if.end723:                                        ; preds = %if.end721, %for.end701
  br label %while.cond724

while.cond724:                                    ; preds = %if.end772, %if.end723
  %434 = load i32* %ii, align 4
  %435 = load i32* %w.addr, align 4
  %cmp725 = icmp slt i32 %434, %435
  br i1 %cmp725, label %while.body727, label %while.end773

while.body727:                                    ; preds = %while.cond724
  %436 = load i32* %kbk, align 4
  %inc728 = add nsw i32 %436, 1
  store i32 %inc728, i32* %kbk, align 4
  %idxprom729 = sext i32 %436 to i64
  %arrayidx730 = getelementptr inbounds [104 x i32]* %iextb, i32 0, i64 %idxprom729
  %437 = load i32* %arrayidx730, align 4
  store i32 %437, i32* %k, align 4
  %438 = load i32* %ii, align 4
  %add731 = add nsw i32 8, %438
  store i32 %add731, i32* %i, align 4
  br label %for.cond732

for.cond732:                                      ; preds = %for.inc748, %while.body727
  %439 = load i32* %i, align 4
  %440 = load i32* %ii, align 4
  %cmp733 = icmp sge i32 %439, %440
  br i1 %cmp733, label %for.body735, label %for.end750

for.body735:                                      ; preds = %for.cond732
  %441 = load i32* %k, align 4
  %div736 = sdiv i32 %441, 10
  store i32 %div736, i32* %j, align 4
  %442 = load i32* %k, align 4
  %443 = load i32* %j, align 4
  %mul737 = mul nsw i32 %443, 10
  %sub738 = sub nsw i32 %442, %mul737
  store i32 %sub738, i32* %k, align 4
  %444 = load i32* %i, align 4
  %445 = load i32* %w.addr, align 4
  %cmp739 = icmp slt i32 %444, %445
  br i1 %cmp739, label %if.then741, label %if.end747

if.then741:                                       ; preds = %for.body735
  %446 = load i32* %k, align 4
  %add742 = add nsw i32 48, %446
  %conv743 = trunc i32 %add742 to i8
  %447 = load i32* %i, align 4
  %448 = load i32* %m, align 4
  %add744 = add nsw i32 %447, %448
  %idxprom745 = sext i32 %add744 to i64
  %449 = load i8** %ffmt.addr, align 8
  %arrayidx746 = getelementptr inbounds i8* %449, i64 %idxprom745
  store i8 %conv743, i8* %arrayidx746, align 1
  br label %if.end747

if.end747:                                        ; preds = %if.then741, %for.body735
  %450 = load i32* %j, align 4
  store i32 %450, i32* %k, align 4
  br label %for.inc748

for.inc748:                                       ; preds = %if.end747
  %451 = load i32* %i, align 4
  %dec749 = add nsw i32 %451, -1
  store i32 %dec749, i32* %i, align 4
  br label %for.cond732

for.end750:                                       ; preds = %for.cond732
  %452 = load i32* %ii, align 4
  %add751 = add nsw i32 %452, 9
  store i32 %add751, i32* %ii, align 4
  %453 = load i32* %kbk, align 4
  %454 = load i32* %kmx, align 4
  %add752 = add nsw i32 %454, 1
  %cmp753 = icmp eq i32 %453, %add752
  br i1 %cmp753, label %if.then755, label %if.end772

if.then755:                                       ; preds = %for.end750
  %455 = load i32* %ii, align 4
  %456 = load i32* %m, align 4
  %add756 = add nsw i32 %455, %456
  %idxprom757 = sext i32 %add756 to i64
  %457 = load i8** %ffmt.addr, align 8
  %arrayidx758 = getelementptr inbounds i8* %457, i64 %idxprom757
  store i8 46, i8* %arrayidx758, align 1
  %458 = load i32* %ii, align 4
  %459 = load i32* %w.addr, align 4
  %cmp759 = icmp slt i32 %458, %459
  br i1 %cmp759, label %if.then761, label %if.end763

if.then761:                                       ; preds = %if.then755
  %460 = load i32* %w.addr, align 4
  %inc762 = add nsw i32 %460, 1
  store i32 %inc762, i32* %w.addr, align 4
  br label %if.end763

if.end763:                                        ; preds = %if.then761, %if.then755
  %461 = load i32* %ii, align 4
  %462 = load i32* %w.addr, align 4
  %cmp764 = icmp eq i32 %461, %462
  br i1 %cmp764, label %land.lhs.true766, label %if.end770

land.lhs.true766:                                 ; preds = %if.end763
  %463 = load i32* %usee, align 4
  %tobool767 = icmp ne i32 %463, 0
  br i1 %tobool767, label %if.end770, label %if.then768

if.then768:                                       ; preds = %land.lhs.true766
  %464 = load i32* %w.addr, align 4
  %inc769 = add nsw i32 %464, 1
  store i32 %inc769, i32* %w.addr, align 4
  br label %if.end770

if.end770:                                        ; preds = %if.then768, %land.lhs.true766, %if.end763
  %465 = load i32* %ii, align 4
  %inc771 = add nsw i32 %465, 1
  store i32 %inc771, i32* %ii, align 4
  br label %if.end772

if.end772:                                        ; preds = %if.end770, %for.end750
  br label %while.cond724

while.end773:                                     ; preds = %while.cond724
  %466 = load i32* %usee, align 4
  %tobool774 = icmp ne i32 %466, 0
  br i1 %tobool774, label %if.then775, label %if.else836

if.then775:                                       ; preds = %while.end773
  %467 = load i8** %ffmt.addr, align 8
  %arrayidx776 = getelementptr inbounds i8* %467, i64 1
  %468 = load i8* %arrayidx776, align 1
  %469 = load i8** %ffmt.addr, align 8
  %arrayidx777 = getelementptr inbounds i8* %469, i64 0
  store i8 %468, i8* %arrayidx777, align 1
  %470 = load i8** %ffmt.addr, align 8
  %arrayidx778 = getelementptr inbounds i8* %470, i64 1
  store i8 46, i8* %arrayidx778, align 1
  %471 = load i32* %w.addr, align 4
  %add779 = add nsw i32 %471, 1
  %idxprom780 = sext i32 %add779 to i64
  %472 = load i8** %ffmt.addr, align 8
  %arrayidx781 = getelementptr inbounds i8* %472, i64 %idxprom780
  store i8 69, i8* %arrayidx781, align 1
  %473 = load i32* %iexp, align 4
  %cmp782 = icmp sge i32 %473, 0
  br i1 %cmp782, label %if.then784, label %if.else788

if.then784:                                       ; preds = %if.then775
  %474 = load i32* %w.addr, align 4
  %add785 = add nsw i32 %474, 2
  %idxprom786 = sext i32 %add785 to i64
  %475 = load i8** %ffmt.addr, align 8
  %arrayidx787 = getelementptr inbounds i8* %475, i64 %idxprom786
  store i8 43, i8* %arrayidx787, align 1
  br label %if.end793

if.else788:                                       ; preds = %if.then775
  %476 = load i32* %w.addr, align 4
  %add789 = add nsw i32 %476, 2
  %idxprom790 = sext i32 %add789 to i64
  %477 = load i8** %ffmt.addr, align 8
  %arrayidx791 = getelementptr inbounds i8* %477, i64 %idxprom790
  store i8 45, i8* %arrayidx791, align 1
  %478 = load i32* %iexp, align 4
  %sub792 = sub nsw i32 0, %478
  store i32 %sub792, i32* %iexp, align 4
  br label %if.end793

if.end793:                                        ; preds = %if.else788, %if.then784
  %479 = load i32* %ldw.addr, align 4
  %and794 = and i32 %479, 2
  %tobool795 = icmp ne i32 %and794, 0
  br i1 %tobool795, label %if.then796, label %if.else800

if.then796:                                       ; preds = %if.end793
  %480 = load i32* %w.addr, align 4
  %add797 = add nsw i32 %480, 5
  %idxprom798 = sext i32 %add797 to i64
  %481 = load i8** %ffmt.addr, align 8
  %arrayidx799 = getelementptr inbounds i8* %481, i64 %idxprom798
  store i8 0, i8* %arrayidx799, align 1
  %482 = load i32* %iexp, align 4
  store i32 %482, i32* %j, align 4
  br label %if.end812

if.else800:                                       ; preds = %if.end793
  %483 = load i32* %iexp, align 4
  store i32 %483, i32* %k, align 4
  %484 = load i32* %w.addr, align 4
  %add801 = add nsw i32 %484, 6
  %idxprom802 = sext i32 %add801 to i64
  %485 = load i8** %ffmt.addr, align 8
  %arrayidx803 = getelementptr inbounds i8* %485, i64 %idxprom802
  store i8 0, i8* %arrayidx803, align 1
  %486 = load i32* %k, align 4
  %div804 = sdiv i32 %486, 10
  store i32 %div804, i32* %j, align 4
  %487 = load i32* %k, align 4
  %488 = load i32* %j, align 4
  %mul805 = mul nsw i32 %488, 10
  %sub806 = sub nsw i32 %487, %mul805
  store i32 %sub806, i32* %k, align 4
  %489 = load i32* %k, align 4
  %add807 = add nsw i32 48, %489
  %conv808 = trunc i32 %add807 to i8
  %490 = load i32* %w.addr, align 4
  %add809 = add nsw i32 %490, 5
  %idxprom810 = sext i32 %add809 to i64
  %491 = load i8** %ffmt.addr, align 8
  %arrayidx811 = getelementptr inbounds i8* %491, i64 %idxprom810
  store i8 %conv808, i8* %arrayidx811, align 1
  br label %if.end812

if.end812:                                        ; preds = %if.else800, %if.then796
  %492 = load i32* %j, align 4
  %div813 = sdiv i32 %492, 10
  store i32 %div813, i32* %k, align 4
  %493 = load i32* %j, align 4
  %494 = load i32* %k, align 4
  %mul814 = mul nsw i32 %494, 10
  %sub815 = sub nsw i32 %493, %mul814
  store i32 %sub815, i32* %j, align 4
  %495 = load i32* %j, align 4
  %add816 = add nsw i32 48, %495
  %conv817 = trunc i32 %add816 to i8
  %496 = load i32* %w.addr, align 4
  %add818 = add nsw i32 %496, 4
  %idxprom819 = sext i32 %add818 to i64
  %497 = load i8** %ffmt.addr, align 8
  %arrayidx820 = getelementptr inbounds i8* %497, i64 %idxprom819
  store i8 %conv817, i8* %arrayidx820, align 1
  %498 = load i32* %k, align 4
  %div821 = sdiv i32 %498, 10
  store i32 %div821, i32* %j, align 4
  %499 = load i32* %k, align 4
  %500 = load i32* %j, align 4
  %mul822 = mul nsw i32 %500, 10
  %sub823 = sub nsw i32 %499, %mul822
  store i32 %sub823, i32* %k, align 4
  %501 = load i32* %k, align 4
  %add824 = add nsw i32 48, %501
  %conv825 = trunc i32 %add824 to i8
  %502 = load i32* %w.addr, align 4
  %add826 = add nsw i32 %502, 3
  %idxprom827 = sext i32 %add826 to i64
  %503 = load i8** %ffmt.addr, align 8
  %arrayidx828 = getelementptr inbounds i8* %503, i64 %idxprom827
  store i8 %conv825, i8* %arrayidx828, align 1
  %504 = load i32* %w.addr, align 4
  %add829 = add nsw i32 %504, 6
  %505 = load i32* %space, align 4
  %506 = load i32* %sgn, align 4
  %or830 = or i32 %505, %506
  %add831 = add nsw i32 %add829, %or830
  %507 = load i32* %ldw.addr, align 4
  %and832 = and i32 %507, 2
  %cmp833 = icmp eq i32 %and832, 2
  %conv834 = zext i1 %cmp833 to i32
  %sub835 = sub nsw i32 %add831, %conv834
  store i32 %sub835, i32* %retval
  br label %return

if.else836:                                       ; preds = %while.end773
  %508 = load i32* %iexp, align 4
  %cmp837 = icmp slt i32 %508, 0
  br i1 %cmp837, label %if.then839, label %if.else846

if.then839:                                       ; preds = %if.else836
  %509 = load i32* %w.addr, align 4
  %add840 = add nsw i32 %509, 2
  %idxprom841 = sext i32 %add840 to i64
  %510 = load i8** %ffmt.addr, align 8
  %arrayidx842 = getelementptr inbounds i8* %510, i64 %idxprom841
  store i8 0, i8* %arrayidx842, align 1
  %511 = load i32* %w.addr, align 4
  %add843 = add nsw i32 %511, 2
  %512 = load i32* %space, align 4
  %513 = load i32* %sgn, align 4
  %or844 = or i32 %512, %513
  %add845 = add nsw i32 %add843, %or844
  store i32 %add845, i32* %retval
  br label %return

if.else846:                                       ; preds = %if.else836
  %514 = load i32* %w.addr, align 4
  %idxprom847 = sext i32 %514 to i64
  %515 = load i8** %ffmt.addr, align 8
  %arrayidx848 = getelementptr inbounds i8* %515, i64 %idxprom847
  store i8 0, i8* %arrayidx848, align 1
  %516 = load i32* %w.addr, align 4
  %517 = load i32* %space, align 4
  %518 = load i32* %sgn, align 4
  %or849 = or i32 %517, %518
  %add850 = add nsw i32 %516, %or849
  %519 = load i32* %space, align 4
  %add851 = add nsw i32 %add850, %519
  store i32 %add851, i32* %retval
  br label %return

return:                                           ; preds = %if.else846, %if.then839, %if.end812, %for.end79, %if.end47
  %520 = load i32* %retval
  ret i32 %520
}

define  i32 @__pgf90io_sc_cd_ldw(double %r, double %i, i32 %ftype, i8* %p) nounwind alwaysinline {
entry:
  %retval.i41 = alloca i32, align 4
  %x.addr.i42 = alloca double, align 8
  %ffmt.addr.i43 = alloca i8*, align 8
  %w.addr.i44 = alloca i32, align 4
  %d.addr.i45 = alloca i32, align 4
  %ldw.addr.i46 = alloca i32, align 4
  %iexp.i47 = alloca i32, align 4
  %iwd0.i48 = alloca i32, align 4
  %iwdm1.i49 = alloca i32, align 4
  %iwdm2.i50 = alloca i32, align 4
  %icarr.i51 = alloca i32, align 4
  %iexta.i53 = alloca i32*, align 8
  %iextc.i54 = alloca i32*, align 8
  %i.i55 = alloca i32, align 4
  %j.i56 = alloca i32, align 4
  %k.i57 = alloca i32, align 4
  %kmx.i58 = alloca i32, align 4
  %firstdigit.i59 = alloca i32, align 4
  %pose.i60 = alloca i32, align 4
  %firstfwd.i61 = alloca i32, align 4
  %ii.i62 = alloca i32, align 4
  %usee.i63 = alloca i32, align 4
  %digit.i64 = alloca i32, align 4
  %ndigits.i65 = alloca i32, align 4
  %prdigits.i66 = alloca i32, align 4
  %kbk.i67 = alloca i32, align 4
  %m.i68 = alloca i32, align 4
  %lw.i69 = alloca i32, align 4
  %sgn.i70 = alloca i32, align 4
  %space.i71 = alloca i32, align 4
  %lb0.i72 = alloca i64, align 8
  %lb1.i73 = alloca i64, align 8
  %ibt0.i74 = alloca i32, align 4
  %c.i75 = alloca i32, align 4
  %rndval.i76 = alloca i32, align 4
  %sticky.i77 = alloca i32, align 4
  %rndup.i78 = alloca i32, align 4
  %loc.i79 = alloca i32, align 4
  %keepon.i80 = alloca i32, align 4
  %roundcarry.i81 = alloca i32, align 4
  %sh1.i82 = alloca i32, align 4
  %sh3.i83 = alloca i32, align 4
  %savecarry.i84 = alloca i32, align 4
  %savek.i85 = alloca i32, align 4
  %ix.i86 = alloca i32, align 4
  %ixa.i87 = alloca i32, align 4
  %ixb.i88 = alloca i32, align 4
  %ixc.i89 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %x.addr.i = alloca double, align 8
  %ffmt.addr.i = alloca i8*, align 8
  %w.addr.i = alloca i32, align 4
  %d.addr.i = alloca i32, align 4
  %ldw.addr.i = alloca i32, align 4
  %iexp.i = alloca i32, align 4
  %iwd0.i = alloca i32, align 4
  %iwdm1.i = alloca i32, align 4
  %iwdm2.i = alloca i32, align 4
  %icarr.i = alloca i32, align 4
  %iextb.i = alloca [104 x i32], align 4
  %iexta.i = alloca i32*, align 8
  %iextc.i = alloca i32*, align 8
  %i.i = alloca i32, align 4
  %j.i = alloca i32, align 4
  %k.i = alloca i32, align 4
  %kmx.i = alloca i32, align 4
  %firstdigit.i = alloca i32, align 4
  %pose.i = alloca i32, align 4
  %firstfwd.i = alloca i32, align 4
  %ii.i = alloca i32, align 4
  %usee.i = alloca i32, align 4
  %digit.i = alloca i32, align 4
  %ndigits.i = alloca i32, align 4
  %prdigits.i = alloca i32, align 4
  %kbk.i = alloca i32, align 4
  %m.i = alloca i32, align 4
  %lw.i = alloca i32, align 4
  %sgn.i = alloca i32, align 4
  %space.i = alloca i32, align 4
  %lb0.i = alloca i64, align 8
  %lb1.i = alloca i64, align 8
  %ibt0.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %rndval.i = alloca i32, align 4
  %sticky.i = alloca i32, align 4
  %rndup.i = alloca i32, align 4
  %loc.i = alloca i32, align 4
  %keepon.i = alloca i32, align 4
  %roundcarry.i = alloca i32, align 4
  %sh1.i = alloca i32, align 4
  %sh3.i = alloca i32, align 4
  %savecarry.i = alloca i32, align 4
  %savek.i = alloca i32, align 4
  %ix.i = alloca i32, align 4
  %ixa.i = alloca i32, align 4
  %ixb.i = alloca i32, align 4
  %ixc.i = alloca i32, align 4
  %r.addr = alloca double, align 8
  %i.addr = alloca double, align 8
  %ftype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store double %r, double* %r.addr, align 8
  store double %i, double* %i.addr, align 8
  store i32 %ftype, i32* %ftype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %j, align 4
  %add = add nsw i32 %2, 49
  %cmp = icmp sge i32 %add, 83
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %3, i64 84
  %4 = load i8* %arrayidx2, align 1
  %conv3 = sext i8 %4 to i32
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32* %j, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %6, i64 %idxprom
  store i8 10, i8* %arrayidx4, align 1
  %7 = load i32* %j, align 4
  %add5 = add nsw i32 %7, 1
  %idxprom6 = sext i32 %add5 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx7 = getelementptr inbounds i8* %8, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %9 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %9, i64 1
  call  void @__pgi_print_string(i8* %arrayidx8)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32* %k, align 4
  %cmp9 = icmp slt i32 %10, 83
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %k, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load i8** %p.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %12, i64 %idxprom11
  store i8 32, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32* %k, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %14 = load i32* %j, align 4
  %conv13 = trunc i32 %14 to i8
  %15 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %15, i64 0
  store i8 %conv13, i8* %arrayidx14, align 1
  %16 = load i8** %p.addr, align 8
  %arrayidx15 = getelementptr inbounds i8* %16, i64 83
  store i8 0, i8* %arrayidx15, align 1
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 84
  store i8 0, i8* %arrayidx16, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %18 = load i32* %j, align 4
  %cmp17 = icmp ne i32 %18, 2
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end
  %19 = load i32* %j, align 4
  %inc20 = add nsw i32 %19, 1
  store i32 %inc20, i32* %j, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end
  %20 = load i32* %j, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %j, align 4
  %idxprom23 = sext i32 %20 to i64
  %21 = load i8** %p.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %21, i64 %idxprom23
  store i8 40, i8* %arrayidx24, align 1
  %22 = load double* %r.addr, align 8
  %23 = load i8** %p.addr, align 8
  %24 = load i32* %j, align 4
  %idx.ext = sext i32 %24 to i64
  %add.ptr = getelementptr inbounds i8* %23, i64 %idx.ext
  store double %22, double* %x.addr.i, align 8
  store i8* %add.ptr, i8** %ffmt.addr.i, align 8
  store i32 16, i32* %w.addr.i, align 4
  store i32 0, i32* %d.addr.i, align 4
  store i32 4, i32* %ldw.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.end21
  %25 = load i32* %i.i, align 4
  %cmp.i = icmp slt i32 %25, 104
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %26 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %26 to i64
  %arrayidx.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom.i
  store i32 0, i32* %arrayidx.i, align 4
  %27 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %arrayidx1.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 70
  store i32* %arrayidx1.i, i32** %iexta.i, align 8
  %arrayidx2.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 35
  store i32* %arrayidx2.i, i32** %iextc.i, align 8
  %28 = bitcast double* %x.addr.i to i64*
  %29 = load i64* %28, align 8
  store i64 %29, i64* %lb0.i, align 8
  %30 = load i64* %lb0.i, align 8
  %and.i = and i64 %30, 9218868437227405312
  %shr.i = lshr i64 %and.i, 52
  %sub.i = sub i64 %shr.i, 1023
  %conv.i = trunc i64 %sub.i to i32
  store i32 %conv.i, i32* %iexp.i, align 4
  %31 = load i64* %lb0.i, align 8
  %and3.i = and i64 %31, -9223372036854775808
  %shr4.i = lshr i64 %and3.i, 63
  %conv5.i = trunc i64 %shr4.i to i32
  store i32 %conv5.i, i32* %sgn.i, align 4
  %32 = load i64* %lb0.i, align 8
  %and6.i = and i64 %32, 4503599627370495
  store i64 %and6.i, i64* %lb1.i, align 8
  %33 = load i32* %iexp.i, align 4
  %cmp7.i = icmp eq i32 %33, 1024
  br i1 %cmp7.i, label %if.then.i, label %if.end52.i

if.then.i:                                        ; preds = %for.end.i
  %34 = load i32* %ldw.addr.i, align 4
  %and9.i = and i32 %34, 4
  %tobool.i = icmp ne i32 %and9.i, 0
  br i1 %tobool.i, label %if.then10.i, label %if.end.i

if.then10.i:                                      ; preds = %if.then.i
  %35 = load i32* %w.addr.i, align 4
  %inc11.i = add nsw i32 %35, 1
  store i32 %inc11.i, i32* %w.addr.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then10.i, %if.then.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond12.i

for.cond12.i:                                     ; preds = %for.body15.i, %if.end.i
  %36 = load i32* %i.i, align 4
  %37 = load i32* %w.addr.i, align 4
  %add.i = add nsw i32 %37, 4
  %cmp13.i = icmp slt i32 %36, %add.i
  br i1 %cmp13.i, label %for.body15.i, label %for.end20.i

for.body15.i:                                     ; preds = %for.cond12.i
  %38 = load i32* %i.i, align 4
  %idxprom16.i = sext i32 %38 to i64
  %39 = load i8** %ffmt.addr.i, align 8
  %arrayidx17.i = getelementptr inbounds i8* %39, i64 %idxprom16.i
  store i8 32, i8* %arrayidx17.i, align 1
  %40 = load i32* %i.i, align 4
  %inc19.i = add nsw i32 %40, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond12.i

for.end20.i:                                      ; preds = %for.cond12.i
  %41 = load i64* %lb1.i, align 8
  %tobool21.i = icmp ne i64 %41, 0
  br i1 %tobool21.i, label %if.then22.i, label %if.else.i

if.then22.i:                                      ; preds = %for.end20.i
  %42 = load i32* %w.addr.i, align 4
  %add23.i = add nsw i32 %42, 4
  %idxprom24.i = sext i32 %add23.i to i64
  %43 = load i8** %ffmt.addr.i, align 8
  %arrayidx25.i = getelementptr inbounds i8* %43, i64 %idxprom24.i
  store i8 78, i8* %arrayidx25.i, align 1
  %44 = load i32* %w.addr.i, align 4
  %add26.i = add nsw i32 %44, 5
  %idxprom27.i = sext i32 %add26.i to i64
  %45 = load i8** %ffmt.addr.i, align 8
  %arrayidx28.i = getelementptr inbounds i8* %45, i64 %idxprom27.i
  store i8 97, i8* %arrayidx28.i, align 1
  %46 = load i32* %w.addr.i, align 4
  %add29.i = add nsw i32 %46, 6
  %idxprom30.i = sext i32 %add29.i to i64
  %47 = load i8** %ffmt.addr.i, align 8
  %arrayidx31.i = getelementptr inbounds i8* %47, i64 %idxprom30.i
  store i8 78, i8* %arrayidx31.i, align 1
  br label %if.end47.i

if.else.i:                                        ; preds = %for.end20.i
  %48 = load i32* %sgn.i, align 4
  %tobool32.i = icmp ne i32 %48, 0
  br i1 %tobool32.i, label %if.then33.i, label %if.end37.i

if.then33.i:                                      ; preds = %if.else.i
  %49 = load i32* %w.addr.i, align 4
  %add34.i = add nsw i32 %49, 3
  %idxprom35.i = sext i32 %add34.i to i64
  %50 = load i8** %ffmt.addr.i, align 8
  %arrayidx36.i = getelementptr inbounds i8* %50, i64 %idxprom35.i
  store i8 45, i8* %arrayidx36.i, align 1
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then33.i, %if.else.i
  %51 = load i32* %w.addr.i, align 4
  %add38.i = add nsw i32 %51, 4
  %idxprom39.i = sext i32 %add38.i to i64
  %52 = load i8** %ffmt.addr.i, align 8
  %arrayidx40.i = getelementptr inbounds i8* %52, i64 %idxprom39.i
  store i8 73, i8* %arrayidx40.i, align 1
  %53 = load i32* %w.addr.i, align 4
  %add41.i = add nsw i32 %53, 5
  %idxprom42.i = sext i32 %add41.i to i64
  %54 = load i8** %ffmt.addr.i, align 8
  %arrayidx43.i = getelementptr inbounds i8* %54, i64 %idxprom42.i
  store i8 110, i8* %arrayidx43.i, align 1
  %55 = load i32* %w.addr.i, align 4
  %add44.i = add nsw i32 %55, 6
  %idxprom45.i = sext i32 %add44.i to i64
  %56 = load i8** %ffmt.addr.i, align 8
  %arrayidx46.i = getelementptr inbounds i8* %56, i64 %idxprom45.i
  store i8 102, i8* %arrayidx46.i, align 1
  br label %if.end47.i

if.end47.i:                                       ; preds = %if.end37.i, %if.then22.i
  %57 = load i32* %w.addr.i, align 4
  %add48.i = add nsw i32 %57, 7
  %idxprom49.i = sext i32 %add48.i to i64
  %58 = load i8** %ffmt.addr.i, align 8
  %arrayidx50.i = getelementptr inbounds i8* %58, i64 %idxprom49.i
  store i8 0, i8* %arrayidx50.i, align 1
  %59 = load i32* %w.addr.i, align 4
  %add51.i = add nsw i32 %59, 7
  store i32 %add51.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end52.i:                                       ; preds = %for.end.i
  %60 = load i32* %iexp.i, align 4
  %add53.i = add nsw i32 %60, 1023
  %tobool54.i = icmp ne i32 %add53.i, 0
  br i1 %tobool54.i, label %if.then55.i, label %if.else56.i

if.then55.i:                                      ; preds = %if.end52.i
  %61 = load i64* %lb1.i, align 8
  %or.i = or i64 %61, 4503599627370496
  store i64 %or.i, i64* %lb1.i, align 8
  br label %if.end85.i

if.else56.i:                                      ; preds = %if.end52.i
  %62 = load i64* %lb1.i, align 8
  %tobool57.i = icmp ne i64 %62, 0
  br i1 %tobool57.i, label %if.then58.i, label %if.else60.i

if.then58.i:                                      ; preds = %if.else56.i
  %63 = load i32* %iexp.i, align 4
  %inc59.i = add nsw i32 %63, 1
  store i32 %inc59.i, i32* %iexp.i, align 4
  br label %if.end85.i

if.else60.i:                                      ; preds = %if.else56.i
  %64 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %64, align 1
  %65 = load i32* %sgn.i, align 4
  %tobool62.i = icmp ne i32 %65, 0
  br i1 %tobool62.i, label %if.then63.i, label %if.else65.i

if.then63.i:                                      ; preds = %if.else60.i
  %66 = load i8** %ffmt.addr.i, align 8
  %arrayidx64.i = getelementptr inbounds i8* %66, i64 1
  store i8 45, i8* %arrayidx64.i, align 1
  br label %if.end67.i

if.else65.i:                                      ; preds = %if.else60.i
  %67 = load i8** %ffmt.addr.i, align 8
  %arrayidx66.i = getelementptr inbounds i8* %67, i64 1
  store i8 32, i8* %arrayidx66.i, align 1
  br label %if.end67.i

if.end67.i:                                       ; preds = %if.else65.i, %if.then63.i
  %68 = load i8** %ffmt.addr.i, align 8
  %arrayidx68.i = getelementptr inbounds i8* %68, i64 2
  store i8 48, i8* %arrayidx68.i, align 1
  %69 = load i8** %ffmt.addr.i, align 8
  %arrayidx69.i = getelementptr inbounds i8* %69, i64 3
  store i8 46, i8* %arrayidx69.i, align 1
  store i32 4, i32* %i.i, align 4
  br label %for.cond70.i

for.cond70.i:                                     ; preds = %for.body74.i, %if.end67.i
  %70 = load i32* %i.i, align 4
  %71 = load i32* %w.addr.i, align 4
  %add71.i = add nsw i32 %71, 3
  %cmp72.i = icmp slt i32 %70, %add71.i
  br i1 %cmp72.i, label %for.body74.i, label %for.end79.i

for.body74.i:                                     ; preds = %for.cond70.i
  %72 = load i32* %i.i, align 4
  %idxprom75.i = sext i32 %72 to i64
  %73 = load i8** %ffmt.addr.i, align 8
  %arrayidx76.i = getelementptr inbounds i8* %73, i64 %idxprom75.i
  store i8 48, i8* %arrayidx76.i, align 1
  %74 = load i32* %i.i, align 4
  %inc78.i = add nsw i32 %74, 1
  store i32 %inc78.i, i32* %i.i, align 4
  br label %for.cond70.i

for.end79.i:                                      ; preds = %for.cond70.i
  %75 = load i32* %w.addr.i, align 4
  %add80.i = add nsw i32 %75, 3
  %idxprom81.i = sext i32 %add80.i to i64
  %76 = load i8** %ffmt.addr.i, align 8
  %arrayidx82.i = getelementptr inbounds i8* %76, i64 %idxprom81.i
  store i8 0, i8* %arrayidx82.i, align 1
  %77 = load i32* %w.addr.i, align 4
  %add83.i = add nsw i32 %77, 3
  store i32 %add83.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end85.i:                                       ; preds = %if.then58.i, %if.then55.i
  %78 = load i32* %iexp.i, align 4
  %cmp86.i = icmp sge i32 %78, 0
  br i1 %cmp86.i, label %if.then88.i, label %if.else90.i

if.then88.i:                                      ; preds = %if.end85.i
  %79 = load i32* %iexp.i, align 4
  %div.i = sdiv i32 %79, 32
  store i32 %div.i, i32* %iwd0.i, align 4
  %80 = load i32* %iexp.i, align 4
  %81 = load i32* %iwd0.i, align 4
  %mul.i = mul nsw i32 %81, 32
  %sub89.i = sub nsw i32 %80, %mul.i
  store i32 %sub89.i, i32* %ibt0.i, align 4
  br label %if.end97.i

if.else90.i:                                      ; preds = %if.end85.i
  %82 = load i32* %iexp.i, align 4
  %add91.i = add nsw i32 %82, 1
  %div92.i = sdiv i32 %add91.i, 32
  store i32 %div92.i, i32* %iwd0.i, align 4
  %83 = load i32* %iexp.i, align 4
  %add93.i = add nsw i32 %83, 32
  %84 = load i32* %iwd0.i, align 4
  %mul94.i = mul nsw i32 %84, 32
  %sub95.i = sub nsw i32 %add93.i, %mul94.i
  store i32 %sub95.i, i32* %ibt0.i, align 4
  %85 = load i32* %iwd0.i, align 4
  %add96.i = add nsw i32 %85, 33
  store i32 %add96.i, i32* %iwd0.i, align 4
  br label %if.end97.i

if.end97.i:                                       ; preds = %if.else90.i, %if.then88.i
  %86 = load i32* %iwd0.i, align 4
  %tobool98.i = icmp ne i32 %86, 0
  br i1 %tobool98.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.end97.i
  %87 = load i32* %iwd0.i, align 4
  %sub99.i = sub nsw i32 %87, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.end97.i
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub99.i, %cond.true.i ], [ 33, %cond.false.i ]
  store i32 %cond.i, i32* %iwdm1.i, align 4
  %88 = load i32* %iwdm1.i, align 4
  %tobool100.i = icmp ne i32 %88, 0
  br i1 %tobool100.i, label %cond.true101.i, label %cond.false103.i

cond.true101.i:                                   ; preds = %cond.end.i
  %89 = load i32* %iwdm1.i, align 4
  %sub102.i = sub nsw i32 %89, 1
  br label %cond.end104.i

cond.false103.i:                                  ; preds = %cond.end.i
  br label %cond.end104.i

cond.end104.i:                                    ; preds = %cond.false103.i, %cond.true101.i
  %cond105.i = phi i32 [ %sub102.i, %cond.true101.i ], [ 33, %cond.false103.i ]
  store i32 %cond105.i, i32* %iwdm2.i, align 4
  %90 = load i32* %ibt0.i, align 4
  %cmp106.i = icmp ult i32 %90, 20
  br i1 %cmp106.i, label %if.then108.i, label %if.else127.i

if.then108.i:                                     ; preds = %cond.end104.i
  %91 = load i64* %lb1.i, align 8
  %92 = load i32* %ibt0.i, align 4
  %sub109.i = sub i32 52, %92
  %sh_prom.i = zext i32 %sub109.i to i64
  %shr110.i = lshr i64 %91, %sh_prom.i
  %conv111.i = trunc i64 %shr110.i to i32
  %93 = load i32* %iwd0.i, align 4
  %idxprom112.i = sext i32 %93 to i64
  %94 = load i32** %iexta.i, align 8
  %arrayidx113.i = getelementptr inbounds i32* %94, i64 %idxprom112.i
  store i32 %conv111.i, i32* %arrayidx113.i, align 4
  %95 = load i64* %lb1.i, align 8
  %96 = load i32* %ibt0.i, align 4
  %sub114.i = sub i32 20, %96
  %sh_prom115.i = zext i32 %sub114.i to i64
  %shr116.i = lshr i64 %95, %sh_prom115.i
  %and117.i = and i64 %shr116.i, 4294967295
  %conv118.i = trunc i64 %and117.i to i32
  %97 = load i32* %iwdm1.i, align 4
  %idxprom119.i = sext i32 %97 to i64
  %98 = load i32** %iexta.i, align 8
  %arrayidx120.i = getelementptr inbounds i32* %98, i64 %idxprom119.i
  store i32 %conv118.i, i32* %arrayidx120.i, align 4
  %99 = load i64* %lb1.i, align 8
  %100 = load i32* %ibt0.i, align 4
  %add121.i = add i32 %100, 12
  %sh_prom122.i = zext i32 %add121.i to i64
  %shl.i = shl i64 %99, %sh_prom122.i
  %and123.i = and i64 %shl.i, 4294967295
  %conv124.i = trunc i64 %and123.i to i32
  %101 = load i32* %iwdm2.i, align 4
  %idxprom125.i = sext i32 %101 to i64
  %102 = load i32** %iexta.i, align 8
  %arrayidx126.i = getelementptr inbounds i32* %102, i64 %idxprom125.i
  store i32 %conv124.i, i32* %arrayidx126.i, align 4
  br label %if.end141.i

if.else127.i:                                     ; preds = %cond.end104.i
  %103 = load i64* %lb1.i, align 8
  %104 = load i32* %ibt0.i, align 4
  %sub128.i = sub i32 52, %104
  %sh_prom129.i = zext i32 %sub128.i to i64
  %shr130.i = lshr i64 %103, %sh_prom129.i
  %conv131.i = trunc i64 %shr130.i to i32
  %105 = load i32* %iwd0.i, align 4
  %idxprom132.i = sext i32 %105 to i64
  %106 = load i32** %iexta.i, align 8
  %arrayidx133.i = getelementptr inbounds i32* %106, i64 %idxprom132.i
  store i32 %conv131.i, i32* %arrayidx133.i, align 4
  %107 = load i64* %lb1.i, align 8
  %108 = load i32* %ibt0.i, align 4
  %sub134.i = sub i32 %108, 20
  %sh_prom135.i = zext i32 %sub134.i to i64
  %shl136.i = shl i64 %107, %sh_prom135.i
  %and137.i = and i64 %shl136.i, 4294967295
  %conv138.i = trunc i64 %and137.i to i32
  %109 = load i32* %iwdm1.i, align 4
  %idxprom139.i = sext i32 %109 to i64
  %110 = load i32** %iexta.i, align 8
  %arrayidx140.i = getelementptr inbounds i32* %110, i64 %idxprom139.i
  store i32 %conv138.i, i32* %arrayidx140.i, align 4
  br label %if.end141.i

if.end141.i:                                      ; preds = %if.else127.i, %if.then108.i
  %111 = load i32** %iextc.i, align 8
  store i32 1, i32* %111, align 4
  store i32 1, i32* %kmx.i, align 4
  %112 = load i32* %iexp.i, align 4
  %cmp143.i = icmp sge i32 %112, 0
  br i1 %cmp143.i, label %if.then145.i, label %if.end228.i

if.then145.i:                                     ; preds = %if.end141.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond146.i

for.cond146.i:                                    ; preds = %for.end224.i, %if.then145.i
  %113 = load i32* %i.i, align 4
  %114 = load i32* %iwd0.i, align 4
  %cmp147.i = icmp sle i32 %113, %114
  br i1 %cmp147.i, label %for.body149.i, label %for.end227.i

for.body149.i:                                    ; preds = %for.cond146.i
  store i32 0, i32* %j.i, align 4
  br label %for.cond150.i

for.cond150.i:                                    ; preds = %for.end217.i, %for.body149.i
  %115 = load i32* %j.i, align 4
  %cmp151.i = icmp slt i32 %115, 32
  br i1 %cmp151.i, label %for.body153.i, label %for.end224.i

for.body153.i:                                    ; preds = %for.cond150.i
  %116 = load i32* %i.i, align 4
  %idxprom154.i = sext i32 %116 to i64
  %117 = load i32** %iexta.i, align 8
  %arrayidx155.i = getelementptr inbounds i32* %117, i64 %idxprom154.i
  %118 = load i32* %arrayidx155.i, align 4
  %119 = load i32* %j.i, align 4
  %shl156.i = shl i32 1, %119
  %and157.i = and i32 %118, %shl156.i
  %tobool158.i = icmp ne i32 %and157.i, 0
  br i1 %tobool158.i, label %if.then159.i, label %if.end190.i

if.then159.i:                                     ; preds = %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond160.i

for.cond160.i:                                    ; preds = %if.end183.i, %if.then159.i
  %120 = load i32* %k.i, align 4
  %121 = load i32* %kmx.i, align 4
  %cmp161.i = icmp slt i32 %120, %121
  br i1 %cmp161.i, label %for.body163.i, label %for.end186.i

for.body163.i:                                    ; preds = %for.cond160.i
  %122 = load i32* %k.i, align 4
  %idxprom164.i = sext i32 %122 to i64
  %arrayidx165.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom164.i
  %123 = load i32* %arrayidx165.i, align 4
  %124 = load i32* %k.i, align 4
  %idxprom166.i = sext i32 %124 to i64
  %125 = load i32** %iextc.i, align 8
  %arrayidx167.i = getelementptr inbounds i32* %125, i64 %idxprom166.i
  %126 = load i32* %arrayidx167.i, align 4
  %add168.i = add i32 %123, %126
  %127 = load i32* %icarr.i, align 4
  %add169.i = add i32 %add168.i, %127
  %128 = load i32* %k.i, align 4
  %idxprom170.i = sext i32 %128 to i64
  %arrayidx171.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom170.i
  store i32 %add169.i, i32* %arrayidx171.i, align 4
  %129 = load i32* %k.i, align 4
  %idxprom172.i = sext i32 %129 to i64
  %arrayidx173.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom172.i
  %130 = load i32* %arrayidx173.i, align 4
  %cmp174.i = icmp uge i32 %130, 1000000000
  br i1 %cmp174.i, label %if.then176.i, label %if.else182.i

if.then176.i:                                     ; preds = %for.body163.i
  %131 = load i32* %k.i, align 4
  %idxprom177.i = sext i32 %131 to i64
  %arrayidx178.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom177.i
  %132 = load i32* %arrayidx178.i, align 4
  %sub179.i = sub i32 %132, 1000000000
  %133 = load i32* %k.i, align 4
  %idxprom180.i = sext i32 %133 to i64
  %arrayidx181.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom180.i
  store i32 %sub179.i, i32* %arrayidx181.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end183.i

if.else182.i:                                     ; preds = %for.body163.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end183.i

if.end183.i:                                      ; preds = %if.else182.i, %if.then176.i
  %134 = load i32* %k.i, align 4
  %inc185.i = add nsw i32 %134, 1
  store i32 %inc185.i, i32* %k.i, align 4
  br label %for.cond160.i

for.end186.i:                                     ; preds = %for.cond160.i
  %135 = load i32* %icarr.i, align 4
  %136 = load i32* %kmx.i, align 4
  %idxprom187.i = sext i32 %136 to i64
  %arrayidx188.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom187.i
  %137 = load i32* %arrayidx188.i, align 4
  %add189.i = add i32 %137, %135
  store i32 %add189.i, i32* %arrayidx188.i, align 4
  br label %if.end190.i

if.end190.i:                                      ; preds = %for.end186.i, %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond191.i

for.cond191.i:                                    ; preds = %if.end214.i, %if.end190.i
  %138 = load i32* %k.i, align 4
  %139 = load i32* %kmx.i, align 4
  %cmp192.i = icmp slt i32 %138, %139
  br i1 %cmp192.i, label %for.body194.i, label %for.end217.i

for.body194.i:                                    ; preds = %for.cond191.i
  %140 = load i32* %k.i, align 4
  %idxprom195.i = sext i32 %140 to i64
  %141 = load i32** %iextc.i, align 8
  %arrayidx196.i = getelementptr inbounds i32* %141, i64 %idxprom195.i
  %142 = load i32* %arrayidx196.i, align 4
  %143 = load i32* %k.i, align 4
  %idxprom197.i = sext i32 %143 to i64
  %144 = load i32** %iextc.i, align 8
  %arrayidx198.i = getelementptr inbounds i32* %144, i64 %idxprom197.i
  %145 = load i32* %arrayidx198.i, align 4
  %add199.i = add i32 %142, %145
  %146 = load i32* %icarr.i, align 4
  %add200.i = add i32 %add199.i, %146
  %147 = load i32* %k.i, align 4
  %idxprom201.i = sext i32 %147 to i64
  %148 = load i32** %iextc.i, align 8
  %arrayidx202.i = getelementptr inbounds i32* %148, i64 %idxprom201.i
  store i32 %add200.i, i32* %arrayidx202.i, align 4
  %149 = load i32* %k.i, align 4
  %idxprom203.i = sext i32 %149 to i64
  %150 = load i32** %iextc.i, align 8
  %arrayidx204.i = getelementptr inbounds i32* %150, i64 %idxprom203.i
  %151 = load i32* %arrayidx204.i, align 4
  %cmp205.i = icmp uge i32 %151, 1000000000
  br i1 %cmp205.i, label %if.then207.i, label %if.else213.i

if.then207.i:                                     ; preds = %for.body194.i
  %152 = load i32* %k.i, align 4
  %idxprom208.i = sext i32 %152 to i64
  %153 = load i32** %iextc.i, align 8
  %arrayidx209.i = getelementptr inbounds i32* %153, i64 %idxprom208.i
  %154 = load i32* %arrayidx209.i, align 4
  %sub210.i = sub i32 %154, 1000000000
  %155 = load i32* %k.i, align 4
  %idxprom211.i = sext i32 %155 to i64
  %156 = load i32** %iextc.i, align 8
  %arrayidx212.i = getelementptr inbounds i32* %156, i64 %idxprom211.i
  store i32 %sub210.i, i32* %arrayidx212.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end214.i

if.else213.i:                                     ; preds = %for.body194.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end214.i

if.end214.i:                                      ; preds = %if.else213.i, %if.then207.i
  %157 = load i32* %k.i, align 4
  %inc216.i = add nsw i32 %157, 1
  store i32 %inc216.i, i32* %k.i, align 4
  br label %for.cond191.i

for.end217.i:                                     ; preds = %for.cond191.i
  %158 = load i32* %icarr.i, align 4
  %159 = load i32* %kmx.i, align 4
  %idxprom218.i = sext i32 %159 to i64
  %160 = load i32** %iextc.i, align 8
  %arrayidx219.i = getelementptr inbounds i32* %160, i64 %idxprom218.i
  %161 = load i32* %arrayidx219.i, align 4
  %add220.i = add i32 %161, %158
  store i32 %add220.i, i32* %arrayidx219.i, align 4
  %162 = load i32* %icarr.i, align 4
  %163 = load i32* %kmx.i, align 4
  %add221.i = add i32 %163, %162
  store i32 %add221.i, i32* %kmx.i, align 4
  %164 = load i32* %j.i, align 4
  %inc223.i = add nsw i32 %164, 1
  store i32 %inc223.i, i32* %j.i, align 4
  br label %for.cond150.i

for.end224.i:                                     ; preds = %for.cond150.i
  %165 = load i32* %i.i, align 4
  %inc226.i = add nsw i32 %165, 1
  store i32 %inc226.i, i32* %i.i, align 4
  br label %for.cond146.i

for.end227.i:                                     ; preds = %for.cond146.i
  br label %if.end228.i

if.end228.i:                                      ; preds = %for.end227.i, %if.end141.i
  %166 = load i32* %kmx.i, align 4
  %sub229.i = sub nsw i32 %166, 1
  %idxprom230.i = sext i32 %sub229.i to i64
  %arrayidx231.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom230.i
  %167 = load i32* %arrayidx231.i, align 4
  %cmp232.i = icmp eq i32 %167, 0
  br i1 %cmp232.i, label %if.then234.i, label %if.end235.i

if.then234.i:                                     ; preds = %if.end228.i
  %168 = load i32* %kmx.i, align 4
  %dec.i = add nsw i32 %168, -1
  store i32 %dec.i, i32* %kmx.i, align 4
  br label %if.end235.i

if.end235.i:                                      ; preds = %if.then234.i, %if.end228.i
  %169 = load i32* %kmx.i, align 4
  %dec236.i = add nsw i32 %169, -1
  store i32 %dec236.i, i32* %kmx.i, align 4
  store i32 0, i32* %prdigits.i, align 4
  %170 = load i32* %kmx.i, align 4
  %cmp237.i = icmp sge i32 %170, 0
  br i1 %cmp237.i, label %if.then239.i, label %if.end392.i

if.then239.i:                                     ; preds = %if.end235.i
  store i32 1, i32* %digit.i, align 4
  %171 = load i32* %kmx.i, align 4
  %idxprom240.i = sext i32 %171 to i64
  %arrayidx241.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom240.i
  %172 = load i32* %arrayidx241.i, align 4
  store i32 %172, i32* %k.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond242.i

for.cond242.i:                                    ; preds = %if.end249.i, %if.then239.i
  %173 = load i32* %i.i, align 4
  %cmp243.i = icmp slt i32 %173, 9
  br i1 %cmp243.i, label %for.body245.i, label %for.end253.i

for.body245.i:                                    ; preds = %for.cond242.i
  %174 = load i32* %k.i, align 4
  %175 = load i32* %digit.i, align 4
  %cmp246.i = icmp uge i32 %174, %175
  br i1 %cmp246.i, label %if.then248.i, label %if.end249.i

if.then248.i:                                     ; preds = %for.body245.i
  %176 = load i32* %i.i, align 4
  store i32 %176, i32* %pose.i, align 4
  br label %if.end249.i

if.end249.i:                                      ; preds = %if.then248.i, %for.body245.i
  %177 = load i32* %digit.i, align 4
  %mul250.i = mul i32 %177, 10
  store i32 %mul250.i, i32* %digit.i, align 4
  %178 = load i32* %i.i, align 4
  %inc252.i = add nsw i32 %178, 1
  store i32 %inc252.i, i32* %i.i, align 4
  br label %for.cond242.i

for.end253.i:                                     ; preds = %for.cond242.i
  %179 = load i32* %kmx.i, align 4
  %mul254.i = mul nsw i32 %179, 9
  %180 = load i32* %pose.i, align 4
  %add255.i = add nsw i32 %mul254.i, %180
  %add256.i = add nsw i32 %add255.i, 1
  store i32 %add256.i, i32* %prdigits.i, align 4
  %181 = load i32* %prdigits.i, align 4
  %182 = load i32* %w.addr.i, align 4
  %cmp257.i = icmp ugt i32 %181, %182
  br i1 %cmp257.i, label %if.then259.i, label %if.end372.i

if.then259.i:                                     ; preds = %for.end253.i
  %183 = load i32* %prdigits.i, align 4
  %184 = load i32* %w.addr.i, align 4
  %sub260.i = sub i32 %183, %184
  store i32 %sub260.i, i32* %loc.i, align 4
  store i32 0, i32* %kbk.i, align 4
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then259.i
  %185 = load i32* %loc.i, align 4
  %cmp261.i = icmp sgt i32 %185, 9
  br i1 %cmp261.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %186 = load i32* %loc.i, align 4
  %sub263.i = sub nsw i32 %186, 9
  store i32 %sub263.i, i32* %loc.i, align 4
  %187 = load i32* %kbk.i, align 4
  %inc264.i = add nsw i32 %187, 1
  store i32 %inc264.i, i32* %kbk.i, align 4
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %188 = load i32* %kbk.i, align 4
  %idxprom265.i = sext i32 %188 to i64
  %arrayidx266.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom265.i
  %189 = load i32* %arrayidx266.i, align 4
  store i32 %189, i32* %k.i, align 4
  store i32 1, i32* %m.i, align 4
  store i32 10, i32* %c.i, align 4
  store i32 0, i32* %rndup.i, align 4
  store i32 0, i32* %sticky.i, align 4
  store i32 0, i32* %rndval.i, align 4
  %190 = load i32* %loc.i, align 4
  %cmp267.i = icmp sgt i32 %190, 1
  br i1 %cmp267.i, label %if.then269.i, label %if.else308.i

if.then269.i:                                     ; preds = %while.end.i
  br label %while.cond270.i

while.cond270.i:                                  ; preds = %if.end294.i, %if.then269.i
  %191 = load i32* %loc.i, align 4
  %dec271.i = add nsw i32 %191, -1
  store i32 %dec271.i, i32* %loc.i, align 4
  %tobool272.i = icmp ne i32 %191, 0
  br i1 %tobool272.i, label %while.body273.i, label %while.end296.i

while.body273.i:                                  ; preds = %while.cond270.i
  %192 = load i32* %k.i, align 4
  %div274.i = sdiv i32 %192, 10
  store i32 %div274.i, i32* %j.i, align 4
  %193 = load i32* %k.i, align 4
  %194 = load i32* %j.i, align 4
  %mul275.i = mul nsw i32 %194, 10
  %sub276.i = sub nsw i32 %193, %mul275.i
  store i32 %sub276.i, i32* %digit.i, align 4
  %195 = load i32* %loc.i, align 4
  %cmp277.i = icmp sgt i32 %195, 0
  br i1 %cmp277.i, label %if.then279.i, label %if.end283.i

if.then279.i:                                     ; preds = %while.body273.i
  %196 = load i32* %c.i, align 4
  %197 = load i32* %digit.i, align 4
  %sub280.i = sub i32 %196, %197
  %198 = load i32* %m.i, align 4
  %mul281.i = mul i32 %sub280.i, %198
  %199 = load i32* %rndup.i, align 4
  %add282.i = add i32 %199, %mul281.i
  store i32 %add282.i, i32* %rndup.i, align 4
  br label %if.end283.i

if.end283.i:                                      ; preds = %if.then279.i, %while.body273.i
  %200 = load i32* %loc.i, align 4
  %cmp284.i = icmp sgt i32 %200, 1
  br i1 %cmp284.i, label %if.then286.i, label %if.end290.i

if.then286.i:                                     ; preds = %if.end283.i
  %201 = load i32* %digit.i, align 4
  %cmp287.i = icmp ugt i32 %201, 0
  %conv288.i = zext i1 %cmp287.i to i32
  %202 = load i32* %sticky.i, align 4
  %or289.i = or i32 %202, %conv288.i
  store i32 %or289.i, i32* %sticky.i, align 4
  br label %if.end290.i

if.end290.i:                                      ; preds = %if.then286.i, %if.end283.i
  %203 = load i32* %loc.i, align 4
  %cmp291.i = icmp eq i32 %203, 1
  br i1 %cmp291.i, label %if.then293.i, label %if.end294.i

if.then293.i:                                     ; preds = %if.end290.i
  %204 = load i32* %digit.i, align 4
  store i32 %204, i32* %rndval.i, align 4
  br label %if.end294.i

if.end294.i:                                      ; preds = %if.then293.i, %if.end290.i
  %205 = load i32* %j.i, align 4
  store i32 %205, i32* %k.i, align 4
  %206 = load i32* %m.i, align 4
  %mul295.i = mul nsw i32 %206, 10
  store i32 %mul295.i, i32* %m.i, align 4
  store i32 9, i32* %c.i, align 4
  br label %while.cond270.i

while.end296.i:                                   ; preds = %while.cond270.i
  %207 = load i32* %kbk.i, align 4
  store i32 %207, i32* %i.i, align 4
  br label %while.cond297.i

while.cond297.i:                                  ; preds = %while.body300.i, %while.end296.i
  %208 = load i32* %i.i, align 4
  %tobool298.i = icmp ne i32 %208, 0
  br i1 %tobool298.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %while.cond297.i
  %209 = load i32* %sticky.i, align 4
  %tobool299.i = icmp ne i32 %209, 0
  %lnot.i = xor i1 %tobool299.i, true
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %while.cond297.i
  %210 = phi i1 [ false, %while.cond297.i ], [ %lnot.i, %land.rhs.i ]
  br i1 %210, label %while.body300.i, label %while.end307.i

while.body300.i:                                  ; preds = %land.end.i
  %211 = load i32* %i.i, align 4
  %dec301.i = add nsw i32 %211, -1
  store i32 %dec301.i, i32* %i.i, align 4
  %idxprom302.i = sext i32 %dec301.i to i64
  %arrayidx303.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom302.i
  %212 = load i32* %arrayidx303.i, align 4
  %cmp304.i = icmp ne i32 %212, 0
  %conv305.i = zext i1 %cmp304.i to i32
  %213 = load i32* %sticky.i, align 4
  %or306.i = or i32 %213, %conv305.i
  store i32 %or306.i, i32* %sticky.i, align 4
  br label %while.cond297.i

while.end307.i:                                   ; preds = %land.end.i
  br label %if.end341.i

if.else308.i:                                     ; preds = %while.end.i
  %214 = load i32* %kbk.i, align 4
  %cmp309.i = icmp sgt i32 %214, 0
  br i1 %cmp309.i, label %if.then311.i, label %if.end340.i

if.then311.i:                                     ; preds = %if.else308.i
  %215 = load i32* %kbk.i, align 4
  %dec312.i = add nsw i32 %215, -1
  store i32 %dec312.i, i32* %kbk.i, align 4
  %idxprom313.i = sext i32 %dec312.i to i64
  %arrayidx314.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom313.i
  %216 = load i32* %arrayidx314.i, align 4
  store i32 %216, i32* %k.i, align 4
  %217 = load i32* %k.i, align 4
  %cmp315.i = icmp sge i32 %217, 500000000
  br i1 %cmp315.i, label %if.then317.i, label %if.end339.i

if.then317.i:                                     ; preds = %if.then311.i
  store i32 5, i32* %rndval.i, align 4
  %218 = load i32* %k.i, align 4
  %sub318.i = sub nsw i32 1000000000, %218
  store i32 %sub318.i, i32* %rndup.i, align 4
  %219 = load i32* %k.i, align 4
  %cmp319.i = icmp sgt i32 %219, 500000000
  br i1 %cmp319.i, label %if.then321.i, label %if.else322.i

if.then321.i:                                     ; preds = %if.then317.i
  store i32 1, i32* %sticky.i, align 4
  br label %if.end338.i

if.else322.i:                                     ; preds = %if.then317.i
  %220 = load i32* %kbk.i, align 4
  %sub323.i = sub nsw i32 %220, 1
  store i32 %sub323.i, i32* %i.i, align 4
  br label %while.cond324.i

while.cond324.i:                                  ; preds = %while.body330.i, %if.else322.i
  %221 = load i32* %i.i, align 4
  %tobool325.i = icmp ne i32 %221, 0
  br i1 %tobool325.i, label %land.rhs326.i, label %land.end329.i

land.rhs326.i:                                    ; preds = %while.cond324.i
  %222 = load i32* %sticky.i, align 4
  %tobool327.i = icmp ne i32 %222, 0
  %lnot328.i = xor i1 %tobool327.i, true
  br label %land.end329.i

land.end329.i:                                    ; preds = %land.rhs326.i, %while.cond324.i
  %223 = phi i1 [ false, %while.cond324.i ], [ %lnot328.i, %land.rhs326.i ]
  br i1 %223, label %while.body330.i, label %while.end337.i

while.body330.i:                                  ; preds = %land.end329.i
  %224 = load i32* %i.i, align 4
  %dec331.i = add nsw i32 %224, -1
  store i32 %dec331.i, i32* %i.i, align 4
  %idxprom332.i = sext i32 %224 to i64
  %arrayidx333.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom332.i
  %225 = load i32* %arrayidx333.i, align 4
  %cmp334.i = icmp ne i32 %225, 0
  %conv335.i = zext i1 %cmp334.i to i32
  %226 = load i32* %sticky.i, align 4
  %or336.i = or i32 %226, %conv335.i
  store i32 %or336.i, i32* %sticky.i, align 4
  br label %while.cond324.i

while.end337.i:                                   ; preds = %land.end329.i
  br label %if.end338.i

if.end338.i:                                      ; preds = %while.end337.i, %if.then321.i
  br label %if.end339.i

if.end339.i:                                      ; preds = %if.end338.i, %if.then311.i
  br label %if.end340.i

if.end340.i:                                      ; preds = %if.end339.i, %if.else308.i
  br label %if.end341.i

if.end341.i:                                      ; preds = %if.end340.i, %while.end307.i
  %227 = load i32* %rndval.i, align 4
  %cmp342.i = icmp sgt i32 %227, 5
  br i1 %cmp342.i, label %if.then347.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end341.i
  %228 = load i32* %rndval.i, align 4
  %cmp344.i = icmp eq i32 %228, 5
  br i1 %cmp344.i, label %land.lhs.true.i, label %if.end351.i

land.lhs.true.i:                                  ; preds = %lor.lhs.false.i
  %229 = load i32* %sticky.i, align 4
  %tobool346.i = icmp ne i32 %229, 0
  br i1 %tobool346.i, label %if.then347.i, label %if.end351.i

if.then347.i:                                     ; preds = %land.lhs.true.i, %if.end341.i
  %230 = load i32* %rndup.i, align 4
  %231 = load i32* %kbk.i, align 4
  %idxprom348.i = sext i32 %231 to i64
  %arrayidx349.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom348.i
  %232 = load i32* %arrayidx349.i, align 4
  %add350.i = add i32 %232, %230
  store i32 %add350.i, i32* %arrayidx349.i, align 4
  br label %if.end351.i

if.end351.i:                                      ; preds = %if.then347.i, %land.lhs.true.i, %lor.lhs.false.i
  br label %while.cond352.i

while.cond352.i:                                  ; preds = %while.body357.i, %if.end351.i
  %233 = load i32* %kbk.i, align 4
  %idxprom353.i = sext i32 %233 to i64
  %arrayidx354.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom353.i
  %234 = load i32* %arrayidx354.i, align 4
  %cmp355.i = icmp uge i32 %234, 1000000000
  br i1 %cmp355.i, label %while.body357.i, label %while.end371.i

while.body357.i:                                  ; preds = %while.cond352.i
  %235 = load i32* %kbk.i, align 4
  %idxprom358.i = sext i32 %235 to i64
  %arrayidx359.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom358.i
  %236 = load i32* %arrayidx359.i, align 4
  %sub360.i = sub i32 %236, 1000000000
  %237 = load i32* %kbk.i, align 4
  %idxprom361.i = sext i32 %237 to i64
  %arrayidx362.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom361.i
  store i32 %sub360.i, i32* %arrayidx362.i, align 4
  %238 = load i32* %kbk.i, align 4
  %add363.i = add nsw i32 %238, 1
  %idxprom364.i = sext i32 %add363.i to i64
  %arrayidx365.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom364.i
  %239 = load i32* %arrayidx365.i, align 4
  %add366.i = add i32 %239, 1
  %240 = load i32* %kbk.i, align 4
  %add367.i = add nsw i32 %240, 1
  %idxprom368.i = sext i32 %add367.i to i64
  %arrayidx369.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom368.i
  store i32 %add366.i, i32* %arrayidx369.i, align 4
  %241 = load i32* %kbk.i, align 4
  %inc370.i = add nsw i32 %241, 1
  store i32 %inc370.i, i32* %kbk.i, align 4
  br label %while.cond352.i

while.end371.i:                                   ; preds = %while.cond352.i
  br label %if.end372.i

if.end372.i:                                      ; preds = %while.end371.i, %for.end253.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond373.i

for.cond373.i:                                    ; preds = %for.body378.i, %if.end372.i
  %242 = load i32* %i.i, align 4
  %243 = load i32* %kmx.i, align 4
  %add374.i = add nsw i32 %243, 1
  %div375.i = sdiv i32 %add374.i, 2
  %cmp376.i = icmp slt i32 %242, %div375.i
  br i1 %cmp376.i, label %for.body378.i, label %for.end391.i

for.body378.i:                                    ; preds = %for.cond373.i
  %244 = load i32* %i.i, align 4
  %idxprom379.i = sext i32 %244 to i64
  %arrayidx380.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom379.i
  %245 = load i32* %arrayidx380.i, align 4
  store i32 %245, i32* %k.i, align 4
  %246 = load i32* %kmx.i, align 4
  %247 = load i32* %i.i, align 4
  %sub381.i = sub nsw i32 %246, %247
  %idxprom382.i = sext i32 %sub381.i to i64
  %arrayidx383.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom382.i
  %248 = load i32* %arrayidx383.i, align 4
  %249 = load i32* %i.i, align 4
  %idxprom384.i = sext i32 %249 to i64
  %arrayidx385.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom384.i
  store i32 %248, i32* %arrayidx385.i, align 4
  %250 = load i32* %k.i, align 4
  %251 = load i32* %kmx.i, align 4
  %252 = load i32* %i.i, align 4
  %sub386.i = sub nsw i32 %251, %252
  %idxprom387.i = sext i32 %sub386.i to i64
  %arrayidx388.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom387.i
  store i32 %250, i32* %arrayidx388.i, align 4
  %253 = load i32* %i.i, align 4
  %inc390.i = add nsw i32 %253, 1
  store i32 %inc390.i, i32* %i.i, align 4
  br label %for.cond373.i

for.end391.i:                                     ; preds = %for.cond373.i
  br label %if.end392.i

if.end392.i:                                      ; preds = %for.end391.i, %if.end235.i
  %254 = load i32* %iexp.i, align 4
  %cmp393.i = icmp sle i32 %254, 51
  br i1 %cmp393.i, label %land.lhs.true395.i, label %if.end620.i

land.lhs.true395.i:                               ; preds = %if.end392.i
  %255 = load i32* %prdigits.i, align 4
  %256 = load i32* %w.addr.i, align 4
  %cmp396.i = icmp ule i32 %255, %256
  br i1 %cmp396.i, label %if.then398.i, label %if.end620.i

if.then398.i:                                     ; preds = %land.lhs.true395.i
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %keepon.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %257 = load i32* %kmx.i, align 4
  %add399.i = add nsw i32 %257, 1
  store i32 %add399.i, i32* %j.i, align 4
  %258 = load i32* %kmx.i, align 4
  %add400.i = add nsw i32 %258, 1
  store i32 %add400.i, i32* %k.i, align 4
  store i32 0, i32* %firstdigit.i, align 4
  store i32 0, i32* %savecarry.i, align 4
  %259 = load i32* %w.addr.i, align 4
  store i32 %259, i32* %lw.i, align 4
  br label %while.cond401.i

while.cond401.i:                                  ; preds = %if.end543.i, %if.then398.i
  %260 = load i32* %iwdm2.i, align 4
  %cmp402.i = icmp slt i32 %260, 34
  br i1 %cmp402.i, label %while.body404.i, label %while.end544.i

while.body404.i:                                  ; preds = %while.cond401.i
  store i32 0, i32* %sh1.i, align 4
  store i32 0, i32* %sh3.i, align 4
  store i32 0, i32* %icarr.i, align 4
  %261 = load i32* %iwdm2.i, align 4
  store i32 %261, i32* %i.i, align 4
  br label %for.cond405.i

for.cond405.i:                                    ; preds = %lor.end.i, %while.body404.i
  %262 = load i32* %i.i, align 4
  %cmp406.i = icmp slt i32 %262, 34
  br i1 %cmp406.i, label %for.body408.i, label %for.end433.i

for.body408.i:                                    ; preds = %for.cond405.i
  %263 = load i32* %i.i, align 4
  %idxprom409.i = sext i32 %263 to i64
  %264 = load i32** %iexta.i, align 8
  %arrayidx410.i = getelementptr inbounds i32* %264, i64 %idxprom409.i
  %265 = load i32* %arrayidx410.i, align 4
  store i32 %265, i32* %ix.i, align 4
  %266 = load i32* %ix.i, align 4
  %shl411.i = shl i32 %266, 1
  %267 = load i32* %sh1.i, align 4
  %add412.i = add i32 %shl411.i, %267
  store i32 %add412.i, i32* %ixa.i, align 4
  %268 = load i32* %ix.i, align 4
  %shl413.i = shl i32 %268, 3
  %269 = load i32* %sh3.i, align 4
  %add414.i = add i32 %shl413.i, %269
  store i32 %add414.i, i32* %ixb.i, align 4
  %270 = load i32* %ix.i, align 4
  %shr415.i = lshr i32 %270, 31
  store i32 %shr415.i, i32* %sh1.i, align 4
  %271 = load i32* %ix.i, align 4
  %shr416.i = lshr i32 %271, 29
  store i32 %shr416.i, i32* %sh3.i, align 4
  %272 = load i32* %ixa.i, align 4
  %273 = load i32* %ixb.i, align 4
  %add417.i = add i32 %272, %273
  %274 = load i32* %icarr.i, align 4
  %add418.i = add i32 %add417.i, %274
  store i32 %add418.i, i32* %ixc.i, align 4
  %275 = load i32* %ixc.i, align 4
  %276 = load i32* %ixa.i, align 4
  %cmp419.i = icmp ult i32 %275, %276
  br i1 %cmp419.i, label %lor.end.i, label %lor.lhs.false421.i

lor.lhs.false421.i:                               ; preds = %for.body408.i
  %277 = load i32* %ixc.i, align 4
  %278 = load i32* %ixb.i, align 4
  %cmp422.i = icmp ult i32 %277, %278
  br i1 %cmp422.i, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false421.i
  %279 = load i32* %ixa.i, align 4
  %280 = load i32* %ixb.i, align 4
  %and424.i = and i32 %279, %280
  %281 = load i32* %ixc.i, align 4
  %and425.i = and i32 %and424.i, %281
  %cmp426.i = icmp eq i32 %and425.i, -1
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %lor.lhs.false421.i, %for.body408.i
  %282 = phi i1 [ true, %lor.lhs.false421.i ], [ true, %for.body408.i ], [ %cmp426.i, %lor.rhs.i ]
  %cond428.i = select i1 %282, i32 1, i32 0
  store i32 %cond428.i, i32* %icarr.i, align 4
  %283 = load i32* %ixc.i, align 4
  %284 = load i32* %i.i, align 4
  %idxprom429.i = sext i32 %284 to i64
  %285 = load i32** %iexta.i, align 8
  %arrayidx430.i = getelementptr inbounds i32* %285, i64 %idxprom429.i
  store i32 %283, i32* %arrayidx430.i, align 4
  %286 = load i32* %i.i, align 4
  %inc432.i = add nsw i32 %286, 1
  store i32 %inc432.i, i32* %i.i, align 4
  br label %for.cond405.i

for.end433.i:                                     ; preds = %for.cond405.i
  %287 = load i32* %iwdm2.i, align 4
  %idxprom434.i = sext i32 %287 to i64
  %288 = load i32** %iexta.i, align 8
  %arrayidx435.i = getelementptr inbounds i32* %288, i64 %idxprom434.i
  %289 = load i32* %arrayidx435.i, align 4
  %cmp436.i = icmp eq i32 %289, 0
  br i1 %cmp436.i, label %if.then438.i, label %if.end440.i

if.then438.i:                                     ; preds = %for.end433.i
  %290 = load i32* %iwdm2.i, align 4
  %inc439.i = add nsw i32 %290, 1
  store i32 %inc439.i, i32* %iwdm2.i, align 4
  br label %if.end440.i

if.end440.i:                                      ; preds = %if.then438.i, %for.end433.i
  %291 = load i32* %digit.i, align 4
  %mul441.i = mul i32 %291, 10
  %292 = load i32* %sh3.i, align 4
  %293 = load i32* %sh1.i, align 4
  %add442.i = add i32 %292, %293
  %294 = load i32* %icarr.i, align 4
  %add443.i = add i32 %add442.i, %294
  %add444.i = add i32 %mul441.i, %add443.i
  store i32 %add444.i, i32* %digit.i, align 4
  %295 = load i32* %ndigits.i, align 4
  %inc445.i = add i32 %295, 1
  store i32 %inc445.i, i32* %ndigits.i, align 4
  %296 = load i32* %digit.i, align 4
  %tobool446.i = icmp ne i32 %296, 0
  br i1 %tobool446.i, label %land.lhs.true447.i, label %if.end461.i

land.lhs.true447.i:                               ; preds = %if.end440.i
  %297 = load i32* %firstdigit.i, align 4
  %tobool448.i = icmp ne i32 %297, 0
  br i1 %tobool448.i, label %if.end461.i, label %if.then449.i

if.then449.i:                                     ; preds = %land.lhs.true447.i
  %298 = load i32* %ndigits.i, align 4
  store i32 %298, i32* %firstdigit.i, align 4
  %299 = load i32* %j.i, align 4
  store i32 %299, i32* %firstfwd.i, align 4
  %300 = load i32* %ndigits.i, align 4
  %cmp450.i = icmp ugt i32 %300, 1
  br i1 %cmp450.i, label %land.lhs.true455.i, label %lor.lhs.false452.i

lor.lhs.false452.i:                               ; preds = %if.then449.i
  %301 = load i32* %j.i, align 4
  %302 = load i32* %k.i, align 4
  %cmp453.i = icmp ne i32 %301, %302
  br i1 %cmp453.i, label %land.lhs.true455.i, label %if.end460.i

land.lhs.true455.i:                               ; preds = %lor.lhs.false452.i, %if.then449.i
  %303 = load i32* %prdigits.i, align 4
  %cmp456.i = icmp eq i32 %303, 0
  br i1 %cmp456.i, label %if.then458.i, label %if.end460.i

if.then458.i:                                     ; preds = %land.lhs.true455.i
  %304 = load i32* %lw.i, align 4
  %inc459.i = add nsw i32 %304, 1
  store i32 %inc459.i, i32* %lw.i, align 4
  br label %if.end460.i

if.end460.i:                                      ; preds = %if.then458.i, %land.lhs.true455.i, %lor.lhs.false452.i
  br label %if.end461.i

if.end461.i:                                      ; preds = %if.end460.i, %land.lhs.true447.i, %if.end440.i
  %305 = load i32* %firstdigit.i, align 4
  %tobool462.i = icmp ne i32 %305, 0
  br i1 %tobool462.i, label %if.then465.i, label %lor.lhs.false463.i

lor.lhs.false463.i:                               ; preds = %if.end461.i
  %306 = load i32* %prdigits.i, align 4
  %tobool464.i = icmp ne i32 %306, 0
  br i1 %tobool464.i, label %if.then465.i, label %if.end521.i

if.then465.i:                                     ; preds = %lor.lhs.false463.i, %if.end461.i
  %307 = load i32* %prdigits.i, align 4
  %inc466.i = add i32 %307, 1
  store i32 %inc466.i, i32* %prdigits.i, align 4
  %308 = load i32* %prdigits.i, align 4
  %309 = load i32* %lw.i, align 4
  %cmp467.i = icmp ugt i32 %308, %309
  br i1 %cmp467.i, label %if.then469.i, label %if.end520.i

if.then469.i:                                     ; preds = %if.then465.i
  %310 = load i32* %keepon.i, align 4
  %tobool470.i = icmp ne i32 %310, 0
  br i1 %tobool470.i, label %if.else477.i, label %land.lhs.true471.i

land.lhs.true471.i:                               ; preds = %if.then469.i
  %311 = load i32* %sh3.i, align 4
  %312 = load i32* %sh1.i, align 4
  %add472.i = add i32 %311, %312
  %313 = load i32* %icarr.i, align 4
  %add473.i = add i32 %add472.i, %313
  %cmp474.i = icmp ult i32 %add473.i, 5
  br i1 %cmp474.i, label %if.then476.i, label %if.else477.i

if.then476.i:                                     ; preds = %land.lhs.true471.i
  br label %while.end544.i

if.else477.i:                                     ; preds = %land.lhs.true471.i, %if.then469.i
  %314 = load i32* %keepon.i, align 4
  %tobool478.i = icmp ne i32 %314, 0
  br i1 %tobool478.i, label %if.else489.i, label %land.lhs.true479.i

land.lhs.true479.i:                               ; preds = %if.else477.i
  %315 = load i32* %sh3.i, align 4
  %316 = load i32* %sh1.i, align 4
  %add480.i = add i32 %315, %316
  %317 = load i32* %icarr.i, align 4
  %add481.i = add i32 %add480.i, %317
  %cmp482.i = icmp ugt i32 %add481.i, 5
  br i1 %cmp482.i, label %if.then484.i, label %if.else489.i

if.then484.i:                                     ; preds = %land.lhs.true479.i
  %318 = load i32* %sh3.i, align 4
  %319 = load i32* %sh1.i, align 4
  %add485.i = add i32 %318, %319
  %320 = load i32* %icarr.i, align 4
  %add486.i = add i32 %add485.i, %320
  %sub487.i = sub i32 10, %add486.i
  %321 = load i32* %digit.i, align 4
  %add488.i = add i32 %321, %sub487.i
  store i32 %add488.i, i32* %digit.i, align 4
  br label %while.end544.i

if.else489.i:                                     ; preds = %land.lhs.true479.i, %if.else477.i
  %322 = load i32* %keepon.i, align 4
  %tobool490.i = icmp ne i32 %322, 0
  br i1 %tobool490.i, label %land.lhs.true491.i, label %if.else509.i

land.lhs.true491.i:                               ; preds = %if.else489.i
  %323 = load i32* %sh3.i, align 4
  %324 = load i32* %sh1.i, align 4
  %add492.i = add i32 %323, %324
  %325 = load i32* %icarr.i, align 4
  %add493.i = add i32 %add492.i, %325
  %cmp494.i = icmp ugt i32 %add493.i, 0
  br i1 %cmp494.i, label %if.then496.i, label %if.else509.i

if.then496.i:                                     ; preds = %land.lhs.true491.i
  %326 = load i32* %savecarry.i, align 4
  %tobool497.i = icmp ne i32 %326, 0
  br i1 %tobool497.i, label %if.then498.i, label %if.else502.i

if.then498.i:                                     ; preds = %if.then496.i
  %327 = load i32* %savek.i, align 4
  %idxprom499.i = sext i32 %327 to i64
  %arrayidx500.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom499.i
  %328 = load i32* %arrayidx500.i, align 4
  store i32 %328, i32* %digit.i, align 4
  %329 = load i32* %savecarry.i, align 4
  %330 = load i32* %digit.i, align 4
  %add501.i = add i32 %330, %329
  store i32 %add501.i, i32* %digit.i, align 4
  %331 = load i32* %savek.i, align 4
  store i32 %331, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end508.i

if.else502.i:                                     ; preds = %if.then496.i
  %332 = load i32* %roundcarry.i, align 4
  %mul503.i = mul i32 %332, 10
  store i32 %mul503.i, i32* %roundcarry.i, align 4
  %333 = load i32* %roundcarry.i, align 4
  %334 = load i32* %sh3.i, align 4
  %335 = load i32* %sh1.i, align 4
  %add504.i = add i32 %334, %335
  %336 = load i32* %icarr.i, align 4
  %add505.i = add i32 %add504.i, %336
  %sub506.i = sub i32 %333, %add505.i
  %337 = load i32* %digit.i, align 4
  %add507.i = add i32 %337, %sub506.i
  store i32 %add507.i, i32* %digit.i, align 4
  br label %if.end508.i

if.end508.i:                                      ; preds = %if.else502.i, %if.then498.i
  store i32 0, i32* %keepon.i, align 4
  br label %while.end544.i

if.else509.i:                                     ; preds = %land.lhs.true491.i, %if.else489.i
  %338 = load i32* %keepon.i, align 4
  %tobool510.i = icmp ne i32 %338, 0
  br i1 %tobool510.i, label %if.then511.i, label %if.else514.i

if.then511.i:                                     ; preds = %if.else509.i
  %339 = load i32* %keepon.i, align 4
  %inc512.i = add i32 %339, 1
  store i32 %inc512.i, i32* %keepon.i, align 4
  %340 = load i32* %roundcarry.i, align 4
  %mul513.i = mul i32 %340, 10
  store i32 %mul513.i, i32* %roundcarry.i, align 4
  br label %if.end516.i

if.else514.i:                                     ; preds = %if.else509.i
  store i32 5, i32* %roundcarry.i, align 4
  %341 = load i32* %keepon.i, align 4
  %inc515.i = add i32 %341, 1
  store i32 %inc515.i, i32* %keepon.i, align 4
  br label %if.end516.i

if.end516.i:                                      ; preds = %if.else514.i, %if.then511.i
  br label %if.end520.i

if.end520.i:                                      ; preds = %if.end516.i, %if.then465.i
  br label %if.end521.i

if.end521.i:                                      ; preds = %if.end520.i, %lor.lhs.false463.i
  %342 = load i32* %ndigits.i, align 4
  %cmp522.i = icmp eq i32 %342, 9
  br i1 %cmp522.i, label %if.then524.i, label %if.end543.i

if.then524.i:                                     ; preds = %if.end521.i
  %343 = load i32* %digit.i, align 4
  %tobool525.i = icmp ne i32 %343, 0
  br i1 %tobool525.i, label %if.then531.i, label %lor.lhs.false526.i

lor.lhs.false526.i:                               ; preds = %if.then524.i
  %344 = load i32* %firstdigit.i, align 4
  %tobool527.i = icmp ne i32 %344, 0
  br i1 %tobool527.i, label %if.then531.i, label %lor.lhs.false528.i

lor.lhs.false528.i:                               ; preds = %lor.lhs.false526.i
  %345 = load i32* %iexp.i, align 4
  %cmp529.i = icmp sge i32 %345, 0
  br i1 %cmp529.i, label %if.then531.i, label %if.end535.i

if.then531.i:                                     ; preds = %lor.lhs.false528.i, %lor.lhs.false526.i, %if.then524.i
  %346 = load i32* %digit.i, align 4
  %347 = load i32* %k.i, align 4
  %inc532.i = add nsw i32 %347, 1
  store i32 %inc532.i, i32* %k.i, align 4
  %idxprom533.i = sext i32 %347 to i64
  %arrayidx534.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom533.i
  store i32 %346, i32* %arrayidx534.i, align 4
  br label %if.end535.i

if.end535.i:                                      ; preds = %if.then531.i, %lor.lhs.false528.i
  %348 = load i32* %j.i, align 4
  %inc536.i = add nsw i32 %348, 1
  store i32 %inc536.i, i32* %j.i, align 4
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %349 = load i32* %keepon.i, align 4
  %tobool537.i = icmp ne i32 %349, 0
  br i1 %tobool537.i, label %land.lhs.true538.i, label %if.end542.i

land.lhs.true538.i:                               ; preds = %if.end535.i
  %350 = load i32* %savecarry.i, align 4
  %tobool539.i = icmp ne i32 %350, 0
  br i1 %tobool539.i, label %if.end542.i, label %if.then540.i

if.then540.i:                                     ; preds = %land.lhs.true538.i
  %351 = load i32* %roundcarry.i, align 4
  store i32 %351, i32* %savecarry.i, align 4
  %352 = load i32* %k.i, align 4
  %sub541.i = sub nsw i32 %352, 1
  store i32 %sub541.i, i32* %savek.i, align 4
  br label %if.end542.i

if.end542.i:                                      ; preds = %if.then540.i, %land.lhs.true538.i, %if.end535.i
  br label %if.end543.i

if.end543.i:                                      ; preds = %if.end542.i, %if.end521.i
  br label %while.cond401.i

while.end544.i:                                   ; preds = %if.end508.i, %if.then484.i, %if.then476.i, %while.cond401.i
  %353 = load i32* %keepon.i, align 4
  %tobool545.i = icmp ne i32 %353, 0
  br i1 %tobool545.i, label %if.then546.i, label %if.end558.i

if.then546.i:                                     ; preds = %while.end544.i
  %354 = load i32* %savecarry.i, align 4
  %tobool547.i = icmp ne i32 %354, 0
  br i1 %tobool547.i, label %if.then548.i, label %if.else552.i

if.then548.i:                                     ; preds = %if.then546.i
  %355 = load i32* %savek.i, align 4
  %idxprom549.i = sext i32 %355 to i64
  %arrayidx550.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom549.i
  %356 = load i32* %arrayidx550.i, align 4
  store i32 %356, i32* %digit.i, align 4
  %357 = load i32* %savecarry.i, align 4
  %358 = load i32* %digit.i, align 4
  %add551.i = add i32 %358, %357
  store i32 %add551.i, i32* %digit.i, align 4
  %359 = load i32* %savek.i, align 4
  store i32 %359, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end557.i

if.else552.i:                                     ; preds = %if.then546.i
  %360 = load i32* %roundcarry.i, align 4
  %tobool553.i = icmp ne i32 %360, 0
  br i1 %tobool553.i, label %if.then554.i, label %if.end556.i

if.then554.i:                                     ; preds = %if.else552.i
  %361 = load i32* %roundcarry.i, align 4
  %362 = load i32* %digit.i, align 4
  %add555.i = add i32 %362, %361
  store i32 %add555.i, i32* %digit.i, align 4
  br label %if.end556.i

if.end556.i:                                      ; preds = %if.then554.i, %if.else552.i
  br label %if.end557.i

if.end557.i:                                      ; preds = %if.end556.i, %if.then548.i
  br label %if.end558.i

if.end558.i:                                      ; preds = %if.end557.i, %while.end544.i
  %363 = load i32* %digit.i, align 4
  %tobool559.i = icmp ne i32 %363, 0
  br i1 %tobool559.i, label %if.then560.i, label %if.end619.i

if.then560.i:                                     ; preds = %if.end558.i
  br label %for.cond561.i

for.cond561.i:                                    ; preds = %for.body564.i, %if.then560.i
  %364 = load i32* %ndigits.i, align 4
  %cmp562.i = icmp ult i32 %364, 9
  br i1 %cmp562.i, label %for.body564.i, label %for.end568.i

for.body564.i:                                    ; preds = %for.cond561.i
  %365 = load i32* %digit.i, align 4
  %mul565.i = mul i32 %365, 10
  store i32 %mul565.i, i32* %digit.i, align 4
  %366 = load i32* %ndigits.i, align 4
  %inc567.i = add i32 %366, 1
  store i32 %inc567.i, i32* %ndigits.i, align 4
  br label %for.cond561.i

for.end568.i:                                     ; preds = %for.cond561.i
  %367 = load i32* %digit.i, align 4
  %368 = load i32* %k.i, align 4
  %idxprom569.i = sext i32 %368 to i64
  %arrayidx570.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom569.i
  store i32 %367, i32* %arrayidx570.i, align 4
  %369 = load i32* %digit.i, align 4
  %cmp571.i = icmp eq i32 %369, 1000000000
  br i1 %cmp571.i, label %if.then573.i, label %if.end618.i

if.then573.i:                                     ; preds = %for.end568.i
  store i32 0, i32* %digit.i, align 4
  %370 = load i32* %digit.i, align 4
  %371 = load i32* %k.i, align 4
  %idxprom574.i = sext i32 %371 to i64
  %arrayidx575.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom574.i
  store i32 %370, i32* %arrayidx575.i, align 4
  %372 = load i32* %k.i, align 4
  %sub576.i = sub nsw i32 %372, 1
  store i32 %sub576.i, i32* %kbk.i, align 4
  %373 = load i32* %kbk.i, align 4
  %idxprom577.i = sext i32 %373 to i64
  %arrayidx578.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom577.i
  %374 = load i32* %arrayidx578.i, align 4
  %inc579.i = add i32 %374, 1
  store i32 %inc579.i, i32* %arrayidx578.i, align 4
  br label %while.cond580.i

while.cond580.i:                                  ; preds = %while.body585.i, %if.then573.i
  %375 = load i32* %kbk.i, align 4
  %idxprom581.i = sext i32 %375 to i64
  %arrayidx582.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom581.i
  %376 = load i32* %arrayidx582.i, align 4
  %cmp583.i = icmp eq i32 %376, 1000000000
  br i1 %cmp583.i, label %while.body585.i, label %while.end592.i

while.body585.i:                                  ; preds = %while.cond580.i
  %377 = load i32* %kbk.i, align 4
  %idxprom586.i = sext i32 %377 to i64
  %arrayidx587.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom586.i
  store i32 0, i32* %arrayidx587.i, align 4
  %378 = load i32* %k.i, align 4
  %sub588.i = sub nsw i32 %378, 1
  store i32 %sub588.i, i32* %kbk.i, align 4
  %379 = load i32* %kbk.i, align 4
  %idxprom589.i = sext i32 %379 to i64
  %arrayidx590.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom589.i
  %380 = load i32* %arrayidx590.i, align 4
  %inc591.i = add i32 %380, 1
  store i32 %inc591.i, i32* %arrayidx590.i, align 4
  br label %while.cond580.i

while.end592.i:                                   ; preds = %while.cond580.i
  %381 = load i32* %kmx.i, align 4
  %cmp593.i = icmp slt i32 %381, 0
  br i1 %cmp593.i, label %if.then595.i, label %if.end617.i

if.then595.i:                                     ; preds = %while.end592.i
  %382 = load i32* %firstdigit.i, align 4
  %sub596.i = sub nsw i32 10, %382
  store i32 %sub596.i, i32* %pose.i, align 4
  %383 = load i32* %pose.i, align 4
  %cmp597.i = icmp sge i32 %383, 9
  br i1 %cmp597.i, label %if.then599.i, label %if.end601.i

if.then599.i:                                     ; preds = %if.then595.i
  %384 = load i32* %pose.i, align 4
  %sub600.i = sub nsw i32 %384, 9
  store i32 %sub600.i, i32* %pose.i, align 4
  br label %if.end601.i

if.end601.i:                                      ; preds = %if.then599.i, %if.then595.i
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond602.i

for.cond602.i:                                    ; preds = %for.body605.i, %if.end601.i
  %385 = load i32* %i.i, align 4
  %386 = load i32* %pose.i, align 4
  %cmp603.i = icmp slt i32 %385, %386
  br i1 %cmp603.i, label %for.body605.i, label %for.end609.i

for.body605.i:                                    ; preds = %for.cond602.i
  %387 = load i32* %digit.i, align 4
  %mul606.i = mul i32 %387, 10
  store i32 %mul606.i, i32* %digit.i, align 4
  %388 = load i32* %i.i, align 4
  %inc608.i = add nsw i32 %388, 1
  store i32 %inc608.i, i32* %i.i, align 4
  br label %for.cond602.i

for.end609.i:                                     ; preds = %for.cond602.i
  %389 = load i32* %kbk.i, align 4
  %idxprom610.i = sext i32 %389 to i64
  %arrayidx611.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom610.i
  %390 = load i32* %arrayidx611.i, align 4
  %391 = load i32* %digit.i, align 4
  %cmp612.i = icmp eq i32 %390, %391
  br i1 %cmp612.i, label %if.then614.i, label %if.end616.i

if.then614.i:                                     ; preds = %for.end609.i
  %392 = load i32* %firstdigit.i, align 4
  %dec615.i = add nsw i32 %392, -1
  store i32 %dec615.i, i32* %firstdigit.i, align 4
  br label %if.end616.i

if.end616.i:                                      ; preds = %if.then614.i, %for.end609.i
  br label %if.end617.i

if.end617.i:                                      ; preds = %if.end616.i, %while.end592.i
  br label %if.end618.i

if.end618.i:                                      ; preds = %if.end617.i, %for.end568.i
  br label %if.end619.i

if.end619.i:                                      ; preds = %if.end618.i, %if.end558.i
  br label %if.end620.i

if.end620.i:                                      ; preds = %if.end619.i, %land.lhs.true395.i, %if.end392.i
  %arrayidx621.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 0
  %393 = load i32* %arrayidx621.i, align 4
  store i32 %393, i32* %k.i, align 4
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond622.i

for.cond622.i:                                    ; preds = %if.end629.i, %if.end620.i
  %394 = load i32* %i.i, align 4
  %cmp623.i = icmp slt i32 %394, 9
  br i1 %cmp623.i, label %for.body625.i, label %for.end633.i

for.body625.i:                                    ; preds = %for.cond622.i
  %395 = load i32* %k.i, align 4
  %396 = load i32* %digit.i, align 4
  %cmp626.i = icmp uge i32 %395, %396
  br i1 %cmp626.i, label %if.then628.i, label %if.end629.i

if.then628.i:                                     ; preds = %for.body625.i
  %397 = load i32* %i.i, align 4
  store i32 %397, i32* %pose.i, align 4
  br label %if.end629.i

if.end629.i:                                      ; preds = %if.then628.i, %for.body625.i
  %398 = load i32* %digit.i, align 4
  %mul630.i = mul i32 %398, 10
  store i32 %mul630.i, i32* %digit.i, align 4
  %399 = load i32* %i.i, align 4
  %inc632.i = add nsw i32 %399, 1
  store i32 %inc632.i, i32* %i.i, align 4
  br label %for.cond622.i

for.end633.i:                                     ; preds = %for.cond622.i
  store i32 1, i32* %m.i, align 4
  %400 = load i32* %ldw.addr.i, align 4
  %and634.i = and i32 %400, 1
  store i32 %and634.i, i32* %space.i, align 4
  %401 = load i32* %kmx.i, align 4
  %cmp635.i = icmp sge i32 %401, 0
  br i1 %cmp635.i, label %if.then637.i, label %if.else655.i

if.then637.i:                                     ; preds = %for.end633.i
  %402 = load i32* %kmx.i, align 4
  %mul638.i = mul nsw i32 %402, 9
  %403 = load i32* %pose.i, align 4
  %add639.i = add nsw i32 %mul638.i, %403
  store i32 %add639.i, i32* %iexp.i, align 4
  %404 = load i32* %iexp.i, align 4
  %405 = load i32* %w.addr.i, align 4
  %cmp640.i = icmp sge i32 %404, %405
  %conv641.i = zext i1 %cmp640.i to i32
  store i32 %conv641.i, i32* %usee.i, align 4
  %406 = load i32* %usee.i, align 4
  %tobool642.i = icmp ne i32 %406, 0
  br i1 %tobool642.i, label %if.end645.i, label %if.then643.i

if.then643.i:                                     ; preds = %if.then637.i
  %407 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %407, align 1
  %408 = load i32* %space.i, align 4
  %409 = load i8** %ffmt.addr.i, align 8
  %idx.ext.i = sext i32 %408 to i64
  %add.ptr.i = getelementptr inbounds i8* %409, i64 %idx.ext.i
  store i8* %add.ptr.i, i8** %ffmt.addr.i, align 8
  store i32 0, i32* %m.i, align 4
  br label %if.end645.i

if.end645.i:                                      ; preds = %if.then643.i, %if.then637.i
  %410 = load i32* %sgn.i, align 4
  %tobool646.i = icmp ne i32 %410, 0
  br i1 %tobool646.i, label %if.then647.i, label %if.else649.i

if.then647.i:                                     ; preds = %if.end645.i
  %411 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %411, align 1
  br label %if.end651.i

if.else649.i:                                     ; preds = %if.end645.i
  %412 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %412, align 1
  br label %if.end651.i

if.end651.i:                                      ; preds = %if.else649.i, %if.then647.i
  %413 = load i32* %space.i, align 4
  %414 = load i32* %sgn.i, align 4
  %or652.i = or i32 %413, %414
  %415 = load i8** %ffmt.addr.i, align 8
  %idx.ext653.i = sext i32 %or652.i to i64
  %add.ptr654.i = getelementptr inbounds i8* %415, i64 %idx.ext653.i
  store i8* %add.ptr654.i, i8** %ffmt.addr.i, align 8
  br label %if.end675.i

if.else655.i:                                     ; preds = %for.end633.i
  %416 = load i32* %firstfwd.i, align 4
  %mul656.i = mul nsw i32 %416, 9
  %417 = load i32* %firstdigit.i, align 4
  %add657.i = add nsw i32 %mul656.i, %417
  %sub658.i = sub nsw i32 0, %add657.i
  store i32 %sub658.i, i32* %iexp.i, align 4
  %418 = load i32* %iexp.i, align 4
  %cmp659.i = icmp slt i32 %418, -1
  %conv660.i = zext i1 %cmp659.i to i32
  store i32 %conv660.i, i32* %usee.i, align 4
  %419 = load i32* %sgn.i, align 4
  %tobool661.i = icmp ne i32 %419, 0
  br i1 %tobool661.i, label %if.then662.i, label %if.else664.i

if.then662.i:                                     ; preds = %if.else655.i
  %420 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %420, align 1
  br label %if.end666.i

if.else664.i:                                     ; preds = %if.else655.i
  %421 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %421, align 1
  br label %if.end666.i

if.end666.i:                                      ; preds = %if.else664.i, %if.then662.i
  %422 = load i32* %space.i, align 4
  %423 = load i32* %sgn.i, align 4
  %or667.i = or i32 %422, %423
  %424 = load i8** %ffmt.addr.i, align 8
  %idx.ext668.i = sext i32 %or667.i to i64
  %add.ptr669.i = getelementptr inbounds i8* %424, i64 %idx.ext668.i
  store i8* %add.ptr669.i, i8** %ffmt.addr.i, align 8
  %425 = load i32* %usee.i, align 4
  %tobool670.i = icmp ne i32 %425, 0
  br i1 %tobool670.i, label %if.end674.i, label %if.then671.i

if.then671.i:                                     ; preds = %if.end666.i
  %426 = load i8** %ffmt.addr.i, align 8
  store i8 48, i8* %426, align 1
  %427 = load i8** %ffmt.addr.i, align 8
  %arrayidx673.i = getelementptr inbounds i8* %427, i64 1
  store i8 46, i8* %arrayidx673.i, align 1
  store i32 2, i32* %m.i, align 4
  br label %if.end674.i

if.end674.i:                                      ; preds = %if.then671.i, %if.end666.i
  br label %if.end675.i

if.end675.i:                                      ; preds = %if.end674.i, %if.end651.i
  %428 = load i32* %usee.i, align 4
  %tobool676.i = icmp ne i32 %428, 0
  br i1 %tobool676.i, label %if.then677.i, label %if.end679.i

if.then677.i:                                     ; preds = %if.end675.i
  %429 = load i32* %w.addr.i, align 4
  %inc678.i = add nsw i32 %429, 1
  store i32 %inc678.i, i32* %w.addr.i, align 4
  br label %if.end679.i

if.end679.i:                                      ; preds = %if.then677.i, %if.end675.i
  store i32 0, i32* %kbk.i, align 4
  %430 = load i32* %kbk.i, align 4
  %inc680.i = add nsw i32 %430, 1
  store i32 %inc680.i, i32* %kbk.i, align 4
  %idxprom681.i = sext i32 %430 to i64
  %arrayidx682.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom681.i
  %431 = load i32* %arrayidx682.i, align 4
  store i32 %431, i32* %k.i, align 4
  %432 = load i32* %pose.i, align 4
  store i32 %432, i32* %i.i, align 4
  br label %for.cond683.i

for.cond683.i:                                    ; preds = %if.end698.i, %if.end679.i
  %433 = load i32* %i.i, align 4
  %cmp684.i = icmp sge i32 %433, 0
  br i1 %cmp684.i, label %for.body686.i, label %for.end701.i

for.body686.i:                                    ; preds = %for.cond683.i
  %434 = load i32* %k.i, align 4
  %div687.i = sdiv i32 %434, 10
  store i32 %div687.i, i32* %j.i, align 4
  %435 = load i32* %k.i, align 4
  %436 = load i32* %j.i, align 4
  %mul688.i = mul nsw i32 %436, 10
  %sub689.i = sub nsw i32 %435, %mul688.i
  store i32 %sub689.i, i32* %k.i, align 4
  %437 = load i32* %i.i, align 4
  %438 = load i32* %w.addr.i, align 4
  %cmp690.i = icmp slt i32 %437, %438
  br i1 %cmp690.i, label %if.then692.i, label %if.end698.i

if.then692.i:                                     ; preds = %for.body686.i
  %439 = load i32* %k.i, align 4
  %add693.i = add nsw i32 48, %439
  %conv694.i = trunc i32 %add693.i to i8
  %440 = load i32* %i.i, align 4
  %441 = load i32* %m.i, align 4
  %add695.i = add nsw i32 %440, %441
  %idxprom696.i = sext i32 %add695.i to i64
  %442 = load i8** %ffmt.addr.i, align 8
  %arrayidx697.i = getelementptr inbounds i8* %442, i64 %idxprom696.i
  store i8 %conv694.i, i8* %arrayidx697.i, align 1
  br label %if.end698.i

if.end698.i:                                      ; preds = %if.then692.i, %for.body686.i
  %443 = load i32* %j.i, align 4
  store i32 %443, i32* %k.i, align 4
  %444 = load i32* %i.i, align 4
  %dec700.i = add nsw i32 %444, -1
  store i32 %dec700.i, i32* %i.i, align 4
  br label %for.cond683.i

for.end701.i:                                     ; preds = %for.cond683.i
  %445 = load i32* %pose.i, align 4
  %add702.i = add nsw i32 %445, 1
  store i32 %add702.i, i32* %ii.i, align 4
  %446 = load i32* %kbk.i, align 4
  %447 = load i32* %kmx.i, align 4
  %add703.i = add nsw i32 %447, 1
  %cmp704.i = icmp eq i32 %446, %add703.i
  br i1 %cmp704.i, label %if.then706.i, label %if.end723.i

if.then706.i:                                     ; preds = %for.end701.i
  %448 = load i32* %ii.i, align 4
  %449 = load i32* %m.i, align 4
  %add707.i = add nsw i32 %448, %449
  %idxprom708.i = sext i32 %add707.i to i64
  %450 = load i8** %ffmt.addr.i, align 8
  %arrayidx709.i = getelementptr inbounds i8* %450, i64 %idxprom708.i
  store i8 46, i8* %arrayidx709.i, align 1
  %451 = load i32* %ii.i, align 4
  %452 = load i32* %w.addr.i, align 4
  %cmp710.i = icmp slt i32 %451, %452
  br i1 %cmp710.i, label %if.then712.i, label %if.end714.i

if.then712.i:                                     ; preds = %if.then706.i
  %453 = load i32* %w.addr.i, align 4
  %inc713.i = add nsw i32 %453, 1
  store i32 %inc713.i, i32* %w.addr.i, align 4
  br label %if.end714.i

if.end714.i:                                      ; preds = %if.then712.i, %if.then706.i
  %454 = load i32* %ii.i, align 4
  %455 = load i32* %w.addr.i, align 4
  %cmp715.i = icmp eq i32 %454, %455
  br i1 %cmp715.i, label %land.lhs.true717.i, label %if.end721.i

land.lhs.true717.i:                               ; preds = %if.end714.i
  %456 = load i32* %usee.i, align 4
  %tobool718.i = icmp ne i32 %456, 0
  br i1 %tobool718.i, label %if.end721.i, label %if.then719.i

if.then719.i:                                     ; preds = %land.lhs.true717.i
  %457 = load i32* %w.addr.i, align 4
  %inc720.i = add nsw i32 %457, 1
  store i32 %inc720.i, i32* %w.addr.i, align 4
  br label %if.end721.i

if.end721.i:                                      ; preds = %if.then719.i, %land.lhs.true717.i, %if.end714.i
  %458 = load i32* %ii.i, align 4
  %inc722.i = add nsw i32 %458, 1
  store i32 %inc722.i, i32* %ii.i, align 4
  br label %if.end723.i

if.end723.i:                                      ; preds = %if.end721.i, %for.end701.i
  br label %while.cond724.i

while.cond724.i:                                  ; preds = %if.end772.i, %if.end723.i
  %459 = load i32* %ii.i, align 4
  %460 = load i32* %w.addr.i, align 4
  %cmp725.i = icmp slt i32 %459, %460
  br i1 %cmp725.i, label %while.body727.i, label %while.end773.i

while.body727.i:                                  ; preds = %while.cond724.i
  %461 = load i32* %kbk.i, align 4
  %inc728.i = add nsw i32 %461, 1
  store i32 %inc728.i, i32* %kbk.i, align 4
  %idxprom729.i = sext i32 %461 to i64
  %arrayidx730.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom729.i
  %462 = load i32* %arrayidx730.i, align 4
  store i32 %462, i32* %k.i, align 4
  %463 = load i32* %ii.i, align 4
  %add731.i = add nsw i32 8, %463
  store i32 %add731.i, i32* %i.i, align 4
  br label %for.cond732.i

for.cond732.i:                                    ; preds = %if.end747.i, %while.body727.i
  %464 = load i32* %i.i, align 4
  %465 = load i32* %ii.i, align 4
  %cmp733.i = icmp sge i32 %464, %465
  br i1 %cmp733.i, label %for.body735.i, label %for.end750.i

for.body735.i:                                    ; preds = %for.cond732.i
  %466 = load i32* %k.i, align 4
  %div736.i = sdiv i32 %466, 10
  store i32 %div736.i, i32* %j.i, align 4
  %467 = load i32* %k.i, align 4
  %468 = load i32* %j.i, align 4
  %mul737.i = mul nsw i32 %468, 10
  %sub738.i = sub nsw i32 %467, %mul737.i
  store i32 %sub738.i, i32* %k.i, align 4
  %469 = load i32* %i.i, align 4
  %470 = load i32* %w.addr.i, align 4
  %cmp739.i = icmp slt i32 %469, %470
  br i1 %cmp739.i, label %if.then741.i, label %if.end747.i

if.then741.i:                                     ; preds = %for.body735.i
  %471 = load i32* %k.i, align 4
  %add742.i = add nsw i32 48, %471
  %conv743.i = trunc i32 %add742.i to i8
  %472 = load i32* %i.i, align 4
  %473 = load i32* %m.i, align 4
  %add744.i = add nsw i32 %472, %473
  %idxprom745.i = sext i32 %add744.i to i64
  %474 = load i8** %ffmt.addr.i, align 8
  %arrayidx746.i = getelementptr inbounds i8* %474, i64 %idxprom745.i
  store i8 %conv743.i, i8* %arrayidx746.i, align 1
  br label %if.end747.i

if.end747.i:                                      ; preds = %if.then741.i, %for.body735.i
  %475 = load i32* %j.i, align 4
  store i32 %475, i32* %k.i, align 4
  %476 = load i32* %i.i, align 4
  %dec749.i = add nsw i32 %476, -1
  store i32 %dec749.i, i32* %i.i, align 4
  br label %for.cond732.i

for.end750.i:                                     ; preds = %for.cond732.i
  %477 = load i32* %ii.i, align 4
  %add751.i = add nsw i32 %477, 9
  store i32 %add751.i, i32* %ii.i, align 4
  %478 = load i32* %kbk.i, align 4
  %479 = load i32* %kmx.i, align 4
  %add752.i = add nsw i32 %479, 1
  %cmp753.i = icmp eq i32 %478, %add752.i
  br i1 %cmp753.i, label %if.then755.i, label %if.end772.i

if.then755.i:                                     ; preds = %for.end750.i
  %480 = load i32* %ii.i, align 4
  %481 = load i32* %m.i, align 4
  %add756.i = add nsw i32 %480, %481
  %idxprom757.i = sext i32 %add756.i to i64
  %482 = load i8** %ffmt.addr.i, align 8
  %arrayidx758.i = getelementptr inbounds i8* %482, i64 %idxprom757.i
  store i8 46, i8* %arrayidx758.i, align 1
  %483 = load i32* %ii.i, align 4
  %484 = load i32* %w.addr.i, align 4
  %cmp759.i = icmp slt i32 %483, %484
  br i1 %cmp759.i, label %if.then761.i, label %if.end763.i

if.then761.i:                                     ; preds = %if.then755.i
  %485 = load i32* %w.addr.i, align 4
  %inc762.i = add nsw i32 %485, 1
  store i32 %inc762.i, i32* %w.addr.i, align 4
  br label %if.end763.i

if.end763.i:                                      ; preds = %if.then761.i, %if.then755.i
  %486 = load i32* %ii.i, align 4
  %487 = load i32* %w.addr.i, align 4
  %cmp764.i = icmp eq i32 %486, %487
  br i1 %cmp764.i, label %land.lhs.true766.i, label %if.end770.i

land.lhs.true766.i:                               ; preds = %if.end763.i
  %488 = load i32* %usee.i, align 4
  %tobool767.i = icmp ne i32 %488, 0
  br i1 %tobool767.i, label %if.end770.i, label %if.then768.i

if.then768.i:                                     ; preds = %land.lhs.true766.i
  %489 = load i32* %w.addr.i, align 4
  %inc769.i = add nsw i32 %489, 1
  store i32 %inc769.i, i32* %w.addr.i, align 4
  br label %if.end770.i

if.end770.i:                                      ; preds = %if.then768.i, %land.lhs.true766.i, %if.end763.i
  %490 = load i32* %ii.i, align 4
  %inc771.i = add nsw i32 %490, 1
  store i32 %inc771.i, i32* %ii.i, align 4
  br label %if.end772.i

if.end772.i:                                      ; preds = %if.end770.i, %for.end750.i
  br label %while.cond724.i

while.end773.i:                                   ; preds = %while.cond724.i
  %491 = load i32* %usee.i, align 4
  %tobool774.i = icmp ne i32 %491, 0
  br i1 %tobool774.i, label %if.then775.i, label %if.else836.i

if.then775.i:                                     ; preds = %while.end773.i
  %492 = load i8** %ffmt.addr.i, align 8
  %arrayidx776.i = getelementptr inbounds i8* %492, i64 1
  %493 = load i8* %arrayidx776.i, align 1
  %494 = load i8** %ffmt.addr.i, align 8
  store i8 %493, i8* %494, align 1
  %495 = load i8** %ffmt.addr.i, align 8
  %arrayidx778.i = getelementptr inbounds i8* %495, i64 1
  store i8 46, i8* %arrayidx778.i, align 1
  %496 = load i32* %w.addr.i, align 4
  %add779.i = add nsw i32 %496, 1
  %idxprom780.i = sext i32 %add779.i to i64
  %497 = load i8** %ffmt.addr.i, align 8
  %arrayidx781.i = getelementptr inbounds i8* %497, i64 %idxprom780.i
  store i8 69, i8* %arrayidx781.i, align 1
  %498 = load i32* %iexp.i, align 4
  %cmp782.i = icmp sge i32 %498, 0
  br i1 %cmp782.i, label %if.then784.i, label %if.else788.i

if.then784.i:                                     ; preds = %if.then775.i
  %499 = load i32* %w.addr.i, align 4
  %add785.i = add nsw i32 %499, 2
  %idxprom786.i = sext i32 %add785.i to i64
  %500 = load i8** %ffmt.addr.i, align 8
  %arrayidx787.i = getelementptr inbounds i8* %500, i64 %idxprom786.i
  store i8 43, i8* %arrayidx787.i, align 1
  br label %if.end793.i

if.else788.i:                                     ; preds = %if.then775.i
  %501 = load i32* %w.addr.i, align 4
  %add789.i = add nsw i32 %501, 2
  %idxprom790.i = sext i32 %add789.i to i64
  %502 = load i8** %ffmt.addr.i, align 8
  %arrayidx791.i = getelementptr inbounds i8* %502, i64 %idxprom790.i
  store i8 45, i8* %arrayidx791.i, align 1
  %503 = load i32* %iexp.i, align 4
  %sub792.i = sub nsw i32 0, %503
  store i32 %sub792.i, i32* %iexp.i, align 4
  br label %if.end793.i

if.end793.i:                                      ; preds = %if.else788.i, %if.then784.i
  %504 = load i32* %ldw.addr.i, align 4
  %and794.i = and i32 %504, 2
  %tobool795.i = icmp ne i32 %and794.i, 0
  br i1 %tobool795.i, label %if.then796.i, label %if.else800.i

if.then796.i:                                     ; preds = %if.end793.i
  %505 = load i32* %w.addr.i, align 4
  %add797.i = add nsw i32 %505, 5
  %idxprom798.i = sext i32 %add797.i to i64
  %506 = load i8** %ffmt.addr.i, align 8
  %arrayidx799.i = getelementptr inbounds i8* %506, i64 %idxprom798.i
  store i8 0, i8* %arrayidx799.i, align 1
  %507 = load i32* %iexp.i, align 4
  store i32 %507, i32* %j.i, align 4
  br label %if.end812.i

if.else800.i:                                     ; preds = %if.end793.i
  %508 = load i32* %iexp.i, align 4
  store i32 %508, i32* %k.i, align 4
  %509 = load i32* %w.addr.i, align 4
  %add801.i = add nsw i32 %509, 6
  %idxprom802.i = sext i32 %add801.i to i64
  %510 = load i8** %ffmt.addr.i, align 8
  %arrayidx803.i = getelementptr inbounds i8* %510, i64 %idxprom802.i
  store i8 0, i8* %arrayidx803.i, align 1
  %511 = load i32* %k.i, align 4
  %div804.i = sdiv i32 %511, 10
  store i32 %div804.i, i32* %j.i, align 4
  %512 = load i32* %k.i, align 4
  %513 = load i32* %j.i, align 4
  %mul805.i = mul nsw i32 %513, 10
  %sub806.i = sub nsw i32 %512, %mul805.i
  store i32 %sub806.i, i32* %k.i, align 4
  %514 = load i32* %k.i, align 4
  %add807.i = add nsw i32 48, %514
  %conv808.i = trunc i32 %add807.i to i8
  %515 = load i32* %w.addr.i, align 4
  %add809.i = add nsw i32 %515, 5
  %idxprom810.i = sext i32 %add809.i to i64
  %516 = load i8** %ffmt.addr.i, align 8
  %arrayidx811.i = getelementptr inbounds i8* %516, i64 %idxprom810.i
  store i8 %conv808.i, i8* %arrayidx811.i, align 1
  br label %if.end812.i

if.end812.i:                                      ; preds = %if.else800.i, %if.then796.i
  %517 = load i32* %j.i, align 4
  %div813.i = sdiv i32 %517, 10
  store i32 %div813.i, i32* %k.i, align 4
  %518 = load i32* %j.i, align 4
  %519 = load i32* %k.i, align 4
  %mul814.i = mul nsw i32 %519, 10
  %sub815.i = sub nsw i32 %518, %mul814.i
  store i32 %sub815.i, i32* %j.i, align 4
  %520 = load i32* %j.i, align 4
  %add816.i = add nsw i32 48, %520
  %conv817.i = trunc i32 %add816.i to i8
  %521 = load i32* %w.addr.i, align 4
  %add818.i = add nsw i32 %521, 4
  %idxprom819.i = sext i32 %add818.i to i64
  %522 = load i8** %ffmt.addr.i, align 8
  %arrayidx820.i = getelementptr inbounds i8* %522, i64 %idxprom819.i
  store i8 %conv817.i, i8* %arrayidx820.i, align 1
  %523 = load i32* %k.i, align 4
  %div821.i = sdiv i32 %523, 10
  store i32 %div821.i, i32* %j.i, align 4
  %524 = load i32* %k.i, align 4
  %525 = load i32* %j.i, align 4
  %mul822.i = mul nsw i32 %525, 10
  %sub823.i = sub nsw i32 %524, %mul822.i
  store i32 %sub823.i, i32* %k.i, align 4
  %526 = load i32* %k.i, align 4
  %add824.i = add nsw i32 48, %526
  %conv825.i = trunc i32 %add824.i to i8
  %527 = load i32* %w.addr.i, align 4
  %add826.i = add nsw i32 %527, 3
  %idxprom827.i = sext i32 %add826.i to i64
  %528 = load i8** %ffmt.addr.i, align 8
  %arrayidx828.i = getelementptr inbounds i8* %528, i64 %idxprom827.i
  store i8 %conv825.i, i8* %arrayidx828.i, align 1
  %529 = load i32* %w.addr.i, align 4
  %add829.i = add nsw i32 %529, 6
  %530 = load i32* %space.i, align 4
  %531 = load i32* %sgn.i, align 4
  %or830.i = or i32 %530, %531
  %add831.i = add nsw i32 %add829.i, %or830.i
  %532 = load i32* %ldw.addr.i, align 4
  %and832.i = and i32 %532, 2
  %cmp833.i = icmp eq i32 %and832.i, 2
  %conv834.i = zext i1 %cmp833.i to i32
  %sub835.i = sub nsw i32 %add831.i, %conv834.i
  store i32 %sub835.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else836.i:                                     ; preds = %while.end773.i
  %533 = load i32* %iexp.i, align 4
  %cmp837.i = icmp slt i32 %533, 0
  br i1 %cmp837.i, label %if.then839.i, label %if.else846.i

if.then839.i:                                     ; preds = %if.else836.i
  %534 = load i32* %w.addr.i, align 4
  %add840.i = add nsw i32 %534, 2
  %idxprom841.i = sext i32 %add840.i to i64
  %535 = load i8** %ffmt.addr.i, align 8
  %arrayidx842.i = getelementptr inbounds i8* %535, i64 %idxprom841.i
  store i8 0, i8* %arrayidx842.i, align 1
  %536 = load i32* %w.addr.i, align 4
  %add843.i = add nsw i32 %536, 2
  %537 = load i32* %space.i, align 4
  %538 = load i32* %sgn.i, align 4
  %or844.i = or i32 %537, %538
  %add845.i = add nsw i32 %add843.i, %or844.i
  store i32 %add845.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else846.i:                                     ; preds = %if.else836.i
  %539 = load i32* %w.addr.i, align 4
  %idxprom847.i = sext i32 %539 to i64
  %540 = load i8** %ffmt.addr.i, align 8
  %arrayidx848.i = getelementptr inbounds i8* %540, i64 %idxprom847.i
  store i8 0, i8* %arrayidx848.i, align 1
  %541 = load i32* %w.addr.i, align 4
  %542 = load i32* %space.i, align 4
  %543 = load i32* %sgn.i, align 4
  %or849.i = or i32 %542, %543
  %add850.i = add nsw i32 %541, %or849.i
  %544 = load i32* %space.i, align 4
  %add851.i = add nsw i32 %add850.i, %544
  store i32 %add851.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

__pgf90io_sc_fp_ldw.exit:                         ; preds = %if.else846.i, %if.then839.i, %if.end812.i, %for.end79.i, %if.end47.i
  %545 = load i32* %retval.i
  store i32 %545, i32* %len, align 4
  %546 = load i32* %len, align 4
  %547 = load i32* %j, align 4
  %add25 = add nsw i32 %547, %546
  store i32 %add25, i32* %j, align 4
  %548 = load i32* %j, align 4
  %inc26 = add nsw i32 %548, 1
  store i32 %inc26, i32* %j, align 4
  %idxprom27 = sext i32 %548 to i64
  %549 = load i8** %p.addr, align 8
  %arrayidx28 = getelementptr inbounds i8* %549, i64 %idxprom27
  store i8 44, i8* %arrayidx28, align 1
  %550 = load double* %i.addr, align 8
  %551 = load i8** %p.addr, align 8
  %552 = load i32* %j, align 4
  %idx.ext29 = sext i32 %552 to i64
  %add.ptr30 = getelementptr inbounds i8* %551, i64 %idx.ext29
  store double %550, double* %x.addr.i42, align 8
  store i8* %add.ptr30, i8** %ffmt.addr.i43, align 8
  store i32 16, i32* %w.addr.i44, align 4
  store i32 0, i32* %d.addr.i45, align 4
  store i32 4, i32* %ldw.addr.i46, align 4
  store i32 0, i32* %i.i55, align 4
  br label %for.cond.i91

for.cond.i91:                                     ; preds = %for.body.i94, %__pgf90io_sc_fp_ldw.exit
  %553 = load i32* %i.i55, align 4
  %cmp.i90 = icmp slt i32 %553, 104
  br i1 %cmp.i90, label %for.body.i94, label %for.end.i107

for.body.i94:                                     ; preds = %for.cond.i91
  %554 = load i32* %i.i55, align 4
  %idxprom.i92 = sext i32 %554 to i64
  %arrayidx.i93 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom.i92
  store i32 0, i32* %arrayidx.i93, align 4
  %555 = load i32* %i.i55, align 4
  %inc.i95 = add nsw i32 %555, 1
  store i32 %inc.i95, i32* %i.i55, align 4
  br label %for.cond.i91

for.end.i107:                                     ; preds = %for.cond.i91
  %arrayidx1.i96 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 70
  store i32* %arrayidx1.i96, i32** %iexta.i53, align 8
  %arrayidx2.i97 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 35
  store i32* %arrayidx2.i97, i32** %iextc.i54, align 8
  %556 = bitcast double* %x.addr.i42 to i64*
  %557 = load i64* %556, align 8
  store i64 %557, i64* %lb0.i72, align 8
  %558 = load i64* %lb0.i72, align 8
  %and.i98 = and i64 %558, 9218868437227405312
  %shr.i99 = lshr i64 %and.i98, 52
  %sub.i100 = sub i64 %shr.i99, 1023
  %conv.i101 = trunc i64 %sub.i100 to i32
  store i32 %conv.i101, i32* %iexp.i47, align 4
  %559 = load i64* %lb0.i72, align 8
  %and3.i102 = and i64 %559, -9223372036854775808
  %shr4.i103 = lshr i64 %and3.i102, 63
  %conv5.i104 = trunc i64 %shr4.i103 to i32
  store i32 %conv5.i104, i32* %sgn.i70, align 4
  %560 = load i64* %lb0.i72, align 8
  %and6.i105 = and i64 %560, 4503599627370495
  store i64 %and6.i105, i64* %lb1.i73, align 8
  %561 = load i32* %iexp.i47, align 4
  %cmp7.i106 = icmp eq i32 %561, 1024
  br i1 %cmp7.i106, label %if.then.i110, label %if.end52.i156

if.then.i110:                                     ; preds = %for.end.i107
  %562 = load i32* %ldw.addr.i46, align 4
  %and9.i108 = and i32 %562, 4
  %tobool.i109 = icmp ne i32 %and9.i108, 0
  br i1 %tobool.i109, label %if.then10.i112, label %if.end.i113

if.then10.i112:                                   ; preds = %if.then.i110
  %563 = load i32* %w.addr.i44, align 4
  %inc11.i111 = add nsw i32 %563, 1
  store i32 %inc11.i111, i32* %w.addr.i44, align 4
  br label %if.end.i113

if.end.i113:                                      ; preds = %if.then10.i112, %if.then.i110
  store i32 0, i32* %i.i55, align 4
  br label %for.cond12.i116

for.cond12.i116:                                  ; preds = %for.body15.i119, %if.end.i113
  %564 = load i32* %i.i55, align 4
  %565 = load i32* %w.addr.i44, align 4
  %add.i114 = add nsw i32 %565, 4
  %cmp13.i115 = icmp slt i32 %564, %add.i114
  br i1 %cmp13.i115, label %for.body15.i119, label %for.end20.i122

for.body15.i119:                                  ; preds = %for.cond12.i116
  %566 = load i32* %i.i55, align 4
  %idxprom16.i117 = sext i32 %566 to i64
  %567 = load i8** %ffmt.addr.i43, align 8
  %arrayidx17.i118 = getelementptr inbounds i8* %567, i64 %idxprom16.i117
  store i8 32, i8* %arrayidx17.i118, align 1
  %568 = load i32* %i.i55, align 4
  %inc19.i120 = add nsw i32 %568, 1
  store i32 %inc19.i120, i32* %i.i55, align 4
  br label %for.cond12.i116

for.end20.i122:                                   ; preds = %for.cond12.i116
  %569 = load i64* %lb1.i73, align 8
  %tobool21.i121 = icmp ne i64 %569, 0
  br i1 %tobool21.i121, label %if.then22.i132, label %if.else.i134

if.then22.i132:                                   ; preds = %for.end20.i122
  %570 = load i32* %w.addr.i44, align 4
  %add23.i123 = add nsw i32 %570, 4
  %idxprom24.i124 = sext i32 %add23.i123 to i64
  %571 = load i8** %ffmt.addr.i43, align 8
  %arrayidx25.i125 = getelementptr inbounds i8* %571, i64 %idxprom24.i124
  store i8 78, i8* %arrayidx25.i125, align 1
  %572 = load i32* %w.addr.i44, align 4
  %add26.i126 = add nsw i32 %572, 5
  %idxprom27.i127 = sext i32 %add26.i126 to i64
  %573 = load i8** %ffmt.addr.i43, align 8
  %arrayidx28.i128 = getelementptr inbounds i8* %573, i64 %idxprom27.i127
  store i8 97, i8* %arrayidx28.i128, align 1
  %574 = load i32* %w.addr.i44, align 4
  %add29.i129 = add nsw i32 %574, 6
  %idxprom30.i130 = sext i32 %add29.i129 to i64
  %575 = load i8** %ffmt.addr.i43, align 8
  %arrayidx31.i131 = getelementptr inbounds i8* %575, i64 %idxprom30.i130
  store i8 78, i8* %arrayidx31.i131, align 1
  br label %if.end47.i153

if.else.i134:                                     ; preds = %for.end20.i122
  %576 = load i32* %sgn.i70, align 4
  %tobool32.i133 = icmp ne i32 %576, 0
  br i1 %tobool32.i133, label %if.then33.i138, label %if.end37.i148

if.then33.i138:                                   ; preds = %if.else.i134
  %577 = load i32* %w.addr.i44, align 4
  %add34.i135 = add nsw i32 %577, 3
  %idxprom35.i136 = sext i32 %add34.i135 to i64
  %578 = load i8** %ffmt.addr.i43, align 8
  %arrayidx36.i137 = getelementptr inbounds i8* %578, i64 %idxprom35.i136
  store i8 45, i8* %arrayidx36.i137, align 1
  br label %if.end37.i148

if.end37.i148:                                    ; preds = %if.then33.i138, %if.else.i134
  %579 = load i32* %w.addr.i44, align 4
  %add38.i139 = add nsw i32 %579, 4
  %idxprom39.i140 = sext i32 %add38.i139 to i64
  %580 = load i8** %ffmt.addr.i43, align 8
  %arrayidx40.i141 = getelementptr inbounds i8* %580, i64 %idxprom39.i140
  store i8 73, i8* %arrayidx40.i141, align 1
  %581 = load i32* %w.addr.i44, align 4
  %add41.i142 = add nsw i32 %581, 5
  %idxprom42.i143 = sext i32 %add41.i142 to i64
  %582 = load i8** %ffmt.addr.i43, align 8
  %arrayidx43.i144 = getelementptr inbounds i8* %582, i64 %idxprom42.i143
  store i8 110, i8* %arrayidx43.i144, align 1
  %583 = load i32* %w.addr.i44, align 4
  %add44.i145 = add nsw i32 %583, 6
  %idxprom45.i146 = sext i32 %add44.i145 to i64
  %584 = load i8** %ffmt.addr.i43, align 8
  %arrayidx46.i147 = getelementptr inbounds i8* %584, i64 %idxprom45.i146
  store i8 102, i8* %arrayidx46.i147, align 1
  br label %if.end47.i153

if.end47.i153:                                    ; preds = %if.end37.i148, %if.then22.i132
  %585 = load i32* %w.addr.i44, align 4
  %add48.i149 = add nsw i32 %585, 7
  %idxprom49.i150 = sext i32 %add48.i149 to i64
  %586 = load i8** %ffmt.addr.i43, align 8
  %arrayidx50.i151 = getelementptr inbounds i8* %586, i64 %idxprom49.i150
  store i8 0, i8* %arrayidx50.i151, align 1
  %587 = load i32* %w.addr.i44, align 4
  %add51.i152 = add nsw i32 %587, 7
  store i32 %add51.i152, i32* %retval.i41
  br label %__pgf90io_sc_fp_ldw.exit883

if.end52.i156:                                    ; preds = %for.end.i107
  %588 = load i32* %iexp.i47, align 4
  %add53.i154 = add nsw i32 %588, 1023
  %tobool54.i155 = icmp ne i32 %add53.i154, 0
  br i1 %tobool54.i155, label %if.then55.i158, label %if.else56.i160

if.then55.i158:                                   ; preds = %if.end52.i156
  %589 = load i64* %lb1.i73, align 8
  %or.i157 = or i64 %589, 4503599627370496
  store i64 %or.i157, i64* %lb1.i73, align 8
  br label %if.end85.i185

if.else56.i160:                                   ; preds = %if.end52.i156
  %590 = load i64* %lb1.i73, align 8
  %tobool57.i159 = icmp ne i64 %590, 0
  br i1 %tobool57.i159, label %if.then58.i162, label %if.else60.i164

if.then58.i162:                                   ; preds = %if.else56.i160
  %591 = load i32* %iexp.i47, align 4
  %inc59.i161 = add nsw i32 %591, 1
  store i32 %inc59.i161, i32* %iexp.i47, align 4
  br label %if.end85.i185

if.else60.i164:                                   ; preds = %if.else56.i160
  %592 = load i8** %ffmt.addr.i43, align 8
  store i8 32, i8* %592, align 1
  %593 = load i32* %sgn.i70, align 4
  %tobool62.i163 = icmp ne i32 %593, 0
  br i1 %tobool62.i163, label %if.then63.i166, label %if.else65.i168

if.then63.i166:                                   ; preds = %if.else60.i164
  %594 = load i8** %ffmt.addr.i43, align 8
  %arrayidx64.i165 = getelementptr inbounds i8* %594, i64 1
  store i8 45, i8* %arrayidx64.i165, align 1
  br label %if.end67.i171

if.else65.i168:                                   ; preds = %if.else60.i164
  %595 = load i8** %ffmt.addr.i43, align 8
  %arrayidx66.i167 = getelementptr inbounds i8* %595, i64 1
  store i8 32, i8* %arrayidx66.i167, align 1
  br label %if.end67.i171

if.end67.i171:                                    ; preds = %if.else65.i168, %if.then63.i166
  %596 = load i8** %ffmt.addr.i43, align 8
  %arrayidx68.i169 = getelementptr inbounds i8* %596, i64 2
  store i8 48, i8* %arrayidx68.i169, align 1
  %597 = load i8** %ffmt.addr.i43, align 8
  %arrayidx69.i170 = getelementptr inbounds i8* %597, i64 3
  store i8 46, i8* %arrayidx69.i170, align 1
  store i32 4, i32* %i.i55, align 4
  br label %for.cond70.i174

for.cond70.i174:                                  ; preds = %for.body74.i177, %if.end67.i171
  %598 = load i32* %i.i55, align 4
  %599 = load i32* %w.addr.i44, align 4
  %add71.i172 = add nsw i32 %599, 3
  %cmp72.i173 = icmp slt i32 %598, %add71.i172
  br i1 %cmp72.i173, label %for.body74.i177, label %for.end79.i183

for.body74.i177:                                  ; preds = %for.cond70.i174
  %600 = load i32* %i.i55, align 4
  %idxprom75.i175 = sext i32 %600 to i64
  %601 = load i8** %ffmt.addr.i43, align 8
  %arrayidx76.i176 = getelementptr inbounds i8* %601, i64 %idxprom75.i175
  store i8 48, i8* %arrayidx76.i176, align 1
  %602 = load i32* %i.i55, align 4
  %inc78.i178 = add nsw i32 %602, 1
  store i32 %inc78.i178, i32* %i.i55, align 4
  br label %for.cond70.i174

for.end79.i183:                                   ; preds = %for.cond70.i174
  %603 = load i32* %w.addr.i44, align 4
  %add80.i179 = add nsw i32 %603, 3
  %idxprom81.i180 = sext i32 %add80.i179 to i64
  %604 = load i8** %ffmt.addr.i43, align 8
  %arrayidx82.i181 = getelementptr inbounds i8* %604, i64 %idxprom81.i180
  store i8 0, i8* %arrayidx82.i181, align 1
  %605 = load i32* %w.addr.i44, align 4
  %add83.i182 = add nsw i32 %605, 3
  store i32 %add83.i182, i32* %retval.i41
  br label %__pgf90io_sc_fp_ldw.exit883

if.end85.i185:                                    ; preds = %if.then58.i162, %if.then55.i158
  %606 = load i32* %iexp.i47, align 4
  %cmp86.i184 = icmp sge i32 %606, 0
  br i1 %cmp86.i184, label %if.then88.i189, label %if.else90.i196

if.then88.i189:                                   ; preds = %if.end85.i185
  %607 = load i32* %iexp.i47, align 4
  %div.i186 = sdiv i32 %607, 32
  store i32 %div.i186, i32* %iwd0.i48, align 4
  %608 = load i32* %iexp.i47, align 4
  %609 = load i32* %iwd0.i48, align 4
  %mul.i187 = mul nsw i32 %609, 32
  %sub89.i188 = sub nsw i32 %608, %mul.i187
  store i32 %sub89.i188, i32* %ibt0.i74, align 4
  br label %if.end97.i198

if.else90.i196:                                   ; preds = %if.end85.i185
  %610 = load i32* %iexp.i47, align 4
  %add91.i190 = add nsw i32 %610, 1
  %div92.i191 = sdiv i32 %add91.i190, 32
  store i32 %div92.i191, i32* %iwd0.i48, align 4
  %611 = load i32* %iexp.i47, align 4
  %add93.i192 = add nsw i32 %611, 32
  %612 = load i32* %iwd0.i48, align 4
  %mul94.i193 = mul nsw i32 %612, 32
  %sub95.i194 = sub nsw i32 %add93.i192, %mul94.i193
  store i32 %sub95.i194, i32* %ibt0.i74, align 4
  %613 = load i32* %iwd0.i48, align 4
  %add96.i195 = add nsw i32 %613, 33
  store i32 %add96.i195, i32* %iwd0.i48, align 4
  br label %if.end97.i198

if.end97.i198:                                    ; preds = %if.else90.i196, %if.then88.i189
  %614 = load i32* %iwd0.i48, align 4
  %tobool98.i197 = icmp ne i32 %614, 0
  br i1 %tobool98.i197, label %cond.true.i200, label %cond.false.i201

cond.true.i200:                                   ; preds = %if.end97.i198
  %615 = load i32* %iwd0.i48, align 4
  %sub99.i199 = sub nsw i32 %615, 1
  br label %cond.end.i204

cond.false.i201:                                  ; preds = %if.end97.i198
  br label %cond.end.i204

cond.end.i204:                                    ; preds = %cond.false.i201, %cond.true.i200
  %cond.i202 = phi i32 [ %sub99.i199, %cond.true.i200 ], [ 33, %cond.false.i201 ]
  store i32 %cond.i202, i32* %iwdm1.i49, align 4
  %616 = load i32* %iwdm1.i49, align 4
  %tobool100.i203 = icmp ne i32 %616, 0
  br i1 %tobool100.i203, label %cond.true101.i206, label %cond.false103.i207

cond.true101.i206:                                ; preds = %cond.end.i204
  %617 = load i32* %iwdm1.i49, align 4
  %sub102.i205 = sub nsw i32 %617, 1
  br label %cond.end104.i210

cond.false103.i207:                               ; preds = %cond.end.i204
  br label %cond.end104.i210

cond.end104.i210:                                 ; preds = %cond.false103.i207, %cond.true101.i206
  %cond105.i208 = phi i32 [ %sub102.i205, %cond.true101.i206 ], [ 33, %cond.false103.i207 ]
  store i32 %cond105.i208, i32* %iwdm2.i50, align 4
  %618 = load i32* %ibt0.i74, align 4
  %cmp106.i209 = icmp ult i32 %618, 20
  br i1 %cmp106.i209, label %if.then108.i231, label %if.else127.i245

if.then108.i231:                                  ; preds = %cond.end104.i210
  %619 = load i64* %lb1.i73, align 8
  %620 = load i32* %ibt0.i74, align 4
  %sub109.i211 = sub i32 52, %620
  %sh_prom.i212 = zext i32 %sub109.i211 to i64
  %shr110.i213 = lshr i64 %619, %sh_prom.i212
  %conv111.i214 = trunc i64 %shr110.i213 to i32
  %621 = load i32* %iwd0.i48, align 4
  %idxprom112.i215 = sext i32 %621 to i64
  %622 = load i32** %iexta.i53, align 8
  %arrayidx113.i216 = getelementptr inbounds i32* %622, i64 %idxprom112.i215
  store i32 %conv111.i214, i32* %arrayidx113.i216, align 4
  %623 = load i64* %lb1.i73, align 8
  %624 = load i32* %ibt0.i74, align 4
  %sub114.i217 = sub i32 20, %624
  %sh_prom115.i218 = zext i32 %sub114.i217 to i64
  %shr116.i219 = lshr i64 %623, %sh_prom115.i218
  %and117.i220 = and i64 %shr116.i219, 4294967295
  %conv118.i221 = trunc i64 %and117.i220 to i32
  %625 = load i32* %iwdm1.i49, align 4
  %idxprom119.i222 = sext i32 %625 to i64
  %626 = load i32** %iexta.i53, align 8
  %arrayidx120.i223 = getelementptr inbounds i32* %626, i64 %idxprom119.i222
  store i32 %conv118.i221, i32* %arrayidx120.i223, align 4
  %627 = load i64* %lb1.i73, align 8
  %628 = load i32* %ibt0.i74, align 4
  %add121.i224 = add i32 %628, 12
  %sh_prom122.i225 = zext i32 %add121.i224 to i64
  %shl.i226 = shl i64 %627, %sh_prom122.i225
  %and123.i227 = and i64 %shl.i226, 4294967295
  %conv124.i228 = trunc i64 %and123.i227 to i32
  %629 = load i32* %iwdm2.i50, align 4
  %idxprom125.i229 = sext i32 %629 to i64
  %630 = load i32** %iexta.i53, align 8
  %arrayidx126.i230 = getelementptr inbounds i32* %630, i64 %idxprom125.i229
  store i32 %conv124.i228, i32* %arrayidx126.i230, align 4
  br label %if.end141.i247

if.else127.i245:                                  ; preds = %cond.end104.i210
  %631 = load i64* %lb1.i73, align 8
  %632 = load i32* %ibt0.i74, align 4
  %sub128.i232 = sub i32 52, %632
  %sh_prom129.i233 = zext i32 %sub128.i232 to i64
  %shr130.i234 = lshr i64 %631, %sh_prom129.i233
  %conv131.i235 = trunc i64 %shr130.i234 to i32
  %633 = load i32* %iwd0.i48, align 4
  %idxprom132.i236 = sext i32 %633 to i64
  %634 = load i32** %iexta.i53, align 8
  %arrayidx133.i237 = getelementptr inbounds i32* %634, i64 %idxprom132.i236
  store i32 %conv131.i235, i32* %arrayidx133.i237, align 4
  %635 = load i64* %lb1.i73, align 8
  %636 = load i32* %ibt0.i74, align 4
  %sub134.i238 = sub i32 %636, 20
  %sh_prom135.i239 = zext i32 %sub134.i238 to i64
  %shl136.i240 = shl i64 %635, %sh_prom135.i239
  %and137.i241 = and i64 %shl136.i240, 4294967295
  %conv138.i242 = trunc i64 %and137.i241 to i32
  %637 = load i32* %iwdm1.i49, align 4
  %idxprom139.i243 = sext i32 %637 to i64
  %638 = load i32** %iexta.i53, align 8
  %arrayidx140.i244 = getelementptr inbounds i32* %638, i64 %idxprom139.i243
  store i32 %conv138.i242, i32* %arrayidx140.i244, align 4
  br label %if.end141.i247

if.end141.i247:                                   ; preds = %if.else127.i245, %if.then108.i231
  %639 = load i32** %iextc.i54, align 8
  store i32 1, i32* %639, align 4
  store i32 1, i32* %kmx.i58, align 4
  %640 = load i32* %iexp.i47, align 4
  %cmp143.i246 = icmp sge i32 %640, 0
  br i1 %cmp143.i246, label %if.then145.i248, label %if.end228.i325

if.then145.i248:                                  ; preds = %if.end141.i247
  store i32 0, i32* %i.i55, align 4
  br label %for.cond146.i250

for.cond146.i250:                                 ; preds = %for.end224.i318, %if.then145.i248
  %641 = load i32* %i.i55, align 4
  %642 = load i32* %iwd0.i48, align 4
  %cmp147.i249 = icmp sle i32 %641, %642
  br i1 %cmp147.i249, label %for.body149.i251, label %for.end227.i320

for.body149.i251:                                 ; preds = %for.cond146.i250
  store i32 0, i32* %j.i56, align 4
  br label %for.cond150.i253

for.cond150.i253:                                 ; preds = %for.end217.i316, %for.body149.i251
  %643 = load i32* %j.i56, align 4
  %cmp151.i252 = icmp slt i32 %643, 32
  br i1 %cmp151.i252, label %for.body153.i259, label %for.end224.i318

for.body153.i259:                                 ; preds = %for.cond150.i253
  %644 = load i32* %i.i55, align 4
  %idxprom154.i254 = sext i32 %644 to i64
  %645 = load i32** %iexta.i53, align 8
  %arrayidx155.i255 = getelementptr inbounds i32* %645, i64 %idxprom154.i254
  %646 = load i32* %arrayidx155.i255, align 4
  %647 = load i32* %j.i56, align 4
  %shl156.i256 = shl i32 1, %647
  %and157.i257 = and i32 %646, %shl156.i256
  %tobool158.i258 = icmp ne i32 %and157.i257, 0
  br i1 %tobool158.i258, label %if.then159.i260, label %if.end190.i288

if.then159.i260:                                  ; preds = %for.body153.i259
  store i32 0, i32* %icarr.i51, align 4
  store i32 0, i32* %k.i57, align 4
  br label %for.cond160.i262

for.cond160.i262:                                 ; preds = %if.end183.i282, %if.then159.i260
  %648 = load i32* %k.i57, align 4
  %649 = load i32* %kmx.i58, align 4
  %cmp161.i261 = icmp slt i32 %648, %649
  br i1 %cmp161.i261, label %for.body163.i274, label %for.end186.i287

for.body163.i274:                                 ; preds = %for.cond160.i262
  %650 = load i32* %k.i57, align 4
  %idxprom164.i263 = sext i32 %650 to i64
  %arrayidx165.i264 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom164.i263
  %651 = load i32* %arrayidx165.i264, align 4
  %652 = load i32* %k.i57, align 4
  %idxprom166.i265 = sext i32 %652 to i64
  %653 = load i32** %iextc.i54, align 8
  %arrayidx167.i266 = getelementptr inbounds i32* %653, i64 %idxprom166.i265
  %654 = load i32* %arrayidx167.i266, align 4
  %add168.i267 = add i32 %651, %654
  %655 = load i32* %icarr.i51, align 4
  %add169.i268 = add i32 %add168.i267, %655
  %656 = load i32* %k.i57, align 4
  %idxprom170.i269 = sext i32 %656 to i64
  %arrayidx171.i270 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom170.i269
  store i32 %add169.i268, i32* %arrayidx171.i270, align 4
  %657 = load i32* %k.i57, align 4
  %idxprom172.i271 = sext i32 %657 to i64
  %arrayidx173.i272 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom172.i271
  %658 = load i32* %arrayidx173.i272, align 4
  %cmp174.i273 = icmp uge i32 %658, 1000000000
  br i1 %cmp174.i273, label %if.then176.i280, label %if.else182.i281

if.then176.i280:                                  ; preds = %for.body163.i274
  %659 = load i32* %k.i57, align 4
  %idxprom177.i275 = sext i32 %659 to i64
  %arrayidx178.i276 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom177.i275
  %660 = load i32* %arrayidx178.i276, align 4
  %sub179.i277 = sub i32 %660, 1000000000
  %661 = load i32* %k.i57, align 4
  %idxprom180.i278 = sext i32 %661 to i64
  %arrayidx181.i279 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom180.i278
  store i32 %sub179.i277, i32* %arrayidx181.i279, align 4
  store i32 1, i32* %icarr.i51, align 4
  br label %if.end183.i282

if.else182.i281:                                  ; preds = %for.body163.i274
  store i32 0, i32* %icarr.i51, align 4
  br label %if.end183.i282

if.end183.i282:                                   ; preds = %if.else182.i281, %if.then176.i280
  %662 = load i32* %k.i57, align 4
  %inc185.i283 = add nsw i32 %662, 1
  store i32 %inc185.i283, i32* %k.i57, align 4
  br label %for.cond160.i262

for.end186.i287:                                  ; preds = %for.cond160.i262
  %663 = load i32* %icarr.i51, align 4
  %664 = load i32* %kmx.i58, align 4
  %idxprom187.i284 = sext i32 %664 to i64
  %arrayidx188.i285 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom187.i284
  %665 = load i32* %arrayidx188.i285, align 4
  %add189.i286 = add i32 %665, %663
  store i32 %add189.i286, i32* %arrayidx188.i285, align 4
  br label %if.end190.i288

if.end190.i288:                                   ; preds = %for.end186.i287, %for.body153.i259
  store i32 0, i32* %icarr.i51, align 4
  store i32 0, i32* %k.i57, align 4
  br label %for.cond191.i290

for.cond191.i290:                                 ; preds = %if.end214.i310, %if.end190.i288
  %666 = load i32* %k.i57, align 4
  %667 = load i32* %kmx.i58, align 4
  %cmp192.i289 = icmp slt i32 %666, %667
  br i1 %cmp192.i289, label %for.body194.i302, label %for.end217.i316

for.body194.i302:                                 ; preds = %for.cond191.i290
  %668 = load i32* %k.i57, align 4
  %idxprom195.i291 = sext i32 %668 to i64
  %669 = load i32** %iextc.i54, align 8
  %arrayidx196.i292 = getelementptr inbounds i32* %669, i64 %idxprom195.i291
  %670 = load i32* %arrayidx196.i292, align 4
  %671 = load i32* %k.i57, align 4
  %idxprom197.i293 = sext i32 %671 to i64
  %672 = load i32** %iextc.i54, align 8
  %arrayidx198.i294 = getelementptr inbounds i32* %672, i64 %idxprom197.i293
  %673 = load i32* %arrayidx198.i294, align 4
  %add199.i295 = add i32 %670, %673
  %674 = load i32* %icarr.i51, align 4
  %add200.i296 = add i32 %add199.i295, %674
  %675 = load i32* %k.i57, align 4
  %idxprom201.i297 = sext i32 %675 to i64
  %676 = load i32** %iextc.i54, align 8
  %arrayidx202.i298 = getelementptr inbounds i32* %676, i64 %idxprom201.i297
  store i32 %add200.i296, i32* %arrayidx202.i298, align 4
  %677 = load i32* %k.i57, align 4
  %idxprom203.i299 = sext i32 %677 to i64
  %678 = load i32** %iextc.i54, align 8
  %arrayidx204.i300 = getelementptr inbounds i32* %678, i64 %idxprom203.i299
  %679 = load i32* %arrayidx204.i300, align 4
  %cmp205.i301 = icmp uge i32 %679, 1000000000
  br i1 %cmp205.i301, label %if.then207.i308, label %if.else213.i309

if.then207.i308:                                  ; preds = %for.body194.i302
  %680 = load i32* %k.i57, align 4
  %idxprom208.i303 = sext i32 %680 to i64
  %681 = load i32** %iextc.i54, align 8
  %arrayidx209.i304 = getelementptr inbounds i32* %681, i64 %idxprom208.i303
  %682 = load i32* %arrayidx209.i304, align 4
  %sub210.i305 = sub i32 %682, 1000000000
  %683 = load i32* %k.i57, align 4
  %idxprom211.i306 = sext i32 %683 to i64
  %684 = load i32** %iextc.i54, align 8
  %arrayidx212.i307 = getelementptr inbounds i32* %684, i64 %idxprom211.i306
  store i32 %sub210.i305, i32* %arrayidx212.i307, align 4
  store i32 1, i32* %icarr.i51, align 4
  br label %if.end214.i310

if.else213.i309:                                  ; preds = %for.body194.i302
  store i32 0, i32* %icarr.i51, align 4
  br label %if.end214.i310

if.end214.i310:                                   ; preds = %if.else213.i309, %if.then207.i308
  %685 = load i32* %k.i57, align 4
  %inc216.i311 = add nsw i32 %685, 1
  store i32 %inc216.i311, i32* %k.i57, align 4
  br label %for.cond191.i290

for.end217.i316:                                  ; preds = %for.cond191.i290
  %686 = load i32* %icarr.i51, align 4
  %687 = load i32* %kmx.i58, align 4
  %idxprom218.i312 = sext i32 %687 to i64
  %688 = load i32** %iextc.i54, align 8
  %arrayidx219.i313 = getelementptr inbounds i32* %688, i64 %idxprom218.i312
  %689 = load i32* %arrayidx219.i313, align 4
  %add220.i314 = add i32 %689, %686
  store i32 %add220.i314, i32* %arrayidx219.i313, align 4
  %690 = load i32* %icarr.i51, align 4
  %691 = load i32* %kmx.i58, align 4
  %add221.i315 = add i32 %691, %690
  store i32 %add221.i315, i32* %kmx.i58, align 4
  %692 = load i32* %j.i56, align 4
  %inc223.i317 = add nsw i32 %692, 1
  store i32 %inc223.i317, i32* %j.i56, align 4
  br label %for.cond150.i253

for.end224.i318:                                  ; preds = %for.cond150.i253
  %693 = load i32* %i.i55, align 4
  %inc226.i319 = add nsw i32 %693, 1
  store i32 %inc226.i319, i32* %i.i55, align 4
  br label %for.cond146.i250

for.end227.i320:                                  ; preds = %for.cond146.i250
  br label %if.end228.i325

if.end228.i325:                                   ; preds = %for.end227.i320, %if.end141.i247
  %694 = load i32* %kmx.i58, align 4
  %sub229.i321 = sub nsw i32 %694, 1
  %idxprom230.i322 = sext i32 %sub229.i321 to i64
  %arrayidx231.i323 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom230.i322
  %695 = load i32* %arrayidx231.i323, align 4
  %cmp232.i324 = icmp eq i32 %695, 0
  br i1 %cmp232.i324, label %if.then234.i327, label %if.end235.i330

if.then234.i327:                                  ; preds = %if.end228.i325
  %696 = load i32* %kmx.i58, align 4
  %dec.i326 = add nsw i32 %696, -1
  store i32 %dec.i326, i32* %kmx.i58, align 4
  br label %if.end235.i330

if.end235.i330:                                   ; preds = %if.then234.i327, %if.end228.i325
  %697 = load i32* %kmx.i58, align 4
  %dec236.i328 = add nsw i32 %697, -1
  store i32 %dec236.i328, i32* %kmx.i58, align 4
  store i32 0, i32* %prdigits.i66, align 4
  %698 = load i32* %kmx.i58, align 4
  %cmp237.i329 = icmp sge i32 %698, 0
  br i1 %cmp237.i329, label %if.then239.i333, label %if.end392.i476

if.then239.i333:                                  ; preds = %if.end235.i330
  store i32 1, i32* %digit.i64, align 4
  %699 = load i32* %kmx.i58, align 4
  %idxprom240.i331 = sext i32 %699 to i64
  %arrayidx241.i332 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom240.i331
  %700 = load i32* %arrayidx241.i332, align 4
  store i32 %700, i32* %k.i57, align 4
  store i32 0, i32* %i.i55, align 4
  br label %for.cond242.i335

for.cond242.i335:                                 ; preds = %if.end249.i340, %if.then239.i333
  %701 = load i32* %i.i55, align 4
  %cmp243.i334 = icmp slt i32 %701, 9
  br i1 %cmp243.i334, label %for.body245.i337, label %for.end253.i346

for.body245.i337:                                 ; preds = %for.cond242.i335
  %702 = load i32* %k.i57, align 4
  %703 = load i32* %digit.i64, align 4
  %cmp246.i336 = icmp uge i32 %702, %703
  br i1 %cmp246.i336, label %if.then248.i338, label %if.end249.i340

if.then248.i338:                                  ; preds = %for.body245.i337
  %704 = load i32* %i.i55, align 4
  store i32 %704, i32* %pose.i60, align 4
  br label %if.end249.i340

if.end249.i340:                                   ; preds = %if.then248.i338, %for.body245.i337
  %705 = load i32* %digit.i64, align 4
  %mul250.i339 = mul i32 %705, 10
  store i32 %mul250.i339, i32* %digit.i64, align 4
  %706 = load i32* %i.i55, align 4
  %inc252.i341 = add nsw i32 %706, 1
  store i32 %inc252.i341, i32* %i.i55, align 4
  br label %for.cond242.i335

for.end253.i346:                                  ; preds = %for.cond242.i335
  %707 = load i32* %kmx.i58, align 4
  %mul254.i342 = mul nsw i32 %707, 9
  %708 = load i32* %pose.i60, align 4
  %add255.i343 = add nsw i32 %mul254.i342, %708
  %add256.i344 = add nsw i32 %add255.i343, 1
  store i32 %add256.i344, i32* %prdigits.i66, align 4
  %709 = load i32* %prdigits.i66, align 4
  %710 = load i32* %w.addr.i44, align 4
  %cmp257.i345 = icmp ugt i32 %709, %710
  br i1 %cmp257.i345, label %if.then259.i348, label %if.end372.i457

if.then259.i348:                                  ; preds = %for.end253.i346
  %711 = load i32* %prdigits.i66, align 4
  %712 = load i32* %w.addr.i44, align 4
  %sub260.i347 = sub i32 %711, %712
  store i32 %sub260.i347, i32* %loc.i79, align 4
  store i32 0, i32* %kbk.i67, align 4
  br label %while.cond.i350

while.cond.i350:                                  ; preds = %while.body.i353, %if.then259.i348
  %713 = load i32* %loc.i79, align 4
  %cmp261.i349 = icmp sgt i32 %713, 9
  br i1 %cmp261.i349, label %while.body.i353, label %while.end.i357

while.body.i353:                                  ; preds = %while.cond.i350
  %714 = load i32* %loc.i79, align 4
  %sub263.i351 = sub nsw i32 %714, 9
  store i32 %sub263.i351, i32* %loc.i79, align 4
  %715 = load i32* %kbk.i67, align 4
  %inc264.i352 = add nsw i32 %715, 1
  store i32 %inc264.i352, i32* %kbk.i67, align 4
  br label %while.cond.i350

while.end.i357:                                   ; preds = %while.cond.i350
  %716 = load i32* %kbk.i67, align 4
  %idxprom265.i354 = sext i32 %716 to i64
  %arrayidx266.i355 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom265.i354
  %717 = load i32* %arrayidx266.i355, align 4
  store i32 %717, i32* %k.i57, align 4
  store i32 1, i32* %m.i68, align 4
  store i32 10, i32* %c.i75, align 4
  store i32 0, i32* %rndup.i78, align 4
  store i32 0, i32* %sticky.i77, align 4
  store i32 0, i32* %rndval.i76, align 4
  %718 = load i32* %loc.i79, align 4
  %cmp267.i356 = icmp sgt i32 %718, 1
  br i1 %cmp267.i356, label %if.then269.i358, label %if.else308.i398

if.then269.i358:                                  ; preds = %while.end.i357
  br label %while.cond270.i361

while.cond270.i361:                               ; preds = %if.end294.i381, %if.then269.i358
  %719 = load i32* %loc.i79, align 4
  %dec271.i359 = add nsw i32 %719, -1
  store i32 %dec271.i359, i32* %loc.i79, align 4
  %tobool272.i360 = icmp ne i32 %719, 0
  br i1 %tobool272.i360, label %while.body273.i366, label %while.end296.i382

while.body273.i366:                               ; preds = %while.cond270.i361
  %720 = load i32* %k.i57, align 4
  %div274.i362 = sdiv i32 %720, 10
  store i32 %div274.i362, i32* %j.i56, align 4
  %721 = load i32* %k.i57, align 4
  %722 = load i32* %j.i56, align 4
  %mul275.i363 = mul nsw i32 %722, 10
  %sub276.i364 = sub nsw i32 %721, %mul275.i363
  store i32 %sub276.i364, i32* %digit.i64, align 4
  %723 = load i32* %loc.i79, align 4
  %cmp277.i365 = icmp sgt i32 %723, 0
  br i1 %cmp277.i365, label %if.then279.i370, label %if.end283.i372

if.then279.i370:                                  ; preds = %while.body273.i366
  %724 = load i32* %c.i75, align 4
  %725 = load i32* %digit.i64, align 4
  %sub280.i367 = sub i32 %724, %725
  %726 = load i32* %m.i68, align 4
  %mul281.i368 = mul i32 %sub280.i367, %726
  %727 = load i32* %rndup.i78, align 4
  %add282.i369 = add i32 %727, %mul281.i368
  store i32 %add282.i369, i32* %rndup.i78, align 4
  br label %if.end283.i372

if.end283.i372:                                   ; preds = %if.then279.i370, %while.body273.i366
  %728 = load i32* %loc.i79, align 4
  %cmp284.i371 = icmp sgt i32 %728, 1
  br i1 %cmp284.i371, label %if.then286.i376, label %if.end290.i378

if.then286.i376:                                  ; preds = %if.end283.i372
  %729 = load i32* %digit.i64, align 4
  %cmp287.i373 = icmp ugt i32 %729, 0
  %conv288.i374 = zext i1 %cmp287.i373 to i32
  %730 = load i32* %sticky.i77, align 4
  %or289.i375 = or i32 %730, %conv288.i374
  store i32 %or289.i375, i32* %sticky.i77, align 4
  br label %if.end290.i378

if.end290.i378:                                   ; preds = %if.then286.i376, %if.end283.i372
  %731 = load i32* %loc.i79, align 4
  %cmp291.i377 = icmp eq i32 %731, 1
  br i1 %cmp291.i377, label %if.then293.i379, label %if.end294.i381

if.then293.i379:                                  ; preds = %if.end290.i378
  %732 = load i32* %digit.i64, align 4
  store i32 %732, i32* %rndval.i76, align 4
  br label %if.end294.i381

if.end294.i381:                                   ; preds = %if.then293.i379, %if.end290.i378
  %733 = load i32* %j.i56, align 4
  store i32 %733, i32* %k.i57, align 4
  %734 = load i32* %m.i68, align 4
  %mul295.i380 = mul nsw i32 %734, 10
  store i32 %mul295.i380, i32* %m.i68, align 4
  store i32 9, i32* %c.i75, align 4
  br label %while.cond270.i361

while.end296.i382:                                ; preds = %while.cond270.i361
  %735 = load i32* %kbk.i67, align 4
  store i32 %735, i32* %i.i55, align 4
  br label %while.cond297.i384

while.cond297.i384:                               ; preds = %while.body300.i395, %while.end296.i382
  %736 = load i32* %i.i55, align 4
  %tobool298.i383 = icmp ne i32 %736, 0
  br i1 %tobool298.i383, label %land.rhs.i387, label %land.end.i388

land.rhs.i387:                                    ; preds = %while.cond297.i384
  %737 = load i32* %sticky.i77, align 4
  %tobool299.i385 = icmp ne i32 %737, 0
  %lnot.i386 = xor i1 %tobool299.i385, true
  br label %land.end.i388

land.end.i388:                                    ; preds = %land.rhs.i387, %while.cond297.i384
  %738 = phi i1 [ false, %while.cond297.i384 ], [ %lnot.i386, %land.rhs.i387 ]
  br i1 %738, label %while.body300.i395, label %while.end307.i396

while.body300.i395:                               ; preds = %land.end.i388
  %739 = load i32* %i.i55, align 4
  %dec301.i389 = add nsw i32 %739, -1
  store i32 %dec301.i389, i32* %i.i55, align 4
  %idxprom302.i390 = sext i32 %dec301.i389 to i64
  %arrayidx303.i391 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom302.i390
  %740 = load i32* %arrayidx303.i391, align 4
  %cmp304.i392 = icmp ne i32 %740, 0
  %conv305.i393 = zext i1 %cmp304.i392 to i32
  %741 = load i32* %sticky.i77, align 4
  %or306.i394 = or i32 %741, %conv305.i393
  store i32 %or306.i394, i32* %sticky.i77, align 4
  br label %while.cond297.i384

while.end307.i396:                                ; preds = %land.end.i388
  br label %if.end341.i428

if.else308.i398:                                  ; preds = %while.end.i357
  %742 = load i32* %kbk.i67, align 4
  %cmp309.i397 = icmp sgt i32 %742, 0
  br i1 %cmp309.i397, label %if.then311.i403, label %if.end340.i426

if.then311.i403:                                  ; preds = %if.else308.i398
  %743 = load i32* %kbk.i67, align 4
  %dec312.i399 = add nsw i32 %743, -1
  store i32 %dec312.i399, i32* %kbk.i67, align 4
  %idxprom313.i400 = sext i32 %dec312.i399 to i64
  %arrayidx314.i401 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom313.i400
  %744 = load i32* %arrayidx314.i401, align 4
  store i32 %744, i32* %k.i57, align 4
  %745 = load i32* %k.i57, align 4
  %cmp315.i402 = icmp sge i32 %745, 500000000
  br i1 %cmp315.i402, label %if.then317.i406, label %if.end339.i425

if.then317.i406:                                  ; preds = %if.then311.i403
  store i32 5, i32* %rndval.i76, align 4
  %746 = load i32* %k.i57, align 4
  %sub318.i404 = sub nsw i32 1000000000, %746
  store i32 %sub318.i404, i32* %rndup.i78, align 4
  %747 = load i32* %k.i57, align 4
  %cmp319.i405 = icmp sgt i32 %747, 500000000
  br i1 %cmp319.i405, label %if.then321.i407, label %if.else322.i409

if.then321.i407:                                  ; preds = %if.then317.i406
  store i32 1, i32* %sticky.i77, align 4
  br label %if.end338.i424

if.else322.i409:                                  ; preds = %if.then317.i406
  %748 = load i32* %kbk.i67, align 4
  %sub323.i408 = sub nsw i32 %748, 1
  store i32 %sub323.i408, i32* %i.i55, align 4
  br label %while.cond324.i411

while.cond324.i411:                               ; preds = %while.body330.i422, %if.else322.i409
  %749 = load i32* %i.i55, align 4
  %tobool325.i410 = icmp ne i32 %749, 0
  br i1 %tobool325.i410, label %land.rhs326.i414, label %land.end329.i415

land.rhs326.i414:                                 ; preds = %while.cond324.i411
  %750 = load i32* %sticky.i77, align 4
  %tobool327.i412 = icmp ne i32 %750, 0
  %lnot328.i413 = xor i1 %tobool327.i412, true
  br label %land.end329.i415

land.end329.i415:                                 ; preds = %land.rhs326.i414, %while.cond324.i411
  %751 = phi i1 [ false, %while.cond324.i411 ], [ %lnot328.i413, %land.rhs326.i414 ]
  br i1 %751, label %while.body330.i422, label %while.end337.i423

while.body330.i422:                               ; preds = %land.end329.i415
  %752 = load i32* %i.i55, align 4
  %dec331.i416 = add nsw i32 %752, -1
  store i32 %dec331.i416, i32* %i.i55, align 4
  %idxprom332.i417 = sext i32 %752 to i64
  %arrayidx333.i418 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom332.i417
  %753 = load i32* %arrayidx333.i418, align 4
  %cmp334.i419 = icmp ne i32 %753, 0
  %conv335.i420 = zext i1 %cmp334.i419 to i32
  %754 = load i32* %sticky.i77, align 4
  %or336.i421 = or i32 %754, %conv335.i420
  store i32 %or336.i421, i32* %sticky.i77, align 4
  br label %while.cond324.i411

while.end337.i423:                                ; preds = %land.end329.i415
  br label %if.end338.i424

if.end338.i424:                                   ; preds = %while.end337.i423, %if.then321.i407
  br label %if.end339.i425

if.end339.i425:                                   ; preds = %if.end338.i424, %if.then311.i403
  br label %if.end340.i426

if.end340.i426:                                   ; preds = %if.end339.i425, %if.else308.i398
  br label %if.end341.i428

if.end341.i428:                                   ; preds = %if.end340.i426, %while.end307.i396
  %755 = load i32* %rndval.i76, align 4
  %cmp342.i427 = icmp sgt i32 %755, 5
  br i1 %cmp342.i427, label %if.then347.i436, label %lor.lhs.false.i430

lor.lhs.false.i430:                               ; preds = %if.end341.i428
  %756 = load i32* %rndval.i76, align 4
  %cmp344.i429 = icmp eq i32 %756, 5
  br i1 %cmp344.i429, label %land.lhs.true.i432, label %if.end351.i437

land.lhs.true.i432:                               ; preds = %lor.lhs.false.i430
  %757 = load i32* %sticky.i77, align 4
  %tobool346.i431 = icmp ne i32 %757, 0
  br i1 %tobool346.i431, label %if.then347.i436, label %if.end351.i437

if.then347.i436:                                  ; preds = %land.lhs.true.i432, %if.end341.i428
  %758 = load i32* %rndup.i78, align 4
  %759 = load i32* %kbk.i67, align 4
  %idxprom348.i433 = sext i32 %759 to i64
  %arrayidx349.i434 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom348.i433
  %760 = load i32* %arrayidx349.i434, align 4
  %add350.i435 = add i32 %760, %758
  store i32 %add350.i435, i32* %arrayidx349.i434, align 4
  br label %if.end351.i437

if.end351.i437:                                   ; preds = %if.then347.i436, %land.lhs.true.i432, %lor.lhs.false.i430
  br label %while.cond352.i441

while.cond352.i441:                               ; preds = %while.body357.i455, %if.end351.i437
  %761 = load i32* %kbk.i67, align 4
  %idxprom353.i438 = sext i32 %761 to i64
  %arrayidx354.i439 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom353.i438
  %762 = load i32* %arrayidx354.i439, align 4
  %cmp355.i440 = icmp uge i32 %762, 1000000000
  br i1 %cmp355.i440, label %while.body357.i455, label %while.end371.i456

while.body357.i455:                               ; preds = %while.cond352.i441
  %763 = load i32* %kbk.i67, align 4
  %idxprom358.i442 = sext i32 %763 to i64
  %arrayidx359.i443 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom358.i442
  %764 = load i32* %arrayidx359.i443, align 4
  %sub360.i444 = sub i32 %764, 1000000000
  %765 = load i32* %kbk.i67, align 4
  %idxprom361.i445 = sext i32 %765 to i64
  %arrayidx362.i446 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom361.i445
  store i32 %sub360.i444, i32* %arrayidx362.i446, align 4
  %766 = load i32* %kbk.i67, align 4
  %add363.i447 = add nsw i32 %766, 1
  %idxprom364.i448 = sext i32 %add363.i447 to i64
  %arrayidx365.i449 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom364.i448
  %767 = load i32* %arrayidx365.i449, align 4
  %add366.i450 = add i32 %767, 1
  %768 = load i32* %kbk.i67, align 4
  %add367.i451 = add nsw i32 %768, 1
  %idxprom368.i452 = sext i32 %add367.i451 to i64
  %arrayidx369.i453 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom368.i452
  store i32 %add366.i450, i32* %arrayidx369.i453, align 4
  %769 = load i32* %kbk.i67, align 4
  %inc370.i454 = add nsw i32 %769, 1
  store i32 %inc370.i454, i32* %kbk.i67, align 4
  br label %while.cond352.i441

while.end371.i456:                                ; preds = %while.cond352.i441
  br label %if.end372.i457

if.end372.i457:                                   ; preds = %while.end371.i456, %for.end253.i346
  store i32 0, i32* %i.i55, align 4
  br label %for.cond373.i461

for.cond373.i461:                                 ; preds = %for.body378.i472, %if.end372.i457
  %770 = load i32* %i.i55, align 4
  %771 = load i32* %kmx.i58, align 4
  %add374.i458 = add nsw i32 %771, 1
  %div375.i459 = sdiv i32 %add374.i458, 2
  %cmp376.i460 = icmp slt i32 %770, %div375.i459
  br i1 %cmp376.i460, label %for.body378.i472, label %for.end391.i474

for.body378.i472:                                 ; preds = %for.cond373.i461
  %772 = load i32* %i.i55, align 4
  %idxprom379.i462 = sext i32 %772 to i64
  %arrayidx380.i463 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom379.i462
  %773 = load i32* %arrayidx380.i463, align 4
  store i32 %773, i32* %k.i57, align 4
  %774 = load i32* %kmx.i58, align 4
  %775 = load i32* %i.i55, align 4
  %sub381.i464 = sub nsw i32 %774, %775
  %idxprom382.i465 = sext i32 %sub381.i464 to i64
  %arrayidx383.i466 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom382.i465
  %776 = load i32* %arrayidx383.i466, align 4
  %777 = load i32* %i.i55, align 4
  %idxprom384.i467 = sext i32 %777 to i64
  %arrayidx385.i468 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom384.i467
  store i32 %776, i32* %arrayidx385.i468, align 4
  %778 = load i32* %k.i57, align 4
  %779 = load i32* %kmx.i58, align 4
  %780 = load i32* %i.i55, align 4
  %sub386.i469 = sub nsw i32 %779, %780
  %idxprom387.i470 = sext i32 %sub386.i469 to i64
  %arrayidx388.i471 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom387.i470
  store i32 %778, i32* %arrayidx388.i471, align 4
  %781 = load i32* %i.i55, align 4
  %inc390.i473 = add nsw i32 %781, 1
  store i32 %inc390.i473, i32* %i.i55, align 4
  br label %for.cond373.i461

for.end391.i474:                                  ; preds = %for.cond373.i461
  br label %if.end392.i476

if.end392.i476:                                   ; preds = %for.end391.i474, %if.end235.i330
  %782 = load i32* %iexp.i47, align 4
  %cmp393.i475 = icmp sle i32 %782, 51
  br i1 %cmp393.i475, label %land.lhs.true395.i478, label %if.end620.i676

land.lhs.true395.i478:                            ; preds = %if.end392.i476
  %783 = load i32* %prdigits.i66, align 4
  %784 = load i32* %w.addr.i44, align 4
  %cmp396.i477 = icmp ule i32 %783, %784
  br i1 %cmp396.i477, label %if.then398.i481, label %if.end620.i676

if.then398.i481:                                  ; preds = %land.lhs.true395.i478
  store i32 0, i32* %digit.i64, align 4
  store i32 0, i32* %keepon.i80, align 4
  store i32 0, i32* %ndigits.i65, align 4
  %785 = load i32* %kmx.i58, align 4
  %add399.i479 = add nsw i32 %785, 1
  store i32 %add399.i479, i32* %j.i56, align 4
  %786 = load i32* %kmx.i58, align 4
  %add400.i480 = add nsw i32 %786, 1
  store i32 %add400.i480, i32* %k.i57, align 4
  store i32 0, i32* %firstdigit.i59, align 4
  store i32 0, i32* %savecarry.i84, align 4
  %787 = load i32* %w.addr.i44, align 4
  store i32 %787, i32* %lw.i69, align 4
  br label %while.cond401.i483

while.cond401.i483:                               ; preds = %if.end543.i607, %if.then398.i481
  %788 = load i32* %iwdm2.i50, align 4
  %cmp402.i482 = icmp slt i32 %788, 34
  br i1 %cmp402.i482, label %while.body404.i484, label %while.end544.i609

while.body404.i484:                               ; preds = %while.cond401.i483
  store i32 0, i32* %sh1.i82, align 4
  store i32 0, i32* %sh3.i83, align 4
  store i32 0, i32* %icarr.i51, align 4
  %789 = load i32* %iwdm2.i50, align 4
  store i32 %789, i32* %i.i55, align 4
  br label %for.cond405.i486

for.cond405.i486:                                 ; preds = %lor.end.i508, %while.body404.i484
  %790 = load i32* %i.i55, align 4
  %cmp406.i485 = icmp slt i32 %790, 34
  br i1 %cmp406.i485, label %for.body408.i498, label %for.end433.i513

for.body408.i498:                                 ; preds = %for.cond405.i486
  %791 = load i32* %i.i55, align 4
  %idxprom409.i487 = sext i32 %791 to i64
  %792 = load i32** %iexta.i53, align 8
  %arrayidx410.i488 = getelementptr inbounds i32* %792, i64 %idxprom409.i487
  %793 = load i32* %arrayidx410.i488, align 4
  store i32 %793, i32* %ix.i86, align 4
  %794 = load i32* %ix.i86, align 4
  %shl411.i489 = shl i32 %794, 1
  %795 = load i32* %sh1.i82, align 4
  %add412.i490 = add i32 %shl411.i489, %795
  store i32 %add412.i490, i32* %ixa.i87, align 4
  %796 = load i32* %ix.i86, align 4
  %shl413.i491 = shl i32 %796, 3
  %797 = load i32* %sh3.i83, align 4
  %add414.i492 = add i32 %shl413.i491, %797
  store i32 %add414.i492, i32* %ixb.i88, align 4
  %798 = load i32* %ix.i86, align 4
  %shr415.i493 = lshr i32 %798, 31
  store i32 %shr415.i493, i32* %sh1.i82, align 4
  %799 = load i32* %ix.i86, align 4
  %shr416.i494 = lshr i32 %799, 29
  store i32 %shr416.i494, i32* %sh3.i83, align 4
  %800 = load i32* %ixa.i87, align 4
  %801 = load i32* %ixb.i88, align 4
  %add417.i495 = add i32 %800, %801
  %802 = load i32* %icarr.i51, align 4
  %add418.i496 = add i32 %add417.i495, %802
  store i32 %add418.i496, i32* %ixc.i89, align 4
  %803 = load i32* %ixc.i89, align 4
  %804 = load i32* %ixa.i87, align 4
  %cmp419.i497 = icmp ult i32 %803, %804
  br i1 %cmp419.i497, label %lor.end.i508, label %lor.lhs.false421.i500

lor.lhs.false421.i500:                            ; preds = %for.body408.i498
  %805 = load i32* %ixc.i89, align 4
  %806 = load i32* %ixb.i88, align 4
  %cmp422.i499 = icmp ult i32 %805, %806
  br i1 %cmp422.i499, label %lor.end.i508, label %lor.rhs.i504

lor.rhs.i504:                                     ; preds = %lor.lhs.false421.i500
  %807 = load i32* %ixa.i87, align 4
  %808 = load i32* %ixb.i88, align 4
  %and424.i501 = and i32 %807, %808
  %809 = load i32* %ixc.i89, align 4
  %and425.i502 = and i32 %and424.i501, %809
  %cmp426.i503 = icmp eq i32 %and425.i502, -1
  br label %lor.end.i508

lor.end.i508:                                     ; preds = %lor.rhs.i504, %lor.lhs.false421.i500, %for.body408.i498
  %810 = phi i1 [ true, %lor.lhs.false421.i500 ], [ true, %for.body408.i498 ], [ %cmp426.i503, %lor.rhs.i504 ]
  %cond428.i505 = select i1 %810, i32 1, i32 0
  store i32 %cond428.i505, i32* %icarr.i51, align 4
  %811 = load i32* %ixc.i89, align 4
  %812 = load i32* %i.i55, align 4
  %idxprom429.i506 = sext i32 %812 to i64
  %813 = load i32** %iexta.i53, align 8
  %arrayidx430.i507 = getelementptr inbounds i32* %813, i64 %idxprom429.i506
  store i32 %811, i32* %arrayidx430.i507, align 4
  %814 = load i32* %i.i55, align 4
  %inc432.i509 = add nsw i32 %814, 1
  store i32 %inc432.i509, i32* %i.i55, align 4
  br label %for.cond405.i486

for.end433.i513:                                  ; preds = %for.cond405.i486
  %815 = load i32* %iwdm2.i50, align 4
  %idxprom434.i510 = sext i32 %815 to i64
  %816 = load i32** %iexta.i53, align 8
  %arrayidx435.i511 = getelementptr inbounds i32* %816, i64 %idxprom434.i510
  %817 = load i32* %arrayidx435.i511, align 4
  %cmp436.i512 = icmp eq i32 %817, 0
  br i1 %cmp436.i512, label %if.then438.i515, label %if.end440.i522

if.then438.i515:                                  ; preds = %for.end433.i513
  %818 = load i32* %iwdm2.i50, align 4
  %inc439.i514 = add nsw i32 %818, 1
  store i32 %inc439.i514, i32* %iwdm2.i50, align 4
  br label %if.end440.i522

if.end440.i522:                                   ; preds = %if.then438.i515, %for.end433.i513
  %819 = load i32* %digit.i64, align 4
  %mul441.i516 = mul i32 %819, 10
  %820 = load i32* %sh3.i83, align 4
  %821 = load i32* %sh1.i82, align 4
  %add442.i517 = add i32 %820, %821
  %822 = load i32* %icarr.i51, align 4
  %add443.i518 = add i32 %add442.i517, %822
  %add444.i519 = add i32 %mul441.i516, %add443.i518
  store i32 %add444.i519, i32* %digit.i64, align 4
  %823 = load i32* %ndigits.i65, align 4
  %inc445.i520 = add i32 %823, 1
  store i32 %inc445.i520, i32* %ndigits.i65, align 4
  %824 = load i32* %digit.i64, align 4
  %tobool446.i521 = icmp ne i32 %824, 0
  br i1 %tobool446.i521, label %land.lhs.true447.i524, label %if.end461.i535

land.lhs.true447.i524:                            ; preds = %if.end440.i522
  %825 = load i32* %firstdigit.i59, align 4
  %tobool448.i523 = icmp ne i32 %825, 0
  br i1 %tobool448.i523, label %if.end461.i535, label %if.then449.i526

if.then449.i526:                                  ; preds = %land.lhs.true447.i524
  %826 = load i32* %ndigits.i65, align 4
  store i32 %826, i32* %firstdigit.i59, align 4
  %827 = load i32* %j.i56, align 4
  store i32 %827, i32* %firstfwd.i61, align 4
  %828 = load i32* %ndigits.i65, align 4
  %cmp450.i525 = icmp ugt i32 %828, 1
  br i1 %cmp450.i525, label %land.lhs.true455.i530, label %lor.lhs.false452.i528

lor.lhs.false452.i528:                            ; preds = %if.then449.i526
  %829 = load i32* %j.i56, align 4
  %830 = load i32* %k.i57, align 4
  %cmp453.i527 = icmp ne i32 %829, %830
  br i1 %cmp453.i527, label %land.lhs.true455.i530, label %if.end460.i533

land.lhs.true455.i530:                            ; preds = %lor.lhs.false452.i528, %if.then449.i526
  %831 = load i32* %prdigits.i66, align 4
  %cmp456.i529 = icmp eq i32 %831, 0
  br i1 %cmp456.i529, label %if.then458.i532, label %if.end460.i533

if.then458.i532:                                  ; preds = %land.lhs.true455.i530
  %832 = load i32* %lw.i69, align 4
  %inc459.i531 = add nsw i32 %832, 1
  store i32 %inc459.i531, i32* %lw.i69, align 4
  br label %if.end460.i533

if.end460.i533:                                   ; preds = %if.then458.i532, %land.lhs.true455.i530, %lor.lhs.false452.i528
  br label %if.end461.i535

if.end461.i535:                                   ; preds = %if.end460.i533, %land.lhs.true447.i524, %if.end440.i522
  %833 = load i32* %firstdigit.i59, align 4
  %tobool462.i534 = icmp ne i32 %833, 0
  br i1 %tobool462.i534, label %if.then465.i540, label %lor.lhs.false463.i537

lor.lhs.false463.i537:                            ; preds = %if.end461.i535
  %834 = load i32* %prdigits.i66, align 4
  %tobool464.i536 = icmp ne i32 %834, 0
  br i1 %tobool464.i536, label %if.then465.i540, label %if.end521.i588

if.then465.i540:                                  ; preds = %lor.lhs.false463.i537, %if.end461.i535
  %835 = load i32* %prdigits.i66, align 4
  %inc466.i538 = add i32 %835, 1
  store i32 %inc466.i538, i32* %prdigits.i66, align 4
  %836 = load i32* %prdigits.i66, align 4
  %837 = load i32* %lw.i69, align 4
  %cmp467.i539 = icmp ugt i32 %836, %837
  br i1 %cmp467.i539, label %if.then469.i542, label %if.end520.i586

if.then469.i542:                                  ; preds = %if.then465.i540
  %838 = load i32* %keepon.i80, align 4
  %tobool470.i541 = icmp ne i32 %838, 0
  br i1 %tobool470.i541, label %if.else477.i549, label %land.lhs.true471.i546

land.lhs.true471.i546:                            ; preds = %if.then469.i542
  %839 = load i32* %sh3.i83, align 4
  %840 = load i32* %sh1.i82, align 4
  %add472.i543 = add i32 %839, %840
  %841 = load i32* %icarr.i51, align 4
  %add473.i544 = add i32 %add472.i543, %841
  %cmp474.i545 = icmp ult i32 %add473.i544, 5
  br i1 %cmp474.i545, label %if.then476.i547, label %if.else477.i549

if.then476.i547:                                  ; preds = %land.lhs.true471.i546
  br label %while.end544.i609

if.else477.i549:                                  ; preds = %land.lhs.true471.i546, %if.then469.i542
  %842 = load i32* %keepon.i80, align 4
  %tobool478.i548 = icmp ne i32 %842, 0
  br i1 %tobool478.i548, label %if.else489.i560, label %land.lhs.true479.i553

land.lhs.true479.i553:                            ; preds = %if.else477.i549
  %843 = load i32* %sh3.i83, align 4
  %844 = load i32* %sh1.i82, align 4
  %add480.i550 = add i32 %843, %844
  %845 = load i32* %icarr.i51, align 4
  %add481.i551 = add i32 %add480.i550, %845
  %cmp482.i552 = icmp ugt i32 %add481.i551, 5
  br i1 %cmp482.i552, label %if.then484.i558, label %if.else489.i560

if.then484.i558:                                  ; preds = %land.lhs.true479.i553
  %846 = load i32* %sh3.i83, align 4
  %847 = load i32* %sh1.i82, align 4
  %add485.i554 = add i32 %846, %847
  %848 = load i32* %icarr.i51, align 4
  %add486.i555 = add i32 %add485.i554, %848
  %sub487.i556 = sub i32 10, %add486.i555
  %849 = load i32* %digit.i64, align 4
  %add488.i557 = add i32 %849, %sub487.i556
  store i32 %add488.i557, i32* %digit.i64, align 4
  br label %while.end544.i609

if.else489.i560:                                  ; preds = %land.lhs.true479.i553, %if.else477.i549
  %850 = load i32* %keepon.i80, align 4
  %tobool490.i559 = icmp ne i32 %850, 0
  br i1 %tobool490.i559, label %land.lhs.true491.i564, label %if.else509.i579

land.lhs.true491.i564:                            ; preds = %if.else489.i560
  %851 = load i32* %sh3.i83, align 4
  %852 = load i32* %sh1.i82, align 4
  %add492.i561 = add i32 %851, %852
  %853 = load i32* %icarr.i51, align 4
  %add493.i562 = add i32 %add492.i561, %853
  %cmp494.i563 = icmp ugt i32 %add493.i562, 0
  br i1 %cmp494.i563, label %if.then496.i566, label %if.else509.i579

if.then496.i566:                                  ; preds = %land.lhs.true491.i564
  %854 = load i32* %savecarry.i84, align 4
  %tobool497.i565 = icmp ne i32 %854, 0
  br i1 %tobool497.i565, label %if.then498.i570, label %if.else502.i576

if.then498.i570:                                  ; preds = %if.then496.i566
  %855 = load i32* %savek.i85, align 4
  %idxprom499.i567 = sext i32 %855 to i64
  %arrayidx500.i568 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom499.i567
  %856 = load i32* %arrayidx500.i568, align 4
  store i32 %856, i32* %digit.i64, align 4
  %857 = load i32* %savecarry.i84, align 4
  %858 = load i32* %digit.i64, align 4
  %add501.i569 = add i32 %858, %857
  store i32 %add501.i569, i32* %digit.i64, align 4
  %859 = load i32* %savek.i85, align 4
  store i32 %859, i32* %k.i57, align 4
  store i32 9, i32* %ndigits.i65, align 4
  br label %if.end508.i577

if.else502.i576:                                  ; preds = %if.then496.i566
  %860 = load i32* %roundcarry.i81, align 4
  %mul503.i571 = mul i32 %860, 10
  store i32 %mul503.i571, i32* %roundcarry.i81, align 4
  %861 = load i32* %roundcarry.i81, align 4
  %862 = load i32* %sh3.i83, align 4
  %863 = load i32* %sh1.i82, align 4
  %add504.i572 = add i32 %862, %863
  %864 = load i32* %icarr.i51, align 4
  %add505.i573 = add i32 %add504.i572, %864
  %sub506.i574 = sub i32 %861, %add505.i573
  %865 = load i32* %digit.i64, align 4
  %add507.i575 = add i32 %865, %sub506.i574
  store i32 %add507.i575, i32* %digit.i64, align 4
  br label %if.end508.i577

if.end508.i577:                                   ; preds = %if.else502.i576, %if.then498.i570
  store i32 0, i32* %keepon.i80, align 4
  br label %while.end544.i609

if.else509.i579:                                  ; preds = %land.lhs.true491.i564, %if.else489.i560
  %866 = load i32* %keepon.i80, align 4
  %tobool510.i578 = icmp ne i32 %866, 0
  br i1 %tobool510.i578, label %if.then511.i582, label %if.else514.i584

if.then511.i582:                                  ; preds = %if.else509.i579
  %867 = load i32* %keepon.i80, align 4
  %inc512.i580 = add i32 %867, 1
  store i32 %inc512.i580, i32* %keepon.i80, align 4
  %868 = load i32* %roundcarry.i81, align 4
  %mul513.i581 = mul i32 %868, 10
  store i32 %mul513.i581, i32* %roundcarry.i81, align 4
  br label %if.end516.i585

if.else514.i584:                                  ; preds = %if.else509.i579
  store i32 5, i32* %roundcarry.i81, align 4
  %869 = load i32* %keepon.i80, align 4
  %inc515.i583 = add i32 %869, 1
  store i32 %inc515.i583, i32* %keepon.i80, align 4
  br label %if.end516.i585

if.end516.i585:                                   ; preds = %if.else514.i584, %if.then511.i582
  br label %if.end520.i586

if.end520.i586:                                   ; preds = %if.end516.i585, %if.then465.i540
  br label %if.end521.i588

if.end521.i588:                                   ; preds = %if.end520.i586, %lor.lhs.false463.i537
  %870 = load i32* %ndigits.i65, align 4
  %cmp522.i587 = icmp eq i32 %870, 9
  br i1 %cmp522.i587, label %if.then524.i590, label %if.end543.i607

if.then524.i590:                                  ; preds = %if.end521.i588
  %871 = load i32* %digit.i64, align 4
  %tobool525.i589 = icmp ne i32 %871, 0
  br i1 %tobool525.i589, label %if.then531.i598, label %lor.lhs.false526.i592

lor.lhs.false526.i592:                            ; preds = %if.then524.i590
  %872 = load i32* %firstdigit.i59, align 4
  %tobool527.i591 = icmp ne i32 %872, 0
  br i1 %tobool527.i591, label %if.then531.i598, label %lor.lhs.false528.i594

lor.lhs.false528.i594:                            ; preds = %lor.lhs.false526.i592
  %873 = load i32* %iexp.i47, align 4
  %cmp529.i593 = icmp sge i32 %873, 0
  br i1 %cmp529.i593, label %if.then531.i598, label %if.end535.i601

if.then531.i598:                                  ; preds = %lor.lhs.false528.i594, %lor.lhs.false526.i592, %if.then524.i590
  %874 = load i32* %digit.i64, align 4
  %875 = load i32* %k.i57, align 4
  %inc532.i595 = add nsw i32 %875, 1
  store i32 %inc532.i595, i32* %k.i57, align 4
  %idxprom533.i596 = sext i32 %875 to i64
  %arrayidx534.i597 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom533.i596
  store i32 %874, i32* %arrayidx534.i597, align 4
  br label %if.end535.i601

if.end535.i601:                                   ; preds = %if.then531.i598, %lor.lhs.false528.i594
  %876 = load i32* %j.i56, align 4
  %inc536.i599 = add nsw i32 %876, 1
  store i32 %inc536.i599, i32* %j.i56, align 4
  store i32 0, i32* %digit.i64, align 4
  store i32 0, i32* %ndigits.i65, align 4
  %877 = load i32* %keepon.i80, align 4
  %tobool537.i600 = icmp ne i32 %877, 0
  br i1 %tobool537.i600, label %land.lhs.true538.i603, label %if.end542.i606

land.lhs.true538.i603:                            ; preds = %if.end535.i601
  %878 = load i32* %savecarry.i84, align 4
  %tobool539.i602 = icmp ne i32 %878, 0
  br i1 %tobool539.i602, label %if.end542.i606, label %if.then540.i605

if.then540.i605:                                  ; preds = %land.lhs.true538.i603
  %879 = load i32* %roundcarry.i81, align 4
  store i32 %879, i32* %savecarry.i84, align 4
  %880 = load i32* %k.i57, align 4
  %sub541.i604 = sub nsw i32 %880, 1
  store i32 %sub541.i604, i32* %savek.i85, align 4
  br label %if.end542.i606

if.end542.i606:                                   ; preds = %if.then540.i605, %land.lhs.true538.i603, %if.end535.i601
  br label %if.end543.i607

if.end543.i607:                                   ; preds = %if.end542.i606, %if.end521.i588
  br label %while.cond401.i483

while.end544.i609:                                ; preds = %if.end508.i577, %if.then484.i558, %if.then476.i547, %while.cond401.i483
  %881 = load i32* %keepon.i80, align 4
  %tobool545.i608 = icmp ne i32 %881, 0
  br i1 %tobool545.i608, label %if.then546.i611, label %if.end558.i623

if.then546.i611:                                  ; preds = %while.end544.i609
  %882 = load i32* %savecarry.i84, align 4
  %tobool547.i610 = icmp ne i32 %882, 0
  br i1 %tobool547.i610, label %if.then548.i615, label %if.else552.i617

if.then548.i615:                                  ; preds = %if.then546.i611
  %883 = load i32* %savek.i85, align 4
  %idxprom549.i612 = sext i32 %883 to i64
  %arrayidx550.i613 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom549.i612
  %884 = load i32* %arrayidx550.i613, align 4
  store i32 %884, i32* %digit.i64, align 4
  %885 = load i32* %savecarry.i84, align 4
  %886 = load i32* %digit.i64, align 4
  %add551.i614 = add i32 %886, %885
  store i32 %add551.i614, i32* %digit.i64, align 4
  %887 = load i32* %savek.i85, align 4
  store i32 %887, i32* %k.i57, align 4
  store i32 9, i32* %ndigits.i65, align 4
  br label %if.end557.i621

if.else552.i617:                                  ; preds = %if.then546.i611
  %888 = load i32* %roundcarry.i81, align 4
  %tobool553.i616 = icmp ne i32 %888, 0
  br i1 %tobool553.i616, label %if.then554.i619, label %if.end556.i620

if.then554.i619:                                  ; preds = %if.else552.i617
  %889 = load i32* %roundcarry.i81, align 4
  %890 = load i32* %digit.i64, align 4
  %add555.i618 = add i32 %890, %889
  store i32 %add555.i618, i32* %digit.i64, align 4
  br label %if.end556.i620

if.end556.i620:                                   ; preds = %if.then554.i619, %if.else552.i617
  br label %if.end557.i621

if.end557.i621:                                   ; preds = %if.end556.i620, %if.then548.i615
  br label %if.end558.i623

if.end558.i623:                                   ; preds = %if.end557.i621, %while.end544.i609
  %891 = load i32* %digit.i64, align 4
  %tobool559.i622 = icmp ne i32 %891, 0
  br i1 %tobool559.i622, label %if.then560.i624, label %if.end619.i674

if.then560.i624:                                  ; preds = %if.end558.i623
  br label %for.cond561.i626

for.cond561.i626:                                 ; preds = %for.body564.i628, %if.then560.i624
  %892 = load i32* %ndigits.i65, align 4
  %cmp562.i625 = icmp ult i32 %892, 9
  br i1 %cmp562.i625, label %for.body564.i628, label %for.end568.i633

for.body564.i628:                                 ; preds = %for.cond561.i626
  %893 = load i32* %digit.i64, align 4
  %mul565.i627 = mul i32 %893, 10
  store i32 %mul565.i627, i32* %digit.i64, align 4
  %894 = load i32* %ndigits.i65, align 4
  %inc567.i629 = add i32 %894, 1
  store i32 %inc567.i629, i32* %ndigits.i65, align 4
  br label %for.cond561.i626

for.end568.i633:                                  ; preds = %for.cond561.i626
  %895 = load i32* %digit.i64, align 4
  %896 = load i32* %k.i57, align 4
  %idxprom569.i630 = sext i32 %896 to i64
  %arrayidx570.i631 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom569.i630
  store i32 %895, i32* %arrayidx570.i631, align 4
  %897 = load i32* %digit.i64, align 4
  %cmp571.i632 = icmp eq i32 %897, 1000000000
  br i1 %cmp571.i632, label %if.then573.i640, label %if.end618.i673

if.then573.i640:                                  ; preds = %for.end568.i633
  store i32 0, i32* %digit.i64, align 4
  %898 = load i32* %digit.i64, align 4
  %899 = load i32* %k.i57, align 4
  %idxprom574.i634 = sext i32 %899 to i64
  %arrayidx575.i635 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom574.i634
  store i32 %898, i32* %arrayidx575.i635, align 4
  %900 = load i32* %k.i57, align 4
  %sub576.i636 = sub nsw i32 %900, 1
  store i32 %sub576.i636, i32* %kbk.i67, align 4
  %901 = load i32* %kbk.i67, align 4
  %idxprom577.i637 = sext i32 %901 to i64
  %arrayidx578.i638 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom577.i637
  %902 = load i32* %arrayidx578.i638, align 4
  %inc579.i639 = add i32 %902, 1
  store i32 %inc579.i639, i32* %arrayidx578.i638, align 4
  br label %while.cond580.i644

while.cond580.i644:                               ; preds = %while.body585.i651, %if.then573.i640
  %903 = load i32* %kbk.i67, align 4
  %idxprom581.i641 = sext i32 %903 to i64
  %arrayidx582.i642 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom581.i641
  %904 = load i32* %arrayidx582.i642, align 4
  %cmp583.i643 = icmp eq i32 %904, 1000000000
  br i1 %cmp583.i643, label %while.body585.i651, label %while.end592.i653

while.body585.i651:                               ; preds = %while.cond580.i644
  %905 = load i32* %kbk.i67, align 4
  %idxprom586.i645 = sext i32 %905 to i64
  %arrayidx587.i646 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom586.i645
  store i32 0, i32* %arrayidx587.i646, align 4
  %906 = load i32* %k.i57, align 4
  %sub588.i647 = sub nsw i32 %906, 1
  store i32 %sub588.i647, i32* %kbk.i67, align 4
  %907 = load i32* %kbk.i67, align 4
  %idxprom589.i648 = sext i32 %907 to i64
  %arrayidx590.i649 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom589.i648
  %908 = load i32* %arrayidx590.i649, align 4
  %inc591.i650 = add i32 %908, 1
  store i32 %inc591.i650, i32* %arrayidx590.i649, align 4
  br label %while.cond580.i644

while.end592.i653:                                ; preds = %while.cond580.i644
  %909 = load i32* %kmx.i58, align 4
  %cmp593.i652 = icmp slt i32 %909, 0
  br i1 %cmp593.i652, label %if.then595.i656, label %if.end617.i672

if.then595.i656:                                  ; preds = %while.end592.i653
  %910 = load i32* %firstdigit.i59, align 4
  %sub596.i654 = sub nsw i32 10, %910
  store i32 %sub596.i654, i32* %pose.i60, align 4
  %911 = load i32* %pose.i60, align 4
  %cmp597.i655 = icmp sge i32 %911, 9
  br i1 %cmp597.i655, label %if.then599.i658, label %if.end601.i659

if.then599.i658:                                  ; preds = %if.then595.i656
  %912 = load i32* %pose.i60, align 4
  %sub600.i657 = sub nsw i32 %912, 9
  store i32 %sub600.i657, i32* %pose.i60, align 4
  br label %if.end601.i659

if.end601.i659:                                   ; preds = %if.then599.i658, %if.then595.i656
  store i32 1, i32* %digit.i64, align 4
  store i32 0, i32* %i.i55, align 4
  br label %for.cond602.i661

for.cond602.i661:                                 ; preds = %for.body605.i663, %if.end601.i659
  %913 = load i32* %i.i55, align 4
  %914 = load i32* %pose.i60, align 4
  %cmp603.i660 = icmp slt i32 %913, %914
  br i1 %cmp603.i660, label %for.body605.i663, label %for.end609.i668

for.body605.i663:                                 ; preds = %for.cond602.i661
  %915 = load i32* %digit.i64, align 4
  %mul606.i662 = mul i32 %915, 10
  store i32 %mul606.i662, i32* %digit.i64, align 4
  %916 = load i32* %i.i55, align 4
  %inc608.i664 = add nsw i32 %916, 1
  store i32 %inc608.i664, i32* %i.i55, align 4
  br label %for.cond602.i661

for.end609.i668:                                  ; preds = %for.cond602.i661
  %917 = load i32* %kbk.i67, align 4
  %idxprom610.i665 = sext i32 %917 to i64
  %arrayidx611.i666 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom610.i665
  %918 = load i32* %arrayidx611.i666, align 4
  %919 = load i32* %digit.i64, align 4
  %cmp612.i667 = icmp eq i32 %918, %919
  br i1 %cmp612.i667, label %if.then614.i670, label %if.end616.i671

if.then614.i670:                                  ; preds = %for.end609.i668
  %920 = load i32* %firstdigit.i59, align 4
  %dec615.i669 = add nsw i32 %920, -1
  store i32 %dec615.i669, i32* %firstdigit.i59, align 4
  br label %if.end616.i671

if.end616.i671:                                   ; preds = %if.then614.i670, %for.end609.i668
  br label %if.end617.i672

if.end617.i672:                                   ; preds = %if.end616.i671, %while.end592.i653
  br label %if.end618.i673

if.end618.i673:                                   ; preds = %if.end617.i672, %for.end568.i633
  br label %if.end619.i674

if.end619.i674:                                   ; preds = %if.end618.i673, %if.end558.i623
  br label %if.end620.i676

if.end620.i676:                                   ; preds = %if.end619.i674, %land.lhs.true395.i478, %if.end392.i476
  %arrayidx621.i675 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 0
  %921 = load i32* %arrayidx621.i675, align 4
  store i32 %921, i32* %k.i57, align 4
  store i32 1, i32* %digit.i64, align 4
  store i32 0, i32* %i.i55, align 4
  br label %for.cond622.i678

for.cond622.i678:                                 ; preds = %if.end629.i683, %if.end620.i676
  %922 = load i32* %i.i55, align 4
  %cmp623.i677 = icmp slt i32 %922, 9
  br i1 %cmp623.i677, label %for.body625.i680, label %for.end633.i687

for.body625.i680:                                 ; preds = %for.cond622.i678
  %923 = load i32* %k.i57, align 4
  %924 = load i32* %digit.i64, align 4
  %cmp626.i679 = icmp uge i32 %923, %924
  br i1 %cmp626.i679, label %if.then628.i681, label %if.end629.i683

if.then628.i681:                                  ; preds = %for.body625.i680
  %925 = load i32* %i.i55, align 4
  store i32 %925, i32* %pose.i60, align 4
  br label %if.end629.i683

if.end629.i683:                                   ; preds = %if.then628.i681, %for.body625.i680
  %926 = load i32* %digit.i64, align 4
  %mul630.i682 = mul i32 %926, 10
  store i32 %mul630.i682, i32* %digit.i64, align 4
  %927 = load i32* %i.i55, align 4
  %inc632.i684 = add nsw i32 %927, 1
  store i32 %inc632.i684, i32* %i.i55, align 4
  br label %for.cond622.i678

for.end633.i687:                                  ; preds = %for.cond622.i678
  store i32 1, i32* %m.i68, align 4
  %928 = load i32* %ldw.addr.i46, align 4
  %and634.i685 = and i32 %928, 1
  store i32 %and634.i685, i32* %space.i71, align 4
  %929 = load i32* %kmx.i58, align 4
  %cmp635.i686 = icmp sge i32 %929, 0
  br i1 %cmp635.i686, label %if.then637.i693, label %if.else655.i711

if.then637.i693:                                  ; preds = %for.end633.i687
  %930 = load i32* %kmx.i58, align 4
  %mul638.i688 = mul nsw i32 %930, 9
  %931 = load i32* %pose.i60, align 4
  %add639.i689 = add nsw i32 %mul638.i688, %931
  store i32 %add639.i689, i32* %iexp.i47, align 4
  %932 = load i32* %iexp.i47, align 4
  %933 = load i32* %w.addr.i44, align 4
  %cmp640.i690 = icmp sge i32 %932, %933
  %conv641.i691 = zext i1 %cmp640.i690 to i32
  store i32 %conv641.i691, i32* %usee.i63, align 4
  %934 = load i32* %usee.i63, align 4
  %tobool642.i692 = icmp ne i32 %934, 0
  br i1 %tobool642.i692, label %if.end645.i698, label %if.then643.i696

if.then643.i696:                                  ; preds = %if.then637.i693
  %935 = load i8** %ffmt.addr.i43, align 8
  store i8 32, i8* %935, align 1
  %936 = load i32* %space.i71, align 4
  %937 = load i8** %ffmt.addr.i43, align 8
  %idx.ext.i694 = sext i32 %936 to i64
  %add.ptr.i695 = getelementptr inbounds i8* %937, i64 %idx.ext.i694
  store i8* %add.ptr.i695, i8** %ffmt.addr.i43, align 8
  store i32 0, i32* %m.i68, align 4
  br label %if.end645.i698

if.end645.i698:                                   ; preds = %if.then643.i696, %if.then637.i693
  %938 = load i32* %sgn.i70, align 4
  %tobool646.i697 = icmp ne i32 %938, 0
  br i1 %tobool646.i697, label %if.then647.i699, label %if.else649.i700

if.then647.i699:                                  ; preds = %if.end645.i698
  %939 = load i8** %ffmt.addr.i43, align 8
  store i8 45, i8* %939, align 1
  br label %if.end651.i704

if.else649.i700:                                  ; preds = %if.end645.i698
  %940 = load i8** %ffmt.addr.i43, align 8
  store i8 32, i8* %940, align 1
  br label %if.end651.i704

if.end651.i704:                                   ; preds = %if.else649.i700, %if.then647.i699
  %941 = load i32* %space.i71, align 4
  %942 = load i32* %sgn.i70, align 4
  %or652.i701 = or i32 %941, %942
  %943 = load i8** %ffmt.addr.i43, align 8
  %idx.ext653.i702 = sext i32 %or652.i701 to i64
  %add.ptr654.i703 = getelementptr inbounds i8* %943, i64 %idx.ext653.i702
  store i8* %add.ptr654.i703, i8** %ffmt.addr.i43, align 8
  br label %if.end675.i723

if.else655.i711:                                  ; preds = %for.end633.i687
  %944 = load i32* %firstfwd.i61, align 4
  %mul656.i705 = mul nsw i32 %944, 9
  %945 = load i32* %firstdigit.i59, align 4
  %add657.i706 = add nsw i32 %mul656.i705, %945
  %sub658.i707 = sub nsw i32 0, %add657.i706
  store i32 %sub658.i707, i32* %iexp.i47, align 4
  %946 = load i32* %iexp.i47, align 4
  %cmp659.i708 = icmp slt i32 %946, -1
  %conv660.i709 = zext i1 %cmp659.i708 to i32
  store i32 %conv660.i709, i32* %usee.i63, align 4
  %947 = load i32* %sgn.i70, align 4
  %tobool661.i710 = icmp ne i32 %947, 0
  br i1 %tobool661.i710, label %if.then662.i712, label %if.else664.i713

if.then662.i712:                                  ; preds = %if.else655.i711
  %948 = load i8** %ffmt.addr.i43, align 8
  store i8 45, i8* %948, align 1
  br label %if.end666.i718

if.else664.i713:                                  ; preds = %if.else655.i711
  %949 = load i8** %ffmt.addr.i43, align 8
  store i8 32, i8* %949, align 1
  br label %if.end666.i718

if.end666.i718:                                   ; preds = %if.else664.i713, %if.then662.i712
  %950 = load i32* %space.i71, align 4
  %951 = load i32* %sgn.i70, align 4
  %or667.i714 = or i32 %950, %951
  %952 = load i8** %ffmt.addr.i43, align 8
  %idx.ext668.i715 = sext i32 %or667.i714 to i64
  %add.ptr669.i716 = getelementptr inbounds i8* %952, i64 %idx.ext668.i715
  store i8* %add.ptr669.i716, i8** %ffmt.addr.i43, align 8
  %953 = load i32* %usee.i63, align 4
  %tobool670.i717 = icmp ne i32 %953, 0
  br i1 %tobool670.i717, label %if.end674.i721, label %if.then671.i720

if.then671.i720:                                  ; preds = %if.end666.i718
  %954 = load i8** %ffmt.addr.i43, align 8
  store i8 48, i8* %954, align 1
  %955 = load i8** %ffmt.addr.i43, align 8
  %arrayidx673.i719 = getelementptr inbounds i8* %955, i64 1
  store i8 46, i8* %arrayidx673.i719, align 1
  store i32 2, i32* %m.i68, align 4
  br label %if.end674.i721

if.end674.i721:                                   ; preds = %if.then671.i720, %if.end666.i718
  br label %if.end675.i723

if.end675.i723:                                   ; preds = %if.end674.i721, %if.end651.i704
  %956 = load i32* %usee.i63, align 4
  %tobool676.i722 = icmp ne i32 %956, 0
  br i1 %tobool676.i722, label %if.then677.i725, label %if.end679.i729

if.then677.i725:                                  ; preds = %if.end675.i723
  %957 = load i32* %w.addr.i44, align 4
  %inc678.i724 = add nsw i32 %957, 1
  store i32 %inc678.i724, i32* %w.addr.i44, align 4
  br label %if.end679.i729

if.end679.i729:                                   ; preds = %if.then677.i725, %if.end675.i723
  store i32 0, i32* %kbk.i67, align 4
  %958 = load i32* %kbk.i67, align 4
  %inc680.i726 = add nsw i32 %958, 1
  store i32 %inc680.i726, i32* %kbk.i67, align 4
  %idxprom681.i727 = sext i32 %958 to i64
  %arrayidx682.i728 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom681.i727
  %959 = load i32* %arrayidx682.i728, align 4
  store i32 %959, i32* %k.i57, align 4
  %960 = load i32* %pose.i60, align 4
  store i32 %960, i32* %i.i55, align 4
  br label %for.cond683.i731

for.cond683.i731:                                 ; preds = %if.end698.i743, %if.end679.i729
  %961 = load i32* %i.i55, align 4
  %cmp684.i730 = icmp sge i32 %961, 0
  br i1 %cmp684.i730, label %for.body686.i736, label %for.end701.i748

for.body686.i736:                                 ; preds = %for.cond683.i731
  %962 = load i32* %k.i57, align 4
  %div687.i732 = sdiv i32 %962, 10
  store i32 %div687.i732, i32* %j.i56, align 4
  %963 = load i32* %k.i57, align 4
  %964 = load i32* %j.i56, align 4
  %mul688.i733 = mul nsw i32 %964, 10
  %sub689.i734 = sub nsw i32 %963, %mul688.i733
  store i32 %sub689.i734, i32* %k.i57, align 4
  %965 = load i32* %i.i55, align 4
  %966 = load i32* %w.addr.i44, align 4
  %cmp690.i735 = icmp slt i32 %965, %966
  br i1 %cmp690.i735, label %if.then692.i742, label %if.end698.i743

if.then692.i742:                                  ; preds = %for.body686.i736
  %967 = load i32* %k.i57, align 4
  %add693.i737 = add nsw i32 48, %967
  %conv694.i738 = trunc i32 %add693.i737 to i8
  %968 = load i32* %i.i55, align 4
  %969 = load i32* %m.i68, align 4
  %add695.i739 = add nsw i32 %968, %969
  %idxprom696.i740 = sext i32 %add695.i739 to i64
  %970 = load i8** %ffmt.addr.i43, align 8
  %arrayidx697.i741 = getelementptr inbounds i8* %970, i64 %idxprom696.i740
  store i8 %conv694.i738, i8* %arrayidx697.i741, align 1
  br label %if.end698.i743

if.end698.i743:                                   ; preds = %if.then692.i742, %for.body686.i736
  %971 = load i32* %j.i56, align 4
  store i32 %971, i32* %k.i57, align 4
  %972 = load i32* %i.i55, align 4
  %dec700.i744 = add nsw i32 %972, -1
  store i32 %dec700.i744, i32* %i.i55, align 4
  br label %for.cond683.i731

for.end701.i748:                                  ; preds = %for.cond683.i731
  %973 = load i32* %pose.i60, align 4
  %add702.i745 = add nsw i32 %973, 1
  store i32 %add702.i745, i32* %ii.i62, align 4
  %974 = load i32* %kbk.i67, align 4
  %975 = load i32* %kmx.i58, align 4
  %add703.i746 = add nsw i32 %975, 1
  %cmp704.i747 = icmp eq i32 %974, %add703.i746
  br i1 %cmp704.i747, label %if.then706.i753, label %if.end723.i764

if.then706.i753:                                  ; preds = %for.end701.i748
  %976 = load i32* %ii.i62, align 4
  %977 = load i32* %m.i68, align 4
  %add707.i749 = add nsw i32 %976, %977
  %idxprom708.i750 = sext i32 %add707.i749 to i64
  %978 = load i8** %ffmt.addr.i43, align 8
  %arrayidx709.i751 = getelementptr inbounds i8* %978, i64 %idxprom708.i750
  store i8 46, i8* %arrayidx709.i751, align 1
  %979 = load i32* %ii.i62, align 4
  %980 = load i32* %w.addr.i44, align 4
  %cmp710.i752 = icmp slt i32 %979, %980
  br i1 %cmp710.i752, label %if.then712.i755, label %if.end714.i757

if.then712.i755:                                  ; preds = %if.then706.i753
  %981 = load i32* %w.addr.i44, align 4
  %inc713.i754 = add nsw i32 %981, 1
  store i32 %inc713.i754, i32* %w.addr.i44, align 4
  br label %if.end714.i757

if.end714.i757:                                   ; preds = %if.then712.i755, %if.then706.i753
  %982 = load i32* %ii.i62, align 4
  %983 = load i32* %w.addr.i44, align 4
  %cmp715.i756 = icmp eq i32 %982, %983
  br i1 %cmp715.i756, label %land.lhs.true717.i759, label %if.end721.i763

land.lhs.true717.i759:                            ; preds = %if.end714.i757
  %984 = load i32* %usee.i63, align 4
  %tobool718.i758 = icmp ne i32 %984, 0
  br i1 %tobool718.i758, label %if.end721.i763, label %if.then719.i761

if.then719.i761:                                  ; preds = %land.lhs.true717.i759
  %985 = load i32* %w.addr.i44, align 4
  %inc720.i760 = add nsw i32 %985, 1
  store i32 %inc720.i760, i32* %w.addr.i44, align 4
  br label %if.end721.i763

if.end721.i763:                                   ; preds = %if.then719.i761, %land.lhs.true717.i759, %if.end714.i757
  %986 = load i32* %ii.i62, align 4
  %inc722.i762 = add nsw i32 %986, 1
  store i32 %inc722.i762, i32* %ii.i62, align 4
  br label %if.end723.i764

if.end723.i764:                                   ; preds = %if.end721.i763, %for.end701.i748
  br label %while.cond724.i766

while.cond724.i766:                               ; preds = %if.end772.i806, %if.end723.i764
  %987 = load i32* %ii.i62, align 4
  %988 = load i32* %w.addr.i44, align 4
  %cmp725.i765 = icmp slt i32 %987, %988
  br i1 %cmp725.i765, label %while.body727.i771, label %while.end773.i808

while.body727.i771:                               ; preds = %while.cond724.i766
  %989 = load i32* %kbk.i67, align 4
  %inc728.i767 = add nsw i32 %989, 1
  store i32 %inc728.i767, i32* %kbk.i67, align 4
  %idxprom729.i768 = sext i32 %989 to i64
  %arrayidx730.i769 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom729.i768
  %990 = load i32* %arrayidx730.i769, align 4
  store i32 %990, i32* %k.i57, align 4
  %991 = load i32* %ii.i62, align 4
  %add731.i770 = add nsw i32 8, %991
  store i32 %add731.i770, i32* %i.i55, align 4
  br label %for.cond732.i773

for.cond732.i773:                                 ; preds = %if.end747.i785, %while.body727.i771
  %992 = load i32* %i.i55, align 4
  %993 = load i32* %ii.i62, align 4
  %cmp733.i772 = icmp sge i32 %992, %993
  br i1 %cmp733.i772, label %for.body735.i778, label %for.end750.i790

for.body735.i778:                                 ; preds = %for.cond732.i773
  %994 = load i32* %k.i57, align 4
  %div736.i774 = sdiv i32 %994, 10
  store i32 %div736.i774, i32* %j.i56, align 4
  %995 = load i32* %k.i57, align 4
  %996 = load i32* %j.i56, align 4
  %mul737.i775 = mul nsw i32 %996, 10
  %sub738.i776 = sub nsw i32 %995, %mul737.i775
  store i32 %sub738.i776, i32* %k.i57, align 4
  %997 = load i32* %i.i55, align 4
  %998 = load i32* %w.addr.i44, align 4
  %cmp739.i777 = icmp slt i32 %997, %998
  br i1 %cmp739.i777, label %if.then741.i784, label %if.end747.i785

if.then741.i784:                                  ; preds = %for.body735.i778
  %999 = load i32* %k.i57, align 4
  %add742.i779 = add nsw i32 48, %999
  %conv743.i780 = trunc i32 %add742.i779 to i8
  %1000 = load i32* %i.i55, align 4
  %1001 = load i32* %m.i68, align 4
  %add744.i781 = add nsw i32 %1000, %1001
  %idxprom745.i782 = sext i32 %add744.i781 to i64
  %1002 = load i8** %ffmt.addr.i43, align 8
  %arrayidx746.i783 = getelementptr inbounds i8* %1002, i64 %idxprom745.i782
  store i8 %conv743.i780, i8* %arrayidx746.i783, align 1
  br label %if.end747.i785

if.end747.i785:                                   ; preds = %if.then741.i784, %for.body735.i778
  %1003 = load i32* %j.i56, align 4
  store i32 %1003, i32* %k.i57, align 4
  %1004 = load i32* %i.i55, align 4
  %dec749.i786 = add nsw i32 %1004, -1
  store i32 %dec749.i786, i32* %i.i55, align 4
  br label %for.cond732.i773

for.end750.i790:                                  ; preds = %for.cond732.i773
  %1005 = load i32* %ii.i62, align 4
  %add751.i787 = add nsw i32 %1005, 9
  store i32 %add751.i787, i32* %ii.i62, align 4
  %1006 = load i32* %kbk.i67, align 4
  %1007 = load i32* %kmx.i58, align 4
  %add752.i788 = add nsw i32 %1007, 1
  %cmp753.i789 = icmp eq i32 %1006, %add752.i788
  br i1 %cmp753.i789, label %if.then755.i795, label %if.end772.i806

if.then755.i795:                                  ; preds = %for.end750.i790
  %1008 = load i32* %ii.i62, align 4
  %1009 = load i32* %m.i68, align 4
  %add756.i791 = add nsw i32 %1008, %1009
  %idxprom757.i792 = sext i32 %add756.i791 to i64
  %1010 = load i8** %ffmt.addr.i43, align 8
  %arrayidx758.i793 = getelementptr inbounds i8* %1010, i64 %idxprom757.i792
  store i8 46, i8* %arrayidx758.i793, align 1
  %1011 = load i32* %ii.i62, align 4
  %1012 = load i32* %w.addr.i44, align 4
  %cmp759.i794 = icmp slt i32 %1011, %1012
  br i1 %cmp759.i794, label %if.then761.i797, label %if.end763.i799

if.then761.i797:                                  ; preds = %if.then755.i795
  %1013 = load i32* %w.addr.i44, align 4
  %inc762.i796 = add nsw i32 %1013, 1
  store i32 %inc762.i796, i32* %w.addr.i44, align 4
  br label %if.end763.i799

if.end763.i799:                                   ; preds = %if.then761.i797, %if.then755.i795
  %1014 = load i32* %ii.i62, align 4
  %1015 = load i32* %w.addr.i44, align 4
  %cmp764.i798 = icmp eq i32 %1014, %1015
  br i1 %cmp764.i798, label %land.lhs.true766.i801, label %if.end770.i805

land.lhs.true766.i801:                            ; preds = %if.end763.i799
  %1016 = load i32* %usee.i63, align 4
  %tobool767.i800 = icmp ne i32 %1016, 0
  br i1 %tobool767.i800, label %if.end770.i805, label %if.then768.i803

if.then768.i803:                                  ; preds = %land.lhs.true766.i801
  %1017 = load i32* %w.addr.i44, align 4
  %inc769.i802 = add nsw i32 %1017, 1
  store i32 %inc769.i802, i32* %w.addr.i44, align 4
  br label %if.end770.i805

if.end770.i805:                                   ; preds = %if.then768.i803, %land.lhs.true766.i801, %if.end763.i799
  %1018 = load i32* %ii.i62, align 4
  %inc771.i804 = add nsw i32 %1018, 1
  store i32 %inc771.i804, i32* %ii.i62, align 4
  br label %if.end772.i806

if.end772.i806:                                   ; preds = %if.end770.i805, %for.end750.i790
  br label %while.cond724.i766

while.end773.i808:                                ; preds = %while.cond724.i766
  %1019 = load i32* %usee.i63, align 4
  %tobool774.i807 = icmp ne i32 %1019, 0
  br i1 %tobool774.i807, label %if.then775.i815, label %if.else836.i869

if.then775.i815:                                  ; preds = %while.end773.i808
  %1020 = load i8** %ffmt.addr.i43, align 8
  %arrayidx776.i809 = getelementptr inbounds i8* %1020, i64 1
  %1021 = load i8* %arrayidx776.i809, align 1
  %1022 = load i8** %ffmt.addr.i43, align 8
  store i8 %1021, i8* %1022, align 1
  %1023 = load i8** %ffmt.addr.i43, align 8
  %arrayidx778.i810 = getelementptr inbounds i8* %1023, i64 1
  store i8 46, i8* %arrayidx778.i810, align 1
  %1024 = load i32* %w.addr.i44, align 4
  %add779.i811 = add nsw i32 %1024, 1
  %idxprom780.i812 = sext i32 %add779.i811 to i64
  %1025 = load i8** %ffmt.addr.i43, align 8
  %arrayidx781.i813 = getelementptr inbounds i8* %1025, i64 %idxprom780.i812
  store i8 69, i8* %arrayidx781.i813, align 1
  %1026 = load i32* %iexp.i47, align 4
  %cmp782.i814 = icmp sge i32 %1026, 0
  br i1 %cmp782.i814, label %if.then784.i819, label %if.else788.i824

if.then784.i819:                                  ; preds = %if.then775.i815
  %1027 = load i32* %w.addr.i44, align 4
  %add785.i816 = add nsw i32 %1027, 2
  %idxprom786.i817 = sext i32 %add785.i816 to i64
  %1028 = load i8** %ffmt.addr.i43, align 8
  %arrayidx787.i818 = getelementptr inbounds i8* %1028, i64 %idxprom786.i817
  store i8 43, i8* %arrayidx787.i818, align 1
  br label %if.end793.i827

if.else788.i824:                                  ; preds = %if.then775.i815
  %1029 = load i32* %w.addr.i44, align 4
  %add789.i820 = add nsw i32 %1029, 2
  %idxprom790.i821 = sext i32 %add789.i820 to i64
  %1030 = load i8** %ffmt.addr.i43, align 8
  %arrayidx791.i822 = getelementptr inbounds i8* %1030, i64 %idxprom790.i821
  store i8 45, i8* %arrayidx791.i822, align 1
  %1031 = load i32* %iexp.i47, align 4
  %sub792.i823 = sub nsw i32 0, %1031
  store i32 %sub792.i823, i32* %iexp.i47, align 4
  br label %if.end793.i827

if.end793.i827:                                   ; preds = %if.else788.i824, %if.then784.i819
  %1032 = load i32* %ldw.addr.i46, align 4
  %and794.i825 = and i32 %1032, 2
  %tobool795.i826 = icmp ne i32 %and794.i825, 0
  br i1 %tobool795.i826, label %if.then796.i831, label %if.else800.i843

if.then796.i831:                                  ; preds = %if.end793.i827
  %1033 = load i32* %w.addr.i44, align 4
  %add797.i828 = add nsw i32 %1033, 5
  %idxprom798.i829 = sext i32 %add797.i828 to i64
  %1034 = load i8** %ffmt.addr.i43, align 8
  %arrayidx799.i830 = getelementptr inbounds i8* %1034, i64 %idxprom798.i829
  store i8 0, i8* %arrayidx799.i830, align 1
  %1035 = load i32* %iexp.i47, align 4
  store i32 %1035, i32* %j.i56, align 4
  br label %if.end812.i867

if.else800.i843:                                  ; preds = %if.end793.i827
  %1036 = load i32* %iexp.i47, align 4
  store i32 %1036, i32* %k.i57, align 4
  %1037 = load i32* %w.addr.i44, align 4
  %add801.i832 = add nsw i32 %1037, 6
  %idxprom802.i833 = sext i32 %add801.i832 to i64
  %1038 = load i8** %ffmt.addr.i43, align 8
  %arrayidx803.i834 = getelementptr inbounds i8* %1038, i64 %idxprom802.i833
  store i8 0, i8* %arrayidx803.i834, align 1
  %1039 = load i32* %k.i57, align 4
  %div804.i835 = sdiv i32 %1039, 10
  store i32 %div804.i835, i32* %j.i56, align 4
  %1040 = load i32* %k.i57, align 4
  %1041 = load i32* %j.i56, align 4
  %mul805.i836 = mul nsw i32 %1041, 10
  %sub806.i837 = sub nsw i32 %1040, %mul805.i836
  store i32 %sub806.i837, i32* %k.i57, align 4
  %1042 = load i32* %k.i57, align 4
  %add807.i838 = add nsw i32 48, %1042
  %conv808.i839 = trunc i32 %add807.i838 to i8
  %1043 = load i32* %w.addr.i44, align 4
  %add809.i840 = add nsw i32 %1043, 5
  %idxprom810.i841 = sext i32 %add809.i840 to i64
  %1044 = load i8** %ffmt.addr.i43, align 8
  %arrayidx811.i842 = getelementptr inbounds i8* %1044, i64 %idxprom810.i841
  store i8 %conv808.i839, i8* %arrayidx811.i842, align 1
  br label %if.end812.i867

if.end812.i867:                                   ; preds = %if.else800.i843, %if.then796.i831
  %1045 = load i32* %j.i56, align 4
  %div813.i844 = sdiv i32 %1045, 10
  store i32 %div813.i844, i32* %k.i57, align 4
  %1046 = load i32* %j.i56, align 4
  %1047 = load i32* %k.i57, align 4
  %mul814.i845 = mul nsw i32 %1047, 10
  %sub815.i846 = sub nsw i32 %1046, %mul814.i845
  store i32 %sub815.i846, i32* %j.i56, align 4
  %1048 = load i32* %j.i56, align 4
  %add816.i847 = add nsw i32 48, %1048
  %conv817.i848 = trunc i32 %add816.i847 to i8
  %1049 = load i32* %w.addr.i44, align 4
  %add818.i849 = add nsw i32 %1049, 4
  %idxprom819.i850 = sext i32 %add818.i849 to i64
  %1050 = load i8** %ffmt.addr.i43, align 8
  %arrayidx820.i851 = getelementptr inbounds i8* %1050, i64 %idxprom819.i850
  store i8 %conv817.i848, i8* %arrayidx820.i851, align 1
  %1051 = load i32* %k.i57, align 4
  %div821.i852 = sdiv i32 %1051, 10
  store i32 %div821.i852, i32* %j.i56, align 4
  %1052 = load i32* %k.i57, align 4
  %1053 = load i32* %j.i56, align 4
  %mul822.i853 = mul nsw i32 %1053, 10
  %sub823.i854 = sub nsw i32 %1052, %mul822.i853
  store i32 %sub823.i854, i32* %k.i57, align 4
  %1054 = load i32* %k.i57, align 4
  %add824.i855 = add nsw i32 48, %1054
  %conv825.i856 = trunc i32 %add824.i855 to i8
  %1055 = load i32* %w.addr.i44, align 4
  %add826.i857 = add nsw i32 %1055, 3
  %idxprom827.i858 = sext i32 %add826.i857 to i64
  %1056 = load i8** %ffmt.addr.i43, align 8
  %arrayidx828.i859 = getelementptr inbounds i8* %1056, i64 %idxprom827.i858
  store i8 %conv825.i856, i8* %arrayidx828.i859, align 1
  %1057 = load i32* %w.addr.i44, align 4
  %add829.i860 = add nsw i32 %1057, 6
  %1058 = load i32* %space.i71, align 4
  %1059 = load i32* %sgn.i70, align 4
  %or830.i861 = or i32 %1058, %1059
  %add831.i862 = add nsw i32 %add829.i860, %or830.i861
  %1060 = load i32* %ldw.addr.i46, align 4
  %and832.i863 = and i32 %1060, 2
  %cmp833.i864 = icmp eq i32 %and832.i863, 2
  %conv834.i865 = zext i1 %cmp833.i864 to i32
  %sub835.i866 = sub nsw i32 %add831.i862, %conv834.i865
  store i32 %sub835.i866, i32* %retval.i41
  br label %__pgf90io_sc_fp_ldw.exit883

if.else836.i869:                                  ; preds = %while.end773.i808
  %1061 = load i32* %iexp.i47, align 4
  %cmp837.i868 = icmp slt i32 %1061, 0
  br i1 %cmp837.i868, label %if.then839.i876, label %if.else846.i882

if.then839.i876:                                  ; preds = %if.else836.i869
  %1062 = load i32* %w.addr.i44, align 4
  %add840.i870 = add nsw i32 %1062, 2
  %idxprom841.i871 = sext i32 %add840.i870 to i64
  %1063 = load i8** %ffmt.addr.i43, align 8
  %arrayidx842.i872 = getelementptr inbounds i8* %1063, i64 %idxprom841.i871
  store i8 0, i8* %arrayidx842.i872, align 1
  %1064 = load i32* %w.addr.i44, align 4
  %add843.i873 = add nsw i32 %1064, 2
  %1065 = load i32* %space.i71, align 4
  %1066 = load i32* %sgn.i70, align 4
  %or844.i874 = or i32 %1065, %1066
  %add845.i875 = add nsw i32 %add843.i873, %or844.i874
  store i32 %add845.i875, i32* %retval.i41
  br label %__pgf90io_sc_fp_ldw.exit883

if.else846.i882:                                  ; preds = %if.else836.i869
  %1067 = load i32* %w.addr.i44, align 4
  %idxprom847.i877 = sext i32 %1067 to i64
  %1068 = load i8** %ffmt.addr.i43, align 8
  %arrayidx848.i878 = getelementptr inbounds i8* %1068, i64 %idxprom847.i877
  store i8 0, i8* %arrayidx848.i878, align 1
  %1069 = load i32* %w.addr.i44, align 4
  %1070 = load i32* %space.i71, align 4
  %1071 = load i32* %sgn.i70, align 4
  %or849.i879 = or i32 %1070, %1071
  %add850.i880 = add nsw i32 %1069, %or849.i879
  %1072 = load i32* %space.i71, align 4
  %add851.i881 = add nsw i32 %add850.i880, %1072
  store i32 %add851.i881, i32* %retval.i41
  br label %__pgf90io_sc_fp_ldw.exit883

__pgf90io_sc_fp_ldw.exit883:                      ; preds = %if.else846.i882, %if.then839.i876, %if.end812.i867, %for.end79.i183, %if.end47.i153
  %1073 = load i32* %retval.i41
  store i32 %1073, i32* %len, align 4
  %1074 = load i32* %len, align 4
  %1075 = load i32* %j, align 4
  %add32 = add nsw i32 %1075, %1074
  store i32 %add32, i32* %j, align 4
  %1076 = load i32* %j, align 4
  %inc33 = add nsw i32 %1076, 1
  store i32 %inc33, i32* %j, align 4
  %idxprom34 = sext i32 %1076 to i64
  %1077 = load i8** %p.addr, align 8
  %arrayidx35 = getelementptr inbounds i8* %1077, i64 %idxprom34
  store i8 41, i8* %arrayidx35, align 1
  %1078 = load i32* %j, align 4
  %inc36 = add nsw i32 %1078, 1
  store i32 %inc36, i32* %j, align 4
  %idxprom37 = sext i32 %1078 to i64
  %1079 = load i8** %p.addr, align 8
  %arrayidx38 = getelementptr inbounds i8* %1079, i64 %idxprom37
  store i8 32, i8* %arrayidx38, align 1
  %1080 = load i32* %j, align 4
  %conv39 = trunc i32 %1080 to i8
  %1081 = load i8** %p.addr, align 8
  %arrayidx40 = getelementptr inbounds i8* %1081, i64 0
  store i8 %conv39, i8* %arrayidx40, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_cf_ldw(float %r, float %i, i32 %ftype, i8* %p) nounwind alwaysinline {
entry:
  %retval.i43 = alloca i32, align 4
  %x.addr.i44 = alloca double, align 8
  %ffmt.addr.i45 = alloca i8*, align 8
  %w.addr.i46 = alloca i32, align 4
  %d.addr.i47 = alloca i32, align 4
  %ldw.addr.i48 = alloca i32, align 4
  %iexp.i49 = alloca i32, align 4
  %iwd0.i50 = alloca i32, align 4
  %iwdm1.i51 = alloca i32, align 4
  %iwdm2.i52 = alloca i32, align 4
  %icarr.i53 = alloca i32, align 4
  %iexta.i55 = alloca i32*, align 8
  %iextc.i56 = alloca i32*, align 8
  %i.i57 = alloca i32, align 4
  %j.i58 = alloca i32, align 4
  %k.i59 = alloca i32, align 4
  %kmx.i60 = alloca i32, align 4
  %firstdigit.i61 = alloca i32, align 4
  %pose.i62 = alloca i32, align 4
  %firstfwd.i63 = alloca i32, align 4
  %ii.i64 = alloca i32, align 4
  %usee.i65 = alloca i32, align 4
  %digit.i66 = alloca i32, align 4
  %ndigits.i67 = alloca i32, align 4
  %prdigits.i68 = alloca i32, align 4
  %kbk.i69 = alloca i32, align 4
  %m.i70 = alloca i32, align 4
  %lw.i71 = alloca i32, align 4
  %sgn.i72 = alloca i32, align 4
  %space.i73 = alloca i32, align 4
  %lb0.i74 = alloca i64, align 8
  %lb1.i75 = alloca i64, align 8
  %ibt0.i76 = alloca i32, align 4
  %c.i77 = alloca i32, align 4
  %rndval.i78 = alloca i32, align 4
  %sticky.i79 = alloca i32, align 4
  %rndup.i80 = alloca i32, align 4
  %loc.i81 = alloca i32, align 4
  %keepon.i82 = alloca i32, align 4
  %roundcarry.i83 = alloca i32, align 4
  %sh1.i84 = alloca i32, align 4
  %sh3.i85 = alloca i32, align 4
  %savecarry.i86 = alloca i32, align 4
  %savek.i87 = alloca i32, align 4
  %ix.i88 = alloca i32, align 4
  %ixa.i89 = alloca i32, align 4
  %ixb.i90 = alloca i32, align 4
  %ixc.i91 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %x.addr.i = alloca double, align 8
  %ffmt.addr.i = alloca i8*, align 8
  %w.addr.i = alloca i32, align 4
  %d.addr.i = alloca i32, align 4
  %ldw.addr.i = alloca i32, align 4
  %iexp.i = alloca i32, align 4
  %iwd0.i = alloca i32, align 4
  %iwdm1.i = alloca i32, align 4
  %iwdm2.i = alloca i32, align 4
  %icarr.i = alloca i32, align 4
  %iextb.i = alloca [104 x i32], align 4
  %iexta.i = alloca i32*, align 8
  %iextc.i = alloca i32*, align 8
  %i.i = alloca i32, align 4
  %j.i = alloca i32, align 4
  %k.i = alloca i32, align 4
  %kmx.i = alloca i32, align 4
  %firstdigit.i = alloca i32, align 4
  %pose.i = alloca i32, align 4
  %firstfwd.i = alloca i32, align 4
  %ii.i = alloca i32, align 4
  %usee.i = alloca i32, align 4
  %digit.i = alloca i32, align 4
  %ndigits.i = alloca i32, align 4
  %prdigits.i = alloca i32, align 4
  %kbk.i = alloca i32, align 4
  %m.i = alloca i32, align 4
  %lw.i = alloca i32, align 4
  %sgn.i = alloca i32, align 4
  %space.i = alloca i32, align 4
  %lb0.i = alloca i64, align 8
  %lb1.i = alloca i64, align 8
  %ibt0.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %rndval.i = alloca i32, align 4
  %sticky.i = alloca i32, align 4
  %rndup.i = alloca i32, align 4
  %loc.i = alloca i32, align 4
  %keepon.i = alloca i32, align 4
  %roundcarry.i = alloca i32, align 4
  %sh1.i = alloca i32, align 4
  %sh3.i = alloca i32, align 4
  %savecarry.i = alloca i32, align 4
  %savek.i = alloca i32, align 4
  %ix.i = alloca i32, align 4
  %ixa.i = alloca i32, align 4
  %ixb.i = alloca i32, align 4
  %ixc.i = alloca i32, align 4
  %r.addr = alloca float, align 4
  %i.addr = alloca float, align 4
  %ftype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store float %r, float* %r.addr, align 4
  store float %i, float* %i.addr, align 4
  store i32 %ftype, i32* %ftype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %j, align 4
  %add = add nsw i32 %2, 29
  %cmp = icmp sge i32 %add, 83
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %3, i64 84
  %4 = load i8* %arrayidx2, align 1
  %conv3 = sext i8 %4 to i32
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32* %j, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %6, i64 %idxprom
  store i8 10, i8* %arrayidx4, align 1
  %7 = load i32* %j, align 4
  %add5 = add nsw i32 %7, 1
  %idxprom6 = sext i32 %add5 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx7 = getelementptr inbounds i8* %8, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %9 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %9, i64 1
  call  void @__pgi_print_string(i8* %arrayidx8)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32* %k, align 4
  %cmp9 = icmp slt i32 %10, 83
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %k, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load i8** %p.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %12, i64 %idxprom11
  store i8 32, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32* %k, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %14 = load i32* %j, align 4
  %conv13 = trunc i32 %14 to i8
  %15 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %15, i64 0
  store i8 %conv13, i8* %arrayidx14, align 1
  %16 = load i8** %p.addr, align 8
  %arrayidx15 = getelementptr inbounds i8* %16, i64 83
  store i8 0, i8* %arrayidx15, align 1
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 84
  store i8 0, i8* %arrayidx16, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %18 = load i32* %j, align 4
  %cmp17 = icmp ne i32 %18, 2
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end
  %19 = load i32* %j, align 4
  %inc20 = add nsw i32 %19, 1
  store i32 %inc20, i32* %j, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end
  %20 = load i32* %j, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %j, align 4
  %idxprom23 = sext i32 %20 to i64
  %21 = load i8** %p.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %21, i64 %idxprom23
  store i8 40, i8* %arrayidx24, align 1
  %22 = load float* %r.addr, align 4
  %conv25 = fpext float %22 to double
  %23 = load i8** %p.addr, align 8
  %24 = load i32* %j, align 4
  %idx.ext = sext i32 %24 to i64
  %add.ptr = getelementptr inbounds i8* %23, i64 %idx.ext
  store double %conv25, double* %x.addr.i, align 8
  store i8* %add.ptr, i8** %ffmt.addr.i, align 8
  store i32 7, i32* %w.addr.i, align 4
  store i32 0, i32* %d.addr.i, align 4
  store i32 2, i32* %ldw.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.end21
  %25 = load i32* %i.i, align 4
  %cmp.i = icmp slt i32 %25, 104
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %26 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %26 to i64
  %arrayidx.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom.i
  store i32 0, i32* %arrayidx.i, align 4
  %27 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %27, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %arrayidx1.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 70
  store i32* %arrayidx1.i, i32** %iexta.i, align 8
  %arrayidx2.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 35
  store i32* %arrayidx2.i, i32** %iextc.i, align 8
  %28 = bitcast double* %x.addr.i to i64*
  %29 = load i64* %28, align 8
  store i64 %29, i64* %lb0.i, align 8
  %30 = load i64* %lb0.i, align 8
  %and.i = and i64 %30, 9218868437227405312
  %shr.i = lshr i64 %and.i, 52
  %sub.i = sub i64 %shr.i, 1023
  %conv.i = trunc i64 %sub.i to i32
  store i32 %conv.i, i32* %iexp.i, align 4
  %31 = load i64* %lb0.i, align 8
  %and3.i = and i64 %31, -9223372036854775808
  %shr4.i = lshr i64 %and3.i, 63
  %conv5.i = trunc i64 %shr4.i to i32
  store i32 %conv5.i, i32* %sgn.i, align 4
  %32 = load i64* %lb0.i, align 8
  %and6.i = and i64 %32, 4503599627370495
  store i64 %and6.i, i64* %lb1.i, align 8
  %33 = load i32* %iexp.i, align 4
  %cmp7.i = icmp eq i32 %33, 1024
  br i1 %cmp7.i, label %if.then.i, label %if.end52.i

if.then.i:                                        ; preds = %for.end.i
  %34 = load i32* %ldw.addr.i, align 4
  %and9.i = and i32 %34, 4
  %tobool.i = icmp ne i32 %and9.i, 0
  br i1 %tobool.i, label %if.then10.i, label %if.end.i

if.then10.i:                                      ; preds = %if.then.i
  %35 = load i32* %w.addr.i, align 4
  %inc11.i = add nsw i32 %35, 1
  store i32 %inc11.i, i32* %w.addr.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then10.i, %if.then.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond12.i

for.cond12.i:                                     ; preds = %for.body15.i, %if.end.i
  %36 = load i32* %i.i, align 4
  %37 = load i32* %w.addr.i, align 4
  %add.i = add nsw i32 %37, 4
  %cmp13.i = icmp slt i32 %36, %add.i
  br i1 %cmp13.i, label %for.body15.i, label %for.end20.i

for.body15.i:                                     ; preds = %for.cond12.i
  %38 = load i32* %i.i, align 4
  %idxprom16.i = sext i32 %38 to i64
  %39 = load i8** %ffmt.addr.i, align 8
  %arrayidx17.i = getelementptr inbounds i8* %39, i64 %idxprom16.i
  store i8 32, i8* %arrayidx17.i, align 1
  %40 = load i32* %i.i, align 4
  %inc19.i = add nsw i32 %40, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond12.i

for.end20.i:                                      ; preds = %for.cond12.i
  %41 = load i64* %lb1.i, align 8
  %tobool21.i = icmp ne i64 %41, 0
  br i1 %tobool21.i, label %if.then22.i, label %if.else.i

if.then22.i:                                      ; preds = %for.end20.i
  %42 = load i32* %w.addr.i, align 4
  %add23.i = add nsw i32 %42, 4
  %idxprom24.i = sext i32 %add23.i to i64
  %43 = load i8** %ffmt.addr.i, align 8
  %arrayidx25.i = getelementptr inbounds i8* %43, i64 %idxprom24.i
  store i8 78, i8* %arrayidx25.i, align 1
  %44 = load i32* %w.addr.i, align 4
  %add26.i = add nsw i32 %44, 5
  %idxprom27.i = sext i32 %add26.i to i64
  %45 = load i8** %ffmt.addr.i, align 8
  %arrayidx28.i = getelementptr inbounds i8* %45, i64 %idxprom27.i
  store i8 97, i8* %arrayidx28.i, align 1
  %46 = load i32* %w.addr.i, align 4
  %add29.i = add nsw i32 %46, 6
  %idxprom30.i = sext i32 %add29.i to i64
  %47 = load i8** %ffmt.addr.i, align 8
  %arrayidx31.i = getelementptr inbounds i8* %47, i64 %idxprom30.i
  store i8 78, i8* %arrayidx31.i, align 1
  br label %if.end47.i

if.else.i:                                        ; preds = %for.end20.i
  %48 = load i32* %sgn.i, align 4
  %tobool32.i = icmp ne i32 %48, 0
  br i1 %tobool32.i, label %if.then33.i, label %if.end37.i

if.then33.i:                                      ; preds = %if.else.i
  %49 = load i32* %w.addr.i, align 4
  %add34.i = add nsw i32 %49, 3
  %idxprom35.i = sext i32 %add34.i to i64
  %50 = load i8** %ffmt.addr.i, align 8
  %arrayidx36.i = getelementptr inbounds i8* %50, i64 %idxprom35.i
  store i8 45, i8* %arrayidx36.i, align 1
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then33.i, %if.else.i
  %51 = load i32* %w.addr.i, align 4
  %add38.i = add nsw i32 %51, 4
  %idxprom39.i = sext i32 %add38.i to i64
  %52 = load i8** %ffmt.addr.i, align 8
  %arrayidx40.i = getelementptr inbounds i8* %52, i64 %idxprom39.i
  store i8 73, i8* %arrayidx40.i, align 1
  %53 = load i32* %w.addr.i, align 4
  %add41.i = add nsw i32 %53, 5
  %idxprom42.i = sext i32 %add41.i to i64
  %54 = load i8** %ffmt.addr.i, align 8
  %arrayidx43.i = getelementptr inbounds i8* %54, i64 %idxprom42.i
  store i8 110, i8* %arrayidx43.i, align 1
  %55 = load i32* %w.addr.i, align 4
  %add44.i = add nsw i32 %55, 6
  %idxprom45.i = sext i32 %add44.i to i64
  %56 = load i8** %ffmt.addr.i, align 8
  %arrayidx46.i = getelementptr inbounds i8* %56, i64 %idxprom45.i
  store i8 102, i8* %arrayidx46.i, align 1
  br label %if.end47.i

if.end47.i:                                       ; preds = %if.end37.i, %if.then22.i
  %57 = load i32* %w.addr.i, align 4
  %add48.i = add nsw i32 %57, 7
  %idxprom49.i = sext i32 %add48.i to i64
  %58 = load i8** %ffmt.addr.i, align 8
  %arrayidx50.i = getelementptr inbounds i8* %58, i64 %idxprom49.i
  store i8 0, i8* %arrayidx50.i, align 1
  %59 = load i32* %w.addr.i, align 4
  %add51.i = add nsw i32 %59, 7
  store i32 %add51.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end52.i:                                       ; preds = %for.end.i
  %60 = load i32* %iexp.i, align 4
  %add53.i = add nsw i32 %60, 1023
  %tobool54.i = icmp ne i32 %add53.i, 0
  br i1 %tobool54.i, label %if.then55.i, label %if.else56.i

if.then55.i:                                      ; preds = %if.end52.i
  %61 = load i64* %lb1.i, align 8
  %or.i = or i64 %61, 4503599627370496
  store i64 %or.i, i64* %lb1.i, align 8
  br label %if.end85.i

if.else56.i:                                      ; preds = %if.end52.i
  %62 = load i64* %lb1.i, align 8
  %tobool57.i = icmp ne i64 %62, 0
  br i1 %tobool57.i, label %if.then58.i, label %if.else60.i

if.then58.i:                                      ; preds = %if.else56.i
  %63 = load i32* %iexp.i, align 4
  %inc59.i = add nsw i32 %63, 1
  store i32 %inc59.i, i32* %iexp.i, align 4
  br label %if.end85.i

if.else60.i:                                      ; preds = %if.else56.i
  %64 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %64, align 1
  %65 = load i32* %sgn.i, align 4
  %tobool62.i = icmp ne i32 %65, 0
  br i1 %tobool62.i, label %if.then63.i, label %if.else65.i

if.then63.i:                                      ; preds = %if.else60.i
  %66 = load i8** %ffmt.addr.i, align 8
  %arrayidx64.i = getelementptr inbounds i8* %66, i64 1
  store i8 45, i8* %arrayidx64.i, align 1
  br label %if.end67.i

if.else65.i:                                      ; preds = %if.else60.i
  %67 = load i8** %ffmt.addr.i, align 8
  %arrayidx66.i = getelementptr inbounds i8* %67, i64 1
  store i8 32, i8* %arrayidx66.i, align 1
  br label %if.end67.i

if.end67.i:                                       ; preds = %if.else65.i, %if.then63.i
  %68 = load i8** %ffmt.addr.i, align 8
  %arrayidx68.i = getelementptr inbounds i8* %68, i64 2
  store i8 48, i8* %arrayidx68.i, align 1
  %69 = load i8** %ffmt.addr.i, align 8
  %arrayidx69.i = getelementptr inbounds i8* %69, i64 3
  store i8 46, i8* %arrayidx69.i, align 1
  store i32 4, i32* %i.i, align 4
  br label %for.cond70.i

for.cond70.i:                                     ; preds = %for.body74.i, %if.end67.i
  %70 = load i32* %i.i, align 4
  %71 = load i32* %w.addr.i, align 4
  %add71.i = add nsw i32 %71, 3
  %cmp72.i = icmp slt i32 %70, %add71.i
  br i1 %cmp72.i, label %for.body74.i, label %for.end79.i

for.body74.i:                                     ; preds = %for.cond70.i
  %72 = load i32* %i.i, align 4
  %idxprom75.i = sext i32 %72 to i64
  %73 = load i8** %ffmt.addr.i, align 8
  %arrayidx76.i = getelementptr inbounds i8* %73, i64 %idxprom75.i
  store i8 48, i8* %arrayidx76.i, align 1
  %74 = load i32* %i.i, align 4
  %inc78.i = add nsw i32 %74, 1
  store i32 %inc78.i, i32* %i.i, align 4
  br label %for.cond70.i

for.end79.i:                                      ; preds = %for.cond70.i
  %75 = load i32* %w.addr.i, align 4
  %add80.i = add nsw i32 %75, 3
  %idxprom81.i = sext i32 %add80.i to i64
  %76 = load i8** %ffmt.addr.i, align 8
  %arrayidx82.i = getelementptr inbounds i8* %76, i64 %idxprom81.i
  store i8 0, i8* %arrayidx82.i, align 1
  %77 = load i32* %w.addr.i, align 4
  %add83.i = add nsw i32 %77, 3
  store i32 %add83.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end85.i:                                       ; preds = %if.then58.i, %if.then55.i
  %78 = load i32* %iexp.i, align 4
  %cmp86.i = icmp sge i32 %78, 0
  br i1 %cmp86.i, label %if.then88.i, label %if.else90.i

if.then88.i:                                      ; preds = %if.end85.i
  %79 = load i32* %iexp.i, align 4
  %div.i = sdiv i32 %79, 32
  store i32 %div.i, i32* %iwd0.i, align 4
  %80 = load i32* %iexp.i, align 4
  %81 = load i32* %iwd0.i, align 4
  %mul.i = mul nsw i32 %81, 32
  %sub89.i = sub nsw i32 %80, %mul.i
  store i32 %sub89.i, i32* %ibt0.i, align 4
  br label %if.end97.i

if.else90.i:                                      ; preds = %if.end85.i
  %82 = load i32* %iexp.i, align 4
  %add91.i = add nsw i32 %82, 1
  %div92.i = sdiv i32 %add91.i, 32
  store i32 %div92.i, i32* %iwd0.i, align 4
  %83 = load i32* %iexp.i, align 4
  %add93.i = add nsw i32 %83, 32
  %84 = load i32* %iwd0.i, align 4
  %mul94.i = mul nsw i32 %84, 32
  %sub95.i = sub nsw i32 %add93.i, %mul94.i
  store i32 %sub95.i, i32* %ibt0.i, align 4
  %85 = load i32* %iwd0.i, align 4
  %add96.i = add nsw i32 %85, 33
  store i32 %add96.i, i32* %iwd0.i, align 4
  br label %if.end97.i

if.end97.i:                                       ; preds = %if.else90.i, %if.then88.i
  %86 = load i32* %iwd0.i, align 4
  %tobool98.i = icmp ne i32 %86, 0
  br i1 %tobool98.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.end97.i
  %87 = load i32* %iwd0.i, align 4
  %sub99.i = sub nsw i32 %87, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.end97.i
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub99.i, %cond.true.i ], [ 33, %cond.false.i ]
  store i32 %cond.i, i32* %iwdm1.i, align 4
  %88 = load i32* %iwdm1.i, align 4
  %tobool100.i = icmp ne i32 %88, 0
  br i1 %tobool100.i, label %cond.true101.i, label %cond.false103.i

cond.true101.i:                                   ; preds = %cond.end.i
  %89 = load i32* %iwdm1.i, align 4
  %sub102.i = sub nsw i32 %89, 1
  br label %cond.end104.i

cond.false103.i:                                  ; preds = %cond.end.i
  br label %cond.end104.i

cond.end104.i:                                    ; preds = %cond.false103.i, %cond.true101.i
  %cond105.i = phi i32 [ %sub102.i, %cond.true101.i ], [ 33, %cond.false103.i ]
  store i32 %cond105.i, i32* %iwdm2.i, align 4
  %90 = load i32* %ibt0.i, align 4
  %cmp106.i = icmp ult i32 %90, 20
  br i1 %cmp106.i, label %if.then108.i, label %if.else127.i

if.then108.i:                                     ; preds = %cond.end104.i
  %91 = load i64* %lb1.i, align 8
  %92 = load i32* %ibt0.i, align 4
  %sub109.i = sub i32 52, %92
  %sh_prom.i = zext i32 %sub109.i to i64
  %shr110.i = lshr i64 %91, %sh_prom.i
  %conv111.i = trunc i64 %shr110.i to i32
  %93 = load i32* %iwd0.i, align 4
  %idxprom112.i = sext i32 %93 to i64
  %94 = load i32** %iexta.i, align 8
  %arrayidx113.i = getelementptr inbounds i32* %94, i64 %idxprom112.i
  store i32 %conv111.i, i32* %arrayidx113.i, align 4
  %95 = load i64* %lb1.i, align 8
  %96 = load i32* %ibt0.i, align 4
  %sub114.i = sub i32 20, %96
  %sh_prom115.i = zext i32 %sub114.i to i64
  %shr116.i = lshr i64 %95, %sh_prom115.i
  %and117.i = and i64 %shr116.i, 4294967295
  %conv118.i = trunc i64 %and117.i to i32
  %97 = load i32* %iwdm1.i, align 4
  %idxprom119.i = sext i32 %97 to i64
  %98 = load i32** %iexta.i, align 8
  %arrayidx120.i = getelementptr inbounds i32* %98, i64 %idxprom119.i
  store i32 %conv118.i, i32* %arrayidx120.i, align 4
  %99 = load i64* %lb1.i, align 8
  %100 = load i32* %ibt0.i, align 4
  %add121.i = add i32 %100, 12
  %sh_prom122.i = zext i32 %add121.i to i64
  %shl.i = shl i64 %99, %sh_prom122.i
  %and123.i = and i64 %shl.i, 4294967295
  %conv124.i = trunc i64 %and123.i to i32
  %101 = load i32* %iwdm2.i, align 4
  %idxprom125.i = sext i32 %101 to i64
  %102 = load i32** %iexta.i, align 8
  %arrayidx126.i = getelementptr inbounds i32* %102, i64 %idxprom125.i
  store i32 %conv124.i, i32* %arrayidx126.i, align 4
  br label %if.end141.i

if.else127.i:                                     ; preds = %cond.end104.i
  %103 = load i64* %lb1.i, align 8
  %104 = load i32* %ibt0.i, align 4
  %sub128.i = sub i32 52, %104
  %sh_prom129.i = zext i32 %sub128.i to i64
  %shr130.i = lshr i64 %103, %sh_prom129.i
  %conv131.i = trunc i64 %shr130.i to i32
  %105 = load i32* %iwd0.i, align 4
  %idxprom132.i = sext i32 %105 to i64
  %106 = load i32** %iexta.i, align 8
  %arrayidx133.i = getelementptr inbounds i32* %106, i64 %idxprom132.i
  store i32 %conv131.i, i32* %arrayidx133.i, align 4
  %107 = load i64* %lb1.i, align 8
  %108 = load i32* %ibt0.i, align 4
  %sub134.i = sub i32 %108, 20
  %sh_prom135.i = zext i32 %sub134.i to i64
  %shl136.i = shl i64 %107, %sh_prom135.i
  %and137.i = and i64 %shl136.i, 4294967295
  %conv138.i = trunc i64 %and137.i to i32
  %109 = load i32* %iwdm1.i, align 4
  %idxprom139.i = sext i32 %109 to i64
  %110 = load i32** %iexta.i, align 8
  %arrayidx140.i = getelementptr inbounds i32* %110, i64 %idxprom139.i
  store i32 %conv138.i, i32* %arrayidx140.i, align 4
  br label %if.end141.i

if.end141.i:                                      ; preds = %if.else127.i, %if.then108.i
  %111 = load i32** %iextc.i, align 8
  store i32 1, i32* %111, align 4
  store i32 1, i32* %kmx.i, align 4
  %112 = load i32* %iexp.i, align 4
  %cmp143.i = icmp sge i32 %112, 0
  br i1 %cmp143.i, label %if.then145.i, label %if.end228.i

if.then145.i:                                     ; preds = %if.end141.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond146.i

for.cond146.i:                                    ; preds = %for.end224.i, %if.then145.i
  %113 = load i32* %i.i, align 4
  %114 = load i32* %iwd0.i, align 4
  %cmp147.i = icmp sle i32 %113, %114
  br i1 %cmp147.i, label %for.body149.i, label %for.end227.i

for.body149.i:                                    ; preds = %for.cond146.i
  store i32 0, i32* %j.i, align 4
  br label %for.cond150.i

for.cond150.i:                                    ; preds = %for.end217.i, %for.body149.i
  %115 = load i32* %j.i, align 4
  %cmp151.i = icmp slt i32 %115, 32
  br i1 %cmp151.i, label %for.body153.i, label %for.end224.i

for.body153.i:                                    ; preds = %for.cond150.i
  %116 = load i32* %i.i, align 4
  %idxprom154.i = sext i32 %116 to i64
  %117 = load i32** %iexta.i, align 8
  %arrayidx155.i = getelementptr inbounds i32* %117, i64 %idxprom154.i
  %118 = load i32* %arrayidx155.i, align 4
  %119 = load i32* %j.i, align 4
  %shl156.i = shl i32 1, %119
  %and157.i = and i32 %118, %shl156.i
  %tobool158.i = icmp ne i32 %and157.i, 0
  br i1 %tobool158.i, label %if.then159.i, label %if.end190.i

if.then159.i:                                     ; preds = %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond160.i

for.cond160.i:                                    ; preds = %if.end183.i, %if.then159.i
  %120 = load i32* %k.i, align 4
  %121 = load i32* %kmx.i, align 4
  %cmp161.i = icmp slt i32 %120, %121
  br i1 %cmp161.i, label %for.body163.i, label %for.end186.i

for.body163.i:                                    ; preds = %for.cond160.i
  %122 = load i32* %k.i, align 4
  %idxprom164.i = sext i32 %122 to i64
  %arrayidx165.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom164.i
  %123 = load i32* %arrayidx165.i, align 4
  %124 = load i32* %k.i, align 4
  %idxprom166.i = sext i32 %124 to i64
  %125 = load i32** %iextc.i, align 8
  %arrayidx167.i = getelementptr inbounds i32* %125, i64 %idxprom166.i
  %126 = load i32* %arrayidx167.i, align 4
  %add168.i = add i32 %123, %126
  %127 = load i32* %icarr.i, align 4
  %add169.i = add i32 %add168.i, %127
  %128 = load i32* %k.i, align 4
  %idxprom170.i = sext i32 %128 to i64
  %arrayidx171.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom170.i
  store i32 %add169.i, i32* %arrayidx171.i, align 4
  %129 = load i32* %k.i, align 4
  %idxprom172.i = sext i32 %129 to i64
  %arrayidx173.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom172.i
  %130 = load i32* %arrayidx173.i, align 4
  %cmp174.i = icmp uge i32 %130, 1000000000
  br i1 %cmp174.i, label %if.then176.i, label %if.else182.i

if.then176.i:                                     ; preds = %for.body163.i
  %131 = load i32* %k.i, align 4
  %idxprom177.i = sext i32 %131 to i64
  %arrayidx178.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom177.i
  %132 = load i32* %arrayidx178.i, align 4
  %sub179.i = sub i32 %132, 1000000000
  %133 = load i32* %k.i, align 4
  %idxprom180.i = sext i32 %133 to i64
  %arrayidx181.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom180.i
  store i32 %sub179.i, i32* %arrayidx181.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end183.i

if.else182.i:                                     ; preds = %for.body163.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end183.i

if.end183.i:                                      ; preds = %if.else182.i, %if.then176.i
  %134 = load i32* %k.i, align 4
  %inc185.i = add nsw i32 %134, 1
  store i32 %inc185.i, i32* %k.i, align 4
  br label %for.cond160.i

for.end186.i:                                     ; preds = %for.cond160.i
  %135 = load i32* %icarr.i, align 4
  %136 = load i32* %kmx.i, align 4
  %idxprom187.i = sext i32 %136 to i64
  %arrayidx188.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom187.i
  %137 = load i32* %arrayidx188.i, align 4
  %add189.i = add i32 %137, %135
  store i32 %add189.i, i32* %arrayidx188.i, align 4
  br label %if.end190.i

if.end190.i:                                      ; preds = %for.end186.i, %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond191.i

for.cond191.i:                                    ; preds = %if.end214.i, %if.end190.i
  %138 = load i32* %k.i, align 4
  %139 = load i32* %kmx.i, align 4
  %cmp192.i = icmp slt i32 %138, %139
  br i1 %cmp192.i, label %for.body194.i, label %for.end217.i

for.body194.i:                                    ; preds = %for.cond191.i
  %140 = load i32* %k.i, align 4
  %idxprom195.i = sext i32 %140 to i64
  %141 = load i32** %iextc.i, align 8
  %arrayidx196.i = getelementptr inbounds i32* %141, i64 %idxprom195.i
  %142 = load i32* %arrayidx196.i, align 4
  %143 = load i32* %k.i, align 4
  %idxprom197.i = sext i32 %143 to i64
  %144 = load i32** %iextc.i, align 8
  %arrayidx198.i = getelementptr inbounds i32* %144, i64 %idxprom197.i
  %145 = load i32* %arrayidx198.i, align 4
  %add199.i = add i32 %142, %145
  %146 = load i32* %icarr.i, align 4
  %add200.i = add i32 %add199.i, %146
  %147 = load i32* %k.i, align 4
  %idxprom201.i = sext i32 %147 to i64
  %148 = load i32** %iextc.i, align 8
  %arrayidx202.i = getelementptr inbounds i32* %148, i64 %idxprom201.i
  store i32 %add200.i, i32* %arrayidx202.i, align 4
  %149 = load i32* %k.i, align 4
  %idxprom203.i = sext i32 %149 to i64
  %150 = load i32** %iextc.i, align 8
  %arrayidx204.i = getelementptr inbounds i32* %150, i64 %idxprom203.i
  %151 = load i32* %arrayidx204.i, align 4
  %cmp205.i = icmp uge i32 %151, 1000000000
  br i1 %cmp205.i, label %if.then207.i, label %if.else213.i

if.then207.i:                                     ; preds = %for.body194.i
  %152 = load i32* %k.i, align 4
  %idxprom208.i = sext i32 %152 to i64
  %153 = load i32** %iextc.i, align 8
  %arrayidx209.i = getelementptr inbounds i32* %153, i64 %idxprom208.i
  %154 = load i32* %arrayidx209.i, align 4
  %sub210.i = sub i32 %154, 1000000000
  %155 = load i32* %k.i, align 4
  %idxprom211.i = sext i32 %155 to i64
  %156 = load i32** %iextc.i, align 8
  %arrayidx212.i = getelementptr inbounds i32* %156, i64 %idxprom211.i
  store i32 %sub210.i, i32* %arrayidx212.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end214.i

if.else213.i:                                     ; preds = %for.body194.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end214.i

if.end214.i:                                      ; preds = %if.else213.i, %if.then207.i
  %157 = load i32* %k.i, align 4
  %inc216.i = add nsw i32 %157, 1
  store i32 %inc216.i, i32* %k.i, align 4
  br label %for.cond191.i

for.end217.i:                                     ; preds = %for.cond191.i
  %158 = load i32* %icarr.i, align 4
  %159 = load i32* %kmx.i, align 4
  %idxprom218.i = sext i32 %159 to i64
  %160 = load i32** %iextc.i, align 8
  %arrayidx219.i = getelementptr inbounds i32* %160, i64 %idxprom218.i
  %161 = load i32* %arrayidx219.i, align 4
  %add220.i = add i32 %161, %158
  store i32 %add220.i, i32* %arrayidx219.i, align 4
  %162 = load i32* %icarr.i, align 4
  %163 = load i32* %kmx.i, align 4
  %add221.i = add i32 %163, %162
  store i32 %add221.i, i32* %kmx.i, align 4
  %164 = load i32* %j.i, align 4
  %inc223.i = add nsw i32 %164, 1
  store i32 %inc223.i, i32* %j.i, align 4
  br label %for.cond150.i

for.end224.i:                                     ; preds = %for.cond150.i
  %165 = load i32* %i.i, align 4
  %inc226.i = add nsw i32 %165, 1
  store i32 %inc226.i, i32* %i.i, align 4
  br label %for.cond146.i

for.end227.i:                                     ; preds = %for.cond146.i
  br label %if.end228.i

if.end228.i:                                      ; preds = %for.end227.i, %if.end141.i
  %166 = load i32* %kmx.i, align 4
  %sub229.i = sub nsw i32 %166, 1
  %idxprom230.i = sext i32 %sub229.i to i64
  %arrayidx231.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom230.i
  %167 = load i32* %arrayidx231.i, align 4
  %cmp232.i = icmp eq i32 %167, 0
  br i1 %cmp232.i, label %if.then234.i, label %if.end235.i

if.then234.i:                                     ; preds = %if.end228.i
  %168 = load i32* %kmx.i, align 4
  %dec.i = add nsw i32 %168, -1
  store i32 %dec.i, i32* %kmx.i, align 4
  br label %if.end235.i

if.end235.i:                                      ; preds = %if.then234.i, %if.end228.i
  %169 = load i32* %kmx.i, align 4
  %dec236.i = add nsw i32 %169, -1
  store i32 %dec236.i, i32* %kmx.i, align 4
  store i32 0, i32* %prdigits.i, align 4
  %170 = load i32* %kmx.i, align 4
  %cmp237.i = icmp sge i32 %170, 0
  br i1 %cmp237.i, label %if.then239.i, label %if.end392.i

if.then239.i:                                     ; preds = %if.end235.i
  store i32 1, i32* %digit.i, align 4
  %171 = load i32* %kmx.i, align 4
  %idxprom240.i = sext i32 %171 to i64
  %arrayidx241.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom240.i
  %172 = load i32* %arrayidx241.i, align 4
  store i32 %172, i32* %k.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond242.i

for.cond242.i:                                    ; preds = %if.end249.i, %if.then239.i
  %173 = load i32* %i.i, align 4
  %cmp243.i = icmp slt i32 %173, 9
  br i1 %cmp243.i, label %for.body245.i, label %for.end253.i

for.body245.i:                                    ; preds = %for.cond242.i
  %174 = load i32* %k.i, align 4
  %175 = load i32* %digit.i, align 4
  %cmp246.i = icmp uge i32 %174, %175
  br i1 %cmp246.i, label %if.then248.i, label %if.end249.i

if.then248.i:                                     ; preds = %for.body245.i
  %176 = load i32* %i.i, align 4
  store i32 %176, i32* %pose.i, align 4
  br label %if.end249.i

if.end249.i:                                      ; preds = %if.then248.i, %for.body245.i
  %177 = load i32* %digit.i, align 4
  %mul250.i = mul i32 %177, 10
  store i32 %mul250.i, i32* %digit.i, align 4
  %178 = load i32* %i.i, align 4
  %inc252.i = add nsw i32 %178, 1
  store i32 %inc252.i, i32* %i.i, align 4
  br label %for.cond242.i

for.end253.i:                                     ; preds = %for.cond242.i
  %179 = load i32* %kmx.i, align 4
  %mul254.i = mul nsw i32 %179, 9
  %180 = load i32* %pose.i, align 4
  %add255.i = add nsw i32 %mul254.i, %180
  %add256.i = add nsw i32 %add255.i, 1
  store i32 %add256.i, i32* %prdigits.i, align 4
  %181 = load i32* %prdigits.i, align 4
  %182 = load i32* %w.addr.i, align 4
  %cmp257.i = icmp ugt i32 %181, %182
  br i1 %cmp257.i, label %if.then259.i, label %if.end372.i

if.then259.i:                                     ; preds = %for.end253.i
  %183 = load i32* %prdigits.i, align 4
  %184 = load i32* %w.addr.i, align 4
  %sub260.i = sub i32 %183, %184
  store i32 %sub260.i, i32* %loc.i, align 4
  store i32 0, i32* %kbk.i, align 4
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then259.i
  %185 = load i32* %loc.i, align 4
  %cmp261.i = icmp sgt i32 %185, 9
  br i1 %cmp261.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %186 = load i32* %loc.i, align 4
  %sub263.i = sub nsw i32 %186, 9
  store i32 %sub263.i, i32* %loc.i, align 4
  %187 = load i32* %kbk.i, align 4
  %inc264.i = add nsw i32 %187, 1
  store i32 %inc264.i, i32* %kbk.i, align 4
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %188 = load i32* %kbk.i, align 4
  %idxprom265.i = sext i32 %188 to i64
  %arrayidx266.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom265.i
  %189 = load i32* %arrayidx266.i, align 4
  store i32 %189, i32* %k.i, align 4
  store i32 1, i32* %m.i, align 4
  store i32 10, i32* %c.i, align 4
  store i32 0, i32* %rndup.i, align 4
  store i32 0, i32* %sticky.i, align 4
  store i32 0, i32* %rndval.i, align 4
  %190 = load i32* %loc.i, align 4
  %cmp267.i = icmp sgt i32 %190, 1
  br i1 %cmp267.i, label %if.then269.i, label %if.else308.i

if.then269.i:                                     ; preds = %while.end.i
  br label %while.cond270.i

while.cond270.i:                                  ; preds = %if.end294.i, %if.then269.i
  %191 = load i32* %loc.i, align 4
  %dec271.i = add nsw i32 %191, -1
  store i32 %dec271.i, i32* %loc.i, align 4
  %tobool272.i = icmp ne i32 %191, 0
  br i1 %tobool272.i, label %while.body273.i, label %while.end296.i

while.body273.i:                                  ; preds = %while.cond270.i
  %192 = load i32* %k.i, align 4
  %div274.i = sdiv i32 %192, 10
  store i32 %div274.i, i32* %j.i, align 4
  %193 = load i32* %k.i, align 4
  %194 = load i32* %j.i, align 4
  %mul275.i = mul nsw i32 %194, 10
  %sub276.i = sub nsw i32 %193, %mul275.i
  store i32 %sub276.i, i32* %digit.i, align 4
  %195 = load i32* %loc.i, align 4
  %cmp277.i = icmp sgt i32 %195, 0
  br i1 %cmp277.i, label %if.then279.i, label %if.end283.i

if.then279.i:                                     ; preds = %while.body273.i
  %196 = load i32* %c.i, align 4
  %197 = load i32* %digit.i, align 4
  %sub280.i = sub i32 %196, %197
  %198 = load i32* %m.i, align 4
  %mul281.i = mul i32 %sub280.i, %198
  %199 = load i32* %rndup.i, align 4
  %add282.i = add i32 %199, %mul281.i
  store i32 %add282.i, i32* %rndup.i, align 4
  br label %if.end283.i

if.end283.i:                                      ; preds = %if.then279.i, %while.body273.i
  %200 = load i32* %loc.i, align 4
  %cmp284.i = icmp sgt i32 %200, 1
  br i1 %cmp284.i, label %if.then286.i, label %if.end290.i

if.then286.i:                                     ; preds = %if.end283.i
  %201 = load i32* %digit.i, align 4
  %cmp287.i = icmp ugt i32 %201, 0
  %conv288.i = zext i1 %cmp287.i to i32
  %202 = load i32* %sticky.i, align 4
  %or289.i = or i32 %202, %conv288.i
  store i32 %or289.i, i32* %sticky.i, align 4
  br label %if.end290.i

if.end290.i:                                      ; preds = %if.then286.i, %if.end283.i
  %203 = load i32* %loc.i, align 4
  %cmp291.i = icmp eq i32 %203, 1
  br i1 %cmp291.i, label %if.then293.i, label %if.end294.i

if.then293.i:                                     ; preds = %if.end290.i
  %204 = load i32* %digit.i, align 4
  store i32 %204, i32* %rndval.i, align 4
  br label %if.end294.i

if.end294.i:                                      ; preds = %if.then293.i, %if.end290.i
  %205 = load i32* %j.i, align 4
  store i32 %205, i32* %k.i, align 4
  %206 = load i32* %m.i, align 4
  %mul295.i = mul nsw i32 %206, 10
  store i32 %mul295.i, i32* %m.i, align 4
  store i32 9, i32* %c.i, align 4
  br label %while.cond270.i

while.end296.i:                                   ; preds = %while.cond270.i
  %207 = load i32* %kbk.i, align 4
  store i32 %207, i32* %i.i, align 4
  br label %while.cond297.i

while.cond297.i:                                  ; preds = %while.body300.i, %while.end296.i
  %208 = load i32* %i.i, align 4
  %tobool298.i = icmp ne i32 %208, 0
  br i1 %tobool298.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %while.cond297.i
  %209 = load i32* %sticky.i, align 4
  %tobool299.i = icmp ne i32 %209, 0
  %lnot.i = xor i1 %tobool299.i, true
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %while.cond297.i
  %210 = phi i1 [ false, %while.cond297.i ], [ %lnot.i, %land.rhs.i ]
  br i1 %210, label %while.body300.i, label %while.end307.i

while.body300.i:                                  ; preds = %land.end.i
  %211 = load i32* %i.i, align 4
  %dec301.i = add nsw i32 %211, -1
  store i32 %dec301.i, i32* %i.i, align 4
  %idxprom302.i = sext i32 %dec301.i to i64
  %arrayidx303.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom302.i
  %212 = load i32* %arrayidx303.i, align 4
  %cmp304.i = icmp ne i32 %212, 0
  %conv305.i = zext i1 %cmp304.i to i32
  %213 = load i32* %sticky.i, align 4
  %or306.i = or i32 %213, %conv305.i
  store i32 %or306.i, i32* %sticky.i, align 4
  br label %while.cond297.i

while.end307.i:                                   ; preds = %land.end.i
  br label %if.end341.i

if.else308.i:                                     ; preds = %while.end.i
  %214 = load i32* %kbk.i, align 4
  %cmp309.i = icmp sgt i32 %214, 0
  br i1 %cmp309.i, label %if.then311.i, label %if.end340.i

if.then311.i:                                     ; preds = %if.else308.i
  %215 = load i32* %kbk.i, align 4
  %dec312.i = add nsw i32 %215, -1
  store i32 %dec312.i, i32* %kbk.i, align 4
  %idxprom313.i = sext i32 %dec312.i to i64
  %arrayidx314.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom313.i
  %216 = load i32* %arrayidx314.i, align 4
  store i32 %216, i32* %k.i, align 4
  %217 = load i32* %k.i, align 4
  %cmp315.i = icmp sge i32 %217, 500000000
  br i1 %cmp315.i, label %if.then317.i, label %if.end339.i

if.then317.i:                                     ; preds = %if.then311.i
  store i32 5, i32* %rndval.i, align 4
  %218 = load i32* %k.i, align 4
  %sub318.i = sub nsw i32 1000000000, %218
  store i32 %sub318.i, i32* %rndup.i, align 4
  %219 = load i32* %k.i, align 4
  %cmp319.i = icmp sgt i32 %219, 500000000
  br i1 %cmp319.i, label %if.then321.i, label %if.else322.i

if.then321.i:                                     ; preds = %if.then317.i
  store i32 1, i32* %sticky.i, align 4
  br label %if.end338.i

if.else322.i:                                     ; preds = %if.then317.i
  %220 = load i32* %kbk.i, align 4
  %sub323.i = sub nsw i32 %220, 1
  store i32 %sub323.i, i32* %i.i, align 4
  br label %while.cond324.i

while.cond324.i:                                  ; preds = %while.body330.i, %if.else322.i
  %221 = load i32* %i.i, align 4
  %tobool325.i = icmp ne i32 %221, 0
  br i1 %tobool325.i, label %land.rhs326.i, label %land.end329.i

land.rhs326.i:                                    ; preds = %while.cond324.i
  %222 = load i32* %sticky.i, align 4
  %tobool327.i = icmp ne i32 %222, 0
  %lnot328.i = xor i1 %tobool327.i, true
  br label %land.end329.i

land.end329.i:                                    ; preds = %land.rhs326.i, %while.cond324.i
  %223 = phi i1 [ false, %while.cond324.i ], [ %lnot328.i, %land.rhs326.i ]
  br i1 %223, label %while.body330.i, label %while.end337.i

while.body330.i:                                  ; preds = %land.end329.i
  %224 = load i32* %i.i, align 4
  %dec331.i = add nsw i32 %224, -1
  store i32 %dec331.i, i32* %i.i, align 4
  %idxprom332.i = sext i32 %224 to i64
  %arrayidx333.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom332.i
  %225 = load i32* %arrayidx333.i, align 4
  %cmp334.i = icmp ne i32 %225, 0
  %conv335.i = zext i1 %cmp334.i to i32
  %226 = load i32* %sticky.i, align 4
  %or336.i = or i32 %226, %conv335.i
  store i32 %or336.i, i32* %sticky.i, align 4
  br label %while.cond324.i

while.end337.i:                                   ; preds = %land.end329.i
  br label %if.end338.i

if.end338.i:                                      ; preds = %while.end337.i, %if.then321.i
  br label %if.end339.i

if.end339.i:                                      ; preds = %if.end338.i, %if.then311.i
  br label %if.end340.i

if.end340.i:                                      ; preds = %if.end339.i, %if.else308.i
  br label %if.end341.i

if.end341.i:                                      ; preds = %if.end340.i, %while.end307.i
  %227 = load i32* %rndval.i, align 4
  %cmp342.i = icmp sgt i32 %227, 5
  br i1 %cmp342.i, label %if.then347.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end341.i
  %228 = load i32* %rndval.i, align 4
  %cmp344.i = icmp eq i32 %228, 5
  br i1 %cmp344.i, label %land.lhs.true.i, label %if.end351.i

land.lhs.true.i:                                  ; preds = %lor.lhs.false.i
  %229 = load i32* %sticky.i, align 4
  %tobool346.i = icmp ne i32 %229, 0
  br i1 %tobool346.i, label %if.then347.i, label %if.end351.i

if.then347.i:                                     ; preds = %land.lhs.true.i, %if.end341.i
  %230 = load i32* %rndup.i, align 4
  %231 = load i32* %kbk.i, align 4
  %idxprom348.i = sext i32 %231 to i64
  %arrayidx349.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom348.i
  %232 = load i32* %arrayidx349.i, align 4
  %add350.i = add i32 %232, %230
  store i32 %add350.i, i32* %arrayidx349.i, align 4
  br label %if.end351.i

if.end351.i:                                      ; preds = %if.then347.i, %land.lhs.true.i, %lor.lhs.false.i
  br label %while.cond352.i

while.cond352.i:                                  ; preds = %while.body357.i, %if.end351.i
  %233 = load i32* %kbk.i, align 4
  %idxprom353.i = sext i32 %233 to i64
  %arrayidx354.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom353.i
  %234 = load i32* %arrayidx354.i, align 4
  %cmp355.i = icmp uge i32 %234, 1000000000
  br i1 %cmp355.i, label %while.body357.i, label %while.end371.i

while.body357.i:                                  ; preds = %while.cond352.i
  %235 = load i32* %kbk.i, align 4
  %idxprom358.i = sext i32 %235 to i64
  %arrayidx359.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom358.i
  %236 = load i32* %arrayidx359.i, align 4
  %sub360.i = sub i32 %236, 1000000000
  %237 = load i32* %kbk.i, align 4
  %idxprom361.i = sext i32 %237 to i64
  %arrayidx362.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom361.i
  store i32 %sub360.i, i32* %arrayidx362.i, align 4
  %238 = load i32* %kbk.i, align 4
  %add363.i = add nsw i32 %238, 1
  %idxprom364.i = sext i32 %add363.i to i64
  %arrayidx365.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom364.i
  %239 = load i32* %arrayidx365.i, align 4
  %add366.i = add i32 %239, 1
  %240 = load i32* %kbk.i, align 4
  %add367.i = add nsw i32 %240, 1
  %idxprom368.i = sext i32 %add367.i to i64
  %arrayidx369.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom368.i
  store i32 %add366.i, i32* %arrayidx369.i, align 4
  %241 = load i32* %kbk.i, align 4
  %inc370.i = add nsw i32 %241, 1
  store i32 %inc370.i, i32* %kbk.i, align 4
  br label %while.cond352.i

while.end371.i:                                   ; preds = %while.cond352.i
  br label %if.end372.i

if.end372.i:                                      ; preds = %while.end371.i, %for.end253.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond373.i

for.cond373.i:                                    ; preds = %for.body378.i, %if.end372.i
  %242 = load i32* %i.i, align 4
  %243 = load i32* %kmx.i, align 4
  %add374.i = add nsw i32 %243, 1
  %div375.i = sdiv i32 %add374.i, 2
  %cmp376.i = icmp slt i32 %242, %div375.i
  br i1 %cmp376.i, label %for.body378.i, label %for.end391.i

for.body378.i:                                    ; preds = %for.cond373.i
  %244 = load i32* %i.i, align 4
  %idxprom379.i = sext i32 %244 to i64
  %arrayidx380.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom379.i
  %245 = load i32* %arrayidx380.i, align 4
  store i32 %245, i32* %k.i, align 4
  %246 = load i32* %kmx.i, align 4
  %247 = load i32* %i.i, align 4
  %sub381.i = sub nsw i32 %246, %247
  %idxprom382.i = sext i32 %sub381.i to i64
  %arrayidx383.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom382.i
  %248 = load i32* %arrayidx383.i, align 4
  %249 = load i32* %i.i, align 4
  %idxprom384.i = sext i32 %249 to i64
  %arrayidx385.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom384.i
  store i32 %248, i32* %arrayidx385.i, align 4
  %250 = load i32* %k.i, align 4
  %251 = load i32* %kmx.i, align 4
  %252 = load i32* %i.i, align 4
  %sub386.i = sub nsw i32 %251, %252
  %idxprom387.i = sext i32 %sub386.i to i64
  %arrayidx388.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom387.i
  store i32 %250, i32* %arrayidx388.i, align 4
  %253 = load i32* %i.i, align 4
  %inc390.i = add nsw i32 %253, 1
  store i32 %inc390.i, i32* %i.i, align 4
  br label %for.cond373.i

for.end391.i:                                     ; preds = %for.cond373.i
  br label %if.end392.i

if.end392.i:                                      ; preds = %for.end391.i, %if.end235.i
  %254 = load i32* %iexp.i, align 4
  %cmp393.i = icmp sle i32 %254, 51
  br i1 %cmp393.i, label %land.lhs.true395.i, label %if.end620.i

land.lhs.true395.i:                               ; preds = %if.end392.i
  %255 = load i32* %prdigits.i, align 4
  %256 = load i32* %w.addr.i, align 4
  %cmp396.i = icmp ule i32 %255, %256
  br i1 %cmp396.i, label %if.then398.i, label %if.end620.i

if.then398.i:                                     ; preds = %land.lhs.true395.i
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %keepon.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %257 = load i32* %kmx.i, align 4
  %add399.i = add nsw i32 %257, 1
  store i32 %add399.i, i32* %j.i, align 4
  %258 = load i32* %kmx.i, align 4
  %add400.i = add nsw i32 %258, 1
  store i32 %add400.i, i32* %k.i, align 4
  store i32 0, i32* %firstdigit.i, align 4
  store i32 0, i32* %savecarry.i, align 4
  %259 = load i32* %w.addr.i, align 4
  store i32 %259, i32* %lw.i, align 4
  br label %while.cond401.i

while.cond401.i:                                  ; preds = %if.end543.i, %if.then398.i
  %260 = load i32* %iwdm2.i, align 4
  %cmp402.i = icmp slt i32 %260, 34
  br i1 %cmp402.i, label %while.body404.i, label %while.end544.i

while.body404.i:                                  ; preds = %while.cond401.i
  store i32 0, i32* %sh1.i, align 4
  store i32 0, i32* %sh3.i, align 4
  store i32 0, i32* %icarr.i, align 4
  %261 = load i32* %iwdm2.i, align 4
  store i32 %261, i32* %i.i, align 4
  br label %for.cond405.i

for.cond405.i:                                    ; preds = %lor.end.i, %while.body404.i
  %262 = load i32* %i.i, align 4
  %cmp406.i = icmp slt i32 %262, 34
  br i1 %cmp406.i, label %for.body408.i, label %for.end433.i

for.body408.i:                                    ; preds = %for.cond405.i
  %263 = load i32* %i.i, align 4
  %idxprom409.i = sext i32 %263 to i64
  %264 = load i32** %iexta.i, align 8
  %arrayidx410.i = getelementptr inbounds i32* %264, i64 %idxprom409.i
  %265 = load i32* %arrayidx410.i, align 4
  store i32 %265, i32* %ix.i, align 4
  %266 = load i32* %ix.i, align 4
  %shl411.i = shl i32 %266, 1
  %267 = load i32* %sh1.i, align 4
  %add412.i = add i32 %shl411.i, %267
  store i32 %add412.i, i32* %ixa.i, align 4
  %268 = load i32* %ix.i, align 4
  %shl413.i = shl i32 %268, 3
  %269 = load i32* %sh3.i, align 4
  %add414.i = add i32 %shl413.i, %269
  store i32 %add414.i, i32* %ixb.i, align 4
  %270 = load i32* %ix.i, align 4
  %shr415.i = lshr i32 %270, 31
  store i32 %shr415.i, i32* %sh1.i, align 4
  %271 = load i32* %ix.i, align 4
  %shr416.i = lshr i32 %271, 29
  store i32 %shr416.i, i32* %sh3.i, align 4
  %272 = load i32* %ixa.i, align 4
  %273 = load i32* %ixb.i, align 4
  %add417.i = add i32 %272, %273
  %274 = load i32* %icarr.i, align 4
  %add418.i = add i32 %add417.i, %274
  store i32 %add418.i, i32* %ixc.i, align 4
  %275 = load i32* %ixc.i, align 4
  %276 = load i32* %ixa.i, align 4
  %cmp419.i = icmp ult i32 %275, %276
  br i1 %cmp419.i, label %lor.end.i, label %lor.lhs.false421.i

lor.lhs.false421.i:                               ; preds = %for.body408.i
  %277 = load i32* %ixc.i, align 4
  %278 = load i32* %ixb.i, align 4
  %cmp422.i = icmp ult i32 %277, %278
  br i1 %cmp422.i, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false421.i
  %279 = load i32* %ixa.i, align 4
  %280 = load i32* %ixb.i, align 4
  %and424.i = and i32 %279, %280
  %281 = load i32* %ixc.i, align 4
  %and425.i = and i32 %and424.i, %281
  %cmp426.i = icmp eq i32 %and425.i, -1
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %lor.lhs.false421.i, %for.body408.i
  %282 = phi i1 [ true, %lor.lhs.false421.i ], [ true, %for.body408.i ], [ %cmp426.i, %lor.rhs.i ]
  %cond428.i = select i1 %282, i32 1, i32 0
  store i32 %cond428.i, i32* %icarr.i, align 4
  %283 = load i32* %ixc.i, align 4
  %284 = load i32* %i.i, align 4
  %idxprom429.i = sext i32 %284 to i64
  %285 = load i32** %iexta.i, align 8
  %arrayidx430.i = getelementptr inbounds i32* %285, i64 %idxprom429.i
  store i32 %283, i32* %arrayidx430.i, align 4
  %286 = load i32* %i.i, align 4
  %inc432.i = add nsw i32 %286, 1
  store i32 %inc432.i, i32* %i.i, align 4
  br label %for.cond405.i

for.end433.i:                                     ; preds = %for.cond405.i
  %287 = load i32* %iwdm2.i, align 4
  %idxprom434.i = sext i32 %287 to i64
  %288 = load i32** %iexta.i, align 8
  %arrayidx435.i = getelementptr inbounds i32* %288, i64 %idxprom434.i
  %289 = load i32* %arrayidx435.i, align 4
  %cmp436.i = icmp eq i32 %289, 0
  br i1 %cmp436.i, label %if.then438.i, label %if.end440.i

if.then438.i:                                     ; preds = %for.end433.i
  %290 = load i32* %iwdm2.i, align 4
  %inc439.i = add nsw i32 %290, 1
  store i32 %inc439.i, i32* %iwdm2.i, align 4
  br label %if.end440.i

if.end440.i:                                      ; preds = %if.then438.i, %for.end433.i
  %291 = load i32* %digit.i, align 4
  %mul441.i = mul i32 %291, 10
  %292 = load i32* %sh3.i, align 4
  %293 = load i32* %sh1.i, align 4
  %add442.i = add i32 %292, %293
  %294 = load i32* %icarr.i, align 4
  %add443.i = add i32 %add442.i, %294
  %add444.i = add i32 %mul441.i, %add443.i
  store i32 %add444.i, i32* %digit.i, align 4
  %295 = load i32* %ndigits.i, align 4
  %inc445.i = add i32 %295, 1
  store i32 %inc445.i, i32* %ndigits.i, align 4
  %296 = load i32* %digit.i, align 4
  %tobool446.i = icmp ne i32 %296, 0
  br i1 %tobool446.i, label %land.lhs.true447.i, label %if.end461.i

land.lhs.true447.i:                               ; preds = %if.end440.i
  %297 = load i32* %firstdigit.i, align 4
  %tobool448.i = icmp ne i32 %297, 0
  br i1 %tobool448.i, label %if.end461.i, label %if.then449.i

if.then449.i:                                     ; preds = %land.lhs.true447.i
  %298 = load i32* %ndigits.i, align 4
  store i32 %298, i32* %firstdigit.i, align 4
  %299 = load i32* %j.i, align 4
  store i32 %299, i32* %firstfwd.i, align 4
  %300 = load i32* %ndigits.i, align 4
  %cmp450.i = icmp ugt i32 %300, 1
  br i1 %cmp450.i, label %land.lhs.true455.i, label %lor.lhs.false452.i

lor.lhs.false452.i:                               ; preds = %if.then449.i
  %301 = load i32* %j.i, align 4
  %302 = load i32* %k.i, align 4
  %cmp453.i = icmp ne i32 %301, %302
  br i1 %cmp453.i, label %land.lhs.true455.i, label %if.end460.i

land.lhs.true455.i:                               ; preds = %lor.lhs.false452.i, %if.then449.i
  %303 = load i32* %prdigits.i, align 4
  %cmp456.i = icmp eq i32 %303, 0
  br i1 %cmp456.i, label %if.then458.i, label %if.end460.i

if.then458.i:                                     ; preds = %land.lhs.true455.i
  %304 = load i32* %lw.i, align 4
  %inc459.i = add nsw i32 %304, 1
  store i32 %inc459.i, i32* %lw.i, align 4
  br label %if.end460.i

if.end460.i:                                      ; preds = %if.then458.i, %land.lhs.true455.i, %lor.lhs.false452.i
  br label %if.end461.i

if.end461.i:                                      ; preds = %if.end460.i, %land.lhs.true447.i, %if.end440.i
  %305 = load i32* %firstdigit.i, align 4
  %tobool462.i = icmp ne i32 %305, 0
  br i1 %tobool462.i, label %if.then465.i, label %lor.lhs.false463.i

lor.lhs.false463.i:                               ; preds = %if.end461.i
  %306 = load i32* %prdigits.i, align 4
  %tobool464.i = icmp ne i32 %306, 0
  br i1 %tobool464.i, label %if.then465.i, label %if.end521.i

if.then465.i:                                     ; preds = %lor.lhs.false463.i, %if.end461.i
  %307 = load i32* %prdigits.i, align 4
  %inc466.i = add i32 %307, 1
  store i32 %inc466.i, i32* %prdigits.i, align 4
  %308 = load i32* %prdigits.i, align 4
  %309 = load i32* %lw.i, align 4
  %cmp467.i = icmp ugt i32 %308, %309
  br i1 %cmp467.i, label %if.then469.i, label %if.end520.i

if.then469.i:                                     ; preds = %if.then465.i
  %310 = load i32* %keepon.i, align 4
  %tobool470.i = icmp ne i32 %310, 0
  br i1 %tobool470.i, label %if.else477.i, label %land.lhs.true471.i

land.lhs.true471.i:                               ; preds = %if.then469.i
  %311 = load i32* %sh3.i, align 4
  %312 = load i32* %sh1.i, align 4
  %add472.i = add i32 %311, %312
  %313 = load i32* %icarr.i, align 4
  %add473.i = add i32 %add472.i, %313
  %cmp474.i = icmp ult i32 %add473.i, 5
  br i1 %cmp474.i, label %if.then476.i, label %if.else477.i

if.then476.i:                                     ; preds = %land.lhs.true471.i
  br label %while.end544.i

if.else477.i:                                     ; preds = %land.lhs.true471.i, %if.then469.i
  %314 = load i32* %keepon.i, align 4
  %tobool478.i = icmp ne i32 %314, 0
  br i1 %tobool478.i, label %if.else489.i, label %land.lhs.true479.i

land.lhs.true479.i:                               ; preds = %if.else477.i
  %315 = load i32* %sh3.i, align 4
  %316 = load i32* %sh1.i, align 4
  %add480.i = add i32 %315, %316
  %317 = load i32* %icarr.i, align 4
  %add481.i = add i32 %add480.i, %317
  %cmp482.i = icmp ugt i32 %add481.i, 5
  br i1 %cmp482.i, label %if.then484.i, label %if.else489.i

if.then484.i:                                     ; preds = %land.lhs.true479.i
  %318 = load i32* %sh3.i, align 4
  %319 = load i32* %sh1.i, align 4
  %add485.i = add i32 %318, %319
  %320 = load i32* %icarr.i, align 4
  %add486.i = add i32 %add485.i, %320
  %sub487.i = sub i32 10, %add486.i
  %321 = load i32* %digit.i, align 4
  %add488.i = add i32 %321, %sub487.i
  store i32 %add488.i, i32* %digit.i, align 4
  br label %while.end544.i

if.else489.i:                                     ; preds = %land.lhs.true479.i, %if.else477.i
  %322 = load i32* %keepon.i, align 4
  %tobool490.i = icmp ne i32 %322, 0
  br i1 %tobool490.i, label %land.lhs.true491.i, label %if.else509.i

land.lhs.true491.i:                               ; preds = %if.else489.i
  %323 = load i32* %sh3.i, align 4
  %324 = load i32* %sh1.i, align 4
  %add492.i = add i32 %323, %324
  %325 = load i32* %icarr.i, align 4
  %add493.i = add i32 %add492.i, %325
  %cmp494.i = icmp ugt i32 %add493.i, 0
  br i1 %cmp494.i, label %if.then496.i, label %if.else509.i

if.then496.i:                                     ; preds = %land.lhs.true491.i
  %326 = load i32* %savecarry.i, align 4
  %tobool497.i = icmp ne i32 %326, 0
  br i1 %tobool497.i, label %if.then498.i, label %if.else502.i

if.then498.i:                                     ; preds = %if.then496.i
  %327 = load i32* %savek.i, align 4
  %idxprom499.i = sext i32 %327 to i64
  %arrayidx500.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom499.i
  %328 = load i32* %arrayidx500.i, align 4
  store i32 %328, i32* %digit.i, align 4
  %329 = load i32* %savecarry.i, align 4
  %330 = load i32* %digit.i, align 4
  %add501.i = add i32 %330, %329
  store i32 %add501.i, i32* %digit.i, align 4
  %331 = load i32* %savek.i, align 4
  store i32 %331, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end508.i

if.else502.i:                                     ; preds = %if.then496.i
  %332 = load i32* %roundcarry.i, align 4
  %mul503.i = mul i32 %332, 10
  store i32 %mul503.i, i32* %roundcarry.i, align 4
  %333 = load i32* %roundcarry.i, align 4
  %334 = load i32* %sh3.i, align 4
  %335 = load i32* %sh1.i, align 4
  %add504.i = add i32 %334, %335
  %336 = load i32* %icarr.i, align 4
  %add505.i = add i32 %add504.i, %336
  %sub506.i = sub i32 %333, %add505.i
  %337 = load i32* %digit.i, align 4
  %add507.i = add i32 %337, %sub506.i
  store i32 %add507.i, i32* %digit.i, align 4
  br label %if.end508.i

if.end508.i:                                      ; preds = %if.else502.i, %if.then498.i
  store i32 0, i32* %keepon.i, align 4
  br label %while.end544.i

if.else509.i:                                     ; preds = %land.lhs.true491.i, %if.else489.i
  %338 = load i32* %keepon.i, align 4
  %tobool510.i = icmp ne i32 %338, 0
  br i1 %tobool510.i, label %if.then511.i, label %if.else514.i

if.then511.i:                                     ; preds = %if.else509.i
  %339 = load i32* %keepon.i, align 4
  %inc512.i = add i32 %339, 1
  store i32 %inc512.i, i32* %keepon.i, align 4
  %340 = load i32* %roundcarry.i, align 4
  %mul513.i = mul i32 %340, 10
  store i32 %mul513.i, i32* %roundcarry.i, align 4
  br label %if.end516.i

if.else514.i:                                     ; preds = %if.else509.i
  store i32 5, i32* %roundcarry.i, align 4
  %341 = load i32* %keepon.i, align 4
  %inc515.i = add i32 %341, 1
  store i32 %inc515.i, i32* %keepon.i, align 4
  br label %if.end516.i

if.end516.i:                                      ; preds = %if.else514.i, %if.then511.i
  br label %if.end520.i

if.end520.i:                                      ; preds = %if.end516.i, %if.then465.i
  br label %if.end521.i

if.end521.i:                                      ; preds = %if.end520.i, %lor.lhs.false463.i
  %342 = load i32* %ndigits.i, align 4
  %cmp522.i = icmp eq i32 %342, 9
  br i1 %cmp522.i, label %if.then524.i, label %if.end543.i

if.then524.i:                                     ; preds = %if.end521.i
  %343 = load i32* %digit.i, align 4
  %tobool525.i = icmp ne i32 %343, 0
  br i1 %tobool525.i, label %if.then531.i, label %lor.lhs.false526.i

lor.lhs.false526.i:                               ; preds = %if.then524.i
  %344 = load i32* %firstdigit.i, align 4
  %tobool527.i = icmp ne i32 %344, 0
  br i1 %tobool527.i, label %if.then531.i, label %lor.lhs.false528.i

lor.lhs.false528.i:                               ; preds = %lor.lhs.false526.i
  %345 = load i32* %iexp.i, align 4
  %cmp529.i = icmp sge i32 %345, 0
  br i1 %cmp529.i, label %if.then531.i, label %if.end535.i

if.then531.i:                                     ; preds = %lor.lhs.false528.i, %lor.lhs.false526.i, %if.then524.i
  %346 = load i32* %digit.i, align 4
  %347 = load i32* %k.i, align 4
  %inc532.i = add nsw i32 %347, 1
  store i32 %inc532.i, i32* %k.i, align 4
  %idxprom533.i = sext i32 %347 to i64
  %arrayidx534.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom533.i
  store i32 %346, i32* %arrayidx534.i, align 4
  br label %if.end535.i

if.end535.i:                                      ; preds = %if.then531.i, %lor.lhs.false528.i
  %348 = load i32* %j.i, align 4
  %inc536.i = add nsw i32 %348, 1
  store i32 %inc536.i, i32* %j.i, align 4
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %349 = load i32* %keepon.i, align 4
  %tobool537.i = icmp ne i32 %349, 0
  br i1 %tobool537.i, label %land.lhs.true538.i, label %if.end542.i

land.lhs.true538.i:                               ; preds = %if.end535.i
  %350 = load i32* %savecarry.i, align 4
  %tobool539.i = icmp ne i32 %350, 0
  br i1 %tobool539.i, label %if.end542.i, label %if.then540.i

if.then540.i:                                     ; preds = %land.lhs.true538.i
  %351 = load i32* %roundcarry.i, align 4
  store i32 %351, i32* %savecarry.i, align 4
  %352 = load i32* %k.i, align 4
  %sub541.i = sub nsw i32 %352, 1
  store i32 %sub541.i, i32* %savek.i, align 4
  br label %if.end542.i

if.end542.i:                                      ; preds = %if.then540.i, %land.lhs.true538.i, %if.end535.i
  br label %if.end543.i

if.end543.i:                                      ; preds = %if.end542.i, %if.end521.i
  br label %while.cond401.i

while.end544.i:                                   ; preds = %if.end508.i, %if.then484.i, %if.then476.i, %while.cond401.i
  %353 = load i32* %keepon.i, align 4
  %tobool545.i = icmp ne i32 %353, 0
  br i1 %tobool545.i, label %if.then546.i, label %if.end558.i

if.then546.i:                                     ; preds = %while.end544.i
  %354 = load i32* %savecarry.i, align 4
  %tobool547.i = icmp ne i32 %354, 0
  br i1 %tobool547.i, label %if.then548.i, label %if.else552.i

if.then548.i:                                     ; preds = %if.then546.i
  %355 = load i32* %savek.i, align 4
  %idxprom549.i = sext i32 %355 to i64
  %arrayidx550.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom549.i
  %356 = load i32* %arrayidx550.i, align 4
  store i32 %356, i32* %digit.i, align 4
  %357 = load i32* %savecarry.i, align 4
  %358 = load i32* %digit.i, align 4
  %add551.i = add i32 %358, %357
  store i32 %add551.i, i32* %digit.i, align 4
  %359 = load i32* %savek.i, align 4
  store i32 %359, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end557.i

if.else552.i:                                     ; preds = %if.then546.i
  %360 = load i32* %roundcarry.i, align 4
  %tobool553.i = icmp ne i32 %360, 0
  br i1 %tobool553.i, label %if.then554.i, label %if.end556.i

if.then554.i:                                     ; preds = %if.else552.i
  %361 = load i32* %roundcarry.i, align 4
  %362 = load i32* %digit.i, align 4
  %add555.i = add i32 %362, %361
  store i32 %add555.i, i32* %digit.i, align 4
  br label %if.end556.i

if.end556.i:                                      ; preds = %if.then554.i, %if.else552.i
  br label %if.end557.i

if.end557.i:                                      ; preds = %if.end556.i, %if.then548.i
  br label %if.end558.i

if.end558.i:                                      ; preds = %if.end557.i, %while.end544.i
  %363 = load i32* %digit.i, align 4
  %tobool559.i = icmp ne i32 %363, 0
  br i1 %tobool559.i, label %if.then560.i, label %if.end619.i

if.then560.i:                                     ; preds = %if.end558.i
  br label %for.cond561.i

for.cond561.i:                                    ; preds = %for.body564.i, %if.then560.i
  %364 = load i32* %ndigits.i, align 4
  %cmp562.i = icmp ult i32 %364, 9
  br i1 %cmp562.i, label %for.body564.i, label %for.end568.i

for.body564.i:                                    ; preds = %for.cond561.i
  %365 = load i32* %digit.i, align 4
  %mul565.i = mul i32 %365, 10
  store i32 %mul565.i, i32* %digit.i, align 4
  %366 = load i32* %ndigits.i, align 4
  %inc567.i = add i32 %366, 1
  store i32 %inc567.i, i32* %ndigits.i, align 4
  br label %for.cond561.i

for.end568.i:                                     ; preds = %for.cond561.i
  %367 = load i32* %digit.i, align 4
  %368 = load i32* %k.i, align 4
  %idxprom569.i = sext i32 %368 to i64
  %arrayidx570.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom569.i
  store i32 %367, i32* %arrayidx570.i, align 4
  %369 = load i32* %digit.i, align 4
  %cmp571.i = icmp eq i32 %369, 1000000000
  br i1 %cmp571.i, label %if.then573.i, label %if.end618.i

if.then573.i:                                     ; preds = %for.end568.i
  store i32 0, i32* %digit.i, align 4
  %370 = load i32* %digit.i, align 4
  %371 = load i32* %k.i, align 4
  %idxprom574.i = sext i32 %371 to i64
  %arrayidx575.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom574.i
  store i32 %370, i32* %arrayidx575.i, align 4
  %372 = load i32* %k.i, align 4
  %sub576.i = sub nsw i32 %372, 1
  store i32 %sub576.i, i32* %kbk.i, align 4
  %373 = load i32* %kbk.i, align 4
  %idxprom577.i = sext i32 %373 to i64
  %arrayidx578.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom577.i
  %374 = load i32* %arrayidx578.i, align 4
  %inc579.i = add i32 %374, 1
  store i32 %inc579.i, i32* %arrayidx578.i, align 4
  br label %while.cond580.i

while.cond580.i:                                  ; preds = %while.body585.i, %if.then573.i
  %375 = load i32* %kbk.i, align 4
  %idxprom581.i = sext i32 %375 to i64
  %arrayidx582.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom581.i
  %376 = load i32* %arrayidx582.i, align 4
  %cmp583.i = icmp eq i32 %376, 1000000000
  br i1 %cmp583.i, label %while.body585.i, label %while.end592.i

while.body585.i:                                  ; preds = %while.cond580.i
  %377 = load i32* %kbk.i, align 4
  %idxprom586.i = sext i32 %377 to i64
  %arrayidx587.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom586.i
  store i32 0, i32* %arrayidx587.i, align 4
  %378 = load i32* %k.i, align 4
  %sub588.i = sub nsw i32 %378, 1
  store i32 %sub588.i, i32* %kbk.i, align 4
  %379 = load i32* %kbk.i, align 4
  %idxprom589.i = sext i32 %379 to i64
  %arrayidx590.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom589.i
  %380 = load i32* %arrayidx590.i, align 4
  %inc591.i = add i32 %380, 1
  store i32 %inc591.i, i32* %arrayidx590.i, align 4
  br label %while.cond580.i

while.end592.i:                                   ; preds = %while.cond580.i
  %381 = load i32* %kmx.i, align 4
  %cmp593.i = icmp slt i32 %381, 0
  br i1 %cmp593.i, label %if.then595.i, label %if.end617.i

if.then595.i:                                     ; preds = %while.end592.i
  %382 = load i32* %firstdigit.i, align 4
  %sub596.i = sub nsw i32 10, %382
  store i32 %sub596.i, i32* %pose.i, align 4
  %383 = load i32* %pose.i, align 4
  %cmp597.i = icmp sge i32 %383, 9
  br i1 %cmp597.i, label %if.then599.i, label %if.end601.i

if.then599.i:                                     ; preds = %if.then595.i
  %384 = load i32* %pose.i, align 4
  %sub600.i = sub nsw i32 %384, 9
  store i32 %sub600.i, i32* %pose.i, align 4
  br label %if.end601.i

if.end601.i:                                      ; preds = %if.then599.i, %if.then595.i
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond602.i

for.cond602.i:                                    ; preds = %for.body605.i, %if.end601.i
  %385 = load i32* %i.i, align 4
  %386 = load i32* %pose.i, align 4
  %cmp603.i = icmp slt i32 %385, %386
  br i1 %cmp603.i, label %for.body605.i, label %for.end609.i

for.body605.i:                                    ; preds = %for.cond602.i
  %387 = load i32* %digit.i, align 4
  %mul606.i = mul i32 %387, 10
  store i32 %mul606.i, i32* %digit.i, align 4
  %388 = load i32* %i.i, align 4
  %inc608.i = add nsw i32 %388, 1
  store i32 %inc608.i, i32* %i.i, align 4
  br label %for.cond602.i

for.end609.i:                                     ; preds = %for.cond602.i
  %389 = load i32* %kbk.i, align 4
  %idxprom610.i = sext i32 %389 to i64
  %arrayidx611.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom610.i
  %390 = load i32* %arrayidx611.i, align 4
  %391 = load i32* %digit.i, align 4
  %cmp612.i = icmp eq i32 %390, %391
  br i1 %cmp612.i, label %if.then614.i, label %if.end616.i

if.then614.i:                                     ; preds = %for.end609.i
  %392 = load i32* %firstdigit.i, align 4
  %dec615.i = add nsw i32 %392, -1
  store i32 %dec615.i, i32* %firstdigit.i, align 4
  br label %if.end616.i

if.end616.i:                                      ; preds = %if.then614.i, %for.end609.i
  br label %if.end617.i

if.end617.i:                                      ; preds = %if.end616.i, %while.end592.i
  br label %if.end618.i

if.end618.i:                                      ; preds = %if.end617.i, %for.end568.i
  br label %if.end619.i

if.end619.i:                                      ; preds = %if.end618.i, %if.end558.i
  br label %if.end620.i

if.end620.i:                                      ; preds = %if.end619.i, %land.lhs.true395.i, %if.end392.i
  %arrayidx621.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 0
  %393 = load i32* %arrayidx621.i, align 4
  store i32 %393, i32* %k.i, align 4
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond622.i

for.cond622.i:                                    ; preds = %if.end629.i, %if.end620.i
  %394 = load i32* %i.i, align 4
  %cmp623.i = icmp slt i32 %394, 9
  br i1 %cmp623.i, label %for.body625.i, label %for.end633.i

for.body625.i:                                    ; preds = %for.cond622.i
  %395 = load i32* %k.i, align 4
  %396 = load i32* %digit.i, align 4
  %cmp626.i = icmp uge i32 %395, %396
  br i1 %cmp626.i, label %if.then628.i, label %if.end629.i

if.then628.i:                                     ; preds = %for.body625.i
  %397 = load i32* %i.i, align 4
  store i32 %397, i32* %pose.i, align 4
  br label %if.end629.i

if.end629.i:                                      ; preds = %if.then628.i, %for.body625.i
  %398 = load i32* %digit.i, align 4
  %mul630.i = mul i32 %398, 10
  store i32 %mul630.i, i32* %digit.i, align 4
  %399 = load i32* %i.i, align 4
  %inc632.i = add nsw i32 %399, 1
  store i32 %inc632.i, i32* %i.i, align 4
  br label %for.cond622.i

for.end633.i:                                     ; preds = %for.cond622.i
  store i32 1, i32* %m.i, align 4
  %400 = load i32* %ldw.addr.i, align 4
  %and634.i = and i32 %400, 1
  store i32 %and634.i, i32* %space.i, align 4
  %401 = load i32* %kmx.i, align 4
  %cmp635.i = icmp sge i32 %401, 0
  br i1 %cmp635.i, label %if.then637.i, label %if.else655.i

if.then637.i:                                     ; preds = %for.end633.i
  %402 = load i32* %kmx.i, align 4
  %mul638.i = mul nsw i32 %402, 9
  %403 = load i32* %pose.i, align 4
  %add639.i = add nsw i32 %mul638.i, %403
  store i32 %add639.i, i32* %iexp.i, align 4
  %404 = load i32* %iexp.i, align 4
  %405 = load i32* %w.addr.i, align 4
  %cmp640.i = icmp sge i32 %404, %405
  %conv641.i = zext i1 %cmp640.i to i32
  store i32 %conv641.i, i32* %usee.i, align 4
  %406 = load i32* %usee.i, align 4
  %tobool642.i = icmp ne i32 %406, 0
  br i1 %tobool642.i, label %if.end645.i, label %if.then643.i

if.then643.i:                                     ; preds = %if.then637.i
  %407 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %407, align 1
  %408 = load i32* %space.i, align 4
  %409 = load i8** %ffmt.addr.i, align 8
  %idx.ext.i = sext i32 %408 to i64
  %add.ptr.i = getelementptr inbounds i8* %409, i64 %idx.ext.i
  store i8* %add.ptr.i, i8** %ffmt.addr.i, align 8
  store i32 0, i32* %m.i, align 4
  br label %if.end645.i

if.end645.i:                                      ; preds = %if.then643.i, %if.then637.i
  %410 = load i32* %sgn.i, align 4
  %tobool646.i = icmp ne i32 %410, 0
  br i1 %tobool646.i, label %if.then647.i, label %if.else649.i

if.then647.i:                                     ; preds = %if.end645.i
  %411 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %411, align 1
  br label %if.end651.i

if.else649.i:                                     ; preds = %if.end645.i
  %412 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %412, align 1
  br label %if.end651.i

if.end651.i:                                      ; preds = %if.else649.i, %if.then647.i
  %413 = load i32* %space.i, align 4
  %414 = load i32* %sgn.i, align 4
  %or652.i = or i32 %413, %414
  %415 = load i8** %ffmt.addr.i, align 8
  %idx.ext653.i = sext i32 %or652.i to i64
  %add.ptr654.i = getelementptr inbounds i8* %415, i64 %idx.ext653.i
  store i8* %add.ptr654.i, i8** %ffmt.addr.i, align 8
  br label %if.end675.i

if.else655.i:                                     ; preds = %for.end633.i
  %416 = load i32* %firstfwd.i, align 4
  %mul656.i = mul nsw i32 %416, 9
  %417 = load i32* %firstdigit.i, align 4
  %add657.i = add nsw i32 %mul656.i, %417
  %sub658.i = sub nsw i32 0, %add657.i
  store i32 %sub658.i, i32* %iexp.i, align 4
  %418 = load i32* %iexp.i, align 4
  %cmp659.i = icmp slt i32 %418, -1
  %conv660.i = zext i1 %cmp659.i to i32
  store i32 %conv660.i, i32* %usee.i, align 4
  %419 = load i32* %sgn.i, align 4
  %tobool661.i = icmp ne i32 %419, 0
  br i1 %tobool661.i, label %if.then662.i, label %if.else664.i

if.then662.i:                                     ; preds = %if.else655.i
  %420 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %420, align 1
  br label %if.end666.i

if.else664.i:                                     ; preds = %if.else655.i
  %421 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %421, align 1
  br label %if.end666.i

if.end666.i:                                      ; preds = %if.else664.i, %if.then662.i
  %422 = load i32* %space.i, align 4
  %423 = load i32* %sgn.i, align 4
  %or667.i = or i32 %422, %423
  %424 = load i8** %ffmt.addr.i, align 8
  %idx.ext668.i = sext i32 %or667.i to i64
  %add.ptr669.i = getelementptr inbounds i8* %424, i64 %idx.ext668.i
  store i8* %add.ptr669.i, i8** %ffmt.addr.i, align 8
  %425 = load i32* %usee.i, align 4
  %tobool670.i = icmp ne i32 %425, 0
  br i1 %tobool670.i, label %if.end674.i, label %if.then671.i

if.then671.i:                                     ; preds = %if.end666.i
  %426 = load i8** %ffmt.addr.i, align 8
  store i8 48, i8* %426, align 1
  %427 = load i8** %ffmt.addr.i, align 8
  %arrayidx673.i = getelementptr inbounds i8* %427, i64 1
  store i8 46, i8* %arrayidx673.i, align 1
  store i32 2, i32* %m.i, align 4
  br label %if.end674.i

if.end674.i:                                      ; preds = %if.then671.i, %if.end666.i
  br label %if.end675.i

if.end675.i:                                      ; preds = %if.end674.i, %if.end651.i
  %428 = load i32* %usee.i, align 4
  %tobool676.i = icmp ne i32 %428, 0
  br i1 %tobool676.i, label %if.then677.i, label %if.end679.i

if.then677.i:                                     ; preds = %if.end675.i
  %429 = load i32* %w.addr.i, align 4
  %inc678.i = add nsw i32 %429, 1
  store i32 %inc678.i, i32* %w.addr.i, align 4
  br label %if.end679.i

if.end679.i:                                      ; preds = %if.then677.i, %if.end675.i
  store i32 0, i32* %kbk.i, align 4
  %430 = load i32* %kbk.i, align 4
  %inc680.i = add nsw i32 %430, 1
  store i32 %inc680.i, i32* %kbk.i, align 4
  %idxprom681.i = sext i32 %430 to i64
  %arrayidx682.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom681.i
  %431 = load i32* %arrayidx682.i, align 4
  store i32 %431, i32* %k.i, align 4
  %432 = load i32* %pose.i, align 4
  store i32 %432, i32* %i.i, align 4
  br label %for.cond683.i

for.cond683.i:                                    ; preds = %if.end698.i, %if.end679.i
  %433 = load i32* %i.i, align 4
  %cmp684.i = icmp sge i32 %433, 0
  br i1 %cmp684.i, label %for.body686.i, label %for.end701.i

for.body686.i:                                    ; preds = %for.cond683.i
  %434 = load i32* %k.i, align 4
  %div687.i = sdiv i32 %434, 10
  store i32 %div687.i, i32* %j.i, align 4
  %435 = load i32* %k.i, align 4
  %436 = load i32* %j.i, align 4
  %mul688.i = mul nsw i32 %436, 10
  %sub689.i = sub nsw i32 %435, %mul688.i
  store i32 %sub689.i, i32* %k.i, align 4
  %437 = load i32* %i.i, align 4
  %438 = load i32* %w.addr.i, align 4
  %cmp690.i = icmp slt i32 %437, %438
  br i1 %cmp690.i, label %if.then692.i, label %if.end698.i

if.then692.i:                                     ; preds = %for.body686.i
  %439 = load i32* %k.i, align 4
  %add693.i = add nsw i32 48, %439
  %conv694.i = trunc i32 %add693.i to i8
  %440 = load i32* %i.i, align 4
  %441 = load i32* %m.i, align 4
  %add695.i = add nsw i32 %440, %441
  %idxprom696.i = sext i32 %add695.i to i64
  %442 = load i8** %ffmt.addr.i, align 8
  %arrayidx697.i = getelementptr inbounds i8* %442, i64 %idxprom696.i
  store i8 %conv694.i, i8* %arrayidx697.i, align 1
  br label %if.end698.i

if.end698.i:                                      ; preds = %if.then692.i, %for.body686.i
  %443 = load i32* %j.i, align 4
  store i32 %443, i32* %k.i, align 4
  %444 = load i32* %i.i, align 4
  %dec700.i = add nsw i32 %444, -1
  store i32 %dec700.i, i32* %i.i, align 4
  br label %for.cond683.i

for.end701.i:                                     ; preds = %for.cond683.i
  %445 = load i32* %pose.i, align 4
  %add702.i = add nsw i32 %445, 1
  store i32 %add702.i, i32* %ii.i, align 4
  %446 = load i32* %kbk.i, align 4
  %447 = load i32* %kmx.i, align 4
  %add703.i = add nsw i32 %447, 1
  %cmp704.i = icmp eq i32 %446, %add703.i
  br i1 %cmp704.i, label %if.then706.i, label %if.end723.i

if.then706.i:                                     ; preds = %for.end701.i
  %448 = load i32* %ii.i, align 4
  %449 = load i32* %m.i, align 4
  %add707.i = add nsw i32 %448, %449
  %idxprom708.i = sext i32 %add707.i to i64
  %450 = load i8** %ffmt.addr.i, align 8
  %arrayidx709.i = getelementptr inbounds i8* %450, i64 %idxprom708.i
  store i8 46, i8* %arrayidx709.i, align 1
  %451 = load i32* %ii.i, align 4
  %452 = load i32* %w.addr.i, align 4
  %cmp710.i = icmp slt i32 %451, %452
  br i1 %cmp710.i, label %if.then712.i, label %if.end714.i

if.then712.i:                                     ; preds = %if.then706.i
  %453 = load i32* %w.addr.i, align 4
  %inc713.i = add nsw i32 %453, 1
  store i32 %inc713.i, i32* %w.addr.i, align 4
  br label %if.end714.i

if.end714.i:                                      ; preds = %if.then712.i, %if.then706.i
  %454 = load i32* %ii.i, align 4
  %455 = load i32* %w.addr.i, align 4
  %cmp715.i = icmp eq i32 %454, %455
  br i1 %cmp715.i, label %land.lhs.true717.i, label %if.end721.i

land.lhs.true717.i:                               ; preds = %if.end714.i
  %456 = load i32* %usee.i, align 4
  %tobool718.i = icmp ne i32 %456, 0
  br i1 %tobool718.i, label %if.end721.i, label %if.then719.i

if.then719.i:                                     ; preds = %land.lhs.true717.i
  %457 = load i32* %w.addr.i, align 4
  %inc720.i = add nsw i32 %457, 1
  store i32 %inc720.i, i32* %w.addr.i, align 4
  br label %if.end721.i

if.end721.i:                                      ; preds = %if.then719.i, %land.lhs.true717.i, %if.end714.i
  %458 = load i32* %ii.i, align 4
  %inc722.i = add nsw i32 %458, 1
  store i32 %inc722.i, i32* %ii.i, align 4
  br label %if.end723.i

if.end723.i:                                      ; preds = %if.end721.i, %for.end701.i
  br label %while.cond724.i

while.cond724.i:                                  ; preds = %if.end772.i, %if.end723.i
  %459 = load i32* %ii.i, align 4
  %460 = load i32* %w.addr.i, align 4
  %cmp725.i = icmp slt i32 %459, %460
  br i1 %cmp725.i, label %while.body727.i, label %while.end773.i

while.body727.i:                                  ; preds = %while.cond724.i
  %461 = load i32* %kbk.i, align 4
  %inc728.i = add nsw i32 %461, 1
  store i32 %inc728.i, i32* %kbk.i, align 4
  %idxprom729.i = sext i32 %461 to i64
  %arrayidx730.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom729.i
  %462 = load i32* %arrayidx730.i, align 4
  store i32 %462, i32* %k.i, align 4
  %463 = load i32* %ii.i, align 4
  %add731.i = add nsw i32 8, %463
  store i32 %add731.i, i32* %i.i, align 4
  br label %for.cond732.i

for.cond732.i:                                    ; preds = %if.end747.i, %while.body727.i
  %464 = load i32* %i.i, align 4
  %465 = load i32* %ii.i, align 4
  %cmp733.i = icmp sge i32 %464, %465
  br i1 %cmp733.i, label %for.body735.i, label %for.end750.i

for.body735.i:                                    ; preds = %for.cond732.i
  %466 = load i32* %k.i, align 4
  %div736.i = sdiv i32 %466, 10
  store i32 %div736.i, i32* %j.i, align 4
  %467 = load i32* %k.i, align 4
  %468 = load i32* %j.i, align 4
  %mul737.i = mul nsw i32 %468, 10
  %sub738.i = sub nsw i32 %467, %mul737.i
  store i32 %sub738.i, i32* %k.i, align 4
  %469 = load i32* %i.i, align 4
  %470 = load i32* %w.addr.i, align 4
  %cmp739.i = icmp slt i32 %469, %470
  br i1 %cmp739.i, label %if.then741.i, label %if.end747.i

if.then741.i:                                     ; preds = %for.body735.i
  %471 = load i32* %k.i, align 4
  %add742.i = add nsw i32 48, %471
  %conv743.i = trunc i32 %add742.i to i8
  %472 = load i32* %i.i, align 4
  %473 = load i32* %m.i, align 4
  %add744.i = add nsw i32 %472, %473
  %idxprom745.i = sext i32 %add744.i to i64
  %474 = load i8** %ffmt.addr.i, align 8
  %arrayidx746.i = getelementptr inbounds i8* %474, i64 %idxprom745.i
  store i8 %conv743.i, i8* %arrayidx746.i, align 1
  br label %if.end747.i

if.end747.i:                                      ; preds = %if.then741.i, %for.body735.i
  %475 = load i32* %j.i, align 4
  store i32 %475, i32* %k.i, align 4
  %476 = load i32* %i.i, align 4
  %dec749.i = add nsw i32 %476, -1
  store i32 %dec749.i, i32* %i.i, align 4
  br label %for.cond732.i

for.end750.i:                                     ; preds = %for.cond732.i
  %477 = load i32* %ii.i, align 4
  %add751.i = add nsw i32 %477, 9
  store i32 %add751.i, i32* %ii.i, align 4
  %478 = load i32* %kbk.i, align 4
  %479 = load i32* %kmx.i, align 4
  %add752.i = add nsw i32 %479, 1
  %cmp753.i = icmp eq i32 %478, %add752.i
  br i1 %cmp753.i, label %if.then755.i, label %if.end772.i

if.then755.i:                                     ; preds = %for.end750.i
  %480 = load i32* %ii.i, align 4
  %481 = load i32* %m.i, align 4
  %add756.i = add nsw i32 %480, %481
  %idxprom757.i = sext i32 %add756.i to i64
  %482 = load i8** %ffmt.addr.i, align 8
  %arrayidx758.i = getelementptr inbounds i8* %482, i64 %idxprom757.i
  store i8 46, i8* %arrayidx758.i, align 1
  %483 = load i32* %ii.i, align 4
  %484 = load i32* %w.addr.i, align 4
  %cmp759.i = icmp slt i32 %483, %484
  br i1 %cmp759.i, label %if.then761.i, label %if.end763.i

if.then761.i:                                     ; preds = %if.then755.i
  %485 = load i32* %w.addr.i, align 4
  %inc762.i = add nsw i32 %485, 1
  store i32 %inc762.i, i32* %w.addr.i, align 4
  br label %if.end763.i

if.end763.i:                                      ; preds = %if.then761.i, %if.then755.i
  %486 = load i32* %ii.i, align 4
  %487 = load i32* %w.addr.i, align 4
  %cmp764.i = icmp eq i32 %486, %487
  br i1 %cmp764.i, label %land.lhs.true766.i, label %if.end770.i

land.lhs.true766.i:                               ; preds = %if.end763.i
  %488 = load i32* %usee.i, align 4
  %tobool767.i = icmp ne i32 %488, 0
  br i1 %tobool767.i, label %if.end770.i, label %if.then768.i

if.then768.i:                                     ; preds = %land.lhs.true766.i
  %489 = load i32* %w.addr.i, align 4
  %inc769.i = add nsw i32 %489, 1
  store i32 %inc769.i, i32* %w.addr.i, align 4
  br label %if.end770.i

if.end770.i:                                      ; preds = %if.then768.i, %land.lhs.true766.i, %if.end763.i
  %490 = load i32* %ii.i, align 4
  %inc771.i = add nsw i32 %490, 1
  store i32 %inc771.i, i32* %ii.i, align 4
  br label %if.end772.i

if.end772.i:                                      ; preds = %if.end770.i, %for.end750.i
  br label %while.cond724.i

while.end773.i:                                   ; preds = %while.cond724.i
  %491 = load i32* %usee.i, align 4
  %tobool774.i = icmp ne i32 %491, 0
  br i1 %tobool774.i, label %if.then775.i, label %if.else836.i

if.then775.i:                                     ; preds = %while.end773.i
  %492 = load i8** %ffmt.addr.i, align 8
  %arrayidx776.i = getelementptr inbounds i8* %492, i64 1
  %493 = load i8* %arrayidx776.i, align 1
  %494 = load i8** %ffmt.addr.i, align 8
  store i8 %493, i8* %494, align 1
  %495 = load i8** %ffmt.addr.i, align 8
  %arrayidx778.i = getelementptr inbounds i8* %495, i64 1
  store i8 46, i8* %arrayidx778.i, align 1
  %496 = load i32* %w.addr.i, align 4
  %add779.i = add nsw i32 %496, 1
  %idxprom780.i = sext i32 %add779.i to i64
  %497 = load i8** %ffmt.addr.i, align 8
  %arrayidx781.i = getelementptr inbounds i8* %497, i64 %idxprom780.i
  store i8 69, i8* %arrayidx781.i, align 1
  %498 = load i32* %iexp.i, align 4
  %cmp782.i = icmp sge i32 %498, 0
  br i1 %cmp782.i, label %if.then784.i, label %if.else788.i

if.then784.i:                                     ; preds = %if.then775.i
  %499 = load i32* %w.addr.i, align 4
  %add785.i = add nsw i32 %499, 2
  %idxprom786.i = sext i32 %add785.i to i64
  %500 = load i8** %ffmt.addr.i, align 8
  %arrayidx787.i = getelementptr inbounds i8* %500, i64 %idxprom786.i
  store i8 43, i8* %arrayidx787.i, align 1
  br label %if.end793.i

if.else788.i:                                     ; preds = %if.then775.i
  %501 = load i32* %w.addr.i, align 4
  %add789.i = add nsw i32 %501, 2
  %idxprom790.i = sext i32 %add789.i to i64
  %502 = load i8** %ffmt.addr.i, align 8
  %arrayidx791.i = getelementptr inbounds i8* %502, i64 %idxprom790.i
  store i8 45, i8* %arrayidx791.i, align 1
  %503 = load i32* %iexp.i, align 4
  %sub792.i = sub nsw i32 0, %503
  store i32 %sub792.i, i32* %iexp.i, align 4
  br label %if.end793.i

if.end793.i:                                      ; preds = %if.else788.i, %if.then784.i
  %504 = load i32* %ldw.addr.i, align 4
  %and794.i = and i32 %504, 2
  %tobool795.i = icmp ne i32 %and794.i, 0
  br i1 %tobool795.i, label %if.then796.i, label %if.else800.i

if.then796.i:                                     ; preds = %if.end793.i
  %505 = load i32* %w.addr.i, align 4
  %add797.i = add nsw i32 %505, 5
  %idxprom798.i = sext i32 %add797.i to i64
  %506 = load i8** %ffmt.addr.i, align 8
  %arrayidx799.i = getelementptr inbounds i8* %506, i64 %idxprom798.i
  store i8 0, i8* %arrayidx799.i, align 1
  %507 = load i32* %iexp.i, align 4
  store i32 %507, i32* %j.i, align 4
  br label %if.end812.i

if.else800.i:                                     ; preds = %if.end793.i
  %508 = load i32* %iexp.i, align 4
  store i32 %508, i32* %k.i, align 4
  %509 = load i32* %w.addr.i, align 4
  %add801.i = add nsw i32 %509, 6
  %idxprom802.i = sext i32 %add801.i to i64
  %510 = load i8** %ffmt.addr.i, align 8
  %arrayidx803.i = getelementptr inbounds i8* %510, i64 %idxprom802.i
  store i8 0, i8* %arrayidx803.i, align 1
  %511 = load i32* %k.i, align 4
  %div804.i = sdiv i32 %511, 10
  store i32 %div804.i, i32* %j.i, align 4
  %512 = load i32* %k.i, align 4
  %513 = load i32* %j.i, align 4
  %mul805.i = mul nsw i32 %513, 10
  %sub806.i = sub nsw i32 %512, %mul805.i
  store i32 %sub806.i, i32* %k.i, align 4
  %514 = load i32* %k.i, align 4
  %add807.i = add nsw i32 48, %514
  %conv808.i = trunc i32 %add807.i to i8
  %515 = load i32* %w.addr.i, align 4
  %add809.i = add nsw i32 %515, 5
  %idxprom810.i = sext i32 %add809.i to i64
  %516 = load i8** %ffmt.addr.i, align 8
  %arrayidx811.i = getelementptr inbounds i8* %516, i64 %idxprom810.i
  store i8 %conv808.i, i8* %arrayidx811.i, align 1
  br label %if.end812.i

if.end812.i:                                      ; preds = %if.else800.i, %if.then796.i
  %517 = load i32* %j.i, align 4
  %div813.i = sdiv i32 %517, 10
  store i32 %div813.i, i32* %k.i, align 4
  %518 = load i32* %j.i, align 4
  %519 = load i32* %k.i, align 4
  %mul814.i = mul nsw i32 %519, 10
  %sub815.i = sub nsw i32 %518, %mul814.i
  store i32 %sub815.i, i32* %j.i, align 4
  %520 = load i32* %j.i, align 4
  %add816.i = add nsw i32 48, %520
  %conv817.i = trunc i32 %add816.i to i8
  %521 = load i32* %w.addr.i, align 4
  %add818.i = add nsw i32 %521, 4
  %idxprom819.i = sext i32 %add818.i to i64
  %522 = load i8** %ffmt.addr.i, align 8
  %arrayidx820.i = getelementptr inbounds i8* %522, i64 %idxprom819.i
  store i8 %conv817.i, i8* %arrayidx820.i, align 1
  %523 = load i32* %k.i, align 4
  %div821.i = sdiv i32 %523, 10
  store i32 %div821.i, i32* %j.i, align 4
  %524 = load i32* %k.i, align 4
  %525 = load i32* %j.i, align 4
  %mul822.i = mul nsw i32 %525, 10
  %sub823.i = sub nsw i32 %524, %mul822.i
  store i32 %sub823.i, i32* %k.i, align 4
  %526 = load i32* %k.i, align 4
  %add824.i = add nsw i32 48, %526
  %conv825.i = trunc i32 %add824.i to i8
  %527 = load i32* %w.addr.i, align 4
  %add826.i = add nsw i32 %527, 3
  %idxprom827.i = sext i32 %add826.i to i64
  %528 = load i8** %ffmt.addr.i, align 8
  %arrayidx828.i = getelementptr inbounds i8* %528, i64 %idxprom827.i
  store i8 %conv825.i, i8* %arrayidx828.i, align 1
  %529 = load i32* %w.addr.i, align 4
  %add829.i = add nsw i32 %529, 6
  %530 = load i32* %space.i, align 4
  %531 = load i32* %sgn.i, align 4
  %or830.i = or i32 %530, %531
  %add831.i = add nsw i32 %add829.i, %or830.i
  %532 = load i32* %ldw.addr.i, align 4
  %and832.i = and i32 %532, 2
  %cmp833.i = icmp eq i32 %and832.i, 2
  %conv834.i = zext i1 %cmp833.i to i32
  %sub835.i = sub nsw i32 %add831.i, %conv834.i
  store i32 %sub835.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else836.i:                                     ; preds = %while.end773.i
  %533 = load i32* %iexp.i, align 4
  %cmp837.i = icmp slt i32 %533, 0
  br i1 %cmp837.i, label %if.then839.i, label %if.else846.i

if.then839.i:                                     ; preds = %if.else836.i
  %534 = load i32* %w.addr.i, align 4
  %add840.i = add nsw i32 %534, 2
  %idxprom841.i = sext i32 %add840.i to i64
  %535 = load i8** %ffmt.addr.i, align 8
  %arrayidx842.i = getelementptr inbounds i8* %535, i64 %idxprom841.i
  store i8 0, i8* %arrayidx842.i, align 1
  %536 = load i32* %w.addr.i, align 4
  %add843.i = add nsw i32 %536, 2
  %537 = load i32* %space.i, align 4
  %538 = load i32* %sgn.i, align 4
  %or844.i = or i32 %537, %538
  %add845.i = add nsw i32 %add843.i, %or844.i
  store i32 %add845.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else846.i:                                     ; preds = %if.else836.i
  %539 = load i32* %w.addr.i, align 4
  %idxprom847.i = sext i32 %539 to i64
  %540 = load i8** %ffmt.addr.i, align 8
  %arrayidx848.i = getelementptr inbounds i8* %540, i64 %idxprom847.i
  store i8 0, i8* %arrayidx848.i, align 1
  %541 = load i32* %w.addr.i, align 4
  %542 = load i32* %space.i, align 4
  %543 = load i32* %sgn.i, align 4
  %or849.i = or i32 %542, %543
  %add850.i = add nsw i32 %541, %or849.i
  %544 = load i32* %space.i, align 4
  %add851.i = add nsw i32 %add850.i, %544
  store i32 %add851.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

__pgf90io_sc_fp_ldw.exit:                         ; preds = %if.else846.i, %if.then839.i, %if.end812.i, %for.end79.i, %if.end47.i
  %545 = load i32* %retval.i
  store i32 %545, i32* %len, align 4
  %546 = load i32* %len, align 4
  %547 = load i32* %j, align 4
  %add26 = add nsw i32 %547, %546
  store i32 %add26, i32* %j, align 4
  %548 = load i32* %j, align 4
  %inc27 = add nsw i32 %548, 1
  store i32 %inc27, i32* %j, align 4
  %idxprom28 = sext i32 %548 to i64
  %549 = load i8** %p.addr, align 8
  %arrayidx29 = getelementptr inbounds i8* %549, i64 %idxprom28
  store i8 44, i8* %arrayidx29, align 1
  %550 = load float* %i.addr, align 4
  %conv30 = fpext float %550 to double
  %551 = load i8** %p.addr, align 8
  %552 = load i32* %j, align 4
  %idx.ext31 = sext i32 %552 to i64
  %add.ptr32 = getelementptr inbounds i8* %551, i64 %idx.ext31
  store double %conv30, double* %x.addr.i44, align 8
  store i8* %add.ptr32, i8** %ffmt.addr.i45, align 8
  store i32 7, i32* %w.addr.i46, align 4
  store i32 0, i32* %d.addr.i47, align 4
  store i32 2, i32* %ldw.addr.i48, align 4
  store i32 0, i32* %i.i57, align 4
  br label %for.cond.i93

for.cond.i93:                                     ; preds = %for.body.i96, %__pgf90io_sc_fp_ldw.exit
  %553 = load i32* %i.i57, align 4
  %cmp.i92 = icmp slt i32 %553, 104
  br i1 %cmp.i92, label %for.body.i96, label %for.end.i109

for.body.i96:                                     ; preds = %for.cond.i93
  %554 = load i32* %i.i57, align 4
  %idxprom.i94 = sext i32 %554 to i64
  %arrayidx.i95 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom.i94
  store i32 0, i32* %arrayidx.i95, align 4
  %555 = load i32* %i.i57, align 4
  %inc.i97 = add nsw i32 %555, 1
  store i32 %inc.i97, i32* %i.i57, align 4
  br label %for.cond.i93

for.end.i109:                                     ; preds = %for.cond.i93
  %arrayidx1.i98 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 70
  store i32* %arrayidx1.i98, i32** %iexta.i55, align 8
  %arrayidx2.i99 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 35
  store i32* %arrayidx2.i99, i32** %iextc.i56, align 8
  %556 = bitcast double* %x.addr.i44 to i64*
  %557 = load i64* %556, align 8
  store i64 %557, i64* %lb0.i74, align 8
  %558 = load i64* %lb0.i74, align 8
  %and.i100 = and i64 %558, 9218868437227405312
  %shr.i101 = lshr i64 %and.i100, 52
  %sub.i102 = sub i64 %shr.i101, 1023
  %conv.i103 = trunc i64 %sub.i102 to i32
  store i32 %conv.i103, i32* %iexp.i49, align 4
  %559 = load i64* %lb0.i74, align 8
  %and3.i104 = and i64 %559, -9223372036854775808
  %shr4.i105 = lshr i64 %and3.i104, 63
  %conv5.i106 = trunc i64 %shr4.i105 to i32
  store i32 %conv5.i106, i32* %sgn.i72, align 4
  %560 = load i64* %lb0.i74, align 8
  %and6.i107 = and i64 %560, 4503599627370495
  store i64 %and6.i107, i64* %lb1.i75, align 8
  %561 = load i32* %iexp.i49, align 4
  %cmp7.i108 = icmp eq i32 %561, 1024
  br i1 %cmp7.i108, label %if.then.i112, label %if.end52.i158

if.then.i112:                                     ; preds = %for.end.i109
  %562 = load i32* %ldw.addr.i48, align 4
  %and9.i110 = and i32 %562, 4
  %tobool.i111 = icmp ne i32 %and9.i110, 0
  br i1 %tobool.i111, label %if.then10.i114, label %if.end.i115

if.then10.i114:                                   ; preds = %if.then.i112
  %563 = load i32* %w.addr.i46, align 4
  %inc11.i113 = add nsw i32 %563, 1
  store i32 %inc11.i113, i32* %w.addr.i46, align 4
  br label %if.end.i115

if.end.i115:                                      ; preds = %if.then10.i114, %if.then.i112
  store i32 0, i32* %i.i57, align 4
  br label %for.cond12.i118

for.cond12.i118:                                  ; preds = %for.body15.i121, %if.end.i115
  %564 = load i32* %i.i57, align 4
  %565 = load i32* %w.addr.i46, align 4
  %add.i116 = add nsw i32 %565, 4
  %cmp13.i117 = icmp slt i32 %564, %add.i116
  br i1 %cmp13.i117, label %for.body15.i121, label %for.end20.i124

for.body15.i121:                                  ; preds = %for.cond12.i118
  %566 = load i32* %i.i57, align 4
  %idxprom16.i119 = sext i32 %566 to i64
  %567 = load i8** %ffmt.addr.i45, align 8
  %arrayidx17.i120 = getelementptr inbounds i8* %567, i64 %idxprom16.i119
  store i8 32, i8* %arrayidx17.i120, align 1
  %568 = load i32* %i.i57, align 4
  %inc19.i122 = add nsw i32 %568, 1
  store i32 %inc19.i122, i32* %i.i57, align 4
  br label %for.cond12.i118

for.end20.i124:                                   ; preds = %for.cond12.i118
  %569 = load i64* %lb1.i75, align 8
  %tobool21.i123 = icmp ne i64 %569, 0
  br i1 %tobool21.i123, label %if.then22.i134, label %if.else.i136

if.then22.i134:                                   ; preds = %for.end20.i124
  %570 = load i32* %w.addr.i46, align 4
  %add23.i125 = add nsw i32 %570, 4
  %idxprom24.i126 = sext i32 %add23.i125 to i64
  %571 = load i8** %ffmt.addr.i45, align 8
  %arrayidx25.i127 = getelementptr inbounds i8* %571, i64 %idxprom24.i126
  store i8 78, i8* %arrayidx25.i127, align 1
  %572 = load i32* %w.addr.i46, align 4
  %add26.i128 = add nsw i32 %572, 5
  %idxprom27.i129 = sext i32 %add26.i128 to i64
  %573 = load i8** %ffmt.addr.i45, align 8
  %arrayidx28.i130 = getelementptr inbounds i8* %573, i64 %idxprom27.i129
  store i8 97, i8* %arrayidx28.i130, align 1
  %574 = load i32* %w.addr.i46, align 4
  %add29.i131 = add nsw i32 %574, 6
  %idxprom30.i132 = sext i32 %add29.i131 to i64
  %575 = load i8** %ffmt.addr.i45, align 8
  %arrayidx31.i133 = getelementptr inbounds i8* %575, i64 %idxprom30.i132
  store i8 78, i8* %arrayidx31.i133, align 1
  br label %if.end47.i155

if.else.i136:                                     ; preds = %for.end20.i124
  %576 = load i32* %sgn.i72, align 4
  %tobool32.i135 = icmp ne i32 %576, 0
  br i1 %tobool32.i135, label %if.then33.i140, label %if.end37.i150

if.then33.i140:                                   ; preds = %if.else.i136
  %577 = load i32* %w.addr.i46, align 4
  %add34.i137 = add nsw i32 %577, 3
  %idxprom35.i138 = sext i32 %add34.i137 to i64
  %578 = load i8** %ffmt.addr.i45, align 8
  %arrayidx36.i139 = getelementptr inbounds i8* %578, i64 %idxprom35.i138
  store i8 45, i8* %arrayidx36.i139, align 1
  br label %if.end37.i150

if.end37.i150:                                    ; preds = %if.then33.i140, %if.else.i136
  %579 = load i32* %w.addr.i46, align 4
  %add38.i141 = add nsw i32 %579, 4
  %idxprom39.i142 = sext i32 %add38.i141 to i64
  %580 = load i8** %ffmt.addr.i45, align 8
  %arrayidx40.i143 = getelementptr inbounds i8* %580, i64 %idxprom39.i142
  store i8 73, i8* %arrayidx40.i143, align 1
  %581 = load i32* %w.addr.i46, align 4
  %add41.i144 = add nsw i32 %581, 5
  %idxprom42.i145 = sext i32 %add41.i144 to i64
  %582 = load i8** %ffmt.addr.i45, align 8
  %arrayidx43.i146 = getelementptr inbounds i8* %582, i64 %idxprom42.i145
  store i8 110, i8* %arrayidx43.i146, align 1
  %583 = load i32* %w.addr.i46, align 4
  %add44.i147 = add nsw i32 %583, 6
  %idxprom45.i148 = sext i32 %add44.i147 to i64
  %584 = load i8** %ffmt.addr.i45, align 8
  %arrayidx46.i149 = getelementptr inbounds i8* %584, i64 %idxprom45.i148
  store i8 102, i8* %arrayidx46.i149, align 1
  br label %if.end47.i155

if.end47.i155:                                    ; preds = %if.end37.i150, %if.then22.i134
  %585 = load i32* %w.addr.i46, align 4
  %add48.i151 = add nsw i32 %585, 7
  %idxprom49.i152 = sext i32 %add48.i151 to i64
  %586 = load i8** %ffmt.addr.i45, align 8
  %arrayidx50.i153 = getelementptr inbounds i8* %586, i64 %idxprom49.i152
  store i8 0, i8* %arrayidx50.i153, align 1
  %587 = load i32* %w.addr.i46, align 4
  %add51.i154 = add nsw i32 %587, 7
  store i32 %add51.i154, i32* %retval.i43
  br label %__pgf90io_sc_fp_ldw.exit885

if.end52.i158:                                    ; preds = %for.end.i109
  %588 = load i32* %iexp.i49, align 4
  %add53.i156 = add nsw i32 %588, 1023
  %tobool54.i157 = icmp ne i32 %add53.i156, 0
  br i1 %tobool54.i157, label %if.then55.i160, label %if.else56.i162

if.then55.i160:                                   ; preds = %if.end52.i158
  %589 = load i64* %lb1.i75, align 8
  %or.i159 = or i64 %589, 4503599627370496
  store i64 %or.i159, i64* %lb1.i75, align 8
  br label %if.end85.i187

if.else56.i162:                                   ; preds = %if.end52.i158
  %590 = load i64* %lb1.i75, align 8
  %tobool57.i161 = icmp ne i64 %590, 0
  br i1 %tobool57.i161, label %if.then58.i164, label %if.else60.i166

if.then58.i164:                                   ; preds = %if.else56.i162
  %591 = load i32* %iexp.i49, align 4
  %inc59.i163 = add nsw i32 %591, 1
  store i32 %inc59.i163, i32* %iexp.i49, align 4
  br label %if.end85.i187

if.else60.i166:                                   ; preds = %if.else56.i162
  %592 = load i8** %ffmt.addr.i45, align 8
  store i8 32, i8* %592, align 1
  %593 = load i32* %sgn.i72, align 4
  %tobool62.i165 = icmp ne i32 %593, 0
  br i1 %tobool62.i165, label %if.then63.i168, label %if.else65.i170

if.then63.i168:                                   ; preds = %if.else60.i166
  %594 = load i8** %ffmt.addr.i45, align 8
  %arrayidx64.i167 = getelementptr inbounds i8* %594, i64 1
  store i8 45, i8* %arrayidx64.i167, align 1
  br label %if.end67.i173

if.else65.i170:                                   ; preds = %if.else60.i166
  %595 = load i8** %ffmt.addr.i45, align 8
  %arrayidx66.i169 = getelementptr inbounds i8* %595, i64 1
  store i8 32, i8* %arrayidx66.i169, align 1
  br label %if.end67.i173

if.end67.i173:                                    ; preds = %if.else65.i170, %if.then63.i168
  %596 = load i8** %ffmt.addr.i45, align 8
  %arrayidx68.i171 = getelementptr inbounds i8* %596, i64 2
  store i8 48, i8* %arrayidx68.i171, align 1
  %597 = load i8** %ffmt.addr.i45, align 8
  %arrayidx69.i172 = getelementptr inbounds i8* %597, i64 3
  store i8 46, i8* %arrayidx69.i172, align 1
  store i32 4, i32* %i.i57, align 4
  br label %for.cond70.i176

for.cond70.i176:                                  ; preds = %for.body74.i179, %if.end67.i173
  %598 = load i32* %i.i57, align 4
  %599 = load i32* %w.addr.i46, align 4
  %add71.i174 = add nsw i32 %599, 3
  %cmp72.i175 = icmp slt i32 %598, %add71.i174
  br i1 %cmp72.i175, label %for.body74.i179, label %for.end79.i185

for.body74.i179:                                  ; preds = %for.cond70.i176
  %600 = load i32* %i.i57, align 4
  %idxprom75.i177 = sext i32 %600 to i64
  %601 = load i8** %ffmt.addr.i45, align 8
  %arrayidx76.i178 = getelementptr inbounds i8* %601, i64 %idxprom75.i177
  store i8 48, i8* %arrayidx76.i178, align 1
  %602 = load i32* %i.i57, align 4
  %inc78.i180 = add nsw i32 %602, 1
  store i32 %inc78.i180, i32* %i.i57, align 4
  br label %for.cond70.i176

for.end79.i185:                                   ; preds = %for.cond70.i176
  %603 = load i32* %w.addr.i46, align 4
  %add80.i181 = add nsw i32 %603, 3
  %idxprom81.i182 = sext i32 %add80.i181 to i64
  %604 = load i8** %ffmt.addr.i45, align 8
  %arrayidx82.i183 = getelementptr inbounds i8* %604, i64 %idxprom81.i182
  store i8 0, i8* %arrayidx82.i183, align 1
  %605 = load i32* %w.addr.i46, align 4
  %add83.i184 = add nsw i32 %605, 3
  store i32 %add83.i184, i32* %retval.i43
  br label %__pgf90io_sc_fp_ldw.exit885

if.end85.i187:                                    ; preds = %if.then58.i164, %if.then55.i160
  %606 = load i32* %iexp.i49, align 4
  %cmp86.i186 = icmp sge i32 %606, 0
  br i1 %cmp86.i186, label %if.then88.i191, label %if.else90.i198

if.then88.i191:                                   ; preds = %if.end85.i187
  %607 = load i32* %iexp.i49, align 4
  %div.i188 = sdiv i32 %607, 32
  store i32 %div.i188, i32* %iwd0.i50, align 4
  %608 = load i32* %iexp.i49, align 4
  %609 = load i32* %iwd0.i50, align 4
  %mul.i189 = mul nsw i32 %609, 32
  %sub89.i190 = sub nsw i32 %608, %mul.i189
  store i32 %sub89.i190, i32* %ibt0.i76, align 4
  br label %if.end97.i200

if.else90.i198:                                   ; preds = %if.end85.i187
  %610 = load i32* %iexp.i49, align 4
  %add91.i192 = add nsw i32 %610, 1
  %div92.i193 = sdiv i32 %add91.i192, 32
  store i32 %div92.i193, i32* %iwd0.i50, align 4
  %611 = load i32* %iexp.i49, align 4
  %add93.i194 = add nsw i32 %611, 32
  %612 = load i32* %iwd0.i50, align 4
  %mul94.i195 = mul nsw i32 %612, 32
  %sub95.i196 = sub nsw i32 %add93.i194, %mul94.i195
  store i32 %sub95.i196, i32* %ibt0.i76, align 4
  %613 = load i32* %iwd0.i50, align 4
  %add96.i197 = add nsw i32 %613, 33
  store i32 %add96.i197, i32* %iwd0.i50, align 4
  br label %if.end97.i200

if.end97.i200:                                    ; preds = %if.else90.i198, %if.then88.i191
  %614 = load i32* %iwd0.i50, align 4
  %tobool98.i199 = icmp ne i32 %614, 0
  br i1 %tobool98.i199, label %cond.true.i202, label %cond.false.i203

cond.true.i202:                                   ; preds = %if.end97.i200
  %615 = load i32* %iwd0.i50, align 4
  %sub99.i201 = sub nsw i32 %615, 1
  br label %cond.end.i206

cond.false.i203:                                  ; preds = %if.end97.i200
  br label %cond.end.i206

cond.end.i206:                                    ; preds = %cond.false.i203, %cond.true.i202
  %cond.i204 = phi i32 [ %sub99.i201, %cond.true.i202 ], [ 33, %cond.false.i203 ]
  store i32 %cond.i204, i32* %iwdm1.i51, align 4
  %616 = load i32* %iwdm1.i51, align 4
  %tobool100.i205 = icmp ne i32 %616, 0
  br i1 %tobool100.i205, label %cond.true101.i208, label %cond.false103.i209

cond.true101.i208:                                ; preds = %cond.end.i206
  %617 = load i32* %iwdm1.i51, align 4
  %sub102.i207 = sub nsw i32 %617, 1
  br label %cond.end104.i212

cond.false103.i209:                               ; preds = %cond.end.i206
  br label %cond.end104.i212

cond.end104.i212:                                 ; preds = %cond.false103.i209, %cond.true101.i208
  %cond105.i210 = phi i32 [ %sub102.i207, %cond.true101.i208 ], [ 33, %cond.false103.i209 ]
  store i32 %cond105.i210, i32* %iwdm2.i52, align 4
  %618 = load i32* %ibt0.i76, align 4
  %cmp106.i211 = icmp ult i32 %618, 20
  br i1 %cmp106.i211, label %if.then108.i233, label %if.else127.i247

if.then108.i233:                                  ; preds = %cond.end104.i212
  %619 = load i64* %lb1.i75, align 8
  %620 = load i32* %ibt0.i76, align 4
  %sub109.i213 = sub i32 52, %620
  %sh_prom.i214 = zext i32 %sub109.i213 to i64
  %shr110.i215 = lshr i64 %619, %sh_prom.i214
  %conv111.i216 = trunc i64 %shr110.i215 to i32
  %621 = load i32* %iwd0.i50, align 4
  %idxprom112.i217 = sext i32 %621 to i64
  %622 = load i32** %iexta.i55, align 8
  %arrayidx113.i218 = getelementptr inbounds i32* %622, i64 %idxprom112.i217
  store i32 %conv111.i216, i32* %arrayidx113.i218, align 4
  %623 = load i64* %lb1.i75, align 8
  %624 = load i32* %ibt0.i76, align 4
  %sub114.i219 = sub i32 20, %624
  %sh_prom115.i220 = zext i32 %sub114.i219 to i64
  %shr116.i221 = lshr i64 %623, %sh_prom115.i220
  %and117.i222 = and i64 %shr116.i221, 4294967295
  %conv118.i223 = trunc i64 %and117.i222 to i32
  %625 = load i32* %iwdm1.i51, align 4
  %idxprom119.i224 = sext i32 %625 to i64
  %626 = load i32** %iexta.i55, align 8
  %arrayidx120.i225 = getelementptr inbounds i32* %626, i64 %idxprom119.i224
  store i32 %conv118.i223, i32* %arrayidx120.i225, align 4
  %627 = load i64* %lb1.i75, align 8
  %628 = load i32* %ibt0.i76, align 4
  %add121.i226 = add i32 %628, 12
  %sh_prom122.i227 = zext i32 %add121.i226 to i64
  %shl.i228 = shl i64 %627, %sh_prom122.i227
  %and123.i229 = and i64 %shl.i228, 4294967295
  %conv124.i230 = trunc i64 %and123.i229 to i32
  %629 = load i32* %iwdm2.i52, align 4
  %idxprom125.i231 = sext i32 %629 to i64
  %630 = load i32** %iexta.i55, align 8
  %arrayidx126.i232 = getelementptr inbounds i32* %630, i64 %idxprom125.i231
  store i32 %conv124.i230, i32* %arrayidx126.i232, align 4
  br label %if.end141.i249

if.else127.i247:                                  ; preds = %cond.end104.i212
  %631 = load i64* %lb1.i75, align 8
  %632 = load i32* %ibt0.i76, align 4
  %sub128.i234 = sub i32 52, %632
  %sh_prom129.i235 = zext i32 %sub128.i234 to i64
  %shr130.i236 = lshr i64 %631, %sh_prom129.i235
  %conv131.i237 = trunc i64 %shr130.i236 to i32
  %633 = load i32* %iwd0.i50, align 4
  %idxprom132.i238 = sext i32 %633 to i64
  %634 = load i32** %iexta.i55, align 8
  %arrayidx133.i239 = getelementptr inbounds i32* %634, i64 %idxprom132.i238
  store i32 %conv131.i237, i32* %arrayidx133.i239, align 4
  %635 = load i64* %lb1.i75, align 8
  %636 = load i32* %ibt0.i76, align 4
  %sub134.i240 = sub i32 %636, 20
  %sh_prom135.i241 = zext i32 %sub134.i240 to i64
  %shl136.i242 = shl i64 %635, %sh_prom135.i241
  %and137.i243 = and i64 %shl136.i242, 4294967295
  %conv138.i244 = trunc i64 %and137.i243 to i32
  %637 = load i32* %iwdm1.i51, align 4
  %idxprom139.i245 = sext i32 %637 to i64
  %638 = load i32** %iexta.i55, align 8
  %arrayidx140.i246 = getelementptr inbounds i32* %638, i64 %idxprom139.i245
  store i32 %conv138.i244, i32* %arrayidx140.i246, align 4
  br label %if.end141.i249

if.end141.i249:                                   ; preds = %if.else127.i247, %if.then108.i233
  %639 = load i32** %iextc.i56, align 8
  store i32 1, i32* %639, align 4
  store i32 1, i32* %kmx.i60, align 4
  %640 = load i32* %iexp.i49, align 4
  %cmp143.i248 = icmp sge i32 %640, 0
  br i1 %cmp143.i248, label %if.then145.i250, label %if.end228.i327

if.then145.i250:                                  ; preds = %if.end141.i249
  store i32 0, i32* %i.i57, align 4
  br label %for.cond146.i252

for.cond146.i252:                                 ; preds = %for.end224.i320, %if.then145.i250
  %641 = load i32* %i.i57, align 4
  %642 = load i32* %iwd0.i50, align 4
  %cmp147.i251 = icmp sle i32 %641, %642
  br i1 %cmp147.i251, label %for.body149.i253, label %for.end227.i322

for.body149.i253:                                 ; preds = %for.cond146.i252
  store i32 0, i32* %j.i58, align 4
  br label %for.cond150.i255

for.cond150.i255:                                 ; preds = %for.end217.i318, %for.body149.i253
  %643 = load i32* %j.i58, align 4
  %cmp151.i254 = icmp slt i32 %643, 32
  br i1 %cmp151.i254, label %for.body153.i261, label %for.end224.i320

for.body153.i261:                                 ; preds = %for.cond150.i255
  %644 = load i32* %i.i57, align 4
  %idxprom154.i256 = sext i32 %644 to i64
  %645 = load i32** %iexta.i55, align 8
  %arrayidx155.i257 = getelementptr inbounds i32* %645, i64 %idxprom154.i256
  %646 = load i32* %arrayidx155.i257, align 4
  %647 = load i32* %j.i58, align 4
  %shl156.i258 = shl i32 1, %647
  %and157.i259 = and i32 %646, %shl156.i258
  %tobool158.i260 = icmp ne i32 %and157.i259, 0
  br i1 %tobool158.i260, label %if.then159.i262, label %if.end190.i290

if.then159.i262:                                  ; preds = %for.body153.i261
  store i32 0, i32* %icarr.i53, align 4
  store i32 0, i32* %k.i59, align 4
  br label %for.cond160.i264

for.cond160.i264:                                 ; preds = %if.end183.i284, %if.then159.i262
  %648 = load i32* %k.i59, align 4
  %649 = load i32* %kmx.i60, align 4
  %cmp161.i263 = icmp slt i32 %648, %649
  br i1 %cmp161.i263, label %for.body163.i276, label %for.end186.i289

for.body163.i276:                                 ; preds = %for.cond160.i264
  %650 = load i32* %k.i59, align 4
  %idxprom164.i265 = sext i32 %650 to i64
  %arrayidx165.i266 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom164.i265
  %651 = load i32* %arrayidx165.i266, align 4
  %652 = load i32* %k.i59, align 4
  %idxprom166.i267 = sext i32 %652 to i64
  %653 = load i32** %iextc.i56, align 8
  %arrayidx167.i268 = getelementptr inbounds i32* %653, i64 %idxprom166.i267
  %654 = load i32* %arrayidx167.i268, align 4
  %add168.i269 = add i32 %651, %654
  %655 = load i32* %icarr.i53, align 4
  %add169.i270 = add i32 %add168.i269, %655
  %656 = load i32* %k.i59, align 4
  %idxprom170.i271 = sext i32 %656 to i64
  %arrayidx171.i272 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom170.i271
  store i32 %add169.i270, i32* %arrayidx171.i272, align 4
  %657 = load i32* %k.i59, align 4
  %idxprom172.i273 = sext i32 %657 to i64
  %arrayidx173.i274 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom172.i273
  %658 = load i32* %arrayidx173.i274, align 4
  %cmp174.i275 = icmp uge i32 %658, 1000000000
  br i1 %cmp174.i275, label %if.then176.i282, label %if.else182.i283

if.then176.i282:                                  ; preds = %for.body163.i276
  %659 = load i32* %k.i59, align 4
  %idxprom177.i277 = sext i32 %659 to i64
  %arrayidx178.i278 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom177.i277
  %660 = load i32* %arrayidx178.i278, align 4
  %sub179.i279 = sub i32 %660, 1000000000
  %661 = load i32* %k.i59, align 4
  %idxprom180.i280 = sext i32 %661 to i64
  %arrayidx181.i281 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom180.i280
  store i32 %sub179.i279, i32* %arrayidx181.i281, align 4
  store i32 1, i32* %icarr.i53, align 4
  br label %if.end183.i284

if.else182.i283:                                  ; preds = %for.body163.i276
  store i32 0, i32* %icarr.i53, align 4
  br label %if.end183.i284

if.end183.i284:                                   ; preds = %if.else182.i283, %if.then176.i282
  %662 = load i32* %k.i59, align 4
  %inc185.i285 = add nsw i32 %662, 1
  store i32 %inc185.i285, i32* %k.i59, align 4
  br label %for.cond160.i264

for.end186.i289:                                  ; preds = %for.cond160.i264
  %663 = load i32* %icarr.i53, align 4
  %664 = load i32* %kmx.i60, align 4
  %idxprom187.i286 = sext i32 %664 to i64
  %arrayidx188.i287 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom187.i286
  %665 = load i32* %arrayidx188.i287, align 4
  %add189.i288 = add i32 %665, %663
  store i32 %add189.i288, i32* %arrayidx188.i287, align 4
  br label %if.end190.i290

if.end190.i290:                                   ; preds = %for.end186.i289, %for.body153.i261
  store i32 0, i32* %icarr.i53, align 4
  store i32 0, i32* %k.i59, align 4
  br label %for.cond191.i292

for.cond191.i292:                                 ; preds = %if.end214.i312, %if.end190.i290
  %666 = load i32* %k.i59, align 4
  %667 = load i32* %kmx.i60, align 4
  %cmp192.i291 = icmp slt i32 %666, %667
  br i1 %cmp192.i291, label %for.body194.i304, label %for.end217.i318

for.body194.i304:                                 ; preds = %for.cond191.i292
  %668 = load i32* %k.i59, align 4
  %idxprom195.i293 = sext i32 %668 to i64
  %669 = load i32** %iextc.i56, align 8
  %arrayidx196.i294 = getelementptr inbounds i32* %669, i64 %idxprom195.i293
  %670 = load i32* %arrayidx196.i294, align 4
  %671 = load i32* %k.i59, align 4
  %idxprom197.i295 = sext i32 %671 to i64
  %672 = load i32** %iextc.i56, align 8
  %arrayidx198.i296 = getelementptr inbounds i32* %672, i64 %idxprom197.i295
  %673 = load i32* %arrayidx198.i296, align 4
  %add199.i297 = add i32 %670, %673
  %674 = load i32* %icarr.i53, align 4
  %add200.i298 = add i32 %add199.i297, %674
  %675 = load i32* %k.i59, align 4
  %idxprom201.i299 = sext i32 %675 to i64
  %676 = load i32** %iextc.i56, align 8
  %arrayidx202.i300 = getelementptr inbounds i32* %676, i64 %idxprom201.i299
  store i32 %add200.i298, i32* %arrayidx202.i300, align 4
  %677 = load i32* %k.i59, align 4
  %idxprom203.i301 = sext i32 %677 to i64
  %678 = load i32** %iextc.i56, align 8
  %arrayidx204.i302 = getelementptr inbounds i32* %678, i64 %idxprom203.i301
  %679 = load i32* %arrayidx204.i302, align 4
  %cmp205.i303 = icmp uge i32 %679, 1000000000
  br i1 %cmp205.i303, label %if.then207.i310, label %if.else213.i311

if.then207.i310:                                  ; preds = %for.body194.i304
  %680 = load i32* %k.i59, align 4
  %idxprom208.i305 = sext i32 %680 to i64
  %681 = load i32** %iextc.i56, align 8
  %arrayidx209.i306 = getelementptr inbounds i32* %681, i64 %idxprom208.i305
  %682 = load i32* %arrayidx209.i306, align 4
  %sub210.i307 = sub i32 %682, 1000000000
  %683 = load i32* %k.i59, align 4
  %idxprom211.i308 = sext i32 %683 to i64
  %684 = load i32** %iextc.i56, align 8
  %arrayidx212.i309 = getelementptr inbounds i32* %684, i64 %idxprom211.i308
  store i32 %sub210.i307, i32* %arrayidx212.i309, align 4
  store i32 1, i32* %icarr.i53, align 4
  br label %if.end214.i312

if.else213.i311:                                  ; preds = %for.body194.i304
  store i32 0, i32* %icarr.i53, align 4
  br label %if.end214.i312

if.end214.i312:                                   ; preds = %if.else213.i311, %if.then207.i310
  %685 = load i32* %k.i59, align 4
  %inc216.i313 = add nsw i32 %685, 1
  store i32 %inc216.i313, i32* %k.i59, align 4
  br label %for.cond191.i292

for.end217.i318:                                  ; preds = %for.cond191.i292
  %686 = load i32* %icarr.i53, align 4
  %687 = load i32* %kmx.i60, align 4
  %idxprom218.i314 = sext i32 %687 to i64
  %688 = load i32** %iextc.i56, align 8
  %arrayidx219.i315 = getelementptr inbounds i32* %688, i64 %idxprom218.i314
  %689 = load i32* %arrayidx219.i315, align 4
  %add220.i316 = add i32 %689, %686
  store i32 %add220.i316, i32* %arrayidx219.i315, align 4
  %690 = load i32* %icarr.i53, align 4
  %691 = load i32* %kmx.i60, align 4
  %add221.i317 = add i32 %691, %690
  store i32 %add221.i317, i32* %kmx.i60, align 4
  %692 = load i32* %j.i58, align 4
  %inc223.i319 = add nsw i32 %692, 1
  store i32 %inc223.i319, i32* %j.i58, align 4
  br label %for.cond150.i255

for.end224.i320:                                  ; preds = %for.cond150.i255
  %693 = load i32* %i.i57, align 4
  %inc226.i321 = add nsw i32 %693, 1
  store i32 %inc226.i321, i32* %i.i57, align 4
  br label %for.cond146.i252

for.end227.i322:                                  ; preds = %for.cond146.i252
  br label %if.end228.i327

if.end228.i327:                                   ; preds = %for.end227.i322, %if.end141.i249
  %694 = load i32* %kmx.i60, align 4
  %sub229.i323 = sub nsw i32 %694, 1
  %idxprom230.i324 = sext i32 %sub229.i323 to i64
  %arrayidx231.i325 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom230.i324
  %695 = load i32* %arrayidx231.i325, align 4
  %cmp232.i326 = icmp eq i32 %695, 0
  br i1 %cmp232.i326, label %if.then234.i329, label %if.end235.i332

if.then234.i329:                                  ; preds = %if.end228.i327
  %696 = load i32* %kmx.i60, align 4
  %dec.i328 = add nsw i32 %696, -1
  store i32 %dec.i328, i32* %kmx.i60, align 4
  br label %if.end235.i332

if.end235.i332:                                   ; preds = %if.then234.i329, %if.end228.i327
  %697 = load i32* %kmx.i60, align 4
  %dec236.i330 = add nsw i32 %697, -1
  store i32 %dec236.i330, i32* %kmx.i60, align 4
  store i32 0, i32* %prdigits.i68, align 4
  %698 = load i32* %kmx.i60, align 4
  %cmp237.i331 = icmp sge i32 %698, 0
  br i1 %cmp237.i331, label %if.then239.i335, label %if.end392.i478

if.then239.i335:                                  ; preds = %if.end235.i332
  store i32 1, i32* %digit.i66, align 4
  %699 = load i32* %kmx.i60, align 4
  %idxprom240.i333 = sext i32 %699 to i64
  %arrayidx241.i334 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom240.i333
  %700 = load i32* %arrayidx241.i334, align 4
  store i32 %700, i32* %k.i59, align 4
  store i32 0, i32* %i.i57, align 4
  br label %for.cond242.i337

for.cond242.i337:                                 ; preds = %if.end249.i342, %if.then239.i335
  %701 = load i32* %i.i57, align 4
  %cmp243.i336 = icmp slt i32 %701, 9
  br i1 %cmp243.i336, label %for.body245.i339, label %for.end253.i348

for.body245.i339:                                 ; preds = %for.cond242.i337
  %702 = load i32* %k.i59, align 4
  %703 = load i32* %digit.i66, align 4
  %cmp246.i338 = icmp uge i32 %702, %703
  br i1 %cmp246.i338, label %if.then248.i340, label %if.end249.i342

if.then248.i340:                                  ; preds = %for.body245.i339
  %704 = load i32* %i.i57, align 4
  store i32 %704, i32* %pose.i62, align 4
  br label %if.end249.i342

if.end249.i342:                                   ; preds = %if.then248.i340, %for.body245.i339
  %705 = load i32* %digit.i66, align 4
  %mul250.i341 = mul i32 %705, 10
  store i32 %mul250.i341, i32* %digit.i66, align 4
  %706 = load i32* %i.i57, align 4
  %inc252.i343 = add nsw i32 %706, 1
  store i32 %inc252.i343, i32* %i.i57, align 4
  br label %for.cond242.i337

for.end253.i348:                                  ; preds = %for.cond242.i337
  %707 = load i32* %kmx.i60, align 4
  %mul254.i344 = mul nsw i32 %707, 9
  %708 = load i32* %pose.i62, align 4
  %add255.i345 = add nsw i32 %mul254.i344, %708
  %add256.i346 = add nsw i32 %add255.i345, 1
  store i32 %add256.i346, i32* %prdigits.i68, align 4
  %709 = load i32* %prdigits.i68, align 4
  %710 = load i32* %w.addr.i46, align 4
  %cmp257.i347 = icmp ugt i32 %709, %710
  br i1 %cmp257.i347, label %if.then259.i350, label %if.end372.i459

if.then259.i350:                                  ; preds = %for.end253.i348
  %711 = load i32* %prdigits.i68, align 4
  %712 = load i32* %w.addr.i46, align 4
  %sub260.i349 = sub i32 %711, %712
  store i32 %sub260.i349, i32* %loc.i81, align 4
  store i32 0, i32* %kbk.i69, align 4
  br label %while.cond.i352

while.cond.i352:                                  ; preds = %while.body.i355, %if.then259.i350
  %713 = load i32* %loc.i81, align 4
  %cmp261.i351 = icmp sgt i32 %713, 9
  br i1 %cmp261.i351, label %while.body.i355, label %while.end.i359

while.body.i355:                                  ; preds = %while.cond.i352
  %714 = load i32* %loc.i81, align 4
  %sub263.i353 = sub nsw i32 %714, 9
  store i32 %sub263.i353, i32* %loc.i81, align 4
  %715 = load i32* %kbk.i69, align 4
  %inc264.i354 = add nsw i32 %715, 1
  store i32 %inc264.i354, i32* %kbk.i69, align 4
  br label %while.cond.i352

while.end.i359:                                   ; preds = %while.cond.i352
  %716 = load i32* %kbk.i69, align 4
  %idxprom265.i356 = sext i32 %716 to i64
  %arrayidx266.i357 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom265.i356
  %717 = load i32* %arrayidx266.i357, align 4
  store i32 %717, i32* %k.i59, align 4
  store i32 1, i32* %m.i70, align 4
  store i32 10, i32* %c.i77, align 4
  store i32 0, i32* %rndup.i80, align 4
  store i32 0, i32* %sticky.i79, align 4
  store i32 0, i32* %rndval.i78, align 4
  %718 = load i32* %loc.i81, align 4
  %cmp267.i358 = icmp sgt i32 %718, 1
  br i1 %cmp267.i358, label %if.then269.i360, label %if.else308.i400

if.then269.i360:                                  ; preds = %while.end.i359
  br label %while.cond270.i363

while.cond270.i363:                               ; preds = %if.end294.i383, %if.then269.i360
  %719 = load i32* %loc.i81, align 4
  %dec271.i361 = add nsw i32 %719, -1
  store i32 %dec271.i361, i32* %loc.i81, align 4
  %tobool272.i362 = icmp ne i32 %719, 0
  br i1 %tobool272.i362, label %while.body273.i368, label %while.end296.i384

while.body273.i368:                               ; preds = %while.cond270.i363
  %720 = load i32* %k.i59, align 4
  %div274.i364 = sdiv i32 %720, 10
  store i32 %div274.i364, i32* %j.i58, align 4
  %721 = load i32* %k.i59, align 4
  %722 = load i32* %j.i58, align 4
  %mul275.i365 = mul nsw i32 %722, 10
  %sub276.i366 = sub nsw i32 %721, %mul275.i365
  store i32 %sub276.i366, i32* %digit.i66, align 4
  %723 = load i32* %loc.i81, align 4
  %cmp277.i367 = icmp sgt i32 %723, 0
  br i1 %cmp277.i367, label %if.then279.i372, label %if.end283.i374

if.then279.i372:                                  ; preds = %while.body273.i368
  %724 = load i32* %c.i77, align 4
  %725 = load i32* %digit.i66, align 4
  %sub280.i369 = sub i32 %724, %725
  %726 = load i32* %m.i70, align 4
  %mul281.i370 = mul i32 %sub280.i369, %726
  %727 = load i32* %rndup.i80, align 4
  %add282.i371 = add i32 %727, %mul281.i370
  store i32 %add282.i371, i32* %rndup.i80, align 4
  br label %if.end283.i374

if.end283.i374:                                   ; preds = %if.then279.i372, %while.body273.i368
  %728 = load i32* %loc.i81, align 4
  %cmp284.i373 = icmp sgt i32 %728, 1
  br i1 %cmp284.i373, label %if.then286.i378, label %if.end290.i380

if.then286.i378:                                  ; preds = %if.end283.i374
  %729 = load i32* %digit.i66, align 4
  %cmp287.i375 = icmp ugt i32 %729, 0
  %conv288.i376 = zext i1 %cmp287.i375 to i32
  %730 = load i32* %sticky.i79, align 4
  %or289.i377 = or i32 %730, %conv288.i376
  store i32 %or289.i377, i32* %sticky.i79, align 4
  br label %if.end290.i380

if.end290.i380:                                   ; preds = %if.then286.i378, %if.end283.i374
  %731 = load i32* %loc.i81, align 4
  %cmp291.i379 = icmp eq i32 %731, 1
  br i1 %cmp291.i379, label %if.then293.i381, label %if.end294.i383

if.then293.i381:                                  ; preds = %if.end290.i380
  %732 = load i32* %digit.i66, align 4
  store i32 %732, i32* %rndval.i78, align 4
  br label %if.end294.i383

if.end294.i383:                                   ; preds = %if.then293.i381, %if.end290.i380
  %733 = load i32* %j.i58, align 4
  store i32 %733, i32* %k.i59, align 4
  %734 = load i32* %m.i70, align 4
  %mul295.i382 = mul nsw i32 %734, 10
  store i32 %mul295.i382, i32* %m.i70, align 4
  store i32 9, i32* %c.i77, align 4
  br label %while.cond270.i363

while.end296.i384:                                ; preds = %while.cond270.i363
  %735 = load i32* %kbk.i69, align 4
  store i32 %735, i32* %i.i57, align 4
  br label %while.cond297.i386

while.cond297.i386:                               ; preds = %while.body300.i397, %while.end296.i384
  %736 = load i32* %i.i57, align 4
  %tobool298.i385 = icmp ne i32 %736, 0
  br i1 %tobool298.i385, label %land.rhs.i389, label %land.end.i390

land.rhs.i389:                                    ; preds = %while.cond297.i386
  %737 = load i32* %sticky.i79, align 4
  %tobool299.i387 = icmp ne i32 %737, 0
  %lnot.i388 = xor i1 %tobool299.i387, true
  br label %land.end.i390

land.end.i390:                                    ; preds = %land.rhs.i389, %while.cond297.i386
  %738 = phi i1 [ false, %while.cond297.i386 ], [ %lnot.i388, %land.rhs.i389 ]
  br i1 %738, label %while.body300.i397, label %while.end307.i398

while.body300.i397:                               ; preds = %land.end.i390
  %739 = load i32* %i.i57, align 4
  %dec301.i391 = add nsw i32 %739, -1
  store i32 %dec301.i391, i32* %i.i57, align 4
  %idxprom302.i392 = sext i32 %dec301.i391 to i64
  %arrayidx303.i393 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom302.i392
  %740 = load i32* %arrayidx303.i393, align 4
  %cmp304.i394 = icmp ne i32 %740, 0
  %conv305.i395 = zext i1 %cmp304.i394 to i32
  %741 = load i32* %sticky.i79, align 4
  %or306.i396 = or i32 %741, %conv305.i395
  store i32 %or306.i396, i32* %sticky.i79, align 4
  br label %while.cond297.i386

while.end307.i398:                                ; preds = %land.end.i390
  br label %if.end341.i430

if.else308.i400:                                  ; preds = %while.end.i359
  %742 = load i32* %kbk.i69, align 4
  %cmp309.i399 = icmp sgt i32 %742, 0
  br i1 %cmp309.i399, label %if.then311.i405, label %if.end340.i428

if.then311.i405:                                  ; preds = %if.else308.i400
  %743 = load i32* %kbk.i69, align 4
  %dec312.i401 = add nsw i32 %743, -1
  store i32 %dec312.i401, i32* %kbk.i69, align 4
  %idxprom313.i402 = sext i32 %dec312.i401 to i64
  %arrayidx314.i403 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom313.i402
  %744 = load i32* %arrayidx314.i403, align 4
  store i32 %744, i32* %k.i59, align 4
  %745 = load i32* %k.i59, align 4
  %cmp315.i404 = icmp sge i32 %745, 500000000
  br i1 %cmp315.i404, label %if.then317.i408, label %if.end339.i427

if.then317.i408:                                  ; preds = %if.then311.i405
  store i32 5, i32* %rndval.i78, align 4
  %746 = load i32* %k.i59, align 4
  %sub318.i406 = sub nsw i32 1000000000, %746
  store i32 %sub318.i406, i32* %rndup.i80, align 4
  %747 = load i32* %k.i59, align 4
  %cmp319.i407 = icmp sgt i32 %747, 500000000
  br i1 %cmp319.i407, label %if.then321.i409, label %if.else322.i411

if.then321.i409:                                  ; preds = %if.then317.i408
  store i32 1, i32* %sticky.i79, align 4
  br label %if.end338.i426

if.else322.i411:                                  ; preds = %if.then317.i408
  %748 = load i32* %kbk.i69, align 4
  %sub323.i410 = sub nsw i32 %748, 1
  store i32 %sub323.i410, i32* %i.i57, align 4
  br label %while.cond324.i413

while.cond324.i413:                               ; preds = %while.body330.i424, %if.else322.i411
  %749 = load i32* %i.i57, align 4
  %tobool325.i412 = icmp ne i32 %749, 0
  br i1 %tobool325.i412, label %land.rhs326.i416, label %land.end329.i417

land.rhs326.i416:                                 ; preds = %while.cond324.i413
  %750 = load i32* %sticky.i79, align 4
  %tobool327.i414 = icmp ne i32 %750, 0
  %lnot328.i415 = xor i1 %tobool327.i414, true
  br label %land.end329.i417

land.end329.i417:                                 ; preds = %land.rhs326.i416, %while.cond324.i413
  %751 = phi i1 [ false, %while.cond324.i413 ], [ %lnot328.i415, %land.rhs326.i416 ]
  br i1 %751, label %while.body330.i424, label %while.end337.i425

while.body330.i424:                               ; preds = %land.end329.i417
  %752 = load i32* %i.i57, align 4
  %dec331.i418 = add nsw i32 %752, -1
  store i32 %dec331.i418, i32* %i.i57, align 4
  %idxprom332.i419 = sext i32 %752 to i64
  %arrayidx333.i420 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom332.i419
  %753 = load i32* %arrayidx333.i420, align 4
  %cmp334.i421 = icmp ne i32 %753, 0
  %conv335.i422 = zext i1 %cmp334.i421 to i32
  %754 = load i32* %sticky.i79, align 4
  %or336.i423 = or i32 %754, %conv335.i422
  store i32 %or336.i423, i32* %sticky.i79, align 4
  br label %while.cond324.i413

while.end337.i425:                                ; preds = %land.end329.i417
  br label %if.end338.i426

if.end338.i426:                                   ; preds = %while.end337.i425, %if.then321.i409
  br label %if.end339.i427

if.end339.i427:                                   ; preds = %if.end338.i426, %if.then311.i405
  br label %if.end340.i428

if.end340.i428:                                   ; preds = %if.end339.i427, %if.else308.i400
  br label %if.end341.i430

if.end341.i430:                                   ; preds = %if.end340.i428, %while.end307.i398
  %755 = load i32* %rndval.i78, align 4
  %cmp342.i429 = icmp sgt i32 %755, 5
  br i1 %cmp342.i429, label %if.then347.i438, label %lor.lhs.false.i432

lor.lhs.false.i432:                               ; preds = %if.end341.i430
  %756 = load i32* %rndval.i78, align 4
  %cmp344.i431 = icmp eq i32 %756, 5
  br i1 %cmp344.i431, label %land.lhs.true.i434, label %if.end351.i439

land.lhs.true.i434:                               ; preds = %lor.lhs.false.i432
  %757 = load i32* %sticky.i79, align 4
  %tobool346.i433 = icmp ne i32 %757, 0
  br i1 %tobool346.i433, label %if.then347.i438, label %if.end351.i439

if.then347.i438:                                  ; preds = %land.lhs.true.i434, %if.end341.i430
  %758 = load i32* %rndup.i80, align 4
  %759 = load i32* %kbk.i69, align 4
  %idxprom348.i435 = sext i32 %759 to i64
  %arrayidx349.i436 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom348.i435
  %760 = load i32* %arrayidx349.i436, align 4
  %add350.i437 = add i32 %760, %758
  store i32 %add350.i437, i32* %arrayidx349.i436, align 4
  br label %if.end351.i439

if.end351.i439:                                   ; preds = %if.then347.i438, %land.lhs.true.i434, %lor.lhs.false.i432
  br label %while.cond352.i443

while.cond352.i443:                               ; preds = %while.body357.i457, %if.end351.i439
  %761 = load i32* %kbk.i69, align 4
  %idxprom353.i440 = sext i32 %761 to i64
  %arrayidx354.i441 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom353.i440
  %762 = load i32* %arrayidx354.i441, align 4
  %cmp355.i442 = icmp uge i32 %762, 1000000000
  br i1 %cmp355.i442, label %while.body357.i457, label %while.end371.i458

while.body357.i457:                               ; preds = %while.cond352.i443
  %763 = load i32* %kbk.i69, align 4
  %idxprom358.i444 = sext i32 %763 to i64
  %arrayidx359.i445 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom358.i444
  %764 = load i32* %arrayidx359.i445, align 4
  %sub360.i446 = sub i32 %764, 1000000000
  %765 = load i32* %kbk.i69, align 4
  %idxprom361.i447 = sext i32 %765 to i64
  %arrayidx362.i448 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom361.i447
  store i32 %sub360.i446, i32* %arrayidx362.i448, align 4
  %766 = load i32* %kbk.i69, align 4
  %add363.i449 = add nsw i32 %766, 1
  %idxprom364.i450 = sext i32 %add363.i449 to i64
  %arrayidx365.i451 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom364.i450
  %767 = load i32* %arrayidx365.i451, align 4
  %add366.i452 = add i32 %767, 1
  %768 = load i32* %kbk.i69, align 4
  %add367.i453 = add nsw i32 %768, 1
  %idxprom368.i454 = sext i32 %add367.i453 to i64
  %arrayidx369.i455 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom368.i454
  store i32 %add366.i452, i32* %arrayidx369.i455, align 4
  %769 = load i32* %kbk.i69, align 4
  %inc370.i456 = add nsw i32 %769, 1
  store i32 %inc370.i456, i32* %kbk.i69, align 4
  br label %while.cond352.i443

while.end371.i458:                                ; preds = %while.cond352.i443
  br label %if.end372.i459

if.end372.i459:                                   ; preds = %while.end371.i458, %for.end253.i348
  store i32 0, i32* %i.i57, align 4
  br label %for.cond373.i463

for.cond373.i463:                                 ; preds = %for.body378.i474, %if.end372.i459
  %770 = load i32* %i.i57, align 4
  %771 = load i32* %kmx.i60, align 4
  %add374.i460 = add nsw i32 %771, 1
  %div375.i461 = sdiv i32 %add374.i460, 2
  %cmp376.i462 = icmp slt i32 %770, %div375.i461
  br i1 %cmp376.i462, label %for.body378.i474, label %for.end391.i476

for.body378.i474:                                 ; preds = %for.cond373.i463
  %772 = load i32* %i.i57, align 4
  %idxprom379.i464 = sext i32 %772 to i64
  %arrayidx380.i465 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom379.i464
  %773 = load i32* %arrayidx380.i465, align 4
  store i32 %773, i32* %k.i59, align 4
  %774 = load i32* %kmx.i60, align 4
  %775 = load i32* %i.i57, align 4
  %sub381.i466 = sub nsw i32 %774, %775
  %idxprom382.i467 = sext i32 %sub381.i466 to i64
  %arrayidx383.i468 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom382.i467
  %776 = load i32* %arrayidx383.i468, align 4
  %777 = load i32* %i.i57, align 4
  %idxprom384.i469 = sext i32 %777 to i64
  %arrayidx385.i470 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom384.i469
  store i32 %776, i32* %arrayidx385.i470, align 4
  %778 = load i32* %k.i59, align 4
  %779 = load i32* %kmx.i60, align 4
  %780 = load i32* %i.i57, align 4
  %sub386.i471 = sub nsw i32 %779, %780
  %idxprom387.i472 = sext i32 %sub386.i471 to i64
  %arrayidx388.i473 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom387.i472
  store i32 %778, i32* %arrayidx388.i473, align 4
  %781 = load i32* %i.i57, align 4
  %inc390.i475 = add nsw i32 %781, 1
  store i32 %inc390.i475, i32* %i.i57, align 4
  br label %for.cond373.i463

for.end391.i476:                                  ; preds = %for.cond373.i463
  br label %if.end392.i478

if.end392.i478:                                   ; preds = %for.end391.i476, %if.end235.i332
  %782 = load i32* %iexp.i49, align 4
  %cmp393.i477 = icmp sle i32 %782, 51
  br i1 %cmp393.i477, label %land.lhs.true395.i480, label %if.end620.i678

land.lhs.true395.i480:                            ; preds = %if.end392.i478
  %783 = load i32* %prdigits.i68, align 4
  %784 = load i32* %w.addr.i46, align 4
  %cmp396.i479 = icmp ule i32 %783, %784
  br i1 %cmp396.i479, label %if.then398.i483, label %if.end620.i678

if.then398.i483:                                  ; preds = %land.lhs.true395.i480
  store i32 0, i32* %digit.i66, align 4
  store i32 0, i32* %keepon.i82, align 4
  store i32 0, i32* %ndigits.i67, align 4
  %785 = load i32* %kmx.i60, align 4
  %add399.i481 = add nsw i32 %785, 1
  store i32 %add399.i481, i32* %j.i58, align 4
  %786 = load i32* %kmx.i60, align 4
  %add400.i482 = add nsw i32 %786, 1
  store i32 %add400.i482, i32* %k.i59, align 4
  store i32 0, i32* %firstdigit.i61, align 4
  store i32 0, i32* %savecarry.i86, align 4
  %787 = load i32* %w.addr.i46, align 4
  store i32 %787, i32* %lw.i71, align 4
  br label %while.cond401.i485

while.cond401.i485:                               ; preds = %if.end543.i609, %if.then398.i483
  %788 = load i32* %iwdm2.i52, align 4
  %cmp402.i484 = icmp slt i32 %788, 34
  br i1 %cmp402.i484, label %while.body404.i486, label %while.end544.i611

while.body404.i486:                               ; preds = %while.cond401.i485
  store i32 0, i32* %sh1.i84, align 4
  store i32 0, i32* %sh3.i85, align 4
  store i32 0, i32* %icarr.i53, align 4
  %789 = load i32* %iwdm2.i52, align 4
  store i32 %789, i32* %i.i57, align 4
  br label %for.cond405.i488

for.cond405.i488:                                 ; preds = %lor.end.i510, %while.body404.i486
  %790 = load i32* %i.i57, align 4
  %cmp406.i487 = icmp slt i32 %790, 34
  br i1 %cmp406.i487, label %for.body408.i500, label %for.end433.i515

for.body408.i500:                                 ; preds = %for.cond405.i488
  %791 = load i32* %i.i57, align 4
  %idxprom409.i489 = sext i32 %791 to i64
  %792 = load i32** %iexta.i55, align 8
  %arrayidx410.i490 = getelementptr inbounds i32* %792, i64 %idxprom409.i489
  %793 = load i32* %arrayidx410.i490, align 4
  store i32 %793, i32* %ix.i88, align 4
  %794 = load i32* %ix.i88, align 4
  %shl411.i491 = shl i32 %794, 1
  %795 = load i32* %sh1.i84, align 4
  %add412.i492 = add i32 %shl411.i491, %795
  store i32 %add412.i492, i32* %ixa.i89, align 4
  %796 = load i32* %ix.i88, align 4
  %shl413.i493 = shl i32 %796, 3
  %797 = load i32* %sh3.i85, align 4
  %add414.i494 = add i32 %shl413.i493, %797
  store i32 %add414.i494, i32* %ixb.i90, align 4
  %798 = load i32* %ix.i88, align 4
  %shr415.i495 = lshr i32 %798, 31
  store i32 %shr415.i495, i32* %sh1.i84, align 4
  %799 = load i32* %ix.i88, align 4
  %shr416.i496 = lshr i32 %799, 29
  store i32 %shr416.i496, i32* %sh3.i85, align 4
  %800 = load i32* %ixa.i89, align 4
  %801 = load i32* %ixb.i90, align 4
  %add417.i497 = add i32 %800, %801
  %802 = load i32* %icarr.i53, align 4
  %add418.i498 = add i32 %add417.i497, %802
  store i32 %add418.i498, i32* %ixc.i91, align 4
  %803 = load i32* %ixc.i91, align 4
  %804 = load i32* %ixa.i89, align 4
  %cmp419.i499 = icmp ult i32 %803, %804
  br i1 %cmp419.i499, label %lor.end.i510, label %lor.lhs.false421.i502

lor.lhs.false421.i502:                            ; preds = %for.body408.i500
  %805 = load i32* %ixc.i91, align 4
  %806 = load i32* %ixb.i90, align 4
  %cmp422.i501 = icmp ult i32 %805, %806
  br i1 %cmp422.i501, label %lor.end.i510, label %lor.rhs.i506

lor.rhs.i506:                                     ; preds = %lor.lhs.false421.i502
  %807 = load i32* %ixa.i89, align 4
  %808 = load i32* %ixb.i90, align 4
  %and424.i503 = and i32 %807, %808
  %809 = load i32* %ixc.i91, align 4
  %and425.i504 = and i32 %and424.i503, %809
  %cmp426.i505 = icmp eq i32 %and425.i504, -1
  br label %lor.end.i510

lor.end.i510:                                     ; preds = %lor.rhs.i506, %lor.lhs.false421.i502, %for.body408.i500
  %810 = phi i1 [ true, %lor.lhs.false421.i502 ], [ true, %for.body408.i500 ], [ %cmp426.i505, %lor.rhs.i506 ]
  %cond428.i507 = select i1 %810, i32 1, i32 0
  store i32 %cond428.i507, i32* %icarr.i53, align 4
  %811 = load i32* %ixc.i91, align 4
  %812 = load i32* %i.i57, align 4
  %idxprom429.i508 = sext i32 %812 to i64
  %813 = load i32** %iexta.i55, align 8
  %arrayidx430.i509 = getelementptr inbounds i32* %813, i64 %idxprom429.i508
  store i32 %811, i32* %arrayidx430.i509, align 4
  %814 = load i32* %i.i57, align 4
  %inc432.i511 = add nsw i32 %814, 1
  store i32 %inc432.i511, i32* %i.i57, align 4
  br label %for.cond405.i488

for.end433.i515:                                  ; preds = %for.cond405.i488
  %815 = load i32* %iwdm2.i52, align 4
  %idxprom434.i512 = sext i32 %815 to i64
  %816 = load i32** %iexta.i55, align 8
  %arrayidx435.i513 = getelementptr inbounds i32* %816, i64 %idxprom434.i512
  %817 = load i32* %arrayidx435.i513, align 4
  %cmp436.i514 = icmp eq i32 %817, 0
  br i1 %cmp436.i514, label %if.then438.i517, label %if.end440.i524

if.then438.i517:                                  ; preds = %for.end433.i515
  %818 = load i32* %iwdm2.i52, align 4
  %inc439.i516 = add nsw i32 %818, 1
  store i32 %inc439.i516, i32* %iwdm2.i52, align 4
  br label %if.end440.i524

if.end440.i524:                                   ; preds = %if.then438.i517, %for.end433.i515
  %819 = load i32* %digit.i66, align 4
  %mul441.i518 = mul i32 %819, 10
  %820 = load i32* %sh3.i85, align 4
  %821 = load i32* %sh1.i84, align 4
  %add442.i519 = add i32 %820, %821
  %822 = load i32* %icarr.i53, align 4
  %add443.i520 = add i32 %add442.i519, %822
  %add444.i521 = add i32 %mul441.i518, %add443.i520
  store i32 %add444.i521, i32* %digit.i66, align 4
  %823 = load i32* %ndigits.i67, align 4
  %inc445.i522 = add i32 %823, 1
  store i32 %inc445.i522, i32* %ndigits.i67, align 4
  %824 = load i32* %digit.i66, align 4
  %tobool446.i523 = icmp ne i32 %824, 0
  br i1 %tobool446.i523, label %land.lhs.true447.i526, label %if.end461.i537

land.lhs.true447.i526:                            ; preds = %if.end440.i524
  %825 = load i32* %firstdigit.i61, align 4
  %tobool448.i525 = icmp ne i32 %825, 0
  br i1 %tobool448.i525, label %if.end461.i537, label %if.then449.i528

if.then449.i528:                                  ; preds = %land.lhs.true447.i526
  %826 = load i32* %ndigits.i67, align 4
  store i32 %826, i32* %firstdigit.i61, align 4
  %827 = load i32* %j.i58, align 4
  store i32 %827, i32* %firstfwd.i63, align 4
  %828 = load i32* %ndigits.i67, align 4
  %cmp450.i527 = icmp ugt i32 %828, 1
  br i1 %cmp450.i527, label %land.lhs.true455.i532, label %lor.lhs.false452.i530

lor.lhs.false452.i530:                            ; preds = %if.then449.i528
  %829 = load i32* %j.i58, align 4
  %830 = load i32* %k.i59, align 4
  %cmp453.i529 = icmp ne i32 %829, %830
  br i1 %cmp453.i529, label %land.lhs.true455.i532, label %if.end460.i535

land.lhs.true455.i532:                            ; preds = %lor.lhs.false452.i530, %if.then449.i528
  %831 = load i32* %prdigits.i68, align 4
  %cmp456.i531 = icmp eq i32 %831, 0
  br i1 %cmp456.i531, label %if.then458.i534, label %if.end460.i535

if.then458.i534:                                  ; preds = %land.lhs.true455.i532
  %832 = load i32* %lw.i71, align 4
  %inc459.i533 = add nsw i32 %832, 1
  store i32 %inc459.i533, i32* %lw.i71, align 4
  br label %if.end460.i535

if.end460.i535:                                   ; preds = %if.then458.i534, %land.lhs.true455.i532, %lor.lhs.false452.i530
  br label %if.end461.i537

if.end461.i537:                                   ; preds = %if.end460.i535, %land.lhs.true447.i526, %if.end440.i524
  %833 = load i32* %firstdigit.i61, align 4
  %tobool462.i536 = icmp ne i32 %833, 0
  br i1 %tobool462.i536, label %if.then465.i542, label %lor.lhs.false463.i539

lor.lhs.false463.i539:                            ; preds = %if.end461.i537
  %834 = load i32* %prdigits.i68, align 4
  %tobool464.i538 = icmp ne i32 %834, 0
  br i1 %tobool464.i538, label %if.then465.i542, label %if.end521.i590

if.then465.i542:                                  ; preds = %lor.lhs.false463.i539, %if.end461.i537
  %835 = load i32* %prdigits.i68, align 4
  %inc466.i540 = add i32 %835, 1
  store i32 %inc466.i540, i32* %prdigits.i68, align 4
  %836 = load i32* %prdigits.i68, align 4
  %837 = load i32* %lw.i71, align 4
  %cmp467.i541 = icmp ugt i32 %836, %837
  br i1 %cmp467.i541, label %if.then469.i544, label %if.end520.i588

if.then469.i544:                                  ; preds = %if.then465.i542
  %838 = load i32* %keepon.i82, align 4
  %tobool470.i543 = icmp ne i32 %838, 0
  br i1 %tobool470.i543, label %if.else477.i551, label %land.lhs.true471.i548

land.lhs.true471.i548:                            ; preds = %if.then469.i544
  %839 = load i32* %sh3.i85, align 4
  %840 = load i32* %sh1.i84, align 4
  %add472.i545 = add i32 %839, %840
  %841 = load i32* %icarr.i53, align 4
  %add473.i546 = add i32 %add472.i545, %841
  %cmp474.i547 = icmp ult i32 %add473.i546, 5
  br i1 %cmp474.i547, label %if.then476.i549, label %if.else477.i551

if.then476.i549:                                  ; preds = %land.lhs.true471.i548
  br label %while.end544.i611

if.else477.i551:                                  ; preds = %land.lhs.true471.i548, %if.then469.i544
  %842 = load i32* %keepon.i82, align 4
  %tobool478.i550 = icmp ne i32 %842, 0
  br i1 %tobool478.i550, label %if.else489.i562, label %land.lhs.true479.i555

land.lhs.true479.i555:                            ; preds = %if.else477.i551
  %843 = load i32* %sh3.i85, align 4
  %844 = load i32* %sh1.i84, align 4
  %add480.i552 = add i32 %843, %844
  %845 = load i32* %icarr.i53, align 4
  %add481.i553 = add i32 %add480.i552, %845
  %cmp482.i554 = icmp ugt i32 %add481.i553, 5
  br i1 %cmp482.i554, label %if.then484.i560, label %if.else489.i562

if.then484.i560:                                  ; preds = %land.lhs.true479.i555
  %846 = load i32* %sh3.i85, align 4
  %847 = load i32* %sh1.i84, align 4
  %add485.i556 = add i32 %846, %847
  %848 = load i32* %icarr.i53, align 4
  %add486.i557 = add i32 %add485.i556, %848
  %sub487.i558 = sub i32 10, %add486.i557
  %849 = load i32* %digit.i66, align 4
  %add488.i559 = add i32 %849, %sub487.i558
  store i32 %add488.i559, i32* %digit.i66, align 4
  br label %while.end544.i611

if.else489.i562:                                  ; preds = %land.lhs.true479.i555, %if.else477.i551
  %850 = load i32* %keepon.i82, align 4
  %tobool490.i561 = icmp ne i32 %850, 0
  br i1 %tobool490.i561, label %land.lhs.true491.i566, label %if.else509.i581

land.lhs.true491.i566:                            ; preds = %if.else489.i562
  %851 = load i32* %sh3.i85, align 4
  %852 = load i32* %sh1.i84, align 4
  %add492.i563 = add i32 %851, %852
  %853 = load i32* %icarr.i53, align 4
  %add493.i564 = add i32 %add492.i563, %853
  %cmp494.i565 = icmp ugt i32 %add493.i564, 0
  br i1 %cmp494.i565, label %if.then496.i568, label %if.else509.i581

if.then496.i568:                                  ; preds = %land.lhs.true491.i566
  %854 = load i32* %savecarry.i86, align 4
  %tobool497.i567 = icmp ne i32 %854, 0
  br i1 %tobool497.i567, label %if.then498.i572, label %if.else502.i578

if.then498.i572:                                  ; preds = %if.then496.i568
  %855 = load i32* %savek.i87, align 4
  %idxprom499.i569 = sext i32 %855 to i64
  %arrayidx500.i570 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom499.i569
  %856 = load i32* %arrayidx500.i570, align 4
  store i32 %856, i32* %digit.i66, align 4
  %857 = load i32* %savecarry.i86, align 4
  %858 = load i32* %digit.i66, align 4
  %add501.i571 = add i32 %858, %857
  store i32 %add501.i571, i32* %digit.i66, align 4
  %859 = load i32* %savek.i87, align 4
  store i32 %859, i32* %k.i59, align 4
  store i32 9, i32* %ndigits.i67, align 4
  br label %if.end508.i579

if.else502.i578:                                  ; preds = %if.then496.i568
  %860 = load i32* %roundcarry.i83, align 4
  %mul503.i573 = mul i32 %860, 10
  store i32 %mul503.i573, i32* %roundcarry.i83, align 4
  %861 = load i32* %roundcarry.i83, align 4
  %862 = load i32* %sh3.i85, align 4
  %863 = load i32* %sh1.i84, align 4
  %add504.i574 = add i32 %862, %863
  %864 = load i32* %icarr.i53, align 4
  %add505.i575 = add i32 %add504.i574, %864
  %sub506.i576 = sub i32 %861, %add505.i575
  %865 = load i32* %digit.i66, align 4
  %add507.i577 = add i32 %865, %sub506.i576
  store i32 %add507.i577, i32* %digit.i66, align 4
  br label %if.end508.i579

if.end508.i579:                                   ; preds = %if.else502.i578, %if.then498.i572
  store i32 0, i32* %keepon.i82, align 4
  br label %while.end544.i611

if.else509.i581:                                  ; preds = %land.lhs.true491.i566, %if.else489.i562
  %866 = load i32* %keepon.i82, align 4
  %tobool510.i580 = icmp ne i32 %866, 0
  br i1 %tobool510.i580, label %if.then511.i584, label %if.else514.i586

if.then511.i584:                                  ; preds = %if.else509.i581
  %867 = load i32* %keepon.i82, align 4
  %inc512.i582 = add i32 %867, 1
  store i32 %inc512.i582, i32* %keepon.i82, align 4
  %868 = load i32* %roundcarry.i83, align 4
  %mul513.i583 = mul i32 %868, 10
  store i32 %mul513.i583, i32* %roundcarry.i83, align 4
  br label %if.end516.i587

if.else514.i586:                                  ; preds = %if.else509.i581
  store i32 5, i32* %roundcarry.i83, align 4
  %869 = load i32* %keepon.i82, align 4
  %inc515.i585 = add i32 %869, 1
  store i32 %inc515.i585, i32* %keepon.i82, align 4
  br label %if.end516.i587

if.end516.i587:                                   ; preds = %if.else514.i586, %if.then511.i584
  br label %if.end520.i588

if.end520.i588:                                   ; preds = %if.end516.i587, %if.then465.i542
  br label %if.end521.i590

if.end521.i590:                                   ; preds = %if.end520.i588, %lor.lhs.false463.i539
  %870 = load i32* %ndigits.i67, align 4
  %cmp522.i589 = icmp eq i32 %870, 9
  br i1 %cmp522.i589, label %if.then524.i592, label %if.end543.i609

if.then524.i592:                                  ; preds = %if.end521.i590
  %871 = load i32* %digit.i66, align 4
  %tobool525.i591 = icmp ne i32 %871, 0
  br i1 %tobool525.i591, label %if.then531.i600, label %lor.lhs.false526.i594

lor.lhs.false526.i594:                            ; preds = %if.then524.i592
  %872 = load i32* %firstdigit.i61, align 4
  %tobool527.i593 = icmp ne i32 %872, 0
  br i1 %tobool527.i593, label %if.then531.i600, label %lor.lhs.false528.i596

lor.lhs.false528.i596:                            ; preds = %lor.lhs.false526.i594
  %873 = load i32* %iexp.i49, align 4
  %cmp529.i595 = icmp sge i32 %873, 0
  br i1 %cmp529.i595, label %if.then531.i600, label %if.end535.i603

if.then531.i600:                                  ; preds = %lor.lhs.false528.i596, %lor.lhs.false526.i594, %if.then524.i592
  %874 = load i32* %digit.i66, align 4
  %875 = load i32* %k.i59, align 4
  %inc532.i597 = add nsw i32 %875, 1
  store i32 %inc532.i597, i32* %k.i59, align 4
  %idxprom533.i598 = sext i32 %875 to i64
  %arrayidx534.i599 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom533.i598
  store i32 %874, i32* %arrayidx534.i599, align 4
  br label %if.end535.i603

if.end535.i603:                                   ; preds = %if.then531.i600, %lor.lhs.false528.i596
  %876 = load i32* %j.i58, align 4
  %inc536.i601 = add nsw i32 %876, 1
  store i32 %inc536.i601, i32* %j.i58, align 4
  store i32 0, i32* %digit.i66, align 4
  store i32 0, i32* %ndigits.i67, align 4
  %877 = load i32* %keepon.i82, align 4
  %tobool537.i602 = icmp ne i32 %877, 0
  br i1 %tobool537.i602, label %land.lhs.true538.i605, label %if.end542.i608

land.lhs.true538.i605:                            ; preds = %if.end535.i603
  %878 = load i32* %savecarry.i86, align 4
  %tobool539.i604 = icmp ne i32 %878, 0
  br i1 %tobool539.i604, label %if.end542.i608, label %if.then540.i607

if.then540.i607:                                  ; preds = %land.lhs.true538.i605
  %879 = load i32* %roundcarry.i83, align 4
  store i32 %879, i32* %savecarry.i86, align 4
  %880 = load i32* %k.i59, align 4
  %sub541.i606 = sub nsw i32 %880, 1
  store i32 %sub541.i606, i32* %savek.i87, align 4
  br label %if.end542.i608

if.end542.i608:                                   ; preds = %if.then540.i607, %land.lhs.true538.i605, %if.end535.i603
  br label %if.end543.i609

if.end543.i609:                                   ; preds = %if.end542.i608, %if.end521.i590
  br label %while.cond401.i485

while.end544.i611:                                ; preds = %if.end508.i579, %if.then484.i560, %if.then476.i549, %while.cond401.i485
  %881 = load i32* %keepon.i82, align 4
  %tobool545.i610 = icmp ne i32 %881, 0
  br i1 %tobool545.i610, label %if.then546.i613, label %if.end558.i625

if.then546.i613:                                  ; preds = %while.end544.i611
  %882 = load i32* %savecarry.i86, align 4
  %tobool547.i612 = icmp ne i32 %882, 0
  br i1 %tobool547.i612, label %if.then548.i617, label %if.else552.i619

if.then548.i617:                                  ; preds = %if.then546.i613
  %883 = load i32* %savek.i87, align 4
  %idxprom549.i614 = sext i32 %883 to i64
  %arrayidx550.i615 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom549.i614
  %884 = load i32* %arrayidx550.i615, align 4
  store i32 %884, i32* %digit.i66, align 4
  %885 = load i32* %savecarry.i86, align 4
  %886 = load i32* %digit.i66, align 4
  %add551.i616 = add i32 %886, %885
  store i32 %add551.i616, i32* %digit.i66, align 4
  %887 = load i32* %savek.i87, align 4
  store i32 %887, i32* %k.i59, align 4
  store i32 9, i32* %ndigits.i67, align 4
  br label %if.end557.i623

if.else552.i619:                                  ; preds = %if.then546.i613
  %888 = load i32* %roundcarry.i83, align 4
  %tobool553.i618 = icmp ne i32 %888, 0
  br i1 %tobool553.i618, label %if.then554.i621, label %if.end556.i622

if.then554.i621:                                  ; preds = %if.else552.i619
  %889 = load i32* %roundcarry.i83, align 4
  %890 = load i32* %digit.i66, align 4
  %add555.i620 = add i32 %890, %889
  store i32 %add555.i620, i32* %digit.i66, align 4
  br label %if.end556.i622

if.end556.i622:                                   ; preds = %if.then554.i621, %if.else552.i619
  br label %if.end557.i623

if.end557.i623:                                   ; preds = %if.end556.i622, %if.then548.i617
  br label %if.end558.i625

if.end558.i625:                                   ; preds = %if.end557.i623, %while.end544.i611
  %891 = load i32* %digit.i66, align 4
  %tobool559.i624 = icmp ne i32 %891, 0
  br i1 %tobool559.i624, label %if.then560.i626, label %if.end619.i676

if.then560.i626:                                  ; preds = %if.end558.i625
  br label %for.cond561.i628

for.cond561.i628:                                 ; preds = %for.body564.i630, %if.then560.i626
  %892 = load i32* %ndigits.i67, align 4
  %cmp562.i627 = icmp ult i32 %892, 9
  br i1 %cmp562.i627, label %for.body564.i630, label %for.end568.i635

for.body564.i630:                                 ; preds = %for.cond561.i628
  %893 = load i32* %digit.i66, align 4
  %mul565.i629 = mul i32 %893, 10
  store i32 %mul565.i629, i32* %digit.i66, align 4
  %894 = load i32* %ndigits.i67, align 4
  %inc567.i631 = add i32 %894, 1
  store i32 %inc567.i631, i32* %ndigits.i67, align 4
  br label %for.cond561.i628

for.end568.i635:                                  ; preds = %for.cond561.i628
  %895 = load i32* %digit.i66, align 4
  %896 = load i32* %k.i59, align 4
  %idxprom569.i632 = sext i32 %896 to i64
  %arrayidx570.i633 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom569.i632
  store i32 %895, i32* %arrayidx570.i633, align 4
  %897 = load i32* %digit.i66, align 4
  %cmp571.i634 = icmp eq i32 %897, 1000000000
  br i1 %cmp571.i634, label %if.then573.i642, label %if.end618.i675

if.then573.i642:                                  ; preds = %for.end568.i635
  store i32 0, i32* %digit.i66, align 4
  %898 = load i32* %digit.i66, align 4
  %899 = load i32* %k.i59, align 4
  %idxprom574.i636 = sext i32 %899 to i64
  %arrayidx575.i637 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom574.i636
  store i32 %898, i32* %arrayidx575.i637, align 4
  %900 = load i32* %k.i59, align 4
  %sub576.i638 = sub nsw i32 %900, 1
  store i32 %sub576.i638, i32* %kbk.i69, align 4
  %901 = load i32* %kbk.i69, align 4
  %idxprom577.i639 = sext i32 %901 to i64
  %arrayidx578.i640 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom577.i639
  %902 = load i32* %arrayidx578.i640, align 4
  %inc579.i641 = add i32 %902, 1
  store i32 %inc579.i641, i32* %arrayidx578.i640, align 4
  br label %while.cond580.i646

while.cond580.i646:                               ; preds = %while.body585.i653, %if.then573.i642
  %903 = load i32* %kbk.i69, align 4
  %idxprom581.i643 = sext i32 %903 to i64
  %arrayidx582.i644 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom581.i643
  %904 = load i32* %arrayidx582.i644, align 4
  %cmp583.i645 = icmp eq i32 %904, 1000000000
  br i1 %cmp583.i645, label %while.body585.i653, label %while.end592.i655

while.body585.i653:                               ; preds = %while.cond580.i646
  %905 = load i32* %kbk.i69, align 4
  %idxprom586.i647 = sext i32 %905 to i64
  %arrayidx587.i648 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom586.i647
  store i32 0, i32* %arrayidx587.i648, align 4
  %906 = load i32* %k.i59, align 4
  %sub588.i649 = sub nsw i32 %906, 1
  store i32 %sub588.i649, i32* %kbk.i69, align 4
  %907 = load i32* %kbk.i69, align 4
  %idxprom589.i650 = sext i32 %907 to i64
  %arrayidx590.i651 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom589.i650
  %908 = load i32* %arrayidx590.i651, align 4
  %inc591.i652 = add i32 %908, 1
  store i32 %inc591.i652, i32* %arrayidx590.i651, align 4
  br label %while.cond580.i646

while.end592.i655:                                ; preds = %while.cond580.i646
  %909 = load i32* %kmx.i60, align 4
  %cmp593.i654 = icmp slt i32 %909, 0
  br i1 %cmp593.i654, label %if.then595.i658, label %if.end617.i674

if.then595.i658:                                  ; preds = %while.end592.i655
  %910 = load i32* %firstdigit.i61, align 4
  %sub596.i656 = sub nsw i32 10, %910
  store i32 %sub596.i656, i32* %pose.i62, align 4
  %911 = load i32* %pose.i62, align 4
  %cmp597.i657 = icmp sge i32 %911, 9
  br i1 %cmp597.i657, label %if.then599.i660, label %if.end601.i661

if.then599.i660:                                  ; preds = %if.then595.i658
  %912 = load i32* %pose.i62, align 4
  %sub600.i659 = sub nsw i32 %912, 9
  store i32 %sub600.i659, i32* %pose.i62, align 4
  br label %if.end601.i661

if.end601.i661:                                   ; preds = %if.then599.i660, %if.then595.i658
  store i32 1, i32* %digit.i66, align 4
  store i32 0, i32* %i.i57, align 4
  br label %for.cond602.i663

for.cond602.i663:                                 ; preds = %for.body605.i665, %if.end601.i661
  %913 = load i32* %i.i57, align 4
  %914 = load i32* %pose.i62, align 4
  %cmp603.i662 = icmp slt i32 %913, %914
  br i1 %cmp603.i662, label %for.body605.i665, label %for.end609.i670

for.body605.i665:                                 ; preds = %for.cond602.i663
  %915 = load i32* %digit.i66, align 4
  %mul606.i664 = mul i32 %915, 10
  store i32 %mul606.i664, i32* %digit.i66, align 4
  %916 = load i32* %i.i57, align 4
  %inc608.i666 = add nsw i32 %916, 1
  store i32 %inc608.i666, i32* %i.i57, align 4
  br label %for.cond602.i663

for.end609.i670:                                  ; preds = %for.cond602.i663
  %917 = load i32* %kbk.i69, align 4
  %idxprom610.i667 = sext i32 %917 to i64
  %arrayidx611.i668 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom610.i667
  %918 = load i32* %arrayidx611.i668, align 4
  %919 = load i32* %digit.i66, align 4
  %cmp612.i669 = icmp eq i32 %918, %919
  br i1 %cmp612.i669, label %if.then614.i672, label %if.end616.i673

if.then614.i672:                                  ; preds = %for.end609.i670
  %920 = load i32* %firstdigit.i61, align 4
  %dec615.i671 = add nsw i32 %920, -1
  store i32 %dec615.i671, i32* %firstdigit.i61, align 4
  br label %if.end616.i673

if.end616.i673:                                   ; preds = %if.then614.i672, %for.end609.i670
  br label %if.end617.i674

if.end617.i674:                                   ; preds = %if.end616.i673, %while.end592.i655
  br label %if.end618.i675

if.end618.i675:                                   ; preds = %if.end617.i674, %for.end568.i635
  br label %if.end619.i676

if.end619.i676:                                   ; preds = %if.end618.i675, %if.end558.i625
  br label %if.end620.i678

if.end620.i678:                                   ; preds = %if.end619.i676, %land.lhs.true395.i480, %if.end392.i478
  %arrayidx621.i677 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 0
  %921 = load i32* %arrayidx621.i677, align 4
  store i32 %921, i32* %k.i59, align 4
  store i32 1, i32* %digit.i66, align 4
  store i32 0, i32* %i.i57, align 4
  br label %for.cond622.i680

for.cond622.i680:                                 ; preds = %if.end629.i685, %if.end620.i678
  %922 = load i32* %i.i57, align 4
  %cmp623.i679 = icmp slt i32 %922, 9
  br i1 %cmp623.i679, label %for.body625.i682, label %for.end633.i689

for.body625.i682:                                 ; preds = %for.cond622.i680
  %923 = load i32* %k.i59, align 4
  %924 = load i32* %digit.i66, align 4
  %cmp626.i681 = icmp uge i32 %923, %924
  br i1 %cmp626.i681, label %if.then628.i683, label %if.end629.i685

if.then628.i683:                                  ; preds = %for.body625.i682
  %925 = load i32* %i.i57, align 4
  store i32 %925, i32* %pose.i62, align 4
  br label %if.end629.i685

if.end629.i685:                                   ; preds = %if.then628.i683, %for.body625.i682
  %926 = load i32* %digit.i66, align 4
  %mul630.i684 = mul i32 %926, 10
  store i32 %mul630.i684, i32* %digit.i66, align 4
  %927 = load i32* %i.i57, align 4
  %inc632.i686 = add nsw i32 %927, 1
  store i32 %inc632.i686, i32* %i.i57, align 4
  br label %for.cond622.i680

for.end633.i689:                                  ; preds = %for.cond622.i680
  store i32 1, i32* %m.i70, align 4
  %928 = load i32* %ldw.addr.i48, align 4
  %and634.i687 = and i32 %928, 1
  store i32 %and634.i687, i32* %space.i73, align 4
  %929 = load i32* %kmx.i60, align 4
  %cmp635.i688 = icmp sge i32 %929, 0
  br i1 %cmp635.i688, label %if.then637.i695, label %if.else655.i713

if.then637.i695:                                  ; preds = %for.end633.i689
  %930 = load i32* %kmx.i60, align 4
  %mul638.i690 = mul nsw i32 %930, 9
  %931 = load i32* %pose.i62, align 4
  %add639.i691 = add nsw i32 %mul638.i690, %931
  store i32 %add639.i691, i32* %iexp.i49, align 4
  %932 = load i32* %iexp.i49, align 4
  %933 = load i32* %w.addr.i46, align 4
  %cmp640.i692 = icmp sge i32 %932, %933
  %conv641.i693 = zext i1 %cmp640.i692 to i32
  store i32 %conv641.i693, i32* %usee.i65, align 4
  %934 = load i32* %usee.i65, align 4
  %tobool642.i694 = icmp ne i32 %934, 0
  br i1 %tobool642.i694, label %if.end645.i700, label %if.then643.i698

if.then643.i698:                                  ; preds = %if.then637.i695
  %935 = load i8** %ffmt.addr.i45, align 8
  store i8 32, i8* %935, align 1
  %936 = load i32* %space.i73, align 4
  %937 = load i8** %ffmt.addr.i45, align 8
  %idx.ext.i696 = sext i32 %936 to i64
  %add.ptr.i697 = getelementptr inbounds i8* %937, i64 %idx.ext.i696
  store i8* %add.ptr.i697, i8** %ffmt.addr.i45, align 8
  store i32 0, i32* %m.i70, align 4
  br label %if.end645.i700

if.end645.i700:                                   ; preds = %if.then643.i698, %if.then637.i695
  %938 = load i32* %sgn.i72, align 4
  %tobool646.i699 = icmp ne i32 %938, 0
  br i1 %tobool646.i699, label %if.then647.i701, label %if.else649.i702

if.then647.i701:                                  ; preds = %if.end645.i700
  %939 = load i8** %ffmt.addr.i45, align 8
  store i8 45, i8* %939, align 1
  br label %if.end651.i706

if.else649.i702:                                  ; preds = %if.end645.i700
  %940 = load i8** %ffmt.addr.i45, align 8
  store i8 32, i8* %940, align 1
  br label %if.end651.i706

if.end651.i706:                                   ; preds = %if.else649.i702, %if.then647.i701
  %941 = load i32* %space.i73, align 4
  %942 = load i32* %sgn.i72, align 4
  %or652.i703 = or i32 %941, %942
  %943 = load i8** %ffmt.addr.i45, align 8
  %idx.ext653.i704 = sext i32 %or652.i703 to i64
  %add.ptr654.i705 = getelementptr inbounds i8* %943, i64 %idx.ext653.i704
  store i8* %add.ptr654.i705, i8** %ffmt.addr.i45, align 8
  br label %if.end675.i725

if.else655.i713:                                  ; preds = %for.end633.i689
  %944 = load i32* %firstfwd.i63, align 4
  %mul656.i707 = mul nsw i32 %944, 9
  %945 = load i32* %firstdigit.i61, align 4
  %add657.i708 = add nsw i32 %mul656.i707, %945
  %sub658.i709 = sub nsw i32 0, %add657.i708
  store i32 %sub658.i709, i32* %iexp.i49, align 4
  %946 = load i32* %iexp.i49, align 4
  %cmp659.i710 = icmp slt i32 %946, -1
  %conv660.i711 = zext i1 %cmp659.i710 to i32
  store i32 %conv660.i711, i32* %usee.i65, align 4
  %947 = load i32* %sgn.i72, align 4
  %tobool661.i712 = icmp ne i32 %947, 0
  br i1 %tobool661.i712, label %if.then662.i714, label %if.else664.i715

if.then662.i714:                                  ; preds = %if.else655.i713
  %948 = load i8** %ffmt.addr.i45, align 8
  store i8 45, i8* %948, align 1
  br label %if.end666.i720

if.else664.i715:                                  ; preds = %if.else655.i713
  %949 = load i8** %ffmt.addr.i45, align 8
  store i8 32, i8* %949, align 1
  br label %if.end666.i720

if.end666.i720:                                   ; preds = %if.else664.i715, %if.then662.i714
  %950 = load i32* %space.i73, align 4
  %951 = load i32* %sgn.i72, align 4
  %or667.i716 = or i32 %950, %951
  %952 = load i8** %ffmt.addr.i45, align 8
  %idx.ext668.i717 = sext i32 %or667.i716 to i64
  %add.ptr669.i718 = getelementptr inbounds i8* %952, i64 %idx.ext668.i717
  store i8* %add.ptr669.i718, i8** %ffmt.addr.i45, align 8
  %953 = load i32* %usee.i65, align 4
  %tobool670.i719 = icmp ne i32 %953, 0
  br i1 %tobool670.i719, label %if.end674.i723, label %if.then671.i722

if.then671.i722:                                  ; preds = %if.end666.i720
  %954 = load i8** %ffmt.addr.i45, align 8
  store i8 48, i8* %954, align 1
  %955 = load i8** %ffmt.addr.i45, align 8
  %arrayidx673.i721 = getelementptr inbounds i8* %955, i64 1
  store i8 46, i8* %arrayidx673.i721, align 1
  store i32 2, i32* %m.i70, align 4
  br label %if.end674.i723

if.end674.i723:                                   ; preds = %if.then671.i722, %if.end666.i720
  br label %if.end675.i725

if.end675.i725:                                   ; preds = %if.end674.i723, %if.end651.i706
  %956 = load i32* %usee.i65, align 4
  %tobool676.i724 = icmp ne i32 %956, 0
  br i1 %tobool676.i724, label %if.then677.i727, label %if.end679.i731

if.then677.i727:                                  ; preds = %if.end675.i725
  %957 = load i32* %w.addr.i46, align 4
  %inc678.i726 = add nsw i32 %957, 1
  store i32 %inc678.i726, i32* %w.addr.i46, align 4
  br label %if.end679.i731

if.end679.i731:                                   ; preds = %if.then677.i727, %if.end675.i725
  store i32 0, i32* %kbk.i69, align 4
  %958 = load i32* %kbk.i69, align 4
  %inc680.i728 = add nsw i32 %958, 1
  store i32 %inc680.i728, i32* %kbk.i69, align 4
  %idxprom681.i729 = sext i32 %958 to i64
  %arrayidx682.i730 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom681.i729
  %959 = load i32* %arrayidx682.i730, align 4
  store i32 %959, i32* %k.i59, align 4
  %960 = load i32* %pose.i62, align 4
  store i32 %960, i32* %i.i57, align 4
  br label %for.cond683.i733

for.cond683.i733:                                 ; preds = %if.end698.i745, %if.end679.i731
  %961 = load i32* %i.i57, align 4
  %cmp684.i732 = icmp sge i32 %961, 0
  br i1 %cmp684.i732, label %for.body686.i738, label %for.end701.i750

for.body686.i738:                                 ; preds = %for.cond683.i733
  %962 = load i32* %k.i59, align 4
  %div687.i734 = sdiv i32 %962, 10
  store i32 %div687.i734, i32* %j.i58, align 4
  %963 = load i32* %k.i59, align 4
  %964 = load i32* %j.i58, align 4
  %mul688.i735 = mul nsw i32 %964, 10
  %sub689.i736 = sub nsw i32 %963, %mul688.i735
  store i32 %sub689.i736, i32* %k.i59, align 4
  %965 = load i32* %i.i57, align 4
  %966 = load i32* %w.addr.i46, align 4
  %cmp690.i737 = icmp slt i32 %965, %966
  br i1 %cmp690.i737, label %if.then692.i744, label %if.end698.i745

if.then692.i744:                                  ; preds = %for.body686.i738
  %967 = load i32* %k.i59, align 4
  %add693.i739 = add nsw i32 48, %967
  %conv694.i740 = trunc i32 %add693.i739 to i8
  %968 = load i32* %i.i57, align 4
  %969 = load i32* %m.i70, align 4
  %add695.i741 = add nsw i32 %968, %969
  %idxprom696.i742 = sext i32 %add695.i741 to i64
  %970 = load i8** %ffmt.addr.i45, align 8
  %arrayidx697.i743 = getelementptr inbounds i8* %970, i64 %idxprom696.i742
  store i8 %conv694.i740, i8* %arrayidx697.i743, align 1
  br label %if.end698.i745

if.end698.i745:                                   ; preds = %if.then692.i744, %for.body686.i738
  %971 = load i32* %j.i58, align 4
  store i32 %971, i32* %k.i59, align 4
  %972 = load i32* %i.i57, align 4
  %dec700.i746 = add nsw i32 %972, -1
  store i32 %dec700.i746, i32* %i.i57, align 4
  br label %for.cond683.i733

for.end701.i750:                                  ; preds = %for.cond683.i733
  %973 = load i32* %pose.i62, align 4
  %add702.i747 = add nsw i32 %973, 1
  store i32 %add702.i747, i32* %ii.i64, align 4
  %974 = load i32* %kbk.i69, align 4
  %975 = load i32* %kmx.i60, align 4
  %add703.i748 = add nsw i32 %975, 1
  %cmp704.i749 = icmp eq i32 %974, %add703.i748
  br i1 %cmp704.i749, label %if.then706.i755, label %if.end723.i766

if.then706.i755:                                  ; preds = %for.end701.i750
  %976 = load i32* %ii.i64, align 4
  %977 = load i32* %m.i70, align 4
  %add707.i751 = add nsw i32 %976, %977
  %idxprom708.i752 = sext i32 %add707.i751 to i64
  %978 = load i8** %ffmt.addr.i45, align 8
  %arrayidx709.i753 = getelementptr inbounds i8* %978, i64 %idxprom708.i752
  store i8 46, i8* %arrayidx709.i753, align 1
  %979 = load i32* %ii.i64, align 4
  %980 = load i32* %w.addr.i46, align 4
  %cmp710.i754 = icmp slt i32 %979, %980
  br i1 %cmp710.i754, label %if.then712.i757, label %if.end714.i759

if.then712.i757:                                  ; preds = %if.then706.i755
  %981 = load i32* %w.addr.i46, align 4
  %inc713.i756 = add nsw i32 %981, 1
  store i32 %inc713.i756, i32* %w.addr.i46, align 4
  br label %if.end714.i759

if.end714.i759:                                   ; preds = %if.then712.i757, %if.then706.i755
  %982 = load i32* %ii.i64, align 4
  %983 = load i32* %w.addr.i46, align 4
  %cmp715.i758 = icmp eq i32 %982, %983
  br i1 %cmp715.i758, label %land.lhs.true717.i761, label %if.end721.i765

land.lhs.true717.i761:                            ; preds = %if.end714.i759
  %984 = load i32* %usee.i65, align 4
  %tobool718.i760 = icmp ne i32 %984, 0
  br i1 %tobool718.i760, label %if.end721.i765, label %if.then719.i763

if.then719.i763:                                  ; preds = %land.lhs.true717.i761
  %985 = load i32* %w.addr.i46, align 4
  %inc720.i762 = add nsw i32 %985, 1
  store i32 %inc720.i762, i32* %w.addr.i46, align 4
  br label %if.end721.i765

if.end721.i765:                                   ; preds = %if.then719.i763, %land.lhs.true717.i761, %if.end714.i759
  %986 = load i32* %ii.i64, align 4
  %inc722.i764 = add nsw i32 %986, 1
  store i32 %inc722.i764, i32* %ii.i64, align 4
  br label %if.end723.i766

if.end723.i766:                                   ; preds = %if.end721.i765, %for.end701.i750
  br label %while.cond724.i768

while.cond724.i768:                               ; preds = %if.end772.i808, %if.end723.i766
  %987 = load i32* %ii.i64, align 4
  %988 = load i32* %w.addr.i46, align 4
  %cmp725.i767 = icmp slt i32 %987, %988
  br i1 %cmp725.i767, label %while.body727.i773, label %while.end773.i810

while.body727.i773:                               ; preds = %while.cond724.i768
  %989 = load i32* %kbk.i69, align 4
  %inc728.i769 = add nsw i32 %989, 1
  store i32 %inc728.i769, i32* %kbk.i69, align 4
  %idxprom729.i770 = sext i32 %989 to i64
  %arrayidx730.i771 = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom729.i770
  %990 = load i32* %arrayidx730.i771, align 4
  store i32 %990, i32* %k.i59, align 4
  %991 = load i32* %ii.i64, align 4
  %add731.i772 = add nsw i32 8, %991
  store i32 %add731.i772, i32* %i.i57, align 4
  br label %for.cond732.i775

for.cond732.i775:                                 ; preds = %if.end747.i787, %while.body727.i773
  %992 = load i32* %i.i57, align 4
  %993 = load i32* %ii.i64, align 4
  %cmp733.i774 = icmp sge i32 %992, %993
  br i1 %cmp733.i774, label %for.body735.i780, label %for.end750.i792

for.body735.i780:                                 ; preds = %for.cond732.i775
  %994 = load i32* %k.i59, align 4
  %div736.i776 = sdiv i32 %994, 10
  store i32 %div736.i776, i32* %j.i58, align 4
  %995 = load i32* %k.i59, align 4
  %996 = load i32* %j.i58, align 4
  %mul737.i777 = mul nsw i32 %996, 10
  %sub738.i778 = sub nsw i32 %995, %mul737.i777
  store i32 %sub738.i778, i32* %k.i59, align 4
  %997 = load i32* %i.i57, align 4
  %998 = load i32* %w.addr.i46, align 4
  %cmp739.i779 = icmp slt i32 %997, %998
  br i1 %cmp739.i779, label %if.then741.i786, label %if.end747.i787

if.then741.i786:                                  ; preds = %for.body735.i780
  %999 = load i32* %k.i59, align 4
  %add742.i781 = add nsw i32 48, %999
  %conv743.i782 = trunc i32 %add742.i781 to i8
  %1000 = load i32* %i.i57, align 4
  %1001 = load i32* %m.i70, align 4
  %add744.i783 = add nsw i32 %1000, %1001
  %idxprom745.i784 = sext i32 %add744.i783 to i64
  %1002 = load i8** %ffmt.addr.i45, align 8
  %arrayidx746.i785 = getelementptr inbounds i8* %1002, i64 %idxprom745.i784
  store i8 %conv743.i782, i8* %arrayidx746.i785, align 1
  br label %if.end747.i787

if.end747.i787:                                   ; preds = %if.then741.i786, %for.body735.i780
  %1003 = load i32* %j.i58, align 4
  store i32 %1003, i32* %k.i59, align 4
  %1004 = load i32* %i.i57, align 4
  %dec749.i788 = add nsw i32 %1004, -1
  store i32 %dec749.i788, i32* %i.i57, align 4
  br label %for.cond732.i775

for.end750.i792:                                  ; preds = %for.cond732.i775
  %1005 = load i32* %ii.i64, align 4
  %add751.i789 = add nsw i32 %1005, 9
  store i32 %add751.i789, i32* %ii.i64, align 4
  %1006 = load i32* %kbk.i69, align 4
  %1007 = load i32* %kmx.i60, align 4
  %add752.i790 = add nsw i32 %1007, 1
  %cmp753.i791 = icmp eq i32 %1006, %add752.i790
  br i1 %cmp753.i791, label %if.then755.i797, label %if.end772.i808

if.then755.i797:                                  ; preds = %for.end750.i792
  %1008 = load i32* %ii.i64, align 4
  %1009 = load i32* %m.i70, align 4
  %add756.i793 = add nsw i32 %1008, %1009
  %idxprom757.i794 = sext i32 %add756.i793 to i64
  %1010 = load i8** %ffmt.addr.i45, align 8
  %arrayidx758.i795 = getelementptr inbounds i8* %1010, i64 %idxprom757.i794
  store i8 46, i8* %arrayidx758.i795, align 1
  %1011 = load i32* %ii.i64, align 4
  %1012 = load i32* %w.addr.i46, align 4
  %cmp759.i796 = icmp slt i32 %1011, %1012
  br i1 %cmp759.i796, label %if.then761.i799, label %if.end763.i801

if.then761.i799:                                  ; preds = %if.then755.i797
  %1013 = load i32* %w.addr.i46, align 4
  %inc762.i798 = add nsw i32 %1013, 1
  store i32 %inc762.i798, i32* %w.addr.i46, align 4
  br label %if.end763.i801

if.end763.i801:                                   ; preds = %if.then761.i799, %if.then755.i797
  %1014 = load i32* %ii.i64, align 4
  %1015 = load i32* %w.addr.i46, align 4
  %cmp764.i800 = icmp eq i32 %1014, %1015
  br i1 %cmp764.i800, label %land.lhs.true766.i803, label %if.end770.i807

land.lhs.true766.i803:                            ; preds = %if.end763.i801
  %1016 = load i32* %usee.i65, align 4
  %tobool767.i802 = icmp ne i32 %1016, 0
  br i1 %tobool767.i802, label %if.end770.i807, label %if.then768.i805

if.then768.i805:                                  ; preds = %land.lhs.true766.i803
  %1017 = load i32* %w.addr.i46, align 4
  %inc769.i804 = add nsw i32 %1017, 1
  store i32 %inc769.i804, i32* %w.addr.i46, align 4
  br label %if.end770.i807

if.end770.i807:                                   ; preds = %if.then768.i805, %land.lhs.true766.i803, %if.end763.i801
  %1018 = load i32* %ii.i64, align 4
  %inc771.i806 = add nsw i32 %1018, 1
  store i32 %inc771.i806, i32* %ii.i64, align 4
  br label %if.end772.i808

if.end772.i808:                                   ; preds = %if.end770.i807, %for.end750.i792
  br label %while.cond724.i768

while.end773.i810:                                ; preds = %while.cond724.i768
  %1019 = load i32* %usee.i65, align 4
  %tobool774.i809 = icmp ne i32 %1019, 0
  br i1 %tobool774.i809, label %if.then775.i817, label %if.else836.i871

if.then775.i817:                                  ; preds = %while.end773.i810
  %1020 = load i8** %ffmt.addr.i45, align 8
  %arrayidx776.i811 = getelementptr inbounds i8* %1020, i64 1
  %1021 = load i8* %arrayidx776.i811, align 1
  %1022 = load i8** %ffmt.addr.i45, align 8
  store i8 %1021, i8* %1022, align 1
  %1023 = load i8** %ffmt.addr.i45, align 8
  %arrayidx778.i812 = getelementptr inbounds i8* %1023, i64 1
  store i8 46, i8* %arrayidx778.i812, align 1
  %1024 = load i32* %w.addr.i46, align 4
  %add779.i813 = add nsw i32 %1024, 1
  %idxprom780.i814 = sext i32 %add779.i813 to i64
  %1025 = load i8** %ffmt.addr.i45, align 8
  %arrayidx781.i815 = getelementptr inbounds i8* %1025, i64 %idxprom780.i814
  store i8 69, i8* %arrayidx781.i815, align 1
  %1026 = load i32* %iexp.i49, align 4
  %cmp782.i816 = icmp sge i32 %1026, 0
  br i1 %cmp782.i816, label %if.then784.i821, label %if.else788.i826

if.then784.i821:                                  ; preds = %if.then775.i817
  %1027 = load i32* %w.addr.i46, align 4
  %add785.i818 = add nsw i32 %1027, 2
  %idxprom786.i819 = sext i32 %add785.i818 to i64
  %1028 = load i8** %ffmt.addr.i45, align 8
  %arrayidx787.i820 = getelementptr inbounds i8* %1028, i64 %idxprom786.i819
  store i8 43, i8* %arrayidx787.i820, align 1
  br label %if.end793.i829

if.else788.i826:                                  ; preds = %if.then775.i817
  %1029 = load i32* %w.addr.i46, align 4
  %add789.i822 = add nsw i32 %1029, 2
  %idxprom790.i823 = sext i32 %add789.i822 to i64
  %1030 = load i8** %ffmt.addr.i45, align 8
  %arrayidx791.i824 = getelementptr inbounds i8* %1030, i64 %idxprom790.i823
  store i8 45, i8* %arrayidx791.i824, align 1
  %1031 = load i32* %iexp.i49, align 4
  %sub792.i825 = sub nsw i32 0, %1031
  store i32 %sub792.i825, i32* %iexp.i49, align 4
  br label %if.end793.i829

if.end793.i829:                                   ; preds = %if.else788.i826, %if.then784.i821
  %1032 = load i32* %ldw.addr.i48, align 4
  %and794.i827 = and i32 %1032, 2
  %tobool795.i828 = icmp ne i32 %and794.i827, 0
  br i1 %tobool795.i828, label %if.then796.i833, label %if.else800.i845

if.then796.i833:                                  ; preds = %if.end793.i829
  %1033 = load i32* %w.addr.i46, align 4
  %add797.i830 = add nsw i32 %1033, 5
  %idxprom798.i831 = sext i32 %add797.i830 to i64
  %1034 = load i8** %ffmt.addr.i45, align 8
  %arrayidx799.i832 = getelementptr inbounds i8* %1034, i64 %idxprom798.i831
  store i8 0, i8* %arrayidx799.i832, align 1
  %1035 = load i32* %iexp.i49, align 4
  store i32 %1035, i32* %j.i58, align 4
  br label %if.end812.i869

if.else800.i845:                                  ; preds = %if.end793.i829
  %1036 = load i32* %iexp.i49, align 4
  store i32 %1036, i32* %k.i59, align 4
  %1037 = load i32* %w.addr.i46, align 4
  %add801.i834 = add nsw i32 %1037, 6
  %idxprom802.i835 = sext i32 %add801.i834 to i64
  %1038 = load i8** %ffmt.addr.i45, align 8
  %arrayidx803.i836 = getelementptr inbounds i8* %1038, i64 %idxprom802.i835
  store i8 0, i8* %arrayidx803.i836, align 1
  %1039 = load i32* %k.i59, align 4
  %div804.i837 = sdiv i32 %1039, 10
  store i32 %div804.i837, i32* %j.i58, align 4
  %1040 = load i32* %k.i59, align 4
  %1041 = load i32* %j.i58, align 4
  %mul805.i838 = mul nsw i32 %1041, 10
  %sub806.i839 = sub nsw i32 %1040, %mul805.i838
  store i32 %sub806.i839, i32* %k.i59, align 4
  %1042 = load i32* %k.i59, align 4
  %add807.i840 = add nsw i32 48, %1042
  %conv808.i841 = trunc i32 %add807.i840 to i8
  %1043 = load i32* %w.addr.i46, align 4
  %add809.i842 = add nsw i32 %1043, 5
  %idxprom810.i843 = sext i32 %add809.i842 to i64
  %1044 = load i8** %ffmt.addr.i45, align 8
  %arrayidx811.i844 = getelementptr inbounds i8* %1044, i64 %idxprom810.i843
  store i8 %conv808.i841, i8* %arrayidx811.i844, align 1
  br label %if.end812.i869

if.end812.i869:                                   ; preds = %if.else800.i845, %if.then796.i833
  %1045 = load i32* %j.i58, align 4
  %div813.i846 = sdiv i32 %1045, 10
  store i32 %div813.i846, i32* %k.i59, align 4
  %1046 = load i32* %j.i58, align 4
  %1047 = load i32* %k.i59, align 4
  %mul814.i847 = mul nsw i32 %1047, 10
  %sub815.i848 = sub nsw i32 %1046, %mul814.i847
  store i32 %sub815.i848, i32* %j.i58, align 4
  %1048 = load i32* %j.i58, align 4
  %add816.i849 = add nsw i32 48, %1048
  %conv817.i850 = trunc i32 %add816.i849 to i8
  %1049 = load i32* %w.addr.i46, align 4
  %add818.i851 = add nsw i32 %1049, 4
  %idxprom819.i852 = sext i32 %add818.i851 to i64
  %1050 = load i8** %ffmt.addr.i45, align 8
  %arrayidx820.i853 = getelementptr inbounds i8* %1050, i64 %idxprom819.i852
  store i8 %conv817.i850, i8* %arrayidx820.i853, align 1
  %1051 = load i32* %k.i59, align 4
  %div821.i854 = sdiv i32 %1051, 10
  store i32 %div821.i854, i32* %j.i58, align 4
  %1052 = load i32* %k.i59, align 4
  %1053 = load i32* %j.i58, align 4
  %mul822.i855 = mul nsw i32 %1053, 10
  %sub823.i856 = sub nsw i32 %1052, %mul822.i855
  store i32 %sub823.i856, i32* %k.i59, align 4
  %1054 = load i32* %k.i59, align 4
  %add824.i857 = add nsw i32 48, %1054
  %conv825.i858 = trunc i32 %add824.i857 to i8
  %1055 = load i32* %w.addr.i46, align 4
  %add826.i859 = add nsw i32 %1055, 3
  %idxprom827.i860 = sext i32 %add826.i859 to i64
  %1056 = load i8** %ffmt.addr.i45, align 8
  %arrayidx828.i861 = getelementptr inbounds i8* %1056, i64 %idxprom827.i860
  store i8 %conv825.i858, i8* %arrayidx828.i861, align 1
  %1057 = load i32* %w.addr.i46, align 4
  %add829.i862 = add nsw i32 %1057, 6
  %1058 = load i32* %space.i73, align 4
  %1059 = load i32* %sgn.i72, align 4
  %or830.i863 = or i32 %1058, %1059
  %add831.i864 = add nsw i32 %add829.i862, %or830.i863
  %1060 = load i32* %ldw.addr.i48, align 4
  %and832.i865 = and i32 %1060, 2
  %cmp833.i866 = icmp eq i32 %and832.i865, 2
  %conv834.i867 = zext i1 %cmp833.i866 to i32
  %sub835.i868 = sub nsw i32 %add831.i864, %conv834.i867
  store i32 %sub835.i868, i32* %retval.i43
  br label %__pgf90io_sc_fp_ldw.exit885

if.else836.i871:                                  ; preds = %while.end773.i810
  %1061 = load i32* %iexp.i49, align 4
  %cmp837.i870 = icmp slt i32 %1061, 0
  br i1 %cmp837.i870, label %if.then839.i878, label %if.else846.i884

if.then839.i878:                                  ; preds = %if.else836.i871
  %1062 = load i32* %w.addr.i46, align 4
  %add840.i872 = add nsw i32 %1062, 2
  %idxprom841.i873 = sext i32 %add840.i872 to i64
  %1063 = load i8** %ffmt.addr.i45, align 8
  %arrayidx842.i874 = getelementptr inbounds i8* %1063, i64 %idxprom841.i873
  store i8 0, i8* %arrayidx842.i874, align 1
  %1064 = load i32* %w.addr.i46, align 4
  %add843.i875 = add nsw i32 %1064, 2
  %1065 = load i32* %space.i73, align 4
  %1066 = load i32* %sgn.i72, align 4
  %or844.i876 = or i32 %1065, %1066
  %add845.i877 = add nsw i32 %add843.i875, %or844.i876
  store i32 %add845.i877, i32* %retval.i43
  br label %__pgf90io_sc_fp_ldw.exit885

if.else846.i884:                                  ; preds = %if.else836.i871
  %1067 = load i32* %w.addr.i46, align 4
  %idxprom847.i879 = sext i32 %1067 to i64
  %1068 = load i8** %ffmt.addr.i45, align 8
  %arrayidx848.i880 = getelementptr inbounds i8* %1068, i64 %idxprom847.i879
  store i8 0, i8* %arrayidx848.i880, align 1
  %1069 = load i32* %w.addr.i46, align 4
  %1070 = load i32* %space.i73, align 4
  %1071 = load i32* %sgn.i72, align 4
  %or849.i881 = or i32 %1070, %1071
  %add850.i882 = add nsw i32 %1069, %or849.i881
  %1072 = load i32* %space.i73, align 4
  %add851.i883 = add nsw i32 %add850.i882, %1072
  store i32 %add851.i883, i32* %retval.i43
  br label %__pgf90io_sc_fp_ldw.exit885

__pgf90io_sc_fp_ldw.exit885:                      ; preds = %if.else846.i884, %if.then839.i878, %if.end812.i869, %for.end79.i185, %if.end47.i155
  %1073 = load i32* %retval.i43
  store i32 %1073, i32* %len, align 4
  %1074 = load i32* %len, align 4
  %1075 = load i32* %j, align 4
  %add34 = add nsw i32 %1075, %1074
  store i32 %add34, i32* %j, align 4
  %1076 = load i32* %j, align 4
  %inc35 = add nsw i32 %1076, 1
  store i32 %inc35, i32* %j, align 4
  %idxprom36 = sext i32 %1076 to i64
  %1077 = load i8** %p.addr, align 8
  %arrayidx37 = getelementptr inbounds i8* %1077, i64 %idxprom36
  store i8 41, i8* %arrayidx37, align 1
  %1078 = load i32* %j, align 4
  %inc38 = add nsw i32 %1078, 1
  store i32 %inc38, i32* %j, align 4
  %idxprom39 = sext i32 %1078 to i64
  %1079 = load i8** %p.addr, align 8
  %arrayidx40 = getelementptr inbounds i8* %1079, i64 %idxprom39
  store i8 32, i8* %arrayidx40, align 1
  %1080 = load i32* %j, align 4
  %conv41 = trunc i32 %1080 to i8
  %1081 = load i8** %p.addr, align 8
  %arrayidx42 = getelementptr inbounds i8* %1081, i64 0
  store i8 %conv41, i8* %arrayidx42, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_d_ldw(double %d, i32 %ftype, i8* %p) nounwind alwaysinline {
entry:
  %retval.i = alloca i32, align 4
  %x.addr.i = alloca double, align 8
  %ffmt.addr.i = alloca i8*, align 8
  %w.addr.i = alloca i32, align 4
  %d.addr.i = alloca i32, align 4
  %ldw.addr.i = alloca i32, align 4
  %iexp.i = alloca i32, align 4
  %iwd0.i = alloca i32, align 4
  %iwdm1.i = alloca i32, align 4
  %iwdm2.i = alloca i32, align 4
  %icarr.i = alloca i32, align 4
  %iextb.i = alloca [104 x i32], align 4
  %iexta.i = alloca i32*, align 8
  %iextc.i = alloca i32*, align 8
  %i.i = alloca i32, align 4
  %j.i = alloca i32, align 4
  %k.i = alloca i32, align 4
  %kmx.i = alloca i32, align 4
  %firstdigit.i = alloca i32, align 4
  %pose.i = alloca i32, align 4
  %firstfwd.i = alloca i32, align 4
  %ii.i = alloca i32, align 4
  %usee.i = alloca i32, align 4
  %digit.i = alloca i32, align 4
  %ndigits.i = alloca i32, align 4
  %prdigits.i = alloca i32, align 4
  %kbk.i = alloca i32, align 4
  %m.i = alloca i32, align 4
  %lw.i = alloca i32, align 4
  %sgn.i = alloca i32, align 4
  %space.i = alloca i32, align 4
  %lb0.i = alloca i64, align 8
  %lb1.i = alloca i64, align 8
  %ibt0.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %rndval.i = alloca i32, align 4
  %sticky.i = alloca i32, align 4
  %rndup.i = alloca i32, align 4
  %loc.i = alloca i32, align 4
  %keepon.i = alloca i32, align 4
  %roundcarry.i = alloca i32, align 4
  %sh1.i = alloca i32, align 4
  %sh3.i = alloca i32, align 4
  %savecarry.i = alloca i32, align 4
  %savek.i = alloca i32, align 4
  %ix.i = alloca i32, align 4
  %ixa.i = alloca i32, align 4
  %ixb.i = alloca i32, align 4
  %ixc.i = alloca i32, align 4
  %d.addr = alloca double, align 8
  %ftype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store double %d, double* %d.addr, align 8
  store i32 %ftype, i32* %ftype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %j, align 4
  %add = add nsw i32 %2, 24
  %cmp = icmp sge i32 %add, 83
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %3, i64 84
  %4 = load i8* %arrayidx2, align 1
  %conv3 = sext i8 %4 to i32
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32* %j, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %6, i64 %idxprom
  store i8 10, i8* %arrayidx4, align 1
  %7 = load i32* %j, align 4
  %add5 = add nsw i32 %7, 1
  %idxprom6 = sext i32 %add5 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx7 = getelementptr inbounds i8* %8, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %9 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %9, i64 1
  call  void @__pgi_print_string(i8* %arrayidx8)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32* %k, align 4
  %cmp9 = icmp slt i32 %10, 83
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %k, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load i8** %p.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %12, i64 %idxprom11
  store i8 32, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32* %k, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %14 = load i32* %j, align 4
  %conv13 = trunc i32 %14 to i8
  %15 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %15, i64 0
  store i8 %conv13, i8* %arrayidx14, align 1
  %16 = load i8** %p.addr, align 8
  %arrayidx15 = getelementptr inbounds i8* %16, i64 83
  store i8 0, i8* %arrayidx15, align 1
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 84
  store i8 0, i8* %arrayidx16, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %18 = load i32* %j, align 4
  %cmp17 = icmp ne i32 %18, 2
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end
  %19 = load i32* %j, align 4
  %inc20 = add nsw i32 %19, 1
  store i32 %inc20, i32* %j, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end
  %20 = load double* %d.addr, align 8
  %21 = load i8** %p.addr, align 8
  %22 = load i32* %j, align 4
  %idx.ext = sext i32 %22 to i64
  %add.ptr = getelementptr inbounds i8* %21, i64 %idx.ext
  store double %20, double* %x.addr.i, align 8
  store i8* %add.ptr, i8** %ffmt.addr.i, align 8
  store i32 16, i32* %w.addr.i, align 4
  store i32 0, i32* %d.addr.i, align 4
  store i32 5, i32* %ldw.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.end21
  %23 = load i32* %i.i, align 4
  %cmp.i = icmp slt i32 %23, 104
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %24 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %24 to i64
  %arrayidx.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom.i
  store i32 0, i32* %arrayidx.i, align 4
  %25 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %arrayidx1.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 70
  store i32* %arrayidx1.i, i32** %iexta.i, align 8
  %arrayidx2.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 35
  store i32* %arrayidx2.i, i32** %iextc.i, align 8
  %26 = bitcast double* %x.addr.i to i64*
  %27 = load i64* %26, align 8
  store i64 %27, i64* %lb0.i, align 8
  %28 = load i64* %lb0.i, align 8
  %and.i = and i64 %28, 9218868437227405312
  %shr.i = lshr i64 %and.i, 52
  %sub.i = sub i64 %shr.i, 1023
  %conv.i = trunc i64 %sub.i to i32
  store i32 %conv.i, i32* %iexp.i, align 4
  %29 = load i64* %lb0.i, align 8
  %and3.i = and i64 %29, -9223372036854775808
  %shr4.i = lshr i64 %and3.i, 63
  %conv5.i = trunc i64 %shr4.i to i32
  store i32 %conv5.i, i32* %sgn.i, align 4
  %30 = load i64* %lb0.i, align 8
  %and6.i = and i64 %30, 4503599627370495
  store i64 %and6.i, i64* %lb1.i, align 8
  %31 = load i32* %iexp.i, align 4
  %cmp7.i = icmp eq i32 %31, 1024
  br i1 %cmp7.i, label %if.then.i, label %if.end52.i

if.then.i:                                        ; preds = %for.end.i
  %32 = load i32* %ldw.addr.i, align 4
  %and9.i = and i32 %32, 4
  %tobool.i = icmp ne i32 %and9.i, 0
  br i1 %tobool.i, label %if.then10.i, label %if.end.i

if.then10.i:                                      ; preds = %if.then.i
  %33 = load i32* %w.addr.i, align 4
  %inc11.i = add nsw i32 %33, 1
  store i32 %inc11.i, i32* %w.addr.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then10.i, %if.then.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond12.i

for.cond12.i:                                     ; preds = %for.body15.i, %if.end.i
  %34 = load i32* %i.i, align 4
  %35 = load i32* %w.addr.i, align 4
  %add.i = add nsw i32 %35, 4
  %cmp13.i = icmp slt i32 %34, %add.i
  br i1 %cmp13.i, label %for.body15.i, label %for.end20.i

for.body15.i:                                     ; preds = %for.cond12.i
  %36 = load i32* %i.i, align 4
  %idxprom16.i = sext i32 %36 to i64
  %37 = load i8** %ffmt.addr.i, align 8
  %arrayidx17.i = getelementptr inbounds i8* %37, i64 %idxprom16.i
  store i8 32, i8* %arrayidx17.i, align 1
  %38 = load i32* %i.i, align 4
  %inc19.i = add nsw i32 %38, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond12.i

for.end20.i:                                      ; preds = %for.cond12.i
  %39 = load i64* %lb1.i, align 8
  %tobool21.i = icmp ne i64 %39, 0
  br i1 %tobool21.i, label %if.then22.i, label %if.else.i

if.then22.i:                                      ; preds = %for.end20.i
  %40 = load i32* %w.addr.i, align 4
  %add23.i = add nsw i32 %40, 4
  %idxprom24.i = sext i32 %add23.i to i64
  %41 = load i8** %ffmt.addr.i, align 8
  %arrayidx25.i = getelementptr inbounds i8* %41, i64 %idxprom24.i
  store i8 78, i8* %arrayidx25.i, align 1
  %42 = load i32* %w.addr.i, align 4
  %add26.i = add nsw i32 %42, 5
  %idxprom27.i = sext i32 %add26.i to i64
  %43 = load i8** %ffmt.addr.i, align 8
  %arrayidx28.i = getelementptr inbounds i8* %43, i64 %idxprom27.i
  store i8 97, i8* %arrayidx28.i, align 1
  %44 = load i32* %w.addr.i, align 4
  %add29.i = add nsw i32 %44, 6
  %idxprom30.i = sext i32 %add29.i to i64
  %45 = load i8** %ffmt.addr.i, align 8
  %arrayidx31.i = getelementptr inbounds i8* %45, i64 %idxprom30.i
  store i8 78, i8* %arrayidx31.i, align 1
  br label %if.end47.i

if.else.i:                                        ; preds = %for.end20.i
  %46 = load i32* %sgn.i, align 4
  %tobool32.i = icmp ne i32 %46, 0
  br i1 %tobool32.i, label %if.then33.i, label %if.end37.i

if.then33.i:                                      ; preds = %if.else.i
  %47 = load i32* %w.addr.i, align 4
  %add34.i = add nsw i32 %47, 3
  %idxprom35.i = sext i32 %add34.i to i64
  %48 = load i8** %ffmt.addr.i, align 8
  %arrayidx36.i = getelementptr inbounds i8* %48, i64 %idxprom35.i
  store i8 45, i8* %arrayidx36.i, align 1
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then33.i, %if.else.i
  %49 = load i32* %w.addr.i, align 4
  %add38.i = add nsw i32 %49, 4
  %idxprom39.i = sext i32 %add38.i to i64
  %50 = load i8** %ffmt.addr.i, align 8
  %arrayidx40.i = getelementptr inbounds i8* %50, i64 %idxprom39.i
  store i8 73, i8* %arrayidx40.i, align 1
  %51 = load i32* %w.addr.i, align 4
  %add41.i = add nsw i32 %51, 5
  %idxprom42.i = sext i32 %add41.i to i64
  %52 = load i8** %ffmt.addr.i, align 8
  %arrayidx43.i = getelementptr inbounds i8* %52, i64 %idxprom42.i
  store i8 110, i8* %arrayidx43.i, align 1
  %53 = load i32* %w.addr.i, align 4
  %add44.i = add nsw i32 %53, 6
  %idxprom45.i = sext i32 %add44.i to i64
  %54 = load i8** %ffmt.addr.i, align 8
  %arrayidx46.i = getelementptr inbounds i8* %54, i64 %idxprom45.i
  store i8 102, i8* %arrayidx46.i, align 1
  br label %if.end47.i

if.end47.i:                                       ; preds = %if.end37.i, %if.then22.i
  %55 = load i32* %w.addr.i, align 4
  %add48.i = add nsw i32 %55, 7
  %idxprom49.i = sext i32 %add48.i to i64
  %56 = load i8** %ffmt.addr.i, align 8
  %arrayidx50.i = getelementptr inbounds i8* %56, i64 %idxprom49.i
  store i8 0, i8* %arrayidx50.i, align 1
  %57 = load i32* %w.addr.i, align 4
  %add51.i = add nsw i32 %57, 7
  store i32 %add51.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end52.i:                                       ; preds = %for.end.i
  %58 = load i32* %iexp.i, align 4
  %add53.i = add nsw i32 %58, 1023
  %tobool54.i = icmp ne i32 %add53.i, 0
  br i1 %tobool54.i, label %if.then55.i, label %if.else56.i

if.then55.i:                                      ; preds = %if.end52.i
  %59 = load i64* %lb1.i, align 8
  %or.i = or i64 %59, 4503599627370496
  store i64 %or.i, i64* %lb1.i, align 8
  br label %if.end85.i

if.else56.i:                                      ; preds = %if.end52.i
  %60 = load i64* %lb1.i, align 8
  %tobool57.i = icmp ne i64 %60, 0
  br i1 %tobool57.i, label %if.then58.i, label %if.else60.i

if.then58.i:                                      ; preds = %if.else56.i
  %61 = load i32* %iexp.i, align 4
  %inc59.i = add nsw i32 %61, 1
  store i32 %inc59.i, i32* %iexp.i, align 4
  br label %if.end85.i

if.else60.i:                                      ; preds = %if.else56.i
  %62 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %62, align 1
  %63 = load i32* %sgn.i, align 4
  %tobool62.i = icmp ne i32 %63, 0
  br i1 %tobool62.i, label %if.then63.i, label %if.else65.i

if.then63.i:                                      ; preds = %if.else60.i
  %64 = load i8** %ffmt.addr.i, align 8
  %arrayidx64.i = getelementptr inbounds i8* %64, i64 1
  store i8 45, i8* %arrayidx64.i, align 1
  br label %if.end67.i

if.else65.i:                                      ; preds = %if.else60.i
  %65 = load i8** %ffmt.addr.i, align 8
  %arrayidx66.i = getelementptr inbounds i8* %65, i64 1
  store i8 32, i8* %arrayidx66.i, align 1
  br label %if.end67.i

if.end67.i:                                       ; preds = %if.else65.i, %if.then63.i
  %66 = load i8** %ffmt.addr.i, align 8
  %arrayidx68.i = getelementptr inbounds i8* %66, i64 2
  store i8 48, i8* %arrayidx68.i, align 1
  %67 = load i8** %ffmt.addr.i, align 8
  %arrayidx69.i = getelementptr inbounds i8* %67, i64 3
  store i8 46, i8* %arrayidx69.i, align 1
  store i32 4, i32* %i.i, align 4
  br label %for.cond70.i

for.cond70.i:                                     ; preds = %for.body74.i, %if.end67.i
  %68 = load i32* %i.i, align 4
  %69 = load i32* %w.addr.i, align 4
  %add71.i = add nsw i32 %69, 3
  %cmp72.i = icmp slt i32 %68, %add71.i
  br i1 %cmp72.i, label %for.body74.i, label %for.end79.i

for.body74.i:                                     ; preds = %for.cond70.i
  %70 = load i32* %i.i, align 4
  %idxprom75.i = sext i32 %70 to i64
  %71 = load i8** %ffmt.addr.i, align 8
  %arrayidx76.i = getelementptr inbounds i8* %71, i64 %idxprom75.i
  store i8 48, i8* %arrayidx76.i, align 1
  %72 = load i32* %i.i, align 4
  %inc78.i = add nsw i32 %72, 1
  store i32 %inc78.i, i32* %i.i, align 4
  br label %for.cond70.i

for.end79.i:                                      ; preds = %for.cond70.i
  %73 = load i32* %w.addr.i, align 4
  %add80.i = add nsw i32 %73, 3
  %idxprom81.i = sext i32 %add80.i to i64
  %74 = load i8** %ffmt.addr.i, align 8
  %arrayidx82.i = getelementptr inbounds i8* %74, i64 %idxprom81.i
  store i8 0, i8* %arrayidx82.i, align 1
  %75 = load i32* %w.addr.i, align 4
  %add83.i = add nsw i32 %75, 3
  store i32 %add83.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end85.i:                                       ; preds = %if.then58.i, %if.then55.i
  %76 = load i32* %iexp.i, align 4
  %cmp86.i = icmp sge i32 %76, 0
  br i1 %cmp86.i, label %if.then88.i, label %if.else90.i

if.then88.i:                                      ; preds = %if.end85.i
  %77 = load i32* %iexp.i, align 4
  %div.i = sdiv i32 %77, 32
  store i32 %div.i, i32* %iwd0.i, align 4
  %78 = load i32* %iexp.i, align 4
  %79 = load i32* %iwd0.i, align 4
  %mul.i = mul nsw i32 %79, 32
  %sub89.i = sub nsw i32 %78, %mul.i
  store i32 %sub89.i, i32* %ibt0.i, align 4
  br label %if.end97.i

if.else90.i:                                      ; preds = %if.end85.i
  %80 = load i32* %iexp.i, align 4
  %add91.i = add nsw i32 %80, 1
  %div92.i = sdiv i32 %add91.i, 32
  store i32 %div92.i, i32* %iwd0.i, align 4
  %81 = load i32* %iexp.i, align 4
  %add93.i = add nsw i32 %81, 32
  %82 = load i32* %iwd0.i, align 4
  %mul94.i = mul nsw i32 %82, 32
  %sub95.i = sub nsw i32 %add93.i, %mul94.i
  store i32 %sub95.i, i32* %ibt0.i, align 4
  %83 = load i32* %iwd0.i, align 4
  %add96.i = add nsw i32 %83, 33
  store i32 %add96.i, i32* %iwd0.i, align 4
  br label %if.end97.i

if.end97.i:                                       ; preds = %if.else90.i, %if.then88.i
  %84 = load i32* %iwd0.i, align 4
  %tobool98.i = icmp ne i32 %84, 0
  br i1 %tobool98.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.end97.i
  %85 = load i32* %iwd0.i, align 4
  %sub99.i = sub nsw i32 %85, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.end97.i
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub99.i, %cond.true.i ], [ 33, %cond.false.i ]
  store i32 %cond.i, i32* %iwdm1.i, align 4
  %86 = load i32* %iwdm1.i, align 4
  %tobool100.i = icmp ne i32 %86, 0
  br i1 %tobool100.i, label %cond.true101.i, label %cond.false103.i

cond.true101.i:                                   ; preds = %cond.end.i
  %87 = load i32* %iwdm1.i, align 4
  %sub102.i = sub nsw i32 %87, 1
  br label %cond.end104.i

cond.false103.i:                                  ; preds = %cond.end.i
  br label %cond.end104.i

cond.end104.i:                                    ; preds = %cond.false103.i, %cond.true101.i
  %cond105.i = phi i32 [ %sub102.i, %cond.true101.i ], [ 33, %cond.false103.i ]
  store i32 %cond105.i, i32* %iwdm2.i, align 4
  %88 = load i32* %ibt0.i, align 4
  %cmp106.i = icmp ult i32 %88, 20
  br i1 %cmp106.i, label %if.then108.i, label %if.else127.i

if.then108.i:                                     ; preds = %cond.end104.i
  %89 = load i64* %lb1.i, align 8
  %90 = load i32* %ibt0.i, align 4
  %sub109.i = sub i32 52, %90
  %sh_prom.i = zext i32 %sub109.i to i64
  %shr110.i = lshr i64 %89, %sh_prom.i
  %conv111.i = trunc i64 %shr110.i to i32
  %91 = load i32* %iwd0.i, align 4
  %idxprom112.i = sext i32 %91 to i64
  %92 = load i32** %iexta.i, align 8
  %arrayidx113.i = getelementptr inbounds i32* %92, i64 %idxprom112.i
  store i32 %conv111.i, i32* %arrayidx113.i, align 4
  %93 = load i64* %lb1.i, align 8
  %94 = load i32* %ibt0.i, align 4
  %sub114.i = sub i32 20, %94
  %sh_prom115.i = zext i32 %sub114.i to i64
  %shr116.i = lshr i64 %93, %sh_prom115.i
  %and117.i = and i64 %shr116.i, 4294967295
  %conv118.i = trunc i64 %and117.i to i32
  %95 = load i32* %iwdm1.i, align 4
  %idxprom119.i = sext i32 %95 to i64
  %96 = load i32** %iexta.i, align 8
  %arrayidx120.i = getelementptr inbounds i32* %96, i64 %idxprom119.i
  store i32 %conv118.i, i32* %arrayidx120.i, align 4
  %97 = load i64* %lb1.i, align 8
  %98 = load i32* %ibt0.i, align 4
  %add121.i = add i32 %98, 12
  %sh_prom122.i = zext i32 %add121.i to i64
  %shl.i = shl i64 %97, %sh_prom122.i
  %and123.i = and i64 %shl.i, 4294967295
  %conv124.i = trunc i64 %and123.i to i32
  %99 = load i32* %iwdm2.i, align 4
  %idxprom125.i = sext i32 %99 to i64
  %100 = load i32** %iexta.i, align 8
  %arrayidx126.i = getelementptr inbounds i32* %100, i64 %idxprom125.i
  store i32 %conv124.i, i32* %arrayidx126.i, align 4
  br label %if.end141.i

if.else127.i:                                     ; preds = %cond.end104.i
  %101 = load i64* %lb1.i, align 8
  %102 = load i32* %ibt0.i, align 4
  %sub128.i = sub i32 52, %102
  %sh_prom129.i = zext i32 %sub128.i to i64
  %shr130.i = lshr i64 %101, %sh_prom129.i
  %conv131.i = trunc i64 %shr130.i to i32
  %103 = load i32* %iwd0.i, align 4
  %idxprom132.i = sext i32 %103 to i64
  %104 = load i32** %iexta.i, align 8
  %arrayidx133.i = getelementptr inbounds i32* %104, i64 %idxprom132.i
  store i32 %conv131.i, i32* %arrayidx133.i, align 4
  %105 = load i64* %lb1.i, align 8
  %106 = load i32* %ibt0.i, align 4
  %sub134.i = sub i32 %106, 20
  %sh_prom135.i = zext i32 %sub134.i to i64
  %shl136.i = shl i64 %105, %sh_prom135.i
  %and137.i = and i64 %shl136.i, 4294967295
  %conv138.i = trunc i64 %and137.i to i32
  %107 = load i32* %iwdm1.i, align 4
  %idxprom139.i = sext i32 %107 to i64
  %108 = load i32** %iexta.i, align 8
  %arrayidx140.i = getelementptr inbounds i32* %108, i64 %idxprom139.i
  store i32 %conv138.i, i32* %arrayidx140.i, align 4
  br label %if.end141.i

if.end141.i:                                      ; preds = %if.else127.i, %if.then108.i
  %109 = load i32** %iextc.i, align 8
  store i32 1, i32* %109, align 4
  store i32 1, i32* %kmx.i, align 4
  %110 = load i32* %iexp.i, align 4
  %cmp143.i = icmp sge i32 %110, 0
  br i1 %cmp143.i, label %if.then145.i, label %if.end228.i

if.then145.i:                                     ; preds = %if.end141.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond146.i

for.cond146.i:                                    ; preds = %for.end224.i, %if.then145.i
  %111 = load i32* %i.i, align 4
  %112 = load i32* %iwd0.i, align 4
  %cmp147.i = icmp sle i32 %111, %112
  br i1 %cmp147.i, label %for.body149.i, label %for.end227.i

for.body149.i:                                    ; preds = %for.cond146.i
  store i32 0, i32* %j.i, align 4
  br label %for.cond150.i

for.cond150.i:                                    ; preds = %for.end217.i, %for.body149.i
  %113 = load i32* %j.i, align 4
  %cmp151.i = icmp slt i32 %113, 32
  br i1 %cmp151.i, label %for.body153.i, label %for.end224.i

for.body153.i:                                    ; preds = %for.cond150.i
  %114 = load i32* %i.i, align 4
  %idxprom154.i = sext i32 %114 to i64
  %115 = load i32** %iexta.i, align 8
  %arrayidx155.i = getelementptr inbounds i32* %115, i64 %idxprom154.i
  %116 = load i32* %arrayidx155.i, align 4
  %117 = load i32* %j.i, align 4
  %shl156.i = shl i32 1, %117
  %and157.i = and i32 %116, %shl156.i
  %tobool158.i = icmp ne i32 %and157.i, 0
  br i1 %tobool158.i, label %if.then159.i, label %if.end190.i

if.then159.i:                                     ; preds = %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond160.i

for.cond160.i:                                    ; preds = %if.end183.i, %if.then159.i
  %118 = load i32* %k.i, align 4
  %119 = load i32* %kmx.i, align 4
  %cmp161.i = icmp slt i32 %118, %119
  br i1 %cmp161.i, label %for.body163.i, label %for.end186.i

for.body163.i:                                    ; preds = %for.cond160.i
  %120 = load i32* %k.i, align 4
  %idxprom164.i = sext i32 %120 to i64
  %arrayidx165.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom164.i
  %121 = load i32* %arrayidx165.i, align 4
  %122 = load i32* %k.i, align 4
  %idxprom166.i = sext i32 %122 to i64
  %123 = load i32** %iextc.i, align 8
  %arrayidx167.i = getelementptr inbounds i32* %123, i64 %idxprom166.i
  %124 = load i32* %arrayidx167.i, align 4
  %add168.i = add i32 %121, %124
  %125 = load i32* %icarr.i, align 4
  %add169.i = add i32 %add168.i, %125
  %126 = load i32* %k.i, align 4
  %idxprom170.i = sext i32 %126 to i64
  %arrayidx171.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom170.i
  store i32 %add169.i, i32* %arrayidx171.i, align 4
  %127 = load i32* %k.i, align 4
  %idxprom172.i = sext i32 %127 to i64
  %arrayidx173.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom172.i
  %128 = load i32* %arrayidx173.i, align 4
  %cmp174.i = icmp uge i32 %128, 1000000000
  br i1 %cmp174.i, label %if.then176.i, label %if.else182.i

if.then176.i:                                     ; preds = %for.body163.i
  %129 = load i32* %k.i, align 4
  %idxprom177.i = sext i32 %129 to i64
  %arrayidx178.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom177.i
  %130 = load i32* %arrayidx178.i, align 4
  %sub179.i = sub i32 %130, 1000000000
  %131 = load i32* %k.i, align 4
  %idxprom180.i = sext i32 %131 to i64
  %arrayidx181.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom180.i
  store i32 %sub179.i, i32* %arrayidx181.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end183.i

if.else182.i:                                     ; preds = %for.body163.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end183.i

if.end183.i:                                      ; preds = %if.else182.i, %if.then176.i
  %132 = load i32* %k.i, align 4
  %inc185.i = add nsw i32 %132, 1
  store i32 %inc185.i, i32* %k.i, align 4
  br label %for.cond160.i

for.end186.i:                                     ; preds = %for.cond160.i
  %133 = load i32* %icarr.i, align 4
  %134 = load i32* %kmx.i, align 4
  %idxprom187.i = sext i32 %134 to i64
  %arrayidx188.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom187.i
  %135 = load i32* %arrayidx188.i, align 4
  %add189.i = add i32 %135, %133
  store i32 %add189.i, i32* %arrayidx188.i, align 4
  br label %if.end190.i

if.end190.i:                                      ; preds = %for.end186.i, %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond191.i

for.cond191.i:                                    ; preds = %if.end214.i, %if.end190.i
  %136 = load i32* %k.i, align 4
  %137 = load i32* %kmx.i, align 4
  %cmp192.i = icmp slt i32 %136, %137
  br i1 %cmp192.i, label %for.body194.i, label %for.end217.i

for.body194.i:                                    ; preds = %for.cond191.i
  %138 = load i32* %k.i, align 4
  %idxprom195.i = sext i32 %138 to i64
  %139 = load i32** %iextc.i, align 8
  %arrayidx196.i = getelementptr inbounds i32* %139, i64 %idxprom195.i
  %140 = load i32* %arrayidx196.i, align 4
  %141 = load i32* %k.i, align 4
  %idxprom197.i = sext i32 %141 to i64
  %142 = load i32** %iextc.i, align 8
  %arrayidx198.i = getelementptr inbounds i32* %142, i64 %idxprom197.i
  %143 = load i32* %arrayidx198.i, align 4
  %add199.i = add i32 %140, %143
  %144 = load i32* %icarr.i, align 4
  %add200.i = add i32 %add199.i, %144
  %145 = load i32* %k.i, align 4
  %idxprom201.i = sext i32 %145 to i64
  %146 = load i32** %iextc.i, align 8
  %arrayidx202.i = getelementptr inbounds i32* %146, i64 %idxprom201.i
  store i32 %add200.i, i32* %arrayidx202.i, align 4
  %147 = load i32* %k.i, align 4
  %idxprom203.i = sext i32 %147 to i64
  %148 = load i32** %iextc.i, align 8
  %arrayidx204.i = getelementptr inbounds i32* %148, i64 %idxprom203.i
  %149 = load i32* %arrayidx204.i, align 4
  %cmp205.i = icmp uge i32 %149, 1000000000
  br i1 %cmp205.i, label %if.then207.i, label %if.else213.i

if.then207.i:                                     ; preds = %for.body194.i
  %150 = load i32* %k.i, align 4
  %idxprom208.i = sext i32 %150 to i64
  %151 = load i32** %iextc.i, align 8
  %arrayidx209.i = getelementptr inbounds i32* %151, i64 %idxprom208.i
  %152 = load i32* %arrayidx209.i, align 4
  %sub210.i = sub i32 %152, 1000000000
  %153 = load i32* %k.i, align 4
  %idxprom211.i = sext i32 %153 to i64
  %154 = load i32** %iextc.i, align 8
  %arrayidx212.i = getelementptr inbounds i32* %154, i64 %idxprom211.i
  store i32 %sub210.i, i32* %arrayidx212.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end214.i

if.else213.i:                                     ; preds = %for.body194.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end214.i

if.end214.i:                                      ; preds = %if.else213.i, %if.then207.i
  %155 = load i32* %k.i, align 4
  %inc216.i = add nsw i32 %155, 1
  store i32 %inc216.i, i32* %k.i, align 4
  br label %for.cond191.i

for.end217.i:                                     ; preds = %for.cond191.i
  %156 = load i32* %icarr.i, align 4
  %157 = load i32* %kmx.i, align 4
  %idxprom218.i = sext i32 %157 to i64
  %158 = load i32** %iextc.i, align 8
  %arrayidx219.i = getelementptr inbounds i32* %158, i64 %idxprom218.i
  %159 = load i32* %arrayidx219.i, align 4
  %add220.i = add i32 %159, %156
  store i32 %add220.i, i32* %arrayidx219.i, align 4
  %160 = load i32* %icarr.i, align 4
  %161 = load i32* %kmx.i, align 4
  %add221.i = add i32 %161, %160
  store i32 %add221.i, i32* %kmx.i, align 4
  %162 = load i32* %j.i, align 4
  %inc223.i = add nsw i32 %162, 1
  store i32 %inc223.i, i32* %j.i, align 4
  br label %for.cond150.i

for.end224.i:                                     ; preds = %for.cond150.i
  %163 = load i32* %i.i, align 4
  %inc226.i = add nsw i32 %163, 1
  store i32 %inc226.i, i32* %i.i, align 4
  br label %for.cond146.i

for.end227.i:                                     ; preds = %for.cond146.i
  br label %if.end228.i

if.end228.i:                                      ; preds = %for.end227.i, %if.end141.i
  %164 = load i32* %kmx.i, align 4
  %sub229.i = sub nsw i32 %164, 1
  %idxprom230.i = sext i32 %sub229.i to i64
  %arrayidx231.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom230.i
  %165 = load i32* %arrayidx231.i, align 4
  %cmp232.i = icmp eq i32 %165, 0
  br i1 %cmp232.i, label %if.then234.i, label %if.end235.i

if.then234.i:                                     ; preds = %if.end228.i
  %166 = load i32* %kmx.i, align 4
  %dec.i = add nsw i32 %166, -1
  store i32 %dec.i, i32* %kmx.i, align 4
  br label %if.end235.i

if.end235.i:                                      ; preds = %if.then234.i, %if.end228.i
  %167 = load i32* %kmx.i, align 4
  %dec236.i = add nsw i32 %167, -1
  store i32 %dec236.i, i32* %kmx.i, align 4
  store i32 0, i32* %prdigits.i, align 4
  %168 = load i32* %kmx.i, align 4
  %cmp237.i = icmp sge i32 %168, 0
  br i1 %cmp237.i, label %if.then239.i, label %if.end392.i

if.then239.i:                                     ; preds = %if.end235.i
  store i32 1, i32* %digit.i, align 4
  %169 = load i32* %kmx.i, align 4
  %idxprom240.i = sext i32 %169 to i64
  %arrayidx241.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom240.i
  %170 = load i32* %arrayidx241.i, align 4
  store i32 %170, i32* %k.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond242.i

for.cond242.i:                                    ; preds = %if.end249.i, %if.then239.i
  %171 = load i32* %i.i, align 4
  %cmp243.i = icmp slt i32 %171, 9
  br i1 %cmp243.i, label %for.body245.i, label %for.end253.i

for.body245.i:                                    ; preds = %for.cond242.i
  %172 = load i32* %k.i, align 4
  %173 = load i32* %digit.i, align 4
  %cmp246.i = icmp uge i32 %172, %173
  br i1 %cmp246.i, label %if.then248.i, label %if.end249.i

if.then248.i:                                     ; preds = %for.body245.i
  %174 = load i32* %i.i, align 4
  store i32 %174, i32* %pose.i, align 4
  br label %if.end249.i

if.end249.i:                                      ; preds = %if.then248.i, %for.body245.i
  %175 = load i32* %digit.i, align 4
  %mul250.i = mul i32 %175, 10
  store i32 %mul250.i, i32* %digit.i, align 4
  %176 = load i32* %i.i, align 4
  %inc252.i = add nsw i32 %176, 1
  store i32 %inc252.i, i32* %i.i, align 4
  br label %for.cond242.i

for.end253.i:                                     ; preds = %for.cond242.i
  %177 = load i32* %kmx.i, align 4
  %mul254.i = mul nsw i32 %177, 9
  %178 = load i32* %pose.i, align 4
  %add255.i = add nsw i32 %mul254.i, %178
  %add256.i = add nsw i32 %add255.i, 1
  store i32 %add256.i, i32* %prdigits.i, align 4
  %179 = load i32* %prdigits.i, align 4
  %180 = load i32* %w.addr.i, align 4
  %cmp257.i = icmp ugt i32 %179, %180
  br i1 %cmp257.i, label %if.then259.i, label %if.end372.i

if.then259.i:                                     ; preds = %for.end253.i
  %181 = load i32* %prdigits.i, align 4
  %182 = load i32* %w.addr.i, align 4
  %sub260.i = sub i32 %181, %182
  store i32 %sub260.i, i32* %loc.i, align 4
  store i32 0, i32* %kbk.i, align 4
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then259.i
  %183 = load i32* %loc.i, align 4
  %cmp261.i = icmp sgt i32 %183, 9
  br i1 %cmp261.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %184 = load i32* %loc.i, align 4
  %sub263.i = sub nsw i32 %184, 9
  store i32 %sub263.i, i32* %loc.i, align 4
  %185 = load i32* %kbk.i, align 4
  %inc264.i = add nsw i32 %185, 1
  store i32 %inc264.i, i32* %kbk.i, align 4
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %186 = load i32* %kbk.i, align 4
  %idxprom265.i = sext i32 %186 to i64
  %arrayidx266.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom265.i
  %187 = load i32* %arrayidx266.i, align 4
  store i32 %187, i32* %k.i, align 4
  store i32 1, i32* %m.i, align 4
  store i32 10, i32* %c.i, align 4
  store i32 0, i32* %rndup.i, align 4
  store i32 0, i32* %sticky.i, align 4
  store i32 0, i32* %rndval.i, align 4
  %188 = load i32* %loc.i, align 4
  %cmp267.i = icmp sgt i32 %188, 1
  br i1 %cmp267.i, label %if.then269.i, label %if.else308.i

if.then269.i:                                     ; preds = %while.end.i
  br label %while.cond270.i

while.cond270.i:                                  ; preds = %if.end294.i, %if.then269.i
  %189 = load i32* %loc.i, align 4
  %dec271.i = add nsw i32 %189, -1
  store i32 %dec271.i, i32* %loc.i, align 4
  %tobool272.i = icmp ne i32 %189, 0
  br i1 %tobool272.i, label %while.body273.i, label %while.end296.i

while.body273.i:                                  ; preds = %while.cond270.i
  %190 = load i32* %k.i, align 4
  %div274.i = sdiv i32 %190, 10
  store i32 %div274.i, i32* %j.i, align 4
  %191 = load i32* %k.i, align 4
  %192 = load i32* %j.i, align 4
  %mul275.i = mul nsw i32 %192, 10
  %sub276.i = sub nsw i32 %191, %mul275.i
  store i32 %sub276.i, i32* %digit.i, align 4
  %193 = load i32* %loc.i, align 4
  %cmp277.i = icmp sgt i32 %193, 0
  br i1 %cmp277.i, label %if.then279.i, label %if.end283.i

if.then279.i:                                     ; preds = %while.body273.i
  %194 = load i32* %c.i, align 4
  %195 = load i32* %digit.i, align 4
  %sub280.i = sub i32 %194, %195
  %196 = load i32* %m.i, align 4
  %mul281.i = mul i32 %sub280.i, %196
  %197 = load i32* %rndup.i, align 4
  %add282.i = add i32 %197, %mul281.i
  store i32 %add282.i, i32* %rndup.i, align 4
  br label %if.end283.i

if.end283.i:                                      ; preds = %if.then279.i, %while.body273.i
  %198 = load i32* %loc.i, align 4
  %cmp284.i = icmp sgt i32 %198, 1
  br i1 %cmp284.i, label %if.then286.i, label %if.end290.i

if.then286.i:                                     ; preds = %if.end283.i
  %199 = load i32* %digit.i, align 4
  %cmp287.i = icmp ugt i32 %199, 0
  %conv288.i = zext i1 %cmp287.i to i32
  %200 = load i32* %sticky.i, align 4
  %or289.i = or i32 %200, %conv288.i
  store i32 %or289.i, i32* %sticky.i, align 4
  br label %if.end290.i

if.end290.i:                                      ; preds = %if.then286.i, %if.end283.i
  %201 = load i32* %loc.i, align 4
  %cmp291.i = icmp eq i32 %201, 1
  br i1 %cmp291.i, label %if.then293.i, label %if.end294.i

if.then293.i:                                     ; preds = %if.end290.i
  %202 = load i32* %digit.i, align 4
  store i32 %202, i32* %rndval.i, align 4
  br label %if.end294.i

if.end294.i:                                      ; preds = %if.then293.i, %if.end290.i
  %203 = load i32* %j.i, align 4
  store i32 %203, i32* %k.i, align 4
  %204 = load i32* %m.i, align 4
  %mul295.i = mul nsw i32 %204, 10
  store i32 %mul295.i, i32* %m.i, align 4
  store i32 9, i32* %c.i, align 4
  br label %while.cond270.i

while.end296.i:                                   ; preds = %while.cond270.i
  %205 = load i32* %kbk.i, align 4
  store i32 %205, i32* %i.i, align 4
  br label %while.cond297.i

while.cond297.i:                                  ; preds = %while.body300.i, %while.end296.i
  %206 = load i32* %i.i, align 4
  %tobool298.i = icmp ne i32 %206, 0
  br i1 %tobool298.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %while.cond297.i
  %207 = load i32* %sticky.i, align 4
  %tobool299.i = icmp ne i32 %207, 0
  %lnot.i = xor i1 %tobool299.i, true
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %while.cond297.i
  %208 = phi i1 [ false, %while.cond297.i ], [ %lnot.i, %land.rhs.i ]
  br i1 %208, label %while.body300.i, label %while.end307.i

while.body300.i:                                  ; preds = %land.end.i
  %209 = load i32* %i.i, align 4
  %dec301.i = add nsw i32 %209, -1
  store i32 %dec301.i, i32* %i.i, align 4
  %idxprom302.i = sext i32 %dec301.i to i64
  %arrayidx303.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom302.i
  %210 = load i32* %arrayidx303.i, align 4
  %cmp304.i = icmp ne i32 %210, 0
  %conv305.i = zext i1 %cmp304.i to i32
  %211 = load i32* %sticky.i, align 4
  %or306.i = or i32 %211, %conv305.i
  store i32 %or306.i, i32* %sticky.i, align 4
  br label %while.cond297.i

while.end307.i:                                   ; preds = %land.end.i
  br label %if.end341.i

if.else308.i:                                     ; preds = %while.end.i
  %212 = load i32* %kbk.i, align 4
  %cmp309.i = icmp sgt i32 %212, 0
  br i1 %cmp309.i, label %if.then311.i, label %if.end340.i

if.then311.i:                                     ; preds = %if.else308.i
  %213 = load i32* %kbk.i, align 4
  %dec312.i = add nsw i32 %213, -1
  store i32 %dec312.i, i32* %kbk.i, align 4
  %idxprom313.i = sext i32 %dec312.i to i64
  %arrayidx314.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom313.i
  %214 = load i32* %arrayidx314.i, align 4
  store i32 %214, i32* %k.i, align 4
  %215 = load i32* %k.i, align 4
  %cmp315.i = icmp sge i32 %215, 500000000
  br i1 %cmp315.i, label %if.then317.i, label %if.end339.i

if.then317.i:                                     ; preds = %if.then311.i
  store i32 5, i32* %rndval.i, align 4
  %216 = load i32* %k.i, align 4
  %sub318.i = sub nsw i32 1000000000, %216
  store i32 %sub318.i, i32* %rndup.i, align 4
  %217 = load i32* %k.i, align 4
  %cmp319.i = icmp sgt i32 %217, 500000000
  br i1 %cmp319.i, label %if.then321.i, label %if.else322.i

if.then321.i:                                     ; preds = %if.then317.i
  store i32 1, i32* %sticky.i, align 4
  br label %if.end338.i

if.else322.i:                                     ; preds = %if.then317.i
  %218 = load i32* %kbk.i, align 4
  %sub323.i = sub nsw i32 %218, 1
  store i32 %sub323.i, i32* %i.i, align 4
  br label %while.cond324.i

while.cond324.i:                                  ; preds = %while.body330.i, %if.else322.i
  %219 = load i32* %i.i, align 4
  %tobool325.i = icmp ne i32 %219, 0
  br i1 %tobool325.i, label %land.rhs326.i, label %land.end329.i

land.rhs326.i:                                    ; preds = %while.cond324.i
  %220 = load i32* %sticky.i, align 4
  %tobool327.i = icmp ne i32 %220, 0
  %lnot328.i = xor i1 %tobool327.i, true
  br label %land.end329.i

land.end329.i:                                    ; preds = %land.rhs326.i, %while.cond324.i
  %221 = phi i1 [ false, %while.cond324.i ], [ %lnot328.i, %land.rhs326.i ]
  br i1 %221, label %while.body330.i, label %while.end337.i

while.body330.i:                                  ; preds = %land.end329.i
  %222 = load i32* %i.i, align 4
  %dec331.i = add nsw i32 %222, -1
  store i32 %dec331.i, i32* %i.i, align 4
  %idxprom332.i = sext i32 %222 to i64
  %arrayidx333.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom332.i
  %223 = load i32* %arrayidx333.i, align 4
  %cmp334.i = icmp ne i32 %223, 0
  %conv335.i = zext i1 %cmp334.i to i32
  %224 = load i32* %sticky.i, align 4
  %or336.i = or i32 %224, %conv335.i
  store i32 %or336.i, i32* %sticky.i, align 4
  br label %while.cond324.i

while.end337.i:                                   ; preds = %land.end329.i
  br label %if.end338.i

if.end338.i:                                      ; preds = %while.end337.i, %if.then321.i
  br label %if.end339.i

if.end339.i:                                      ; preds = %if.end338.i, %if.then311.i
  br label %if.end340.i

if.end340.i:                                      ; preds = %if.end339.i, %if.else308.i
  br label %if.end341.i

if.end341.i:                                      ; preds = %if.end340.i, %while.end307.i
  %225 = load i32* %rndval.i, align 4
  %cmp342.i = icmp sgt i32 %225, 5
  br i1 %cmp342.i, label %if.then347.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end341.i
  %226 = load i32* %rndval.i, align 4
  %cmp344.i = icmp eq i32 %226, 5
  br i1 %cmp344.i, label %land.lhs.true.i, label %if.end351.i

land.lhs.true.i:                                  ; preds = %lor.lhs.false.i
  %227 = load i32* %sticky.i, align 4
  %tobool346.i = icmp ne i32 %227, 0
  br i1 %tobool346.i, label %if.then347.i, label %if.end351.i

if.then347.i:                                     ; preds = %land.lhs.true.i, %if.end341.i
  %228 = load i32* %rndup.i, align 4
  %229 = load i32* %kbk.i, align 4
  %idxprom348.i = sext i32 %229 to i64
  %arrayidx349.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom348.i
  %230 = load i32* %arrayidx349.i, align 4
  %add350.i = add i32 %230, %228
  store i32 %add350.i, i32* %arrayidx349.i, align 4
  br label %if.end351.i

if.end351.i:                                      ; preds = %if.then347.i, %land.lhs.true.i, %lor.lhs.false.i
  br label %while.cond352.i

while.cond352.i:                                  ; preds = %while.body357.i, %if.end351.i
  %231 = load i32* %kbk.i, align 4
  %idxprom353.i = sext i32 %231 to i64
  %arrayidx354.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom353.i
  %232 = load i32* %arrayidx354.i, align 4
  %cmp355.i = icmp uge i32 %232, 1000000000
  br i1 %cmp355.i, label %while.body357.i, label %while.end371.i

while.body357.i:                                  ; preds = %while.cond352.i
  %233 = load i32* %kbk.i, align 4
  %idxprom358.i = sext i32 %233 to i64
  %arrayidx359.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom358.i
  %234 = load i32* %arrayidx359.i, align 4
  %sub360.i = sub i32 %234, 1000000000
  %235 = load i32* %kbk.i, align 4
  %idxprom361.i = sext i32 %235 to i64
  %arrayidx362.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom361.i
  store i32 %sub360.i, i32* %arrayidx362.i, align 4
  %236 = load i32* %kbk.i, align 4
  %add363.i = add nsw i32 %236, 1
  %idxprom364.i = sext i32 %add363.i to i64
  %arrayidx365.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom364.i
  %237 = load i32* %arrayidx365.i, align 4
  %add366.i = add i32 %237, 1
  %238 = load i32* %kbk.i, align 4
  %add367.i = add nsw i32 %238, 1
  %idxprom368.i = sext i32 %add367.i to i64
  %arrayidx369.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom368.i
  store i32 %add366.i, i32* %arrayidx369.i, align 4
  %239 = load i32* %kbk.i, align 4
  %inc370.i = add nsw i32 %239, 1
  store i32 %inc370.i, i32* %kbk.i, align 4
  br label %while.cond352.i

while.end371.i:                                   ; preds = %while.cond352.i
  br label %if.end372.i

if.end372.i:                                      ; preds = %while.end371.i, %for.end253.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond373.i

for.cond373.i:                                    ; preds = %for.body378.i, %if.end372.i
  %240 = load i32* %i.i, align 4
  %241 = load i32* %kmx.i, align 4
  %add374.i = add nsw i32 %241, 1
  %div375.i = sdiv i32 %add374.i, 2
  %cmp376.i = icmp slt i32 %240, %div375.i
  br i1 %cmp376.i, label %for.body378.i, label %for.end391.i

for.body378.i:                                    ; preds = %for.cond373.i
  %242 = load i32* %i.i, align 4
  %idxprom379.i = sext i32 %242 to i64
  %arrayidx380.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom379.i
  %243 = load i32* %arrayidx380.i, align 4
  store i32 %243, i32* %k.i, align 4
  %244 = load i32* %kmx.i, align 4
  %245 = load i32* %i.i, align 4
  %sub381.i = sub nsw i32 %244, %245
  %idxprom382.i = sext i32 %sub381.i to i64
  %arrayidx383.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom382.i
  %246 = load i32* %arrayidx383.i, align 4
  %247 = load i32* %i.i, align 4
  %idxprom384.i = sext i32 %247 to i64
  %arrayidx385.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom384.i
  store i32 %246, i32* %arrayidx385.i, align 4
  %248 = load i32* %k.i, align 4
  %249 = load i32* %kmx.i, align 4
  %250 = load i32* %i.i, align 4
  %sub386.i = sub nsw i32 %249, %250
  %idxprom387.i = sext i32 %sub386.i to i64
  %arrayidx388.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom387.i
  store i32 %248, i32* %arrayidx388.i, align 4
  %251 = load i32* %i.i, align 4
  %inc390.i = add nsw i32 %251, 1
  store i32 %inc390.i, i32* %i.i, align 4
  br label %for.cond373.i

for.end391.i:                                     ; preds = %for.cond373.i
  br label %if.end392.i

if.end392.i:                                      ; preds = %for.end391.i, %if.end235.i
  %252 = load i32* %iexp.i, align 4
  %cmp393.i = icmp sle i32 %252, 51
  br i1 %cmp393.i, label %land.lhs.true395.i, label %if.end620.i

land.lhs.true395.i:                               ; preds = %if.end392.i
  %253 = load i32* %prdigits.i, align 4
  %254 = load i32* %w.addr.i, align 4
  %cmp396.i = icmp ule i32 %253, %254
  br i1 %cmp396.i, label %if.then398.i, label %if.end620.i

if.then398.i:                                     ; preds = %land.lhs.true395.i
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %keepon.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %255 = load i32* %kmx.i, align 4
  %add399.i = add nsw i32 %255, 1
  store i32 %add399.i, i32* %j.i, align 4
  %256 = load i32* %kmx.i, align 4
  %add400.i = add nsw i32 %256, 1
  store i32 %add400.i, i32* %k.i, align 4
  store i32 0, i32* %firstdigit.i, align 4
  store i32 0, i32* %savecarry.i, align 4
  %257 = load i32* %w.addr.i, align 4
  store i32 %257, i32* %lw.i, align 4
  br label %while.cond401.i

while.cond401.i:                                  ; preds = %if.end543.i, %if.then398.i
  %258 = load i32* %iwdm2.i, align 4
  %cmp402.i = icmp slt i32 %258, 34
  br i1 %cmp402.i, label %while.body404.i, label %while.end544.i

while.body404.i:                                  ; preds = %while.cond401.i
  store i32 0, i32* %sh1.i, align 4
  store i32 0, i32* %sh3.i, align 4
  store i32 0, i32* %icarr.i, align 4
  %259 = load i32* %iwdm2.i, align 4
  store i32 %259, i32* %i.i, align 4
  br label %for.cond405.i

for.cond405.i:                                    ; preds = %lor.end.i, %while.body404.i
  %260 = load i32* %i.i, align 4
  %cmp406.i = icmp slt i32 %260, 34
  br i1 %cmp406.i, label %for.body408.i, label %for.end433.i

for.body408.i:                                    ; preds = %for.cond405.i
  %261 = load i32* %i.i, align 4
  %idxprom409.i = sext i32 %261 to i64
  %262 = load i32** %iexta.i, align 8
  %arrayidx410.i = getelementptr inbounds i32* %262, i64 %idxprom409.i
  %263 = load i32* %arrayidx410.i, align 4
  store i32 %263, i32* %ix.i, align 4
  %264 = load i32* %ix.i, align 4
  %shl411.i = shl i32 %264, 1
  %265 = load i32* %sh1.i, align 4
  %add412.i = add i32 %shl411.i, %265
  store i32 %add412.i, i32* %ixa.i, align 4
  %266 = load i32* %ix.i, align 4
  %shl413.i = shl i32 %266, 3
  %267 = load i32* %sh3.i, align 4
  %add414.i = add i32 %shl413.i, %267
  store i32 %add414.i, i32* %ixb.i, align 4
  %268 = load i32* %ix.i, align 4
  %shr415.i = lshr i32 %268, 31
  store i32 %shr415.i, i32* %sh1.i, align 4
  %269 = load i32* %ix.i, align 4
  %shr416.i = lshr i32 %269, 29
  store i32 %shr416.i, i32* %sh3.i, align 4
  %270 = load i32* %ixa.i, align 4
  %271 = load i32* %ixb.i, align 4
  %add417.i = add i32 %270, %271
  %272 = load i32* %icarr.i, align 4
  %add418.i = add i32 %add417.i, %272
  store i32 %add418.i, i32* %ixc.i, align 4
  %273 = load i32* %ixc.i, align 4
  %274 = load i32* %ixa.i, align 4
  %cmp419.i = icmp ult i32 %273, %274
  br i1 %cmp419.i, label %lor.end.i, label %lor.lhs.false421.i

lor.lhs.false421.i:                               ; preds = %for.body408.i
  %275 = load i32* %ixc.i, align 4
  %276 = load i32* %ixb.i, align 4
  %cmp422.i = icmp ult i32 %275, %276
  br i1 %cmp422.i, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false421.i
  %277 = load i32* %ixa.i, align 4
  %278 = load i32* %ixb.i, align 4
  %and424.i = and i32 %277, %278
  %279 = load i32* %ixc.i, align 4
  %and425.i = and i32 %and424.i, %279
  %cmp426.i = icmp eq i32 %and425.i, -1
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %lor.lhs.false421.i, %for.body408.i
  %280 = phi i1 [ true, %lor.lhs.false421.i ], [ true, %for.body408.i ], [ %cmp426.i, %lor.rhs.i ]
  %cond428.i = select i1 %280, i32 1, i32 0
  store i32 %cond428.i, i32* %icarr.i, align 4
  %281 = load i32* %ixc.i, align 4
  %282 = load i32* %i.i, align 4
  %idxprom429.i = sext i32 %282 to i64
  %283 = load i32** %iexta.i, align 8
  %arrayidx430.i = getelementptr inbounds i32* %283, i64 %idxprom429.i
  store i32 %281, i32* %arrayidx430.i, align 4
  %284 = load i32* %i.i, align 4
  %inc432.i = add nsw i32 %284, 1
  store i32 %inc432.i, i32* %i.i, align 4
  br label %for.cond405.i

for.end433.i:                                     ; preds = %for.cond405.i
  %285 = load i32* %iwdm2.i, align 4
  %idxprom434.i = sext i32 %285 to i64
  %286 = load i32** %iexta.i, align 8
  %arrayidx435.i = getelementptr inbounds i32* %286, i64 %idxprom434.i
  %287 = load i32* %arrayidx435.i, align 4
  %cmp436.i = icmp eq i32 %287, 0
  br i1 %cmp436.i, label %if.then438.i, label %if.end440.i

if.then438.i:                                     ; preds = %for.end433.i
  %288 = load i32* %iwdm2.i, align 4
  %inc439.i = add nsw i32 %288, 1
  store i32 %inc439.i, i32* %iwdm2.i, align 4
  br label %if.end440.i

if.end440.i:                                      ; preds = %if.then438.i, %for.end433.i
  %289 = load i32* %digit.i, align 4
  %mul441.i = mul i32 %289, 10
  %290 = load i32* %sh3.i, align 4
  %291 = load i32* %sh1.i, align 4
  %add442.i = add i32 %290, %291
  %292 = load i32* %icarr.i, align 4
  %add443.i = add i32 %add442.i, %292
  %add444.i = add i32 %mul441.i, %add443.i
  store i32 %add444.i, i32* %digit.i, align 4
  %293 = load i32* %ndigits.i, align 4
  %inc445.i = add i32 %293, 1
  store i32 %inc445.i, i32* %ndigits.i, align 4
  %294 = load i32* %digit.i, align 4
  %tobool446.i = icmp ne i32 %294, 0
  br i1 %tobool446.i, label %land.lhs.true447.i, label %if.end461.i

land.lhs.true447.i:                               ; preds = %if.end440.i
  %295 = load i32* %firstdigit.i, align 4
  %tobool448.i = icmp ne i32 %295, 0
  br i1 %tobool448.i, label %if.end461.i, label %if.then449.i

if.then449.i:                                     ; preds = %land.lhs.true447.i
  %296 = load i32* %ndigits.i, align 4
  store i32 %296, i32* %firstdigit.i, align 4
  %297 = load i32* %j.i, align 4
  store i32 %297, i32* %firstfwd.i, align 4
  %298 = load i32* %ndigits.i, align 4
  %cmp450.i = icmp ugt i32 %298, 1
  br i1 %cmp450.i, label %land.lhs.true455.i, label %lor.lhs.false452.i

lor.lhs.false452.i:                               ; preds = %if.then449.i
  %299 = load i32* %j.i, align 4
  %300 = load i32* %k.i, align 4
  %cmp453.i = icmp ne i32 %299, %300
  br i1 %cmp453.i, label %land.lhs.true455.i, label %if.end460.i

land.lhs.true455.i:                               ; preds = %lor.lhs.false452.i, %if.then449.i
  %301 = load i32* %prdigits.i, align 4
  %cmp456.i = icmp eq i32 %301, 0
  br i1 %cmp456.i, label %if.then458.i, label %if.end460.i

if.then458.i:                                     ; preds = %land.lhs.true455.i
  %302 = load i32* %lw.i, align 4
  %inc459.i = add nsw i32 %302, 1
  store i32 %inc459.i, i32* %lw.i, align 4
  br label %if.end460.i

if.end460.i:                                      ; preds = %if.then458.i, %land.lhs.true455.i, %lor.lhs.false452.i
  br label %if.end461.i

if.end461.i:                                      ; preds = %if.end460.i, %land.lhs.true447.i, %if.end440.i
  %303 = load i32* %firstdigit.i, align 4
  %tobool462.i = icmp ne i32 %303, 0
  br i1 %tobool462.i, label %if.then465.i, label %lor.lhs.false463.i

lor.lhs.false463.i:                               ; preds = %if.end461.i
  %304 = load i32* %prdigits.i, align 4
  %tobool464.i = icmp ne i32 %304, 0
  br i1 %tobool464.i, label %if.then465.i, label %if.end521.i

if.then465.i:                                     ; preds = %lor.lhs.false463.i, %if.end461.i
  %305 = load i32* %prdigits.i, align 4
  %inc466.i = add i32 %305, 1
  store i32 %inc466.i, i32* %prdigits.i, align 4
  %306 = load i32* %prdigits.i, align 4
  %307 = load i32* %lw.i, align 4
  %cmp467.i = icmp ugt i32 %306, %307
  br i1 %cmp467.i, label %if.then469.i, label %if.end520.i

if.then469.i:                                     ; preds = %if.then465.i
  %308 = load i32* %keepon.i, align 4
  %tobool470.i = icmp ne i32 %308, 0
  br i1 %tobool470.i, label %if.else477.i, label %land.lhs.true471.i

land.lhs.true471.i:                               ; preds = %if.then469.i
  %309 = load i32* %sh3.i, align 4
  %310 = load i32* %sh1.i, align 4
  %add472.i = add i32 %309, %310
  %311 = load i32* %icarr.i, align 4
  %add473.i = add i32 %add472.i, %311
  %cmp474.i = icmp ult i32 %add473.i, 5
  br i1 %cmp474.i, label %if.then476.i, label %if.else477.i

if.then476.i:                                     ; preds = %land.lhs.true471.i
  br label %while.end544.i

if.else477.i:                                     ; preds = %land.lhs.true471.i, %if.then469.i
  %312 = load i32* %keepon.i, align 4
  %tobool478.i = icmp ne i32 %312, 0
  br i1 %tobool478.i, label %if.else489.i, label %land.lhs.true479.i

land.lhs.true479.i:                               ; preds = %if.else477.i
  %313 = load i32* %sh3.i, align 4
  %314 = load i32* %sh1.i, align 4
  %add480.i = add i32 %313, %314
  %315 = load i32* %icarr.i, align 4
  %add481.i = add i32 %add480.i, %315
  %cmp482.i = icmp ugt i32 %add481.i, 5
  br i1 %cmp482.i, label %if.then484.i, label %if.else489.i

if.then484.i:                                     ; preds = %land.lhs.true479.i
  %316 = load i32* %sh3.i, align 4
  %317 = load i32* %sh1.i, align 4
  %add485.i = add i32 %316, %317
  %318 = load i32* %icarr.i, align 4
  %add486.i = add i32 %add485.i, %318
  %sub487.i = sub i32 10, %add486.i
  %319 = load i32* %digit.i, align 4
  %add488.i = add i32 %319, %sub487.i
  store i32 %add488.i, i32* %digit.i, align 4
  br label %while.end544.i

if.else489.i:                                     ; preds = %land.lhs.true479.i, %if.else477.i
  %320 = load i32* %keepon.i, align 4
  %tobool490.i = icmp ne i32 %320, 0
  br i1 %tobool490.i, label %land.lhs.true491.i, label %if.else509.i

land.lhs.true491.i:                               ; preds = %if.else489.i
  %321 = load i32* %sh3.i, align 4
  %322 = load i32* %sh1.i, align 4
  %add492.i = add i32 %321, %322
  %323 = load i32* %icarr.i, align 4
  %add493.i = add i32 %add492.i, %323
  %cmp494.i = icmp ugt i32 %add493.i, 0
  br i1 %cmp494.i, label %if.then496.i, label %if.else509.i

if.then496.i:                                     ; preds = %land.lhs.true491.i
  %324 = load i32* %savecarry.i, align 4
  %tobool497.i = icmp ne i32 %324, 0
  br i1 %tobool497.i, label %if.then498.i, label %if.else502.i

if.then498.i:                                     ; preds = %if.then496.i
  %325 = load i32* %savek.i, align 4
  %idxprom499.i = sext i32 %325 to i64
  %arrayidx500.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom499.i
  %326 = load i32* %arrayidx500.i, align 4
  store i32 %326, i32* %digit.i, align 4
  %327 = load i32* %savecarry.i, align 4
  %328 = load i32* %digit.i, align 4
  %add501.i = add i32 %328, %327
  store i32 %add501.i, i32* %digit.i, align 4
  %329 = load i32* %savek.i, align 4
  store i32 %329, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end508.i

if.else502.i:                                     ; preds = %if.then496.i
  %330 = load i32* %roundcarry.i, align 4
  %mul503.i = mul i32 %330, 10
  store i32 %mul503.i, i32* %roundcarry.i, align 4
  %331 = load i32* %roundcarry.i, align 4
  %332 = load i32* %sh3.i, align 4
  %333 = load i32* %sh1.i, align 4
  %add504.i = add i32 %332, %333
  %334 = load i32* %icarr.i, align 4
  %add505.i = add i32 %add504.i, %334
  %sub506.i = sub i32 %331, %add505.i
  %335 = load i32* %digit.i, align 4
  %add507.i = add i32 %335, %sub506.i
  store i32 %add507.i, i32* %digit.i, align 4
  br label %if.end508.i

if.end508.i:                                      ; preds = %if.else502.i, %if.then498.i
  store i32 0, i32* %keepon.i, align 4
  br label %while.end544.i

if.else509.i:                                     ; preds = %land.lhs.true491.i, %if.else489.i
  %336 = load i32* %keepon.i, align 4
  %tobool510.i = icmp ne i32 %336, 0
  br i1 %tobool510.i, label %if.then511.i, label %if.else514.i

if.then511.i:                                     ; preds = %if.else509.i
  %337 = load i32* %keepon.i, align 4
  %inc512.i = add i32 %337, 1
  store i32 %inc512.i, i32* %keepon.i, align 4
  %338 = load i32* %roundcarry.i, align 4
  %mul513.i = mul i32 %338, 10
  store i32 %mul513.i, i32* %roundcarry.i, align 4
  br label %if.end516.i

if.else514.i:                                     ; preds = %if.else509.i
  store i32 5, i32* %roundcarry.i, align 4
  %339 = load i32* %keepon.i, align 4
  %inc515.i = add i32 %339, 1
  store i32 %inc515.i, i32* %keepon.i, align 4
  br label %if.end516.i

if.end516.i:                                      ; preds = %if.else514.i, %if.then511.i
  br label %if.end520.i

if.end520.i:                                      ; preds = %if.end516.i, %if.then465.i
  br label %if.end521.i

if.end521.i:                                      ; preds = %if.end520.i, %lor.lhs.false463.i
  %340 = load i32* %ndigits.i, align 4
  %cmp522.i = icmp eq i32 %340, 9
  br i1 %cmp522.i, label %if.then524.i, label %if.end543.i

if.then524.i:                                     ; preds = %if.end521.i
  %341 = load i32* %digit.i, align 4
  %tobool525.i = icmp ne i32 %341, 0
  br i1 %tobool525.i, label %if.then531.i, label %lor.lhs.false526.i

lor.lhs.false526.i:                               ; preds = %if.then524.i
  %342 = load i32* %firstdigit.i, align 4
  %tobool527.i = icmp ne i32 %342, 0
  br i1 %tobool527.i, label %if.then531.i, label %lor.lhs.false528.i

lor.lhs.false528.i:                               ; preds = %lor.lhs.false526.i
  %343 = load i32* %iexp.i, align 4
  %cmp529.i = icmp sge i32 %343, 0
  br i1 %cmp529.i, label %if.then531.i, label %if.end535.i

if.then531.i:                                     ; preds = %lor.lhs.false528.i, %lor.lhs.false526.i, %if.then524.i
  %344 = load i32* %digit.i, align 4
  %345 = load i32* %k.i, align 4
  %inc532.i = add nsw i32 %345, 1
  store i32 %inc532.i, i32* %k.i, align 4
  %idxprom533.i = sext i32 %345 to i64
  %arrayidx534.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom533.i
  store i32 %344, i32* %arrayidx534.i, align 4
  br label %if.end535.i

if.end535.i:                                      ; preds = %if.then531.i, %lor.lhs.false528.i
  %346 = load i32* %j.i, align 4
  %inc536.i = add nsw i32 %346, 1
  store i32 %inc536.i, i32* %j.i, align 4
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %347 = load i32* %keepon.i, align 4
  %tobool537.i = icmp ne i32 %347, 0
  br i1 %tobool537.i, label %land.lhs.true538.i, label %if.end542.i

land.lhs.true538.i:                               ; preds = %if.end535.i
  %348 = load i32* %savecarry.i, align 4
  %tobool539.i = icmp ne i32 %348, 0
  br i1 %tobool539.i, label %if.end542.i, label %if.then540.i

if.then540.i:                                     ; preds = %land.lhs.true538.i
  %349 = load i32* %roundcarry.i, align 4
  store i32 %349, i32* %savecarry.i, align 4
  %350 = load i32* %k.i, align 4
  %sub541.i = sub nsw i32 %350, 1
  store i32 %sub541.i, i32* %savek.i, align 4
  br label %if.end542.i

if.end542.i:                                      ; preds = %if.then540.i, %land.lhs.true538.i, %if.end535.i
  br label %if.end543.i

if.end543.i:                                      ; preds = %if.end542.i, %if.end521.i
  br label %while.cond401.i

while.end544.i:                                   ; preds = %if.end508.i, %if.then484.i, %if.then476.i, %while.cond401.i
  %351 = load i32* %keepon.i, align 4
  %tobool545.i = icmp ne i32 %351, 0
  br i1 %tobool545.i, label %if.then546.i, label %if.end558.i

if.then546.i:                                     ; preds = %while.end544.i
  %352 = load i32* %savecarry.i, align 4
  %tobool547.i = icmp ne i32 %352, 0
  br i1 %tobool547.i, label %if.then548.i, label %if.else552.i

if.then548.i:                                     ; preds = %if.then546.i
  %353 = load i32* %savek.i, align 4
  %idxprom549.i = sext i32 %353 to i64
  %arrayidx550.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom549.i
  %354 = load i32* %arrayidx550.i, align 4
  store i32 %354, i32* %digit.i, align 4
  %355 = load i32* %savecarry.i, align 4
  %356 = load i32* %digit.i, align 4
  %add551.i = add i32 %356, %355
  store i32 %add551.i, i32* %digit.i, align 4
  %357 = load i32* %savek.i, align 4
  store i32 %357, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end557.i

if.else552.i:                                     ; preds = %if.then546.i
  %358 = load i32* %roundcarry.i, align 4
  %tobool553.i = icmp ne i32 %358, 0
  br i1 %tobool553.i, label %if.then554.i, label %if.end556.i

if.then554.i:                                     ; preds = %if.else552.i
  %359 = load i32* %roundcarry.i, align 4
  %360 = load i32* %digit.i, align 4
  %add555.i = add i32 %360, %359
  store i32 %add555.i, i32* %digit.i, align 4
  br label %if.end556.i

if.end556.i:                                      ; preds = %if.then554.i, %if.else552.i
  br label %if.end557.i

if.end557.i:                                      ; preds = %if.end556.i, %if.then548.i
  br label %if.end558.i

if.end558.i:                                      ; preds = %if.end557.i, %while.end544.i
  %361 = load i32* %digit.i, align 4
  %tobool559.i = icmp ne i32 %361, 0
  br i1 %tobool559.i, label %if.then560.i, label %if.end619.i

if.then560.i:                                     ; preds = %if.end558.i
  br label %for.cond561.i

for.cond561.i:                                    ; preds = %for.body564.i, %if.then560.i
  %362 = load i32* %ndigits.i, align 4
  %cmp562.i = icmp ult i32 %362, 9
  br i1 %cmp562.i, label %for.body564.i, label %for.end568.i

for.body564.i:                                    ; preds = %for.cond561.i
  %363 = load i32* %digit.i, align 4
  %mul565.i = mul i32 %363, 10
  store i32 %mul565.i, i32* %digit.i, align 4
  %364 = load i32* %ndigits.i, align 4
  %inc567.i = add i32 %364, 1
  store i32 %inc567.i, i32* %ndigits.i, align 4
  br label %for.cond561.i

for.end568.i:                                     ; preds = %for.cond561.i
  %365 = load i32* %digit.i, align 4
  %366 = load i32* %k.i, align 4
  %idxprom569.i = sext i32 %366 to i64
  %arrayidx570.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom569.i
  store i32 %365, i32* %arrayidx570.i, align 4
  %367 = load i32* %digit.i, align 4
  %cmp571.i = icmp eq i32 %367, 1000000000
  br i1 %cmp571.i, label %if.then573.i, label %if.end618.i

if.then573.i:                                     ; preds = %for.end568.i
  store i32 0, i32* %digit.i, align 4
  %368 = load i32* %digit.i, align 4
  %369 = load i32* %k.i, align 4
  %idxprom574.i = sext i32 %369 to i64
  %arrayidx575.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom574.i
  store i32 %368, i32* %arrayidx575.i, align 4
  %370 = load i32* %k.i, align 4
  %sub576.i = sub nsw i32 %370, 1
  store i32 %sub576.i, i32* %kbk.i, align 4
  %371 = load i32* %kbk.i, align 4
  %idxprom577.i = sext i32 %371 to i64
  %arrayidx578.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom577.i
  %372 = load i32* %arrayidx578.i, align 4
  %inc579.i = add i32 %372, 1
  store i32 %inc579.i, i32* %arrayidx578.i, align 4
  br label %while.cond580.i

while.cond580.i:                                  ; preds = %while.body585.i, %if.then573.i
  %373 = load i32* %kbk.i, align 4
  %idxprom581.i = sext i32 %373 to i64
  %arrayidx582.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom581.i
  %374 = load i32* %arrayidx582.i, align 4
  %cmp583.i = icmp eq i32 %374, 1000000000
  br i1 %cmp583.i, label %while.body585.i, label %while.end592.i

while.body585.i:                                  ; preds = %while.cond580.i
  %375 = load i32* %kbk.i, align 4
  %idxprom586.i = sext i32 %375 to i64
  %arrayidx587.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom586.i
  store i32 0, i32* %arrayidx587.i, align 4
  %376 = load i32* %k.i, align 4
  %sub588.i = sub nsw i32 %376, 1
  store i32 %sub588.i, i32* %kbk.i, align 4
  %377 = load i32* %kbk.i, align 4
  %idxprom589.i = sext i32 %377 to i64
  %arrayidx590.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom589.i
  %378 = load i32* %arrayidx590.i, align 4
  %inc591.i = add i32 %378, 1
  store i32 %inc591.i, i32* %arrayidx590.i, align 4
  br label %while.cond580.i

while.end592.i:                                   ; preds = %while.cond580.i
  %379 = load i32* %kmx.i, align 4
  %cmp593.i = icmp slt i32 %379, 0
  br i1 %cmp593.i, label %if.then595.i, label %if.end617.i

if.then595.i:                                     ; preds = %while.end592.i
  %380 = load i32* %firstdigit.i, align 4
  %sub596.i = sub nsw i32 10, %380
  store i32 %sub596.i, i32* %pose.i, align 4
  %381 = load i32* %pose.i, align 4
  %cmp597.i = icmp sge i32 %381, 9
  br i1 %cmp597.i, label %if.then599.i, label %if.end601.i

if.then599.i:                                     ; preds = %if.then595.i
  %382 = load i32* %pose.i, align 4
  %sub600.i = sub nsw i32 %382, 9
  store i32 %sub600.i, i32* %pose.i, align 4
  br label %if.end601.i

if.end601.i:                                      ; preds = %if.then599.i, %if.then595.i
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond602.i

for.cond602.i:                                    ; preds = %for.body605.i, %if.end601.i
  %383 = load i32* %i.i, align 4
  %384 = load i32* %pose.i, align 4
  %cmp603.i = icmp slt i32 %383, %384
  br i1 %cmp603.i, label %for.body605.i, label %for.end609.i

for.body605.i:                                    ; preds = %for.cond602.i
  %385 = load i32* %digit.i, align 4
  %mul606.i = mul i32 %385, 10
  store i32 %mul606.i, i32* %digit.i, align 4
  %386 = load i32* %i.i, align 4
  %inc608.i = add nsw i32 %386, 1
  store i32 %inc608.i, i32* %i.i, align 4
  br label %for.cond602.i

for.end609.i:                                     ; preds = %for.cond602.i
  %387 = load i32* %kbk.i, align 4
  %idxprom610.i = sext i32 %387 to i64
  %arrayidx611.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom610.i
  %388 = load i32* %arrayidx611.i, align 4
  %389 = load i32* %digit.i, align 4
  %cmp612.i = icmp eq i32 %388, %389
  br i1 %cmp612.i, label %if.then614.i, label %if.end616.i

if.then614.i:                                     ; preds = %for.end609.i
  %390 = load i32* %firstdigit.i, align 4
  %dec615.i = add nsw i32 %390, -1
  store i32 %dec615.i, i32* %firstdigit.i, align 4
  br label %if.end616.i

if.end616.i:                                      ; preds = %if.then614.i, %for.end609.i
  br label %if.end617.i

if.end617.i:                                      ; preds = %if.end616.i, %while.end592.i
  br label %if.end618.i

if.end618.i:                                      ; preds = %if.end617.i, %for.end568.i
  br label %if.end619.i

if.end619.i:                                      ; preds = %if.end618.i, %if.end558.i
  br label %if.end620.i

if.end620.i:                                      ; preds = %if.end619.i, %land.lhs.true395.i, %if.end392.i
  %arrayidx621.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 0
  %391 = load i32* %arrayidx621.i, align 4
  store i32 %391, i32* %k.i, align 4
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond622.i

for.cond622.i:                                    ; preds = %if.end629.i, %if.end620.i
  %392 = load i32* %i.i, align 4
  %cmp623.i = icmp slt i32 %392, 9
  br i1 %cmp623.i, label %for.body625.i, label %for.end633.i

for.body625.i:                                    ; preds = %for.cond622.i
  %393 = load i32* %k.i, align 4
  %394 = load i32* %digit.i, align 4
  %cmp626.i = icmp uge i32 %393, %394
  br i1 %cmp626.i, label %if.then628.i, label %if.end629.i

if.then628.i:                                     ; preds = %for.body625.i
  %395 = load i32* %i.i, align 4
  store i32 %395, i32* %pose.i, align 4
  br label %if.end629.i

if.end629.i:                                      ; preds = %if.then628.i, %for.body625.i
  %396 = load i32* %digit.i, align 4
  %mul630.i = mul i32 %396, 10
  store i32 %mul630.i, i32* %digit.i, align 4
  %397 = load i32* %i.i, align 4
  %inc632.i = add nsw i32 %397, 1
  store i32 %inc632.i, i32* %i.i, align 4
  br label %for.cond622.i

for.end633.i:                                     ; preds = %for.cond622.i
  store i32 1, i32* %m.i, align 4
  %398 = load i32* %ldw.addr.i, align 4
  %and634.i = and i32 %398, 1
  store i32 %and634.i, i32* %space.i, align 4
  %399 = load i32* %kmx.i, align 4
  %cmp635.i = icmp sge i32 %399, 0
  br i1 %cmp635.i, label %if.then637.i, label %if.else655.i

if.then637.i:                                     ; preds = %for.end633.i
  %400 = load i32* %kmx.i, align 4
  %mul638.i = mul nsw i32 %400, 9
  %401 = load i32* %pose.i, align 4
  %add639.i = add nsw i32 %mul638.i, %401
  store i32 %add639.i, i32* %iexp.i, align 4
  %402 = load i32* %iexp.i, align 4
  %403 = load i32* %w.addr.i, align 4
  %cmp640.i = icmp sge i32 %402, %403
  %conv641.i = zext i1 %cmp640.i to i32
  store i32 %conv641.i, i32* %usee.i, align 4
  %404 = load i32* %usee.i, align 4
  %tobool642.i = icmp ne i32 %404, 0
  br i1 %tobool642.i, label %if.end645.i, label %if.then643.i

if.then643.i:                                     ; preds = %if.then637.i
  %405 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %405, align 1
  %406 = load i32* %space.i, align 4
  %407 = load i8** %ffmt.addr.i, align 8
  %idx.ext.i = sext i32 %406 to i64
  %add.ptr.i = getelementptr inbounds i8* %407, i64 %idx.ext.i
  store i8* %add.ptr.i, i8** %ffmt.addr.i, align 8
  store i32 0, i32* %m.i, align 4
  br label %if.end645.i

if.end645.i:                                      ; preds = %if.then643.i, %if.then637.i
  %408 = load i32* %sgn.i, align 4
  %tobool646.i = icmp ne i32 %408, 0
  br i1 %tobool646.i, label %if.then647.i, label %if.else649.i

if.then647.i:                                     ; preds = %if.end645.i
  %409 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %409, align 1
  br label %if.end651.i

if.else649.i:                                     ; preds = %if.end645.i
  %410 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %410, align 1
  br label %if.end651.i

if.end651.i:                                      ; preds = %if.else649.i, %if.then647.i
  %411 = load i32* %space.i, align 4
  %412 = load i32* %sgn.i, align 4
  %or652.i = or i32 %411, %412
  %413 = load i8** %ffmt.addr.i, align 8
  %idx.ext653.i = sext i32 %or652.i to i64
  %add.ptr654.i = getelementptr inbounds i8* %413, i64 %idx.ext653.i
  store i8* %add.ptr654.i, i8** %ffmt.addr.i, align 8
  br label %if.end675.i

if.else655.i:                                     ; preds = %for.end633.i
  %414 = load i32* %firstfwd.i, align 4
  %mul656.i = mul nsw i32 %414, 9
  %415 = load i32* %firstdigit.i, align 4
  %add657.i = add nsw i32 %mul656.i, %415
  %sub658.i = sub nsw i32 0, %add657.i
  store i32 %sub658.i, i32* %iexp.i, align 4
  %416 = load i32* %iexp.i, align 4
  %cmp659.i = icmp slt i32 %416, -1
  %conv660.i = zext i1 %cmp659.i to i32
  store i32 %conv660.i, i32* %usee.i, align 4
  %417 = load i32* %sgn.i, align 4
  %tobool661.i = icmp ne i32 %417, 0
  br i1 %tobool661.i, label %if.then662.i, label %if.else664.i

if.then662.i:                                     ; preds = %if.else655.i
  %418 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %418, align 1
  br label %if.end666.i

if.else664.i:                                     ; preds = %if.else655.i
  %419 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %419, align 1
  br label %if.end666.i

if.end666.i:                                      ; preds = %if.else664.i, %if.then662.i
  %420 = load i32* %space.i, align 4
  %421 = load i32* %sgn.i, align 4
  %or667.i = or i32 %420, %421
  %422 = load i8** %ffmt.addr.i, align 8
  %idx.ext668.i = sext i32 %or667.i to i64
  %add.ptr669.i = getelementptr inbounds i8* %422, i64 %idx.ext668.i
  store i8* %add.ptr669.i, i8** %ffmt.addr.i, align 8
  %423 = load i32* %usee.i, align 4
  %tobool670.i = icmp ne i32 %423, 0
  br i1 %tobool670.i, label %if.end674.i, label %if.then671.i

if.then671.i:                                     ; preds = %if.end666.i
  %424 = load i8** %ffmt.addr.i, align 8
  store i8 48, i8* %424, align 1
  %425 = load i8** %ffmt.addr.i, align 8
  %arrayidx673.i = getelementptr inbounds i8* %425, i64 1
  store i8 46, i8* %arrayidx673.i, align 1
  store i32 2, i32* %m.i, align 4
  br label %if.end674.i

if.end674.i:                                      ; preds = %if.then671.i, %if.end666.i
  br label %if.end675.i

if.end675.i:                                      ; preds = %if.end674.i, %if.end651.i
  %426 = load i32* %usee.i, align 4
  %tobool676.i = icmp ne i32 %426, 0
  br i1 %tobool676.i, label %if.then677.i, label %if.end679.i

if.then677.i:                                     ; preds = %if.end675.i
  %427 = load i32* %w.addr.i, align 4
  %inc678.i = add nsw i32 %427, 1
  store i32 %inc678.i, i32* %w.addr.i, align 4
  br label %if.end679.i

if.end679.i:                                      ; preds = %if.then677.i, %if.end675.i
  store i32 0, i32* %kbk.i, align 4
  %428 = load i32* %kbk.i, align 4
  %inc680.i = add nsw i32 %428, 1
  store i32 %inc680.i, i32* %kbk.i, align 4
  %idxprom681.i = sext i32 %428 to i64
  %arrayidx682.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom681.i
  %429 = load i32* %arrayidx682.i, align 4
  store i32 %429, i32* %k.i, align 4
  %430 = load i32* %pose.i, align 4
  store i32 %430, i32* %i.i, align 4
  br label %for.cond683.i

for.cond683.i:                                    ; preds = %if.end698.i, %if.end679.i
  %431 = load i32* %i.i, align 4
  %cmp684.i = icmp sge i32 %431, 0
  br i1 %cmp684.i, label %for.body686.i, label %for.end701.i

for.body686.i:                                    ; preds = %for.cond683.i
  %432 = load i32* %k.i, align 4
  %div687.i = sdiv i32 %432, 10
  store i32 %div687.i, i32* %j.i, align 4
  %433 = load i32* %k.i, align 4
  %434 = load i32* %j.i, align 4
  %mul688.i = mul nsw i32 %434, 10
  %sub689.i = sub nsw i32 %433, %mul688.i
  store i32 %sub689.i, i32* %k.i, align 4
  %435 = load i32* %i.i, align 4
  %436 = load i32* %w.addr.i, align 4
  %cmp690.i = icmp slt i32 %435, %436
  br i1 %cmp690.i, label %if.then692.i, label %if.end698.i

if.then692.i:                                     ; preds = %for.body686.i
  %437 = load i32* %k.i, align 4
  %add693.i = add nsw i32 48, %437
  %conv694.i = trunc i32 %add693.i to i8
  %438 = load i32* %i.i, align 4
  %439 = load i32* %m.i, align 4
  %add695.i = add nsw i32 %438, %439
  %idxprom696.i = sext i32 %add695.i to i64
  %440 = load i8** %ffmt.addr.i, align 8
  %arrayidx697.i = getelementptr inbounds i8* %440, i64 %idxprom696.i
  store i8 %conv694.i, i8* %arrayidx697.i, align 1
  br label %if.end698.i

if.end698.i:                                      ; preds = %if.then692.i, %for.body686.i
  %441 = load i32* %j.i, align 4
  store i32 %441, i32* %k.i, align 4
  %442 = load i32* %i.i, align 4
  %dec700.i = add nsw i32 %442, -1
  store i32 %dec700.i, i32* %i.i, align 4
  br label %for.cond683.i

for.end701.i:                                     ; preds = %for.cond683.i
  %443 = load i32* %pose.i, align 4
  %add702.i = add nsw i32 %443, 1
  store i32 %add702.i, i32* %ii.i, align 4
  %444 = load i32* %kbk.i, align 4
  %445 = load i32* %kmx.i, align 4
  %add703.i = add nsw i32 %445, 1
  %cmp704.i = icmp eq i32 %444, %add703.i
  br i1 %cmp704.i, label %if.then706.i, label %if.end723.i

if.then706.i:                                     ; preds = %for.end701.i
  %446 = load i32* %ii.i, align 4
  %447 = load i32* %m.i, align 4
  %add707.i = add nsw i32 %446, %447
  %idxprom708.i = sext i32 %add707.i to i64
  %448 = load i8** %ffmt.addr.i, align 8
  %arrayidx709.i = getelementptr inbounds i8* %448, i64 %idxprom708.i
  store i8 46, i8* %arrayidx709.i, align 1
  %449 = load i32* %ii.i, align 4
  %450 = load i32* %w.addr.i, align 4
  %cmp710.i = icmp slt i32 %449, %450
  br i1 %cmp710.i, label %if.then712.i, label %if.end714.i

if.then712.i:                                     ; preds = %if.then706.i
  %451 = load i32* %w.addr.i, align 4
  %inc713.i = add nsw i32 %451, 1
  store i32 %inc713.i, i32* %w.addr.i, align 4
  br label %if.end714.i

if.end714.i:                                      ; preds = %if.then712.i, %if.then706.i
  %452 = load i32* %ii.i, align 4
  %453 = load i32* %w.addr.i, align 4
  %cmp715.i = icmp eq i32 %452, %453
  br i1 %cmp715.i, label %land.lhs.true717.i, label %if.end721.i

land.lhs.true717.i:                               ; preds = %if.end714.i
  %454 = load i32* %usee.i, align 4
  %tobool718.i = icmp ne i32 %454, 0
  br i1 %tobool718.i, label %if.end721.i, label %if.then719.i

if.then719.i:                                     ; preds = %land.lhs.true717.i
  %455 = load i32* %w.addr.i, align 4
  %inc720.i = add nsw i32 %455, 1
  store i32 %inc720.i, i32* %w.addr.i, align 4
  br label %if.end721.i

if.end721.i:                                      ; preds = %if.then719.i, %land.lhs.true717.i, %if.end714.i
  %456 = load i32* %ii.i, align 4
  %inc722.i = add nsw i32 %456, 1
  store i32 %inc722.i, i32* %ii.i, align 4
  br label %if.end723.i

if.end723.i:                                      ; preds = %if.end721.i, %for.end701.i
  br label %while.cond724.i

while.cond724.i:                                  ; preds = %if.end772.i, %if.end723.i
  %457 = load i32* %ii.i, align 4
  %458 = load i32* %w.addr.i, align 4
  %cmp725.i = icmp slt i32 %457, %458
  br i1 %cmp725.i, label %while.body727.i, label %while.end773.i

while.body727.i:                                  ; preds = %while.cond724.i
  %459 = load i32* %kbk.i, align 4
  %inc728.i = add nsw i32 %459, 1
  store i32 %inc728.i, i32* %kbk.i, align 4
  %idxprom729.i = sext i32 %459 to i64
  %arrayidx730.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom729.i
  %460 = load i32* %arrayidx730.i, align 4
  store i32 %460, i32* %k.i, align 4
  %461 = load i32* %ii.i, align 4
  %add731.i = add nsw i32 8, %461
  store i32 %add731.i, i32* %i.i, align 4
  br label %for.cond732.i

for.cond732.i:                                    ; preds = %if.end747.i, %while.body727.i
  %462 = load i32* %i.i, align 4
  %463 = load i32* %ii.i, align 4
  %cmp733.i = icmp sge i32 %462, %463
  br i1 %cmp733.i, label %for.body735.i, label %for.end750.i

for.body735.i:                                    ; preds = %for.cond732.i
  %464 = load i32* %k.i, align 4
  %div736.i = sdiv i32 %464, 10
  store i32 %div736.i, i32* %j.i, align 4
  %465 = load i32* %k.i, align 4
  %466 = load i32* %j.i, align 4
  %mul737.i = mul nsw i32 %466, 10
  %sub738.i = sub nsw i32 %465, %mul737.i
  store i32 %sub738.i, i32* %k.i, align 4
  %467 = load i32* %i.i, align 4
  %468 = load i32* %w.addr.i, align 4
  %cmp739.i = icmp slt i32 %467, %468
  br i1 %cmp739.i, label %if.then741.i, label %if.end747.i

if.then741.i:                                     ; preds = %for.body735.i
  %469 = load i32* %k.i, align 4
  %add742.i = add nsw i32 48, %469
  %conv743.i = trunc i32 %add742.i to i8
  %470 = load i32* %i.i, align 4
  %471 = load i32* %m.i, align 4
  %add744.i = add nsw i32 %470, %471
  %idxprom745.i = sext i32 %add744.i to i64
  %472 = load i8** %ffmt.addr.i, align 8
  %arrayidx746.i = getelementptr inbounds i8* %472, i64 %idxprom745.i
  store i8 %conv743.i, i8* %arrayidx746.i, align 1
  br label %if.end747.i

if.end747.i:                                      ; preds = %if.then741.i, %for.body735.i
  %473 = load i32* %j.i, align 4
  store i32 %473, i32* %k.i, align 4
  %474 = load i32* %i.i, align 4
  %dec749.i = add nsw i32 %474, -1
  store i32 %dec749.i, i32* %i.i, align 4
  br label %for.cond732.i

for.end750.i:                                     ; preds = %for.cond732.i
  %475 = load i32* %ii.i, align 4
  %add751.i = add nsw i32 %475, 9
  store i32 %add751.i, i32* %ii.i, align 4
  %476 = load i32* %kbk.i, align 4
  %477 = load i32* %kmx.i, align 4
  %add752.i = add nsw i32 %477, 1
  %cmp753.i = icmp eq i32 %476, %add752.i
  br i1 %cmp753.i, label %if.then755.i, label %if.end772.i

if.then755.i:                                     ; preds = %for.end750.i
  %478 = load i32* %ii.i, align 4
  %479 = load i32* %m.i, align 4
  %add756.i = add nsw i32 %478, %479
  %idxprom757.i = sext i32 %add756.i to i64
  %480 = load i8** %ffmt.addr.i, align 8
  %arrayidx758.i = getelementptr inbounds i8* %480, i64 %idxprom757.i
  store i8 46, i8* %arrayidx758.i, align 1
  %481 = load i32* %ii.i, align 4
  %482 = load i32* %w.addr.i, align 4
  %cmp759.i = icmp slt i32 %481, %482
  br i1 %cmp759.i, label %if.then761.i, label %if.end763.i

if.then761.i:                                     ; preds = %if.then755.i
  %483 = load i32* %w.addr.i, align 4
  %inc762.i = add nsw i32 %483, 1
  store i32 %inc762.i, i32* %w.addr.i, align 4
  br label %if.end763.i

if.end763.i:                                      ; preds = %if.then761.i, %if.then755.i
  %484 = load i32* %ii.i, align 4
  %485 = load i32* %w.addr.i, align 4
  %cmp764.i = icmp eq i32 %484, %485
  br i1 %cmp764.i, label %land.lhs.true766.i, label %if.end770.i

land.lhs.true766.i:                               ; preds = %if.end763.i
  %486 = load i32* %usee.i, align 4
  %tobool767.i = icmp ne i32 %486, 0
  br i1 %tobool767.i, label %if.end770.i, label %if.then768.i

if.then768.i:                                     ; preds = %land.lhs.true766.i
  %487 = load i32* %w.addr.i, align 4
  %inc769.i = add nsw i32 %487, 1
  store i32 %inc769.i, i32* %w.addr.i, align 4
  br label %if.end770.i

if.end770.i:                                      ; preds = %if.then768.i, %land.lhs.true766.i, %if.end763.i
  %488 = load i32* %ii.i, align 4
  %inc771.i = add nsw i32 %488, 1
  store i32 %inc771.i, i32* %ii.i, align 4
  br label %if.end772.i

if.end772.i:                                      ; preds = %if.end770.i, %for.end750.i
  br label %while.cond724.i

while.end773.i:                                   ; preds = %while.cond724.i
  %489 = load i32* %usee.i, align 4
  %tobool774.i = icmp ne i32 %489, 0
  br i1 %tobool774.i, label %if.then775.i, label %if.else836.i

if.then775.i:                                     ; preds = %while.end773.i
  %490 = load i8** %ffmt.addr.i, align 8
  %arrayidx776.i = getelementptr inbounds i8* %490, i64 1
  %491 = load i8* %arrayidx776.i, align 1
  %492 = load i8** %ffmt.addr.i, align 8
  store i8 %491, i8* %492, align 1
  %493 = load i8** %ffmt.addr.i, align 8
  %arrayidx778.i = getelementptr inbounds i8* %493, i64 1
  store i8 46, i8* %arrayidx778.i, align 1
  %494 = load i32* %w.addr.i, align 4
  %add779.i = add nsw i32 %494, 1
  %idxprom780.i = sext i32 %add779.i to i64
  %495 = load i8** %ffmt.addr.i, align 8
  %arrayidx781.i = getelementptr inbounds i8* %495, i64 %idxprom780.i
  store i8 69, i8* %arrayidx781.i, align 1
  %496 = load i32* %iexp.i, align 4
  %cmp782.i = icmp sge i32 %496, 0
  br i1 %cmp782.i, label %if.then784.i, label %if.else788.i

if.then784.i:                                     ; preds = %if.then775.i
  %497 = load i32* %w.addr.i, align 4
  %add785.i = add nsw i32 %497, 2
  %idxprom786.i = sext i32 %add785.i to i64
  %498 = load i8** %ffmt.addr.i, align 8
  %arrayidx787.i = getelementptr inbounds i8* %498, i64 %idxprom786.i
  store i8 43, i8* %arrayidx787.i, align 1
  br label %if.end793.i

if.else788.i:                                     ; preds = %if.then775.i
  %499 = load i32* %w.addr.i, align 4
  %add789.i = add nsw i32 %499, 2
  %idxprom790.i = sext i32 %add789.i to i64
  %500 = load i8** %ffmt.addr.i, align 8
  %arrayidx791.i = getelementptr inbounds i8* %500, i64 %idxprom790.i
  store i8 45, i8* %arrayidx791.i, align 1
  %501 = load i32* %iexp.i, align 4
  %sub792.i = sub nsw i32 0, %501
  store i32 %sub792.i, i32* %iexp.i, align 4
  br label %if.end793.i

if.end793.i:                                      ; preds = %if.else788.i, %if.then784.i
  %502 = load i32* %ldw.addr.i, align 4
  %and794.i = and i32 %502, 2
  %tobool795.i = icmp ne i32 %and794.i, 0
  br i1 %tobool795.i, label %if.then796.i, label %if.else800.i

if.then796.i:                                     ; preds = %if.end793.i
  %503 = load i32* %w.addr.i, align 4
  %add797.i = add nsw i32 %503, 5
  %idxprom798.i = sext i32 %add797.i to i64
  %504 = load i8** %ffmt.addr.i, align 8
  %arrayidx799.i = getelementptr inbounds i8* %504, i64 %idxprom798.i
  store i8 0, i8* %arrayidx799.i, align 1
  %505 = load i32* %iexp.i, align 4
  store i32 %505, i32* %j.i, align 4
  br label %if.end812.i

if.else800.i:                                     ; preds = %if.end793.i
  %506 = load i32* %iexp.i, align 4
  store i32 %506, i32* %k.i, align 4
  %507 = load i32* %w.addr.i, align 4
  %add801.i = add nsw i32 %507, 6
  %idxprom802.i = sext i32 %add801.i to i64
  %508 = load i8** %ffmt.addr.i, align 8
  %arrayidx803.i = getelementptr inbounds i8* %508, i64 %idxprom802.i
  store i8 0, i8* %arrayidx803.i, align 1
  %509 = load i32* %k.i, align 4
  %div804.i = sdiv i32 %509, 10
  store i32 %div804.i, i32* %j.i, align 4
  %510 = load i32* %k.i, align 4
  %511 = load i32* %j.i, align 4
  %mul805.i = mul nsw i32 %511, 10
  %sub806.i = sub nsw i32 %510, %mul805.i
  store i32 %sub806.i, i32* %k.i, align 4
  %512 = load i32* %k.i, align 4
  %add807.i = add nsw i32 48, %512
  %conv808.i = trunc i32 %add807.i to i8
  %513 = load i32* %w.addr.i, align 4
  %add809.i = add nsw i32 %513, 5
  %idxprom810.i = sext i32 %add809.i to i64
  %514 = load i8** %ffmt.addr.i, align 8
  %arrayidx811.i = getelementptr inbounds i8* %514, i64 %idxprom810.i
  store i8 %conv808.i, i8* %arrayidx811.i, align 1
  br label %if.end812.i

if.end812.i:                                      ; preds = %if.else800.i, %if.then796.i
  %515 = load i32* %j.i, align 4
  %div813.i = sdiv i32 %515, 10
  store i32 %div813.i, i32* %k.i, align 4
  %516 = load i32* %j.i, align 4
  %517 = load i32* %k.i, align 4
  %mul814.i = mul nsw i32 %517, 10
  %sub815.i = sub nsw i32 %516, %mul814.i
  store i32 %sub815.i, i32* %j.i, align 4
  %518 = load i32* %j.i, align 4
  %add816.i = add nsw i32 48, %518
  %conv817.i = trunc i32 %add816.i to i8
  %519 = load i32* %w.addr.i, align 4
  %add818.i = add nsw i32 %519, 4
  %idxprom819.i = sext i32 %add818.i to i64
  %520 = load i8** %ffmt.addr.i, align 8
  %arrayidx820.i = getelementptr inbounds i8* %520, i64 %idxprom819.i
  store i8 %conv817.i, i8* %arrayidx820.i, align 1
  %521 = load i32* %k.i, align 4
  %div821.i = sdiv i32 %521, 10
  store i32 %div821.i, i32* %j.i, align 4
  %522 = load i32* %k.i, align 4
  %523 = load i32* %j.i, align 4
  %mul822.i = mul nsw i32 %523, 10
  %sub823.i = sub nsw i32 %522, %mul822.i
  store i32 %sub823.i, i32* %k.i, align 4
  %524 = load i32* %k.i, align 4
  %add824.i = add nsw i32 48, %524
  %conv825.i = trunc i32 %add824.i to i8
  %525 = load i32* %w.addr.i, align 4
  %add826.i = add nsw i32 %525, 3
  %idxprom827.i = sext i32 %add826.i to i64
  %526 = load i8** %ffmt.addr.i, align 8
  %arrayidx828.i = getelementptr inbounds i8* %526, i64 %idxprom827.i
  store i8 %conv825.i, i8* %arrayidx828.i, align 1
  %527 = load i32* %w.addr.i, align 4
  %add829.i = add nsw i32 %527, 6
  %528 = load i32* %space.i, align 4
  %529 = load i32* %sgn.i, align 4
  %or830.i = or i32 %528, %529
  %add831.i = add nsw i32 %add829.i, %or830.i
  %530 = load i32* %ldw.addr.i, align 4
  %and832.i = and i32 %530, 2
  %cmp833.i = icmp eq i32 %and832.i, 2
  %conv834.i = zext i1 %cmp833.i to i32
  %sub835.i = sub nsw i32 %add831.i, %conv834.i
  store i32 %sub835.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else836.i:                                     ; preds = %while.end773.i
  %531 = load i32* %iexp.i, align 4
  %cmp837.i = icmp slt i32 %531, 0
  br i1 %cmp837.i, label %if.then839.i, label %if.else846.i

if.then839.i:                                     ; preds = %if.else836.i
  %532 = load i32* %w.addr.i, align 4
  %add840.i = add nsw i32 %532, 2
  %idxprom841.i = sext i32 %add840.i to i64
  %533 = load i8** %ffmt.addr.i, align 8
  %arrayidx842.i = getelementptr inbounds i8* %533, i64 %idxprom841.i
  store i8 0, i8* %arrayidx842.i, align 1
  %534 = load i32* %w.addr.i, align 4
  %add843.i = add nsw i32 %534, 2
  %535 = load i32* %space.i, align 4
  %536 = load i32* %sgn.i, align 4
  %or844.i = or i32 %535, %536
  %add845.i = add nsw i32 %add843.i, %or844.i
  store i32 %add845.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else846.i:                                     ; preds = %if.else836.i
  %537 = load i32* %w.addr.i, align 4
  %idxprom847.i = sext i32 %537 to i64
  %538 = load i8** %ffmt.addr.i, align 8
  %arrayidx848.i = getelementptr inbounds i8* %538, i64 %idxprom847.i
  store i8 0, i8* %arrayidx848.i, align 1
  %539 = load i32* %w.addr.i, align 4
  %540 = load i32* %space.i, align 4
  %541 = load i32* %sgn.i, align 4
  %or849.i = or i32 %540, %541
  %add850.i = add nsw i32 %539, %or849.i
  %542 = load i32* %space.i, align 4
  %add851.i = add nsw i32 %add850.i, %542
  store i32 %add851.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

__pgf90io_sc_fp_ldw.exit:                         ; preds = %if.else846.i, %if.then839.i, %if.end812.i, %for.end79.i, %if.end47.i
  %543 = load i32* %retval.i
  store i32 %543, i32* %len, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %__pgf90io_sc_fp_ldw.exit
  %544 = load i32* %len, align 4
  %cmp23 = icmp sle i32 %544, 24
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %545 = load i32* %j, align 4
  %546 = load i32* %len, align 4
  %add26 = add nsw i32 %545, %546
  %idxprom27 = sext i32 %add26 to i64
  %547 = load i8** %p.addr, align 8
  %arrayidx28 = getelementptr inbounds i8* %547, i64 %idxprom27
  store i8 32, i8* %arrayidx28, align 1
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %548 = load i32* %len, align 4
  %inc30 = add nsw i32 %548, 1
  store i32 %inc30, i32* %len, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %549 = load i32* %j, align 4
  %add32 = add nsw i32 %549, 25
  %conv33 = trunc i32 %add32 to i8
  %550 = load i8** %p.addr, align 8
  %arrayidx34 = getelementptr inbounds i8* %550, i64 0
  store i8 %conv33, i8* %arrayidx34, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_f_ldw(float %f, i32 %ftype, i8* %p) nounwind alwaysinline {
entry:
  %retval.i = alloca i32, align 4
  %x.addr.i = alloca double, align 8
  %ffmt.addr.i = alloca i8*, align 8
  %w.addr.i = alloca i32, align 4
  %d.addr.i = alloca i32, align 4
  %ldw.addr.i = alloca i32, align 4
  %iexp.i = alloca i32, align 4
  %iwd0.i = alloca i32, align 4
  %iwdm1.i = alloca i32, align 4
  %iwdm2.i = alloca i32, align 4
  %icarr.i = alloca i32, align 4
  %iextb.i = alloca [104 x i32], align 4
  %iexta.i = alloca i32*, align 8
  %iextc.i = alloca i32*, align 8
  %i.i = alloca i32, align 4
  %j.i = alloca i32, align 4
  %k.i = alloca i32, align 4
  %kmx.i = alloca i32, align 4
  %firstdigit.i = alloca i32, align 4
  %pose.i = alloca i32, align 4
  %firstfwd.i = alloca i32, align 4
  %ii.i = alloca i32, align 4
  %usee.i = alloca i32, align 4
  %digit.i = alloca i32, align 4
  %ndigits.i = alloca i32, align 4
  %prdigits.i = alloca i32, align 4
  %kbk.i = alloca i32, align 4
  %m.i = alloca i32, align 4
  %lw.i = alloca i32, align 4
  %sgn.i = alloca i32, align 4
  %space.i = alloca i32, align 4
  %lb0.i = alloca i64, align 8
  %lb1.i = alloca i64, align 8
  %ibt0.i = alloca i32, align 4
  %c.i = alloca i32, align 4
  %rndval.i = alloca i32, align 4
  %sticky.i = alloca i32, align 4
  %rndup.i = alloca i32, align 4
  %loc.i = alloca i32, align 4
  %keepon.i = alloca i32, align 4
  %roundcarry.i = alloca i32, align 4
  %sh1.i = alloca i32, align 4
  %sh3.i = alloca i32, align 4
  %savecarry.i = alloca i32, align 4
  %savek.i = alloca i32, align 4
  %ix.i = alloca i32, align 4
  %ixa.i = alloca i32, align 4
  %ixb.i = alloca i32, align 4
  %ixc.i = alloca i32, align 4
  %f.addr = alloca float, align 4
  %ftype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  store i32 %ftype, i32* %ftype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %j, align 4
  %add = add nsw i32 %2, 14
  %cmp = icmp sge i32 %add, 83
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %3, i64 84
  %4 = load i8* %arrayidx2, align 1
  %conv3 = sext i8 %4 to i32
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32* %j, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %6, i64 %idxprom
  store i8 10, i8* %arrayidx4, align 1
  %7 = load i32* %j, align 4
  %add5 = add nsw i32 %7, 1
  %idxprom6 = sext i32 %add5 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx7 = getelementptr inbounds i8* %8, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %9 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %9, i64 1
  call  void @__pgi_print_string(i8* %arrayidx8)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32* %k, align 4
  %cmp9 = icmp slt i32 %10, 83
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32* %k, align 4
  %idxprom11 = sext i32 %11 to i64
  %12 = load i8** %p.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %12, i64 %idxprom11
  store i8 32, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32* %k, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %14 = load i32* %j, align 4
  %conv13 = trunc i32 %14 to i8
  %15 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %15, i64 0
  store i8 %conv13, i8* %arrayidx14, align 1
  %16 = load i8** %p.addr, align 8
  %arrayidx15 = getelementptr inbounds i8* %16, i64 83
  store i8 0, i8* %arrayidx15, align 1
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 84
  store i8 0, i8* %arrayidx16, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %18 = load i32* %j, align 4
  %cmp17 = icmp ne i32 %18, 2
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end
  %19 = load i32* %j, align 4
  %inc20 = add nsw i32 %19, 1
  store i32 %inc20, i32* %j, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end
  %20 = load float* %f.addr, align 4
  %conv22 = fpext float %20 to double
  %21 = load i8** %p.addr, align 8
  %22 = load i32* %j, align 4
  %idx.ext = sext i32 %22 to i64
  %add.ptr = getelementptr inbounds i8* %21, i64 %idx.ext
  store double %conv22, double* %x.addr.i, align 8
  store i8* %add.ptr, i8** %ffmt.addr.i, align 8
  store i32 7, i32* %w.addr.i, align 4
  store i32 0, i32* %d.addr.i, align 4
  store i32 3, i32* %ldw.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.end21
  %23 = load i32* %i.i, align 4
  %cmp.i = icmp slt i32 %23, 104
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %24 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %24 to i64
  %arrayidx.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom.i
  store i32 0, i32* %arrayidx.i, align 4
  %25 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %25, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %arrayidx1.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 70
  store i32* %arrayidx1.i, i32** %iexta.i, align 8
  %arrayidx2.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 35
  store i32* %arrayidx2.i, i32** %iextc.i, align 8
  %26 = bitcast double* %x.addr.i to i64*
  %27 = load i64* %26, align 8
  store i64 %27, i64* %lb0.i, align 8
  %28 = load i64* %lb0.i, align 8
  %and.i = and i64 %28, 9218868437227405312
  %shr.i = lshr i64 %and.i, 52
  %sub.i = sub i64 %shr.i, 1023
  %conv.i = trunc i64 %sub.i to i32
  store i32 %conv.i, i32* %iexp.i, align 4
  %29 = load i64* %lb0.i, align 8
  %and3.i = and i64 %29, -9223372036854775808
  %shr4.i = lshr i64 %and3.i, 63
  %conv5.i = trunc i64 %shr4.i to i32
  store i32 %conv5.i, i32* %sgn.i, align 4
  %30 = load i64* %lb0.i, align 8
  %and6.i = and i64 %30, 4503599627370495
  store i64 %and6.i, i64* %lb1.i, align 8
  %31 = load i32* %iexp.i, align 4
  %cmp7.i = icmp eq i32 %31, 1024
  br i1 %cmp7.i, label %if.then.i, label %if.end52.i

if.then.i:                                        ; preds = %for.end.i
  %32 = load i32* %ldw.addr.i, align 4
  %and9.i = and i32 %32, 4
  %tobool.i = icmp ne i32 %and9.i, 0
  br i1 %tobool.i, label %if.then10.i, label %if.end.i

if.then10.i:                                      ; preds = %if.then.i
  %33 = load i32* %w.addr.i, align 4
  %inc11.i = add nsw i32 %33, 1
  store i32 %inc11.i, i32* %w.addr.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then10.i, %if.then.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond12.i

for.cond12.i:                                     ; preds = %for.body15.i, %if.end.i
  %34 = load i32* %i.i, align 4
  %35 = load i32* %w.addr.i, align 4
  %add.i = add nsw i32 %35, 4
  %cmp13.i = icmp slt i32 %34, %add.i
  br i1 %cmp13.i, label %for.body15.i, label %for.end20.i

for.body15.i:                                     ; preds = %for.cond12.i
  %36 = load i32* %i.i, align 4
  %idxprom16.i = sext i32 %36 to i64
  %37 = load i8** %ffmt.addr.i, align 8
  %arrayidx17.i = getelementptr inbounds i8* %37, i64 %idxprom16.i
  store i8 32, i8* %arrayidx17.i, align 1
  %38 = load i32* %i.i, align 4
  %inc19.i = add nsw i32 %38, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond12.i

for.end20.i:                                      ; preds = %for.cond12.i
  %39 = load i64* %lb1.i, align 8
  %tobool21.i = icmp ne i64 %39, 0
  br i1 %tobool21.i, label %if.then22.i, label %if.else.i

if.then22.i:                                      ; preds = %for.end20.i
  %40 = load i32* %w.addr.i, align 4
  %add23.i = add nsw i32 %40, 4
  %idxprom24.i = sext i32 %add23.i to i64
  %41 = load i8** %ffmt.addr.i, align 8
  %arrayidx25.i = getelementptr inbounds i8* %41, i64 %idxprom24.i
  store i8 78, i8* %arrayidx25.i, align 1
  %42 = load i32* %w.addr.i, align 4
  %add26.i = add nsw i32 %42, 5
  %idxprom27.i = sext i32 %add26.i to i64
  %43 = load i8** %ffmt.addr.i, align 8
  %arrayidx28.i = getelementptr inbounds i8* %43, i64 %idxprom27.i
  store i8 97, i8* %arrayidx28.i, align 1
  %44 = load i32* %w.addr.i, align 4
  %add29.i = add nsw i32 %44, 6
  %idxprom30.i = sext i32 %add29.i to i64
  %45 = load i8** %ffmt.addr.i, align 8
  %arrayidx31.i = getelementptr inbounds i8* %45, i64 %idxprom30.i
  store i8 78, i8* %arrayidx31.i, align 1
  br label %if.end47.i

if.else.i:                                        ; preds = %for.end20.i
  %46 = load i32* %sgn.i, align 4
  %tobool32.i = icmp ne i32 %46, 0
  br i1 %tobool32.i, label %if.then33.i, label %if.end37.i

if.then33.i:                                      ; preds = %if.else.i
  %47 = load i32* %w.addr.i, align 4
  %add34.i = add nsw i32 %47, 3
  %idxprom35.i = sext i32 %add34.i to i64
  %48 = load i8** %ffmt.addr.i, align 8
  %arrayidx36.i = getelementptr inbounds i8* %48, i64 %idxprom35.i
  store i8 45, i8* %arrayidx36.i, align 1
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then33.i, %if.else.i
  %49 = load i32* %w.addr.i, align 4
  %add38.i = add nsw i32 %49, 4
  %idxprom39.i = sext i32 %add38.i to i64
  %50 = load i8** %ffmt.addr.i, align 8
  %arrayidx40.i = getelementptr inbounds i8* %50, i64 %idxprom39.i
  store i8 73, i8* %arrayidx40.i, align 1
  %51 = load i32* %w.addr.i, align 4
  %add41.i = add nsw i32 %51, 5
  %idxprom42.i = sext i32 %add41.i to i64
  %52 = load i8** %ffmt.addr.i, align 8
  %arrayidx43.i = getelementptr inbounds i8* %52, i64 %idxprom42.i
  store i8 110, i8* %arrayidx43.i, align 1
  %53 = load i32* %w.addr.i, align 4
  %add44.i = add nsw i32 %53, 6
  %idxprom45.i = sext i32 %add44.i to i64
  %54 = load i8** %ffmt.addr.i, align 8
  %arrayidx46.i = getelementptr inbounds i8* %54, i64 %idxprom45.i
  store i8 102, i8* %arrayidx46.i, align 1
  br label %if.end47.i

if.end47.i:                                       ; preds = %if.end37.i, %if.then22.i
  %55 = load i32* %w.addr.i, align 4
  %add48.i = add nsw i32 %55, 7
  %idxprom49.i = sext i32 %add48.i to i64
  %56 = load i8** %ffmt.addr.i, align 8
  %arrayidx50.i = getelementptr inbounds i8* %56, i64 %idxprom49.i
  store i8 0, i8* %arrayidx50.i, align 1
  %57 = load i32* %w.addr.i, align 4
  %add51.i = add nsw i32 %57, 7
  store i32 %add51.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end52.i:                                       ; preds = %for.end.i
  %58 = load i32* %iexp.i, align 4
  %add53.i = add nsw i32 %58, 1023
  %tobool54.i = icmp ne i32 %add53.i, 0
  br i1 %tobool54.i, label %if.then55.i, label %if.else56.i

if.then55.i:                                      ; preds = %if.end52.i
  %59 = load i64* %lb1.i, align 8
  %or.i = or i64 %59, 4503599627370496
  store i64 %or.i, i64* %lb1.i, align 8
  br label %if.end85.i

if.else56.i:                                      ; preds = %if.end52.i
  %60 = load i64* %lb1.i, align 8
  %tobool57.i = icmp ne i64 %60, 0
  br i1 %tobool57.i, label %if.then58.i, label %if.else60.i

if.then58.i:                                      ; preds = %if.else56.i
  %61 = load i32* %iexp.i, align 4
  %inc59.i = add nsw i32 %61, 1
  store i32 %inc59.i, i32* %iexp.i, align 4
  br label %if.end85.i

if.else60.i:                                      ; preds = %if.else56.i
  %62 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %62, align 1
  %63 = load i32* %sgn.i, align 4
  %tobool62.i = icmp ne i32 %63, 0
  br i1 %tobool62.i, label %if.then63.i, label %if.else65.i

if.then63.i:                                      ; preds = %if.else60.i
  %64 = load i8** %ffmt.addr.i, align 8
  %arrayidx64.i = getelementptr inbounds i8* %64, i64 1
  store i8 45, i8* %arrayidx64.i, align 1
  br label %if.end67.i

if.else65.i:                                      ; preds = %if.else60.i
  %65 = load i8** %ffmt.addr.i, align 8
  %arrayidx66.i = getelementptr inbounds i8* %65, i64 1
  store i8 32, i8* %arrayidx66.i, align 1
  br label %if.end67.i

if.end67.i:                                       ; preds = %if.else65.i, %if.then63.i
  %66 = load i8** %ffmt.addr.i, align 8
  %arrayidx68.i = getelementptr inbounds i8* %66, i64 2
  store i8 48, i8* %arrayidx68.i, align 1
  %67 = load i8** %ffmt.addr.i, align 8
  %arrayidx69.i = getelementptr inbounds i8* %67, i64 3
  store i8 46, i8* %arrayidx69.i, align 1
  store i32 4, i32* %i.i, align 4
  br label %for.cond70.i

for.cond70.i:                                     ; preds = %for.body74.i, %if.end67.i
  %68 = load i32* %i.i, align 4
  %69 = load i32* %w.addr.i, align 4
  %add71.i = add nsw i32 %69, 3
  %cmp72.i = icmp slt i32 %68, %add71.i
  br i1 %cmp72.i, label %for.body74.i, label %for.end79.i

for.body74.i:                                     ; preds = %for.cond70.i
  %70 = load i32* %i.i, align 4
  %idxprom75.i = sext i32 %70 to i64
  %71 = load i8** %ffmt.addr.i, align 8
  %arrayidx76.i = getelementptr inbounds i8* %71, i64 %idxprom75.i
  store i8 48, i8* %arrayidx76.i, align 1
  %72 = load i32* %i.i, align 4
  %inc78.i = add nsw i32 %72, 1
  store i32 %inc78.i, i32* %i.i, align 4
  br label %for.cond70.i

for.end79.i:                                      ; preds = %for.cond70.i
  %73 = load i32* %w.addr.i, align 4
  %add80.i = add nsw i32 %73, 3
  %idxprom81.i = sext i32 %add80.i to i64
  %74 = load i8** %ffmt.addr.i, align 8
  %arrayidx82.i = getelementptr inbounds i8* %74, i64 %idxprom81.i
  store i8 0, i8* %arrayidx82.i, align 1
  %75 = load i32* %w.addr.i, align 4
  %add83.i = add nsw i32 %75, 3
  store i32 %add83.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.end85.i:                                       ; preds = %if.then58.i, %if.then55.i
  %76 = load i32* %iexp.i, align 4
  %cmp86.i = icmp sge i32 %76, 0
  br i1 %cmp86.i, label %if.then88.i, label %if.else90.i

if.then88.i:                                      ; preds = %if.end85.i
  %77 = load i32* %iexp.i, align 4
  %div.i = sdiv i32 %77, 32
  store i32 %div.i, i32* %iwd0.i, align 4
  %78 = load i32* %iexp.i, align 4
  %79 = load i32* %iwd0.i, align 4
  %mul.i = mul nsw i32 %79, 32
  %sub89.i = sub nsw i32 %78, %mul.i
  store i32 %sub89.i, i32* %ibt0.i, align 4
  br label %if.end97.i

if.else90.i:                                      ; preds = %if.end85.i
  %80 = load i32* %iexp.i, align 4
  %add91.i = add nsw i32 %80, 1
  %div92.i = sdiv i32 %add91.i, 32
  store i32 %div92.i, i32* %iwd0.i, align 4
  %81 = load i32* %iexp.i, align 4
  %add93.i = add nsw i32 %81, 32
  %82 = load i32* %iwd0.i, align 4
  %mul94.i = mul nsw i32 %82, 32
  %sub95.i = sub nsw i32 %add93.i, %mul94.i
  store i32 %sub95.i, i32* %ibt0.i, align 4
  %83 = load i32* %iwd0.i, align 4
  %add96.i = add nsw i32 %83, 33
  store i32 %add96.i, i32* %iwd0.i, align 4
  br label %if.end97.i

if.end97.i:                                       ; preds = %if.else90.i, %if.then88.i
  %84 = load i32* %iwd0.i, align 4
  %tobool98.i = icmp ne i32 %84, 0
  br i1 %tobool98.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.end97.i
  %85 = load i32* %iwd0.i, align 4
  %sub99.i = sub nsw i32 %85, 1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.end97.i
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %sub99.i, %cond.true.i ], [ 33, %cond.false.i ]
  store i32 %cond.i, i32* %iwdm1.i, align 4
  %86 = load i32* %iwdm1.i, align 4
  %tobool100.i = icmp ne i32 %86, 0
  br i1 %tobool100.i, label %cond.true101.i, label %cond.false103.i

cond.true101.i:                                   ; preds = %cond.end.i
  %87 = load i32* %iwdm1.i, align 4
  %sub102.i = sub nsw i32 %87, 1
  br label %cond.end104.i

cond.false103.i:                                  ; preds = %cond.end.i
  br label %cond.end104.i

cond.end104.i:                                    ; preds = %cond.false103.i, %cond.true101.i
  %cond105.i = phi i32 [ %sub102.i, %cond.true101.i ], [ 33, %cond.false103.i ]
  store i32 %cond105.i, i32* %iwdm2.i, align 4
  %88 = load i32* %ibt0.i, align 4
  %cmp106.i = icmp ult i32 %88, 20
  br i1 %cmp106.i, label %if.then108.i, label %if.else127.i

if.then108.i:                                     ; preds = %cond.end104.i
  %89 = load i64* %lb1.i, align 8
  %90 = load i32* %ibt0.i, align 4
  %sub109.i = sub i32 52, %90
  %sh_prom.i = zext i32 %sub109.i to i64
  %shr110.i = lshr i64 %89, %sh_prom.i
  %conv111.i = trunc i64 %shr110.i to i32
  %91 = load i32* %iwd0.i, align 4
  %idxprom112.i = sext i32 %91 to i64
  %92 = load i32** %iexta.i, align 8
  %arrayidx113.i = getelementptr inbounds i32* %92, i64 %idxprom112.i
  store i32 %conv111.i, i32* %arrayidx113.i, align 4
  %93 = load i64* %lb1.i, align 8
  %94 = load i32* %ibt0.i, align 4
  %sub114.i = sub i32 20, %94
  %sh_prom115.i = zext i32 %sub114.i to i64
  %shr116.i = lshr i64 %93, %sh_prom115.i
  %and117.i = and i64 %shr116.i, 4294967295
  %conv118.i = trunc i64 %and117.i to i32
  %95 = load i32* %iwdm1.i, align 4
  %idxprom119.i = sext i32 %95 to i64
  %96 = load i32** %iexta.i, align 8
  %arrayidx120.i = getelementptr inbounds i32* %96, i64 %idxprom119.i
  store i32 %conv118.i, i32* %arrayidx120.i, align 4
  %97 = load i64* %lb1.i, align 8
  %98 = load i32* %ibt0.i, align 4
  %add121.i = add i32 %98, 12
  %sh_prom122.i = zext i32 %add121.i to i64
  %shl.i = shl i64 %97, %sh_prom122.i
  %and123.i = and i64 %shl.i, 4294967295
  %conv124.i = trunc i64 %and123.i to i32
  %99 = load i32* %iwdm2.i, align 4
  %idxprom125.i = sext i32 %99 to i64
  %100 = load i32** %iexta.i, align 8
  %arrayidx126.i = getelementptr inbounds i32* %100, i64 %idxprom125.i
  store i32 %conv124.i, i32* %arrayidx126.i, align 4
  br label %if.end141.i

if.else127.i:                                     ; preds = %cond.end104.i
  %101 = load i64* %lb1.i, align 8
  %102 = load i32* %ibt0.i, align 4
  %sub128.i = sub i32 52, %102
  %sh_prom129.i = zext i32 %sub128.i to i64
  %shr130.i = lshr i64 %101, %sh_prom129.i
  %conv131.i = trunc i64 %shr130.i to i32
  %103 = load i32* %iwd0.i, align 4
  %idxprom132.i = sext i32 %103 to i64
  %104 = load i32** %iexta.i, align 8
  %arrayidx133.i = getelementptr inbounds i32* %104, i64 %idxprom132.i
  store i32 %conv131.i, i32* %arrayidx133.i, align 4
  %105 = load i64* %lb1.i, align 8
  %106 = load i32* %ibt0.i, align 4
  %sub134.i = sub i32 %106, 20
  %sh_prom135.i = zext i32 %sub134.i to i64
  %shl136.i = shl i64 %105, %sh_prom135.i
  %and137.i = and i64 %shl136.i, 4294967295
  %conv138.i = trunc i64 %and137.i to i32
  %107 = load i32* %iwdm1.i, align 4
  %idxprom139.i = sext i32 %107 to i64
  %108 = load i32** %iexta.i, align 8
  %arrayidx140.i = getelementptr inbounds i32* %108, i64 %idxprom139.i
  store i32 %conv138.i, i32* %arrayidx140.i, align 4
  br label %if.end141.i

if.end141.i:                                      ; preds = %if.else127.i, %if.then108.i
  %109 = load i32** %iextc.i, align 8
  store i32 1, i32* %109, align 4
  store i32 1, i32* %kmx.i, align 4
  %110 = load i32* %iexp.i, align 4
  %cmp143.i = icmp sge i32 %110, 0
  br i1 %cmp143.i, label %if.then145.i, label %if.end228.i

if.then145.i:                                     ; preds = %if.end141.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond146.i

for.cond146.i:                                    ; preds = %for.end224.i, %if.then145.i
  %111 = load i32* %i.i, align 4
  %112 = load i32* %iwd0.i, align 4
  %cmp147.i = icmp sle i32 %111, %112
  br i1 %cmp147.i, label %for.body149.i, label %for.end227.i

for.body149.i:                                    ; preds = %for.cond146.i
  store i32 0, i32* %j.i, align 4
  br label %for.cond150.i

for.cond150.i:                                    ; preds = %for.end217.i, %for.body149.i
  %113 = load i32* %j.i, align 4
  %cmp151.i = icmp slt i32 %113, 32
  br i1 %cmp151.i, label %for.body153.i, label %for.end224.i

for.body153.i:                                    ; preds = %for.cond150.i
  %114 = load i32* %i.i, align 4
  %idxprom154.i = sext i32 %114 to i64
  %115 = load i32** %iexta.i, align 8
  %arrayidx155.i = getelementptr inbounds i32* %115, i64 %idxprom154.i
  %116 = load i32* %arrayidx155.i, align 4
  %117 = load i32* %j.i, align 4
  %shl156.i = shl i32 1, %117
  %and157.i = and i32 %116, %shl156.i
  %tobool158.i = icmp ne i32 %and157.i, 0
  br i1 %tobool158.i, label %if.then159.i, label %if.end190.i

if.then159.i:                                     ; preds = %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond160.i

for.cond160.i:                                    ; preds = %if.end183.i, %if.then159.i
  %118 = load i32* %k.i, align 4
  %119 = load i32* %kmx.i, align 4
  %cmp161.i = icmp slt i32 %118, %119
  br i1 %cmp161.i, label %for.body163.i, label %for.end186.i

for.body163.i:                                    ; preds = %for.cond160.i
  %120 = load i32* %k.i, align 4
  %idxprom164.i = sext i32 %120 to i64
  %arrayidx165.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom164.i
  %121 = load i32* %arrayidx165.i, align 4
  %122 = load i32* %k.i, align 4
  %idxprom166.i = sext i32 %122 to i64
  %123 = load i32** %iextc.i, align 8
  %arrayidx167.i = getelementptr inbounds i32* %123, i64 %idxprom166.i
  %124 = load i32* %arrayidx167.i, align 4
  %add168.i = add i32 %121, %124
  %125 = load i32* %icarr.i, align 4
  %add169.i = add i32 %add168.i, %125
  %126 = load i32* %k.i, align 4
  %idxprom170.i = sext i32 %126 to i64
  %arrayidx171.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom170.i
  store i32 %add169.i, i32* %arrayidx171.i, align 4
  %127 = load i32* %k.i, align 4
  %idxprom172.i = sext i32 %127 to i64
  %arrayidx173.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom172.i
  %128 = load i32* %arrayidx173.i, align 4
  %cmp174.i = icmp uge i32 %128, 1000000000
  br i1 %cmp174.i, label %if.then176.i, label %if.else182.i

if.then176.i:                                     ; preds = %for.body163.i
  %129 = load i32* %k.i, align 4
  %idxprom177.i = sext i32 %129 to i64
  %arrayidx178.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom177.i
  %130 = load i32* %arrayidx178.i, align 4
  %sub179.i = sub i32 %130, 1000000000
  %131 = load i32* %k.i, align 4
  %idxprom180.i = sext i32 %131 to i64
  %arrayidx181.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom180.i
  store i32 %sub179.i, i32* %arrayidx181.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end183.i

if.else182.i:                                     ; preds = %for.body163.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end183.i

if.end183.i:                                      ; preds = %if.else182.i, %if.then176.i
  %132 = load i32* %k.i, align 4
  %inc185.i = add nsw i32 %132, 1
  store i32 %inc185.i, i32* %k.i, align 4
  br label %for.cond160.i

for.end186.i:                                     ; preds = %for.cond160.i
  %133 = load i32* %icarr.i, align 4
  %134 = load i32* %kmx.i, align 4
  %idxprom187.i = sext i32 %134 to i64
  %arrayidx188.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom187.i
  %135 = load i32* %arrayidx188.i, align 4
  %add189.i = add i32 %135, %133
  store i32 %add189.i, i32* %arrayidx188.i, align 4
  br label %if.end190.i

if.end190.i:                                      ; preds = %for.end186.i, %for.body153.i
  store i32 0, i32* %icarr.i, align 4
  store i32 0, i32* %k.i, align 4
  br label %for.cond191.i

for.cond191.i:                                    ; preds = %if.end214.i, %if.end190.i
  %136 = load i32* %k.i, align 4
  %137 = load i32* %kmx.i, align 4
  %cmp192.i = icmp slt i32 %136, %137
  br i1 %cmp192.i, label %for.body194.i, label %for.end217.i

for.body194.i:                                    ; preds = %for.cond191.i
  %138 = load i32* %k.i, align 4
  %idxprom195.i = sext i32 %138 to i64
  %139 = load i32** %iextc.i, align 8
  %arrayidx196.i = getelementptr inbounds i32* %139, i64 %idxprom195.i
  %140 = load i32* %arrayidx196.i, align 4
  %141 = load i32* %k.i, align 4
  %idxprom197.i = sext i32 %141 to i64
  %142 = load i32** %iextc.i, align 8
  %arrayidx198.i = getelementptr inbounds i32* %142, i64 %idxprom197.i
  %143 = load i32* %arrayidx198.i, align 4
  %add199.i = add i32 %140, %143
  %144 = load i32* %icarr.i, align 4
  %add200.i = add i32 %add199.i, %144
  %145 = load i32* %k.i, align 4
  %idxprom201.i = sext i32 %145 to i64
  %146 = load i32** %iextc.i, align 8
  %arrayidx202.i = getelementptr inbounds i32* %146, i64 %idxprom201.i
  store i32 %add200.i, i32* %arrayidx202.i, align 4
  %147 = load i32* %k.i, align 4
  %idxprom203.i = sext i32 %147 to i64
  %148 = load i32** %iextc.i, align 8
  %arrayidx204.i = getelementptr inbounds i32* %148, i64 %idxprom203.i
  %149 = load i32* %arrayidx204.i, align 4
  %cmp205.i = icmp uge i32 %149, 1000000000
  br i1 %cmp205.i, label %if.then207.i, label %if.else213.i

if.then207.i:                                     ; preds = %for.body194.i
  %150 = load i32* %k.i, align 4
  %idxprom208.i = sext i32 %150 to i64
  %151 = load i32** %iextc.i, align 8
  %arrayidx209.i = getelementptr inbounds i32* %151, i64 %idxprom208.i
  %152 = load i32* %arrayidx209.i, align 4
  %sub210.i = sub i32 %152, 1000000000
  %153 = load i32* %k.i, align 4
  %idxprom211.i = sext i32 %153 to i64
  %154 = load i32** %iextc.i, align 8
  %arrayidx212.i = getelementptr inbounds i32* %154, i64 %idxprom211.i
  store i32 %sub210.i, i32* %arrayidx212.i, align 4
  store i32 1, i32* %icarr.i, align 4
  br label %if.end214.i

if.else213.i:                                     ; preds = %for.body194.i
  store i32 0, i32* %icarr.i, align 4
  br label %if.end214.i

if.end214.i:                                      ; preds = %if.else213.i, %if.then207.i
  %155 = load i32* %k.i, align 4
  %inc216.i = add nsw i32 %155, 1
  store i32 %inc216.i, i32* %k.i, align 4
  br label %for.cond191.i

for.end217.i:                                     ; preds = %for.cond191.i
  %156 = load i32* %icarr.i, align 4
  %157 = load i32* %kmx.i, align 4
  %idxprom218.i = sext i32 %157 to i64
  %158 = load i32** %iextc.i, align 8
  %arrayidx219.i = getelementptr inbounds i32* %158, i64 %idxprom218.i
  %159 = load i32* %arrayidx219.i, align 4
  %add220.i = add i32 %159, %156
  store i32 %add220.i, i32* %arrayidx219.i, align 4
  %160 = load i32* %icarr.i, align 4
  %161 = load i32* %kmx.i, align 4
  %add221.i = add i32 %161, %160
  store i32 %add221.i, i32* %kmx.i, align 4
  %162 = load i32* %j.i, align 4
  %inc223.i = add nsw i32 %162, 1
  store i32 %inc223.i, i32* %j.i, align 4
  br label %for.cond150.i

for.end224.i:                                     ; preds = %for.cond150.i
  %163 = load i32* %i.i, align 4
  %inc226.i = add nsw i32 %163, 1
  store i32 %inc226.i, i32* %i.i, align 4
  br label %for.cond146.i

for.end227.i:                                     ; preds = %for.cond146.i
  br label %if.end228.i

if.end228.i:                                      ; preds = %for.end227.i, %if.end141.i
  %164 = load i32* %kmx.i, align 4
  %sub229.i = sub nsw i32 %164, 1
  %idxprom230.i = sext i32 %sub229.i to i64
  %arrayidx231.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom230.i
  %165 = load i32* %arrayidx231.i, align 4
  %cmp232.i = icmp eq i32 %165, 0
  br i1 %cmp232.i, label %if.then234.i, label %if.end235.i

if.then234.i:                                     ; preds = %if.end228.i
  %166 = load i32* %kmx.i, align 4
  %dec.i = add nsw i32 %166, -1
  store i32 %dec.i, i32* %kmx.i, align 4
  br label %if.end235.i

if.end235.i:                                      ; preds = %if.then234.i, %if.end228.i
  %167 = load i32* %kmx.i, align 4
  %dec236.i = add nsw i32 %167, -1
  store i32 %dec236.i, i32* %kmx.i, align 4
  store i32 0, i32* %prdigits.i, align 4
  %168 = load i32* %kmx.i, align 4
  %cmp237.i = icmp sge i32 %168, 0
  br i1 %cmp237.i, label %if.then239.i, label %if.end392.i

if.then239.i:                                     ; preds = %if.end235.i
  store i32 1, i32* %digit.i, align 4
  %169 = load i32* %kmx.i, align 4
  %idxprom240.i = sext i32 %169 to i64
  %arrayidx241.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom240.i
  %170 = load i32* %arrayidx241.i, align 4
  store i32 %170, i32* %k.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond242.i

for.cond242.i:                                    ; preds = %if.end249.i, %if.then239.i
  %171 = load i32* %i.i, align 4
  %cmp243.i = icmp slt i32 %171, 9
  br i1 %cmp243.i, label %for.body245.i, label %for.end253.i

for.body245.i:                                    ; preds = %for.cond242.i
  %172 = load i32* %k.i, align 4
  %173 = load i32* %digit.i, align 4
  %cmp246.i = icmp uge i32 %172, %173
  br i1 %cmp246.i, label %if.then248.i, label %if.end249.i

if.then248.i:                                     ; preds = %for.body245.i
  %174 = load i32* %i.i, align 4
  store i32 %174, i32* %pose.i, align 4
  br label %if.end249.i

if.end249.i:                                      ; preds = %if.then248.i, %for.body245.i
  %175 = load i32* %digit.i, align 4
  %mul250.i = mul i32 %175, 10
  store i32 %mul250.i, i32* %digit.i, align 4
  %176 = load i32* %i.i, align 4
  %inc252.i = add nsw i32 %176, 1
  store i32 %inc252.i, i32* %i.i, align 4
  br label %for.cond242.i

for.end253.i:                                     ; preds = %for.cond242.i
  %177 = load i32* %kmx.i, align 4
  %mul254.i = mul nsw i32 %177, 9
  %178 = load i32* %pose.i, align 4
  %add255.i = add nsw i32 %mul254.i, %178
  %add256.i = add nsw i32 %add255.i, 1
  store i32 %add256.i, i32* %prdigits.i, align 4
  %179 = load i32* %prdigits.i, align 4
  %180 = load i32* %w.addr.i, align 4
  %cmp257.i = icmp ugt i32 %179, %180
  br i1 %cmp257.i, label %if.then259.i, label %if.end372.i

if.then259.i:                                     ; preds = %for.end253.i
  %181 = load i32* %prdigits.i, align 4
  %182 = load i32* %w.addr.i, align 4
  %sub260.i = sub i32 %181, %182
  store i32 %sub260.i, i32* %loc.i, align 4
  store i32 0, i32* %kbk.i, align 4
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then259.i
  %183 = load i32* %loc.i, align 4
  %cmp261.i = icmp sgt i32 %183, 9
  br i1 %cmp261.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %184 = load i32* %loc.i, align 4
  %sub263.i = sub nsw i32 %184, 9
  store i32 %sub263.i, i32* %loc.i, align 4
  %185 = load i32* %kbk.i, align 4
  %inc264.i = add nsw i32 %185, 1
  store i32 %inc264.i, i32* %kbk.i, align 4
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %186 = load i32* %kbk.i, align 4
  %idxprom265.i = sext i32 %186 to i64
  %arrayidx266.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom265.i
  %187 = load i32* %arrayidx266.i, align 4
  store i32 %187, i32* %k.i, align 4
  store i32 1, i32* %m.i, align 4
  store i32 10, i32* %c.i, align 4
  store i32 0, i32* %rndup.i, align 4
  store i32 0, i32* %sticky.i, align 4
  store i32 0, i32* %rndval.i, align 4
  %188 = load i32* %loc.i, align 4
  %cmp267.i = icmp sgt i32 %188, 1
  br i1 %cmp267.i, label %if.then269.i, label %if.else308.i

if.then269.i:                                     ; preds = %while.end.i
  br label %while.cond270.i

while.cond270.i:                                  ; preds = %if.end294.i, %if.then269.i
  %189 = load i32* %loc.i, align 4
  %dec271.i = add nsw i32 %189, -1
  store i32 %dec271.i, i32* %loc.i, align 4
  %tobool272.i = icmp ne i32 %189, 0
  br i1 %tobool272.i, label %while.body273.i, label %while.end296.i

while.body273.i:                                  ; preds = %while.cond270.i
  %190 = load i32* %k.i, align 4
  %div274.i = sdiv i32 %190, 10
  store i32 %div274.i, i32* %j.i, align 4
  %191 = load i32* %k.i, align 4
  %192 = load i32* %j.i, align 4
  %mul275.i = mul nsw i32 %192, 10
  %sub276.i = sub nsw i32 %191, %mul275.i
  store i32 %sub276.i, i32* %digit.i, align 4
  %193 = load i32* %loc.i, align 4
  %cmp277.i = icmp sgt i32 %193, 0
  br i1 %cmp277.i, label %if.then279.i, label %if.end283.i

if.then279.i:                                     ; preds = %while.body273.i
  %194 = load i32* %c.i, align 4
  %195 = load i32* %digit.i, align 4
  %sub280.i = sub i32 %194, %195
  %196 = load i32* %m.i, align 4
  %mul281.i = mul i32 %sub280.i, %196
  %197 = load i32* %rndup.i, align 4
  %add282.i = add i32 %197, %mul281.i
  store i32 %add282.i, i32* %rndup.i, align 4
  br label %if.end283.i

if.end283.i:                                      ; preds = %if.then279.i, %while.body273.i
  %198 = load i32* %loc.i, align 4
  %cmp284.i = icmp sgt i32 %198, 1
  br i1 %cmp284.i, label %if.then286.i, label %if.end290.i

if.then286.i:                                     ; preds = %if.end283.i
  %199 = load i32* %digit.i, align 4
  %cmp287.i = icmp ugt i32 %199, 0
  %conv288.i = zext i1 %cmp287.i to i32
  %200 = load i32* %sticky.i, align 4
  %or289.i = or i32 %200, %conv288.i
  store i32 %or289.i, i32* %sticky.i, align 4
  br label %if.end290.i

if.end290.i:                                      ; preds = %if.then286.i, %if.end283.i
  %201 = load i32* %loc.i, align 4
  %cmp291.i = icmp eq i32 %201, 1
  br i1 %cmp291.i, label %if.then293.i, label %if.end294.i

if.then293.i:                                     ; preds = %if.end290.i
  %202 = load i32* %digit.i, align 4
  store i32 %202, i32* %rndval.i, align 4
  br label %if.end294.i

if.end294.i:                                      ; preds = %if.then293.i, %if.end290.i
  %203 = load i32* %j.i, align 4
  store i32 %203, i32* %k.i, align 4
  %204 = load i32* %m.i, align 4
  %mul295.i = mul nsw i32 %204, 10
  store i32 %mul295.i, i32* %m.i, align 4
  store i32 9, i32* %c.i, align 4
  br label %while.cond270.i

while.end296.i:                                   ; preds = %while.cond270.i
  %205 = load i32* %kbk.i, align 4
  store i32 %205, i32* %i.i, align 4
  br label %while.cond297.i

while.cond297.i:                                  ; preds = %while.body300.i, %while.end296.i
  %206 = load i32* %i.i, align 4
  %tobool298.i = icmp ne i32 %206, 0
  br i1 %tobool298.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %while.cond297.i
  %207 = load i32* %sticky.i, align 4
  %tobool299.i = icmp ne i32 %207, 0
  %lnot.i = xor i1 %tobool299.i, true
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %while.cond297.i
  %208 = phi i1 [ false, %while.cond297.i ], [ %lnot.i, %land.rhs.i ]
  br i1 %208, label %while.body300.i, label %while.end307.i

while.body300.i:                                  ; preds = %land.end.i
  %209 = load i32* %i.i, align 4
  %dec301.i = add nsw i32 %209, -1
  store i32 %dec301.i, i32* %i.i, align 4
  %idxprom302.i = sext i32 %dec301.i to i64
  %arrayidx303.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom302.i
  %210 = load i32* %arrayidx303.i, align 4
  %cmp304.i = icmp ne i32 %210, 0
  %conv305.i = zext i1 %cmp304.i to i32
  %211 = load i32* %sticky.i, align 4
  %or306.i = or i32 %211, %conv305.i
  store i32 %or306.i, i32* %sticky.i, align 4
  br label %while.cond297.i

while.end307.i:                                   ; preds = %land.end.i
  br label %if.end341.i

if.else308.i:                                     ; preds = %while.end.i
  %212 = load i32* %kbk.i, align 4
  %cmp309.i = icmp sgt i32 %212, 0
  br i1 %cmp309.i, label %if.then311.i, label %if.end340.i

if.then311.i:                                     ; preds = %if.else308.i
  %213 = load i32* %kbk.i, align 4
  %dec312.i = add nsw i32 %213, -1
  store i32 %dec312.i, i32* %kbk.i, align 4
  %idxprom313.i = sext i32 %dec312.i to i64
  %arrayidx314.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom313.i
  %214 = load i32* %arrayidx314.i, align 4
  store i32 %214, i32* %k.i, align 4
  %215 = load i32* %k.i, align 4
  %cmp315.i = icmp sge i32 %215, 500000000
  br i1 %cmp315.i, label %if.then317.i, label %if.end339.i

if.then317.i:                                     ; preds = %if.then311.i
  store i32 5, i32* %rndval.i, align 4
  %216 = load i32* %k.i, align 4
  %sub318.i = sub nsw i32 1000000000, %216
  store i32 %sub318.i, i32* %rndup.i, align 4
  %217 = load i32* %k.i, align 4
  %cmp319.i = icmp sgt i32 %217, 500000000
  br i1 %cmp319.i, label %if.then321.i, label %if.else322.i

if.then321.i:                                     ; preds = %if.then317.i
  store i32 1, i32* %sticky.i, align 4
  br label %if.end338.i

if.else322.i:                                     ; preds = %if.then317.i
  %218 = load i32* %kbk.i, align 4
  %sub323.i = sub nsw i32 %218, 1
  store i32 %sub323.i, i32* %i.i, align 4
  br label %while.cond324.i

while.cond324.i:                                  ; preds = %while.body330.i, %if.else322.i
  %219 = load i32* %i.i, align 4
  %tobool325.i = icmp ne i32 %219, 0
  br i1 %tobool325.i, label %land.rhs326.i, label %land.end329.i

land.rhs326.i:                                    ; preds = %while.cond324.i
  %220 = load i32* %sticky.i, align 4
  %tobool327.i = icmp ne i32 %220, 0
  %lnot328.i = xor i1 %tobool327.i, true
  br label %land.end329.i

land.end329.i:                                    ; preds = %land.rhs326.i, %while.cond324.i
  %221 = phi i1 [ false, %while.cond324.i ], [ %lnot328.i, %land.rhs326.i ]
  br i1 %221, label %while.body330.i, label %while.end337.i

while.body330.i:                                  ; preds = %land.end329.i
  %222 = load i32* %i.i, align 4
  %dec331.i = add nsw i32 %222, -1
  store i32 %dec331.i, i32* %i.i, align 4
  %idxprom332.i = sext i32 %222 to i64
  %arrayidx333.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom332.i
  %223 = load i32* %arrayidx333.i, align 4
  %cmp334.i = icmp ne i32 %223, 0
  %conv335.i = zext i1 %cmp334.i to i32
  %224 = load i32* %sticky.i, align 4
  %or336.i = or i32 %224, %conv335.i
  store i32 %or336.i, i32* %sticky.i, align 4
  br label %while.cond324.i

while.end337.i:                                   ; preds = %land.end329.i
  br label %if.end338.i

if.end338.i:                                      ; preds = %while.end337.i, %if.then321.i
  br label %if.end339.i

if.end339.i:                                      ; preds = %if.end338.i, %if.then311.i
  br label %if.end340.i

if.end340.i:                                      ; preds = %if.end339.i, %if.else308.i
  br label %if.end341.i

if.end341.i:                                      ; preds = %if.end340.i, %while.end307.i
  %225 = load i32* %rndval.i, align 4
  %cmp342.i = icmp sgt i32 %225, 5
  br i1 %cmp342.i, label %if.then347.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end341.i
  %226 = load i32* %rndval.i, align 4
  %cmp344.i = icmp eq i32 %226, 5
  br i1 %cmp344.i, label %land.lhs.true.i, label %if.end351.i

land.lhs.true.i:                                  ; preds = %lor.lhs.false.i
  %227 = load i32* %sticky.i, align 4
  %tobool346.i = icmp ne i32 %227, 0
  br i1 %tobool346.i, label %if.then347.i, label %if.end351.i

if.then347.i:                                     ; preds = %land.lhs.true.i, %if.end341.i
  %228 = load i32* %rndup.i, align 4
  %229 = load i32* %kbk.i, align 4
  %idxprom348.i = sext i32 %229 to i64
  %arrayidx349.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom348.i
  %230 = load i32* %arrayidx349.i, align 4
  %add350.i = add i32 %230, %228
  store i32 %add350.i, i32* %arrayidx349.i, align 4
  br label %if.end351.i

if.end351.i:                                      ; preds = %if.then347.i, %land.lhs.true.i, %lor.lhs.false.i
  br label %while.cond352.i

while.cond352.i:                                  ; preds = %while.body357.i, %if.end351.i
  %231 = load i32* %kbk.i, align 4
  %idxprom353.i = sext i32 %231 to i64
  %arrayidx354.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom353.i
  %232 = load i32* %arrayidx354.i, align 4
  %cmp355.i = icmp uge i32 %232, 1000000000
  br i1 %cmp355.i, label %while.body357.i, label %while.end371.i

while.body357.i:                                  ; preds = %while.cond352.i
  %233 = load i32* %kbk.i, align 4
  %idxprom358.i = sext i32 %233 to i64
  %arrayidx359.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom358.i
  %234 = load i32* %arrayidx359.i, align 4
  %sub360.i = sub i32 %234, 1000000000
  %235 = load i32* %kbk.i, align 4
  %idxprom361.i = sext i32 %235 to i64
  %arrayidx362.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom361.i
  store i32 %sub360.i, i32* %arrayidx362.i, align 4
  %236 = load i32* %kbk.i, align 4
  %add363.i = add nsw i32 %236, 1
  %idxprom364.i = sext i32 %add363.i to i64
  %arrayidx365.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom364.i
  %237 = load i32* %arrayidx365.i, align 4
  %add366.i = add i32 %237, 1
  %238 = load i32* %kbk.i, align 4
  %add367.i = add nsw i32 %238, 1
  %idxprom368.i = sext i32 %add367.i to i64
  %arrayidx369.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom368.i
  store i32 %add366.i, i32* %arrayidx369.i, align 4
  %239 = load i32* %kbk.i, align 4
  %inc370.i = add nsw i32 %239, 1
  store i32 %inc370.i, i32* %kbk.i, align 4
  br label %while.cond352.i

while.end371.i:                                   ; preds = %while.cond352.i
  br label %if.end372.i

if.end372.i:                                      ; preds = %while.end371.i, %for.end253.i
  store i32 0, i32* %i.i, align 4
  br label %for.cond373.i

for.cond373.i:                                    ; preds = %for.body378.i, %if.end372.i
  %240 = load i32* %i.i, align 4
  %241 = load i32* %kmx.i, align 4
  %add374.i = add nsw i32 %241, 1
  %div375.i = sdiv i32 %add374.i, 2
  %cmp376.i = icmp slt i32 %240, %div375.i
  br i1 %cmp376.i, label %for.body378.i, label %for.end391.i

for.body378.i:                                    ; preds = %for.cond373.i
  %242 = load i32* %i.i, align 4
  %idxprom379.i = sext i32 %242 to i64
  %arrayidx380.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom379.i
  %243 = load i32* %arrayidx380.i, align 4
  store i32 %243, i32* %k.i, align 4
  %244 = load i32* %kmx.i, align 4
  %245 = load i32* %i.i, align 4
  %sub381.i = sub nsw i32 %244, %245
  %idxprom382.i = sext i32 %sub381.i to i64
  %arrayidx383.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom382.i
  %246 = load i32* %arrayidx383.i, align 4
  %247 = load i32* %i.i, align 4
  %idxprom384.i = sext i32 %247 to i64
  %arrayidx385.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom384.i
  store i32 %246, i32* %arrayidx385.i, align 4
  %248 = load i32* %k.i, align 4
  %249 = load i32* %kmx.i, align 4
  %250 = load i32* %i.i, align 4
  %sub386.i = sub nsw i32 %249, %250
  %idxprom387.i = sext i32 %sub386.i to i64
  %arrayidx388.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom387.i
  store i32 %248, i32* %arrayidx388.i, align 4
  %251 = load i32* %i.i, align 4
  %inc390.i = add nsw i32 %251, 1
  store i32 %inc390.i, i32* %i.i, align 4
  br label %for.cond373.i

for.end391.i:                                     ; preds = %for.cond373.i
  br label %if.end392.i

if.end392.i:                                      ; preds = %for.end391.i, %if.end235.i
  %252 = load i32* %iexp.i, align 4
  %cmp393.i = icmp sle i32 %252, 51
  br i1 %cmp393.i, label %land.lhs.true395.i, label %if.end620.i

land.lhs.true395.i:                               ; preds = %if.end392.i
  %253 = load i32* %prdigits.i, align 4
  %254 = load i32* %w.addr.i, align 4
  %cmp396.i = icmp ule i32 %253, %254
  br i1 %cmp396.i, label %if.then398.i, label %if.end620.i

if.then398.i:                                     ; preds = %land.lhs.true395.i
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %keepon.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %255 = load i32* %kmx.i, align 4
  %add399.i = add nsw i32 %255, 1
  store i32 %add399.i, i32* %j.i, align 4
  %256 = load i32* %kmx.i, align 4
  %add400.i = add nsw i32 %256, 1
  store i32 %add400.i, i32* %k.i, align 4
  store i32 0, i32* %firstdigit.i, align 4
  store i32 0, i32* %savecarry.i, align 4
  %257 = load i32* %w.addr.i, align 4
  store i32 %257, i32* %lw.i, align 4
  br label %while.cond401.i

while.cond401.i:                                  ; preds = %if.end543.i, %if.then398.i
  %258 = load i32* %iwdm2.i, align 4
  %cmp402.i = icmp slt i32 %258, 34
  br i1 %cmp402.i, label %while.body404.i, label %while.end544.i

while.body404.i:                                  ; preds = %while.cond401.i
  store i32 0, i32* %sh1.i, align 4
  store i32 0, i32* %sh3.i, align 4
  store i32 0, i32* %icarr.i, align 4
  %259 = load i32* %iwdm2.i, align 4
  store i32 %259, i32* %i.i, align 4
  br label %for.cond405.i

for.cond405.i:                                    ; preds = %lor.end.i, %while.body404.i
  %260 = load i32* %i.i, align 4
  %cmp406.i = icmp slt i32 %260, 34
  br i1 %cmp406.i, label %for.body408.i, label %for.end433.i

for.body408.i:                                    ; preds = %for.cond405.i
  %261 = load i32* %i.i, align 4
  %idxprom409.i = sext i32 %261 to i64
  %262 = load i32** %iexta.i, align 8
  %arrayidx410.i = getelementptr inbounds i32* %262, i64 %idxprom409.i
  %263 = load i32* %arrayidx410.i, align 4
  store i32 %263, i32* %ix.i, align 4
  %264 = load i32* %ix.i, align 4
  %shl411.i = shl i32 %264, 1
  %265 = load i32* %sh1.i, align 4
  %add412.i = add i32 %shl411.i, %265
  store i32 %add412.i, i32* %ixa.i, align 4
  %266 = load i32* %ix.i, align 4
  %shl413.i = shl i32 %266, 3
  %267 = load i32* %sh3.i, align 4
  %add414.i = add i32 %shl413.i, %267
  store i32 %add414.i, i32* %ixb.i, align 4
  %268 = load i32* %ix.i, align 4
  %shr415.i = lshr i32 %268, 31
  store i32 %shr415.i, i32* %sh1.i, align 4
  %269 = load i32* %ix.i, align 4
  %shr416.i = lshr i32 %269, 29
  store i32 %shr416.i, i32* %sh3.i, align 4
  %270 = load i32* %ixa.i, align 4
  %271 = load i32* %ixb.i, align 4
  %add417.i = add i32 %270, %271
  %272 = load i32* %icarr.i, align 4
  %add418.i = add i32 %add417.i, %272
  store i32 %add418.i, i32* %ixc.i, align 4
  %273 = load i32* %ixc.i, align 4
  %274 = load i32* %ixa.i, align 4
  %cmp419.i = icmp ult i32 %273, %274
  br i1 %cmp419.i, label %lor.end.i, label %lor.lhs.false421.i

lor.lhs.false421.i:                               ; preds = %for.body408.i
  %275 = load i32* %ixc.i, align 4
  %276 = load i32* %ixb.i, align 4
  %cmp422.i = icmp ult i32 %275, %276
  br i1 %cmp422.i, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false421.i
  %277 = load i32* %ixa.i, align 4
  %278 = load i32* %ixb.i, align 4
  %and424.i = and i32 %277, %278
  %279 = load i32* %ixc.i, align 4
  %and425.i = and i32 %and424.i, %279
  %cmp426.i = icmp eq i32 %and425.i, -1
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %lor.lhs.false421.i, %for.body408.i
  %280 = phi i1 [ true, %lor.lhs.false421.i ], [ true, %for.body408.i ], [ %cmp426.i, %lor.rhs.i ]
  %cond428.i = select i1 %280, i32 1, i32 0
  store i32 %cond428.i, i32* %icarr.i, align 4
  %281 = load i32* %ixc.i, align 4
  %282 = load i32* %i.i, align 4
  %idxprom429.i = sext i32 %282 to i64
  %283 = load i32** %iexta.i, align 8
  %arrayidx430.i = getelementptr inbounds i32* %283, i64 %idxprom429.i
  store i32 %281, i32* %arrayidx430.i, align 4
  %284 = load i32* %i.i, align 4
  %inc432.i = add nsw i32 %284, 1
  store i32 %inc432.i, i32* %i.i, align 4
  br label %for.cond405.i

for.end433.i:                                     ; preds = %for.cond405.i
  %285 = load i32* %iwdm2.i, align 4
  %idxprom434.i = sext i32 %285 to i64
  %286 = load i32** %iexta.i, align 8
  %arrayidx435.i = getelementptr inbounds i32* %286, i64 %idxprom434.i
  %287 = load i32* %arrayidx435.i, align 4
  %cmp436.i = icmp eq i32 %287, 0
  br i1 %cmp436.i, label %if.then438.i, label %if.end440.i

if.then438.i:                                     ; preds = %for.end433.i
  %288 = load i32* %iwdm2.i, align 4
  %inc439.i = add nsw i32 %288, 1
  store i32 %inc439.i, i32* %iwdm2.i, align 4
  br label %if.end440.i

if.end440.i:                                      ; preds = %if.then438.i, %for.end433.i
  %289 = load i32* %digit.i, align 4
  %mul441.i = mul i32 %289, 10
  %290 = load i32* %sh3.i, align 4
  %291 = load i32* %sh1.i, align 4
  %add442.i = add i32 %290, %291
  %292 = load i32* %icarr.i, align 4
  %add443.i = add i32 %add442.i, %292
  %add444.i = add i32 %mul441.i, %add443.i
  store i32 %add444.i, i32* %digit.i, align 4
  %293 = load i32* %ndigits.i, align 4
  %inc445.i = add i32 %293, 1
  store i32 %inc445.i, i32* %ndigits.i, align 4
  %294 = load i32* %digit.i, align 4
  %tobool446.i = icmp ne i32 %294, 0
  br i1 %tobool446.i, label %land.lhs.true447.i, label %if.end461.i

land.lhs.true447.i:                               ; preds = %if.end440.i
  %295 = load i32* %firstdigit.i, align 4
  %tobool448.i = icmp ne i32 %295, 0
  br i1 %tobool448.i, label %if.end461.i, label %if.then449.i

if.then449.i:                                     ; preds = %land.lhs.true447.i
  %296 = load i32* %ndigits.i, align 4
  store i32 %296, i32* %firstdigit.i, align 4
  %297 = load i32* %j.i, align 4
  store i32 %297, i32* %firstfwd.i, align 4
  %298 = load i32* %ndigits.i, align 4
  %cmp450.i = icmp ugt i32 %298, 1
  br i1 %cmp450.i, label %land.lhs.true455.i, label %lor.lhs.false452.i

lor.lhs.false452.i:                               ; preds = %if.then449.i
  %299 = load i32* %j.i, align 4
  %300 = load i32* %k.i, align 4
  %cmp453.i = icmp ne i32 %299, %300
  br i1 %cmp453.i, label %land.lhs.true455.i, label %if.end460.i

land.lhs.true455.i:                               ; preds = %lor.lhs.false452.i, %if.then449.i
  %301 = load i32* %prdigits.i, align 4
  %cmp456.i = icmp eq i32 %301, 0
  br i1 %cmp456.i, label %if.then458.i, label %if.end460.i

if.then458.i:                                     ; preds = %land.lhs.true455.i
  %302 = load i32* %lw.i, align 4
  %inc459.i = add nsw i32 %302, 1
  store i32 %inc459.i, i32* %lw.i, align 4
  br label %if.end460.i

if.end460.i:                                      ; preds = %if.then458.i, %land.lhs.true455.i, %lor.lhs.false452.i
  br label %if.end461.i

if.end461.i:                                      ; preds = %if.end460.i, %land.lhs.true447.i, %if.end440.i
  %303 = load i32* %firstdigit.i, align 4
  %tobool462.i = icmp ne i32 %303, 0
  br i1 %tobool462.i, label %if.then465.i, label %lor.lhs.false463.i

lor.lhs.false463.i:                               ; preds = %if.end461.i
  %304 = load i32* %prdigits.i, align 4
  %tobool464.i = icmp ne i32 %304, 0
  br i1 %tobool464.i, label %if.then465.i, label %if.end521.i

if.then465.i:                                     ; preds = %lor.lhs.false463.i, %if.end461.i
  %305 = load i32* %prdigits.i, align 4
  %inc466.i = add i32 %305, 1
  store i32 %inc466.i, i32* %prdigits.i, align 4
  %306 = load i32* %prdigits.i, align 4
  %307 = load i32* %lw.i, align 4
  %cmp467.i = icmp ugt i32 %306, %307
  br i1 %cmp467.i, label %if.then469.i, label %if.end520.i

if.then469.i:                                     ; preds = %if.then465.i
  %308 = load i32* %keepon.i, align 4
  %tobool470.i = icmp ne i32 %308, 0
  br i1 %tobool470.i, label %if.else477.i, label %land.lhs.true471.i

land.lhs.true471.i:                               ; preds = %if.then469.i
  %309 = load i32* %sh3.i, align 4
  %310 = load i32* %sh1.i, align 4
  %add472.i = add i32 %309, %310
  %311 = load i32* %icarr.i, align 4
  %add473.i = add i32 %add472.i, %311
  %cmp474.i = icmp ult i32 %add473.i, 5
  br i1 %cmp474.i, label %if.then476.i, label %if.else477.i

if.then476.i:                                     ; preds = %land.lhs.true471.i
  br label %while.end544.i

if.else477.i:                                     ; preds = %land.lhs.true471.i, %if.then469.i
  %312 = load i32* %keepon.i, align 4
  %tobool478.i = icmp ne i32 %312, 0
  br i1 %tobool478.i, label %if.else489.i, label %land.lhs.true479.i

land.lhs.true479.i:                               ; preds = %if.else477.i
  %313 = load i32* %sh3.i, align 4
  %314 = load i32* %sh1.i, align 4
  %add480.i = add i32 %313, %314
  %315 = load i32* %icarr.i, align 4
  %add481.i = add i32 %add480.i, %315
  %cmp482.i = icmp ugt i32 %add481.i, 5
  br i1 %cmp482.i, label %if.then484.i, label %if.else489.i

if.then484.i:                                     ; preds = %land.lhs.true479.i
  %316 = load i32* %sh3.i, align 4
  %317 = load i32* %sh1.i, align 4
  %add485.i = add i32 %316, %317
  %318 = load i32* %icarr.i, align 4
  %add486.i = add i32 %add485.i, %318
  %sub487.i = sub i32 10, %add486.i
  %319 = load i32* %digit.i, align 4
  %add488.i = add i32 %319, %sub487.i
  store i32 %add488.i, i32* %digit.i, align 4
  br label %while.end544.i

if.else489.i:                                     ; preds = %land.lhs.true479.i, %if.else477.i
  %320 = load i32* %keepon.i, align 4
  %tobool490.i = icmp ne i32 %320, 0
  br i1 %tobool490.i, label %land.lhs.true491.i, label %if.else509.i

land.lhs.true491.i:                               ; preds = %if.else489.i
  %321 = load i32* %sh3.i, align 4
  %322 = load i32* %sh1.i, align 4
  %add492.i = add i32 %321, %322
  %323 = load i32* %icarr.i, align 4
  %add493.i = add i32 %add492.i, %323
  %cmp494.i = icmp ugt i32 %add493.i, 0
  br i1 %cmp494.i, label %if.then496.i, label %if.else509.i

if.then496.i:                                     ; preds = %land.lhs.true491.i
  %324 = load i32* %savecarry.i, align 4
  %tobool497.i = icmp ne i32 %324, 0
  br i1 %tobool497.i, label %if.then498.i, label %if.else502.i

if.then498.i:                                     ; preds = %if.then496.i
  %325 = load i32* %savek.i, align 4
  %idxprom499.i = sext i32 %325 to i64
  %arrayidx500.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom499.i
  %326 = load i32* %arrayidx500.i, align 4
  store i32 %326, i32* %digit.i, align 4
  %327 = load i32* %savecarry.i, align 4
  %328 = load i32* %digit.i, align 4
  %add501.i = add i32 %328, %327
  store i32 %add501.i, i32* %digit.i, align 4
  %329 = load i32* %savek.i, align 4
  store i32 %329, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end508.i

if.else502.i:                                     ; preds = %if.then496.i
  %330 = load i32* %roundcarry.i, align 4
  %mul503.i = mul i32 %330, 10
  store i32 %mul503.i, i32* %roundcarry.i, align 4
  %331 = load i32* %roundcarry.i, align 4
  %332 = load i32* %sh3.i, align 4
  %333 = load i32* %sh1.i, align 4
  %add504.i = add i32 %332, %333
  %334 = load i32* %icarr.i, align 4
  %add505.i = add i32 %add504.i, %334
  %sub506.i = sub i32 %331, %add505.i
  %335 = load i32* %digit.i, align 4
  %add507.i = add i32 %335, %sub506.i
  store i32 %add507.i, i32* %digit.i, align 4
  br label %if.end508.i

if.end508.i:                                      ; preds = %if.else502.i, %if.then498.i
  store i32 0, i32* %keepon.i, align 4
  br label %while.end544.i

if.else509.i:                                     ; preds = %land.lhs.true491.i, %if.else489.i
  %336 = load i32* %keepon.i, align 4
  %tobool510.i = icmp ne i32 %336, 0
  br i1 %tobool510.i, label %if.then511.i, label %if.else514.i

if.then511.i:                                     ; preds = %if.else509.i
  %337 = load i32* %keepon.i, align 4
  %inc512.i = add i32 %337, 1
  store i32 %inc512.i, i32* %keepon.i, align 4
  %338 = load i32* %roundcarry.i, align 4
  %mul513.i = mul i32 %338, 10
  store i32 %mul513.i, i32* %roundcarry.i, align 4
  br label %if.end516.i

if.else514.i:                                     ; preds = %if.else509.i
  store i32 5, i32* %roundcarry.i, align 4
  %339 = load i32* %keepon.i, align 4
  %inc515.i = add i32 %339, 1
  store i32 %inc515.i, i32* %keepon.i, align 4
  br label %if.end516.i

if.end516.i:                                      ; preds = %if.else514.i, %if.then511.i
  br label %if.end520.i

if.end520.i:                                      ; preds = %if.end516.i, %if.then465.i
  br label %if.end521.i

if.end521.i:                                      ; preds = %if.end520.i, %lor.lhs.false463.i
  %340 = load i32* %ndigits.i, align 4
  %cmp522.i = icmp eq i32 %340, 9
  br i1 %cmp522.i, label %if.then524.i, label %if.end543.i

if.then524.i:                                     ; preds = %if.end521.i
  %341 = load i32* %digit.i, align 4
  %tobool525.i = icmp ne i32 %341, 0
  br i1 %tobool525.i, label %if.then531.i, label %lor.lhs.false526.i

lor.lhs.false526.i:                               ; preds = %if.then524.i
  %342 = load i32* %firstdigit.i, align 4
  %tobool527.i = icmp ne i32 %342, 0
  br i1 %tobool527.i, label %if.then531.i, label %lor.lhs.false528.i

lor.lhs.false528.i:                               ; preds = %lor.lhs.false526.i
  %343 = load i32* %iexp.i, align 4
  %cmp529.i = icmp sge i32 %343, 0
  br i1 %cmp529.i, label %if.then531.i, label %if.end535.i

if.then531.i:                                     ; preds = %lor.lhs.false528.i, %lor.lhs.false526.i, %if.then524.i
  %344 = load i32* %digit.i, align 4
  %345 = load i32* %k.i, align 4
  %inc532.i = add nsw i32 %345, 1
  store i32 %inc532.i, i32* %k.i, align 4
  %idxprom533.i = sext i32 %345 to i64
  %arrayidx534.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom533.i
  store i32 %344, i32* %arrayidx534.i, align 4
  br label %if.end535.i

if.end535.i:                                      ; preds = %if.then531.i, %lor.lhs.false528.i
  %346 = load i32* %j.i, align 4
  %inc536.i = add nsw i32 %346, 1
  store i32 %inc536.i, i32* %j.i, align 4
  store i32 0, i32* %digit.i, align 4
  store i32 0, i32* %ndigits.i, align 4
  %347 = load i32* %keepon.i, align 4
  %tobool537.i = icmp ne i32 %347, 0
  br i1 %tobool537.i, label %land.lhs.true538.i, label %if.end542.i

land.lhs.true538.i:                               ; preds = %if.end535.i
  %348 = load i32* %savecarry.i, align 4
  %tobool539.i = icmp ne i32 %348, 0
  br i1 %tobool539.i, label %if.end542.i, label %if.then540.i

if.then540.i:                                     ; preds = %land.lhs.true538.i
  %349 = load i32* %roundcarry.i, align 4
  store i32 %349, i32* %savecarry.i, align 4
  %350 = load i32* %k.i, align 4
  %sub541.i = sub nsw i32 %350, 1
  store i32 %sub541.i, i32* %savek.i, align 4
  br label %if.end542.i

if.end542.i:                                      ; preds = %if.then540.i, %land.lhs.true538.i, %if.end535.i
  br label %if.end543.i

if.end543.i:                                      ; preds = %if.end542.i, %if.end521.i
  br label %while.cond401.i

while.end544.i:                                   ; preds = %if.end508.i, %if.then484.i, %if.then476.i, %while.cond401.i
  %351 = load i32* %keepon.i, align 4
  %tobool545.i = icmp ne i32 %351, 0
  br i1 %tobool545.i, label %if.then546.i, label %if.end558.i

if.then546.i:                                     ; preds = %while.end544.i
  %352 = load i32* %savecarry.i, align 4
  %tobool547.i = icmp ne i32 %352, 0
  br i1 %tobool547.i, label %if.then548.i, label %if.else552.i

if.then548.i:                                     ; preds = %if.then546.i
  %353 = load i32* %savek.i, align 4
  %idxprom549.i = sext i32 %353 to i64
  %arrayidx550.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom549.i
  %354 = load i32* %arrayidx550.i, align 4
  store i32 %354, i32* %digit.i, align 4
  %355 = load i32* %savecarry.i, align 4
  %356 = load i32* %digit.i, align 4
  %add551.i = add i32 %356, %355
  store i32 %add551.i, i32* %digit.i, align 4
  %357 = load i32* %savek.i, align 4
  store i32 %357, i32* %k.i, align 4
  store i32 9, i32* %ndigits.i, align 4
  br label %if.end557.i

if.else552.i:                                     ; preds = %if.then546.i
  %358 = load i32* %roundcarry.i, align 4
  %tobool553.i = icmp ne i32 %358, 0
  br i1 %tobool553.i, label %if.then554.i, label %if.end556.i

if.then554.i:                                     ; preds = %if.else552.i
  %359 = load i32* %roundcarry.i, align 4
  %360 = load i32* %digit.i, align 4
  %add555.i = add i32 %360, %359
  store i32 %add555.i, i32* %digit.i, align 4
  br label %if.end556.i

if.end556.i:                                      ; preds = %if.then554.i, %if.else552.i
  br label %if.end557.i

if.end557.i:                                      ; preds = %if.end556.i, %if.then548.i
  br label %if.end558.i

if.end558.i:                                      ; preds = %if.end557.i, %while.end544.i
  %361 = load i32* %digit.i, align 4
  %tobool559.i = icmp ne i32 %361, 0
  br i1 %tobool559.i, label %if.then560.i, label %if.end619.i

if.then560.i:                                     ; preds = %if.end558.i
  br label %for.cond561.i

for.cond561.i:                                    ; preds = %for.body564.i, %if.then560.i
  %362 = load i32* %ndigits.i, align 4
  %cmp562.i = icmp ult i32 %362, 9
  br i1 %cmp562.i, label %for.body564.i, label %for.end568.i

for.body564.i:                                    ; preds = %for.cond561.i
  %363 = load i32* %digit.i, align 4
  %mul565.i = mul i32 %363, 10
  store i32 %mul565.i, i32* %digit.i, align 4
  %364 = load i32* %ndigits.i, align 4
  %inc567.i = add i32 %364, 1
  store i32 %inc567.i, i32* %ndigits.i, align 4
  br label %for.cond561.i

for.end568.i:                                     ; preds = %for.cond561.i
  %365 = load i32* %digit.i, align 4
  %366 = load i32* %k.i, align 4
  %idxprom569.i = sext i32 %366 to i64
  %arrayidx570.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom569.i
  store i32 %365, i32* %arrayidx570.i, align 4
  %367 = load i32* %digit.i, align 4
  %cmp571.i = icmp eq i32 %367, 1000000000
  br i1 %cmp571.i, label %if.then573.i, label %if.end618.i

if.then573.i:                                     ; preds = %for.end568.i
  store i32 0, i32* %digit.i, align 4
  %368 = load i32* %digit.i, align 4
  %369 = load i32* %k.i, align 4
  %idxprom574.i = sext i32 %369 to i64
  %arrayidx575.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom574.i
  store i32 %368, i32* %arrayidx575.i, align 4
  %370 = load i32* %k.i, align 4
  %sub576.i = sub nsw i32 %370, 1
  store i32 %sub576.i, i32* %kbk.i, align 4
  %371 = load i32* %kbk.i, align 4
  %idxprom577.i = sext i32 %371 to i64
  %arrayidx578.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom577.i
  %372 = load i32* %arrayidx578.i, align 4
  %inc579.i = add i32 %372, 1
  store i32 %inc579.i, i32* %arrayidx578.i, align 4
  br label %while.cond580.i

while.cond580.i:                                  ; preds = %while.body585.i, %if.then573.i
  %373 = load i32* %kbk.i, align 4
  %idxprom581.i = sext i32 %373 to i64
  %arrayidx582.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom581.i
  %374 = load i32* %arrayidx582.i, align 4
  %cmp583.i = icmp eq i32 %374, 1000000000
  br i1 %cmp583.i, label %while.body585.i, label %while.end592.i

while.body585.i:                                  ; preds = %while.cond580.i
  %375 = load i32* %kbk.i, align 4
  %idxprom586.i = sext i32 %375 to i64
  %arrayidx587.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom586.i
  store i32 0, i32* %arrayidx587.i, align 4
  %376 = load i32* %k.i, align 4
  %sub588.i = sub nsw i32 %376, 1
  store i32 %sub588.i, i32* %kbk.i, align 4
  %377 = load i32* %kbk.i, align 4
  %idxprom589.i = sext i32 %377 to i64
  %arrayidx590.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom589.i
  %378 = load i32* %arrayidx590.i, align 4
  %inc591.i = add i32 %378, 1
  store i32 %inc591.i, i32* %arrayidx590.i, align 4
  br label %while.cond580.i

while.end592.i:                                   ; preds = %while.cond580.i
  %379 = load i32* %kmx.i, align 4
  %cmp593.i = icmp slt i32 %379, 0
  br i1 %cmp593.i, label %if.then595.i, label %if.end617.i

if.then595.i:                                     ; preds = %while.end592.i
  %380 = load i32* %firstdigit.i, align 4
  %sub596.i = sub nsw i32 10, %380
  store i32 %sub596.i, i32* %pose.i, align 4
  %381 = load i32* %pose.i, align 4
  %cmp597.i = icmp sge i32 %381, 9
  br i1 %cmp597.i, label %if.then599.i, label %if.end601.i

if.then599.i:                                     ; preds = %if.then595.i
  %382 = load i32* %pose.i, align 4
  %sub600.i = sub nsw i32 %382, 9
  store i32 %sub600.i, i32* %pose.i, align 4
  br label %if.end601.i

if.end601.i:                                      ; preds = %if.then599.i, %if.then595.i
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond602.i

for.cond602.i:                                    ; preds = %for.body605.i, %if.end601.i
  %383 = load i32* %i.i, align 4
  %384 = load i32* %pose.i, align 4
  %cmp603.i = icmp slt i32 %383, %384
  br i1 %cmp603.i, label %for.body605.i, label %for.end609.i

for.body605.i:                                    ; preds = %for.cond602.i
  %385 = load i32* %digit.i, align 4
  %mul606.i = mul i32 %385, 10
  store i32 %mul606.i, i32* %digit.i, align 4
  %386 = load i32* %i.i, align 4
  %inc608.i = add nsw i32 %386, 1
  store i32 %inc608.i, i32* %i.i, align 4
  br label %for.cond602.i

for.end609.i:                                     ; preds = %for.cond602.i
  %387 = load i32* %kbk.i, align 4
  %idxprom610.i = sext i32 %387 to i64
  %arrayidx611.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom610.i
  %388 = load i32* %arrayidx611.i, align 4
  %389 = load i32* %digit.i, align 4
  %cmp612.i = icmp eq i32 %388, %389
  br i1 %cmp612.i, label %if.then614.i, label %if.end616.i

if.then614.i:                                     ; preds = %for.end609.i
  %390 = load i32* %firstdigit.i, align 4
  %dec615.i = add nsw i32 %390, -1
  store i32 %dec615.i, i32* %firstdigit.i, align 4
  br label %if.end616.i

if.end616.i:                                      ; preds = %if.then614.i, %for.end609.i
  br label %if.end617.i

if.end617.i:                                      ; preds = %if.end616.i, %while.end592.i
  br label %if.end618.i

if.end618.i:                                      ; preds = %if.end617.i, %for.end568.i
  br label %if.end619.i

if.end619.i:                                      ; preds = %if.end618.i, %if.end558.i
  br label %if.end620.i

if.end620.i:                                      ; preds = %if.end619.i, %land.lhs.true395.i, %if.end392.i
  %arrayidx621.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 0
  %391 = load i32* %arrayidx621.i, align 4
  store i32 %391, i32* %k.i, align 4
  store i32 1, i32* %digit.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond622.i

for.cond622.i:                                    ; preds = %if.end629.i, %if.end620.i
  %392 = load i32* %i.i, align 4
  %cmp623.i = icmp slt i32 %392, 9
  br i1 %cmp623.i, label %for.body625.i, label %for.end633.i

for.body625.i:                                    ; preds = %for.cond622.i
  %393 = load i32* %k.i, align 4
  %394 = load i32* %digit.i, align 4
  %cmp626.i = icmp uge i32 %393, %394
  br i1 %cmp626.i, label %if.then628.i, label %if.end629.i

if.then628.i:                                     ; preds = %for.body625.i
  %395 = load i32* %i.i, align 4
  store i32 %395, i32* %pose.i, align 4
  br label %if.end629.i

if.end629.i:                                      ; preds = %if.then628.i, %for.body625.i
  %396 = load i32* %digit.i, align 4
  %mul630.i = mul i32 %396, 10
  store i32 %mul630.i, i32* %digit.i, align 4
  %397 = load i32* %i.i, align 4
  %inc632.i = add nsw i32 %397, 1
  store i32 %inc632.i, i32* %i.i, align 4
  br label %for.cond622.i

for.end633.i:                                     ; preds = %for.cond622.i
  store i32 1, i32* %m.i, align 4
  %398 = load i32* %ldw.addr.i, align 4
  %and634.i = and i32 %398, 1
  store i32 %and634.i, i32* %space.i, align 4
  %399 = load i32* %kmx.i, align 4
  %cmp635.i = icmp sge i32 %399, 0
  br i1 %cmp635.i, label %if.then637.i, label %if.else655.i

if.then637.i:                                     ; preds = %for.end633.i
  %400 = load i32* %kmx.i, align 4
  %mul638.i = mul nsw i32 %400, 9
  %401 = load i32* %pose.i, align 4
  %add639.i = add nsw i32 %mul638.i, %401
  store i32 %add639.i, i32* %iexp.i, align 4
  %402 = load i32* %iexp.i, align 4
  %403 = load i32* %w.addr.i, align 4
  %cmp640.i = icmp sge i32 %402, %403
  %conv641.i = zext i1 %cmp640.i to i32
  store i32 %conv641.i, i32* %usee.i, align 4
  %404 = load i32* %usee.i, align 4
  %tobool642.i = icmp ne i32 %404, 0
  br i1 %tobool642.i, label %if.end645.i, label %if.then643.i

if.then643.i:                                     ; preds = %if.then637.i
  %405 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %405, align 1
  %406 = load i32* %space.i, align 4
  %407 = load i8** %ffmt.addr.i, align 8
  %idx.ext.i = sext i32 %406 to i64
  %add.ptr.i = getelementptr inbounds i8* %407, i64 %idx.ext.i
  store i8* %add.ptr.i, i8** %ffmt.addr.i, align 8
  store i32 0, i32* %m.i, align 4
  br label %if.end645.i

if.end645.i:                                      ; preds = %if.then643.i, %if.then637.i
  %408 = load i32* %sgn.i, align 4
  %tobool646.i = icmp ne i32 %408, 0
  br i1 %tobool646.i, label %if.then647.i, label %if.else649.i

if.then647.i:                                     ; preds = %if.end645.i
  %409 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %409, align 1
  br label %if.end651.i

if.else649.i:                                     ; preds = %if.end645.i
  %410 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %410, align 1
  br label %if.end651.i

if.end651.i:                                      ; preds = %if.else649.i, %if.then647.i
  %411 = load i32* %space.i, align 4
  %412 = load i32* %sgn.i, align 4
  %or652.i = or i32 %411, %412
  %413 = load i8** %ffmt.addr.i, align 8
  %idx.ext653.i = sext i32 %or652.i to i64
  %add.ptr654.i = getelementptr inbounds i8* %413, i64 %idx.ext653.i
  store i8* %add.ptr654.i, i8** %ffmt.addr.i, align 8
  br label %if.end675.i

if.else655.i:                                     ; preds = %for.end633.i
  %414 = load i32* %firstfwd.i, align 4
  %mul656.i = mul nsw i32 %414, 9
  %415 = load i32* %firstdigit.i, align 4
  %add657.i = add nsw i32 %mul656.i, %415
  %sub658.i = sub nsw i32 0, %add657.i
  store i32 %sub658.i, i32* %iexp.i, align 4
  %416 = load i32* %iexp.i, align 4
  %cmp659.i = icmp slt i32 %416, -1
  %conv660.i = zext i1 %cmp659.i to i32
  store i32 %conv660.i, i32* %usee.i, align 4
  %417 = load i32* %sgn.i, align 4
  %tobool661.i = icmp ne i32 %417, 0
  br i1 %tobool661.i, label %if.then662.i, label %if.else664.i

if.then662.i:                                     ; preds = %if.else655.i
  %418 = load i8** %ffmt.addr.i, align 8
  store i8 45, i8* %418, align 1
  br label %if.end666.i

if.else664.i:                                     ; preds = %if.else655.i
  %419 = load i8** %ffmt.addr.i, align 8
  store i8 32, i8* %419, align 1
  br label %if.end666.i

if.end666.i:                                      ; preds = %if.else664.i, %if.then662.i
  %420 = load i32* %space.i, align 4
  %421 = load i32* %sgn.i, align 4
  %or667.i = or i32 %420, %421
  %422 = load i8** %ffmt.addr.i, align 8
  %idx.ext668.i = sext i32 %or667.i to i64
  %add.ptr669.i = getelementptr inbounds i8* %422, i64 %idx.ext668.i
  store i8* %add.ptr669.i, i8** %ffmt.addr.i, align 8
  %423 = load i32* %usee.i, align 4
  %tobool670.i = icmp ne i32 %423, 0
  br i1 %tobool670.i, label %if.end674.i, label %if.then671.i

if.then671.i:                                     ; preds = %if.end666.i
  %424 = load i8** %ffmt.addr.i, align 8
  store i8 48, i8* %424, align 1
  %425 = load i8** %ffmt.addr.i, align 8
  %arrayidx673.i = getelementptr inbounds i8* %425, i64 1
  store i8 46, i8* %arrayidx673.i, align 1
  store i32 2, i32* %m.i, align 4
  br label %if.end674.i

if.end674.i:                                      ; preds = %if.then671.i, %if.end666.i
  br label %if.end675.i

if.end675.i:                                      ; preds = %if.end674.i, %if.end651.i
  %426 = load i32* %usee.i, align 4
  %tobool676.i = icmp ne i32 %426, 0
  br i1 %tobool676.i, label %if.then677.i, label %if.end679.i

if.then677.i:                                     ; preds = %if.end675.i
  %427 = load i32* %w.addr.i, align 4
  %inc678.i = add nsw i32 %427, 1
  store i32 %inc678.i, i32* %w.addr.i, align 4
  br label %if.end679.i

if.end679.i:                                      ; preds = %if.then677.i, %if.end675.i
  store i32 0, i32* %kbk.i, align 4
  %428 = load i32* %kbk.i, align 4
  %inc680.i = add nsw i32 %428, 1
  store i32 %inc680.i, i32* %kbk.i, align 4
  %idxprom681.i = sext i32 %428 to i64
  %arrayidx682.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom681.i
  %429 = load i32* %arrayidx682.i, align 4
  store i32 %429, i32* %k.i, align 4
  %430 = load i32* %pose.i, align 4
  store i32 %430, i32* %i.i, align 4
  br label %for.cond683.i

for.cond683.i:                                    ; preds = %if.end698.i, %if.end679.i
  %431 = load i32* %i.i, align 4
  %cmp684.i = icmp sge i32 %431, 0
  br i1 %cmp684.i, label %for.body686.i, label %for.end701.i

for.body686.i:                                    ; preds = %for.cond683.i
  %432 = load i32* %k.i, align 4
  %div687.i = sdiv i32 %432, 10
  store i32 %div687.i, i32* %j.i, align 4
  %433 = load i32* %k.i, align 4
  %434 = load i32* %j.i, align 4
  %mul688.i = mul nsw i32 %434, 10
  %sub689.i = sub nsw i32 %433, %mul688.i
  store i32 %sub689.i, i32* %k.i, align 4
  %435 = load i32* %i.i, align 4
  %436 = load i32* %w.addr.i, align 4
  %cmp690.i = icmp slt i32 %435, %436
  br i1 %cmp690.i, label %if.then692.i, label %if.end698.i

if.then692.i:                                     ; preds = %for.body686.i
  %437 = load i32* %k.i, align 4
  %add693.i = add nsw i32 48, %437
  %conv694.i = trunc i32 %add693.i to i8
  %438 = load i32* %i.i, align 4
  %439 = load i32* %m.i, align 4
  %add695.i = add nsw i32 %438, %439
  %idxprom696.i = sext i32 %add695.i to i64
  %440 = load i8** %ffmt.addr.i, align 8
  %arrayidx697.i = getelementptr inbounds i8* %440, i64 %idxprom696.i
  store i8 %conv694.i, i8* %arrayidx697.i, align 1
  br label %if.end698.i

if.end698.i:                                      ; preds = %if.then692.i, %for.body686.i
  %441 = load i32* %j.i, align 4
  store i32 %441, i32* %k.i, align 4
  %442 = load i32* %i.i, align 4
  %dec700.i = add nsw i32 %442, -1
  store i32 %dec700.i, i32* %i.i, align 4
  br label %for.cond683.i

for.end701.i:                                     ; preds = %for.cond683.i
  %443 = load i32* %pose.i, align 4
  %add702.i = add nsw i32 %443, 1
  store i32 %add702.i, i32* %ii.i, align 4
  %444 = load i32* %kbk.i, align 4
  %445 = load i32* %kmx.i, align 4
  %add703.i = add nsw i32 %445, 1
  %cmp704.i = icmp eq i32 %444, %add703.i
  br i1 %cmp704.i, label %if.then706.i, label %if.end723.i

if.then706.i:                                     ; preds = %for.end701.i
  %446 = load i32* %ii.i, align 4
  %447 = load i32* %m.i, align 4
  %add707.i = add nsw i32 %446, %447
  %idxprom708.i = sext i32 %add707.i to i64
  %448 = load i8** %ffmt.addr.i, align 8
  %arrayidx709.i = getelementptr inbounds i8* %448, i64 %idxprom708.i
  store i8 46, i8* %arrayidx709.i, align 1
  %449 = load i32* %ii.i, align 4
  %450 = load i32* %w.addr.i, align 4
  %cmp710.i = icmp slt i32 %449, %450
  br i1 %cmp710.i, label %if.then712.i, label %if.end714.i

if.then712.i:                                     ; preds = %if.then706.i
  %451 = load i32* %w.addr.i, align 4
  %inc713.i = add nsw i32 %451, 1
  store i32 %inc713.i, i32* %w.addr.i, align 4
  br label %if.end714.i

if.end714.i:                                      ; preds = %if.then712.i, %if.then706.i
  %452 = load i32* %ii.i, align 4
  %453 = load i32* %w.addr.i, align 4
  %cmp715.i = icmp eq i32 %452, %453
  br i1 %cmp715.i, label %land.lhs.true717.i, label %if.end721.i

land.lhs.true717.i:                               ; preds = %if.end714.i
  %454 = load i32* %usee.i, align 4
  %tobool718.i = icmp ne i32 %454, 0
  br i1 %tobool718.i, label %if.end721.i, label %if.then719.i

if.then719.i:                                     ; preds = %land.lhs.true717.i
  %455 = load i32* %w.addr.i, align 4
  %inc720.i = add nsw i32 %455, 1
  store i32 %inc720.i, i32* %w.addr.i, align 4
  br label %if.end721.i

if.end721.i:                                      ; preds = %if.then719.i, %land.lhs.true717.i, %if.end714.i
  %456 = load i32* %ii.i, align 4
  %inc722.i = add nsw i32 %456, 1
  store i32 %inc722.i, i32* %ii.i, align 4
  br label %if.end723.i

if.end723.i:                                      ; preds = %if.end721.i, %for.end701.i
  br label %while.cond724.i

while.cond724.i:                                  ; preds = %if.end772.i, %if.end723.i
  %457 = load i32* %ii.i, align 4
  %458 = load i32* %w.addr.i, align 4
  %cmp725.i = icmp slt i32 %457, %458
  br i1 %cmp725.i, label %while.body727.i, label %while.end773.i

while.body727.i:                                  ; preds = %while.cond724.i
  %459 = load i32* %kbk.i, align 4
  %inc728.i = add nsw i32 %459, 1
  store i32 %inc728.i, i32* %kbk.i, align 4
  %idxprom729.i = sext i32 %459 to i64
  %arrayidx730.i = getelementptr inbounds [104 x i32]* %iextb.i, i32 0, i64 %idxprom729.i
  %460 = load i32* %arrayidx730.i, align 4
  store i32 %460, i32* %k.i, align 4
  %461 = load i32* %ii.i, align 4
  %add731.i = add nsw i32 8, %461
  store i32 %add731.i, i32* %i.i, align 4
  br label %for.cond732.i

for.cond732.i:                                    ; preds = %if.end747.i, %while.body727.i
  %462 = load i32* %i.i, align 4
  %463 = load i32* %ii.i, align 4
  %cmp733.i = icmp sge i32 %462, %463
  br i1 %cmp733.i, label %for.body735.i, label %for.end750.i

for.body735.i:                                    ; preds = %for.cond732.i
  %464 = load i32* %k.i, align 4
  %div736.i = sdiv i32 %464, 10
  store i32 %div736.i, i32* %j.i, align 4
  %465 = load i32* %k.i, align 4
  %466 = load i32* %j.i, align 4
  %mul737.i = mul nsw i32 %466, 10
  %sub738.i = sub nsw i32 %465, %mul737.i
  store i32 %sub738.i, i32* %k.i, align 4
  %467 = load i32* %i.i, align 4
  %468 = load i32* %w.addr.i, align 4
  %cmp739.i = icmp slt i32 %467, %468
  br i1 %cmp739.i, label %if.then741.i, label %if.end747.i

if.then741.i:                                     ; preds = %for.body735.i
  %469 = load i32* %k.i, align 4
  %add742.i = add nsw i32 48, %469
  %conv743.i = trunc i32 %add742.i to i8
  %470 = load i32* %i.i, align 4
  %471 = load i32* %m.i, align 4
  %add744.i = add nsw i32 %470, %471
  %idxprom745.i = sext i32 %add744.i to i64
  %472 = load i8** %ffmt.addr.i, align 8
  %arrayidx746.i = getelementptr inbounds i8* %472, i64 %idxprom745.i
  store i8 %conv743.i, i8* %arrayidx746.i, align 1
  br label %if.end747.i

if.end747.i:                                      ; preds = %if.then741.i, %for.body735.i
  %473 = load i32* %j.i, align 4
  store i32 %473, i32* %k.i, align 4
  %474 = load i32* %i.i, align 4
  %dec749.i = add nsw i32 %474, -1
  store i32 %dec749.i, i32* %i.i, align 4
  br label %for.cond732.i

for.end750.i:                                     ; preds = %for.cond732.i
  %475 = load i32* %ii.i, align 4
  %add751.i = add nsw i32 %475, 9
  store i32 %add751.i, i32* %ii.i, align 4
  %476 = load i32* %kbk.i, align 4
  %477 = load i32* %kmx.i, align 4
  %add752.i = add nsw i32 %477, 1
  %cmp753.i = icmp eq i32 %476, %add752.i
  br i1 %cmp753.i, label %if.then755.i, label %if.end772.i

if.then755.i:                                     ; preds = %for.end750.i
  %478 = load i32* %ii.i, align 4
  %479 = load i32* %m.i, align 4
  %add756.i = add nsw i32 %478, %479
  %idxprom757.i = sext i32 %add756.i to i64
  %480 = load i8** %ffmt.addr.i, align 8
  %arrayidx758.i = getelementptr inbounds i8* %480, i64 %idxprom757.i
  store i8 46, i8* %arrayidx758.i, align 1
  %481 = load i32* %ii.i, align 4
  %482 = load i32* %w.addr.i, align 4
  %cmp759.i = icmp slt i32 %481, %482
  br i1 %cmp759.i, label %if.then761.i, label %if.end763.i

if.then761.i:                                     ; preds = %if.then755.i
  %483 = load i32* %w.addr.i, align 4
  %inc762.i = add nsw i32 %483, 1
  store i32 %inc762.i, i32* %w.addr.i, align 4
  br label %if.end763.i

if.end763.i:                                      ; preds = %if.then761.i, %if.then755.i
  %484 = load i32* %ii.i, align 4
  %485 = load i32* %w.addr.i, align 4
  %cmp764.i = icmp eq i32 %484, %485
  br i1 %cmp764.i, label %land.lhs.true766.i, label %if.end770.i

land.lhs.true766.i:                               ; preds = %if.end763.i
  %486 = load i32* %usee.i, align 4
  %tobool767.i = icmp ne i32 %486, 0
  br i1 %tobool767.i, label %if.end770.i, label %if.then768.i

if.then768.i:                                     ; preds = %land.lhs.true766.i
  %487 = load i32* %w.addr.i, align 4
  %inc769.i = add nsw i32 %487, 1
  store i32 %inc769.i, i32* %w.addr.i, align 4
  br label %if.end770.i

if.end770.i:                                      ; preds = %if.then768.i, %land.lhs.true766.i, %if.end763.i
  %488 = load i32* %ii.i, align 4
  %inc771.i = add nsw i32 %488, 1
  store i32 %inc771.i, i32* %ii.i, align 4
  br label %if.end772.i

if.end772.i:                                      ; preds = %if.end770.i, %for.end750.i
  br label %while.cond724.i

while.end773.i:                                   ; preds = %while.cond724.i
  %489 = load i32* %usee.i, align 4
  %tobool774.i = icmp ne i32 %489, 0
  br i1 %tobool774.i, label %if.then775.i, label %if.else836.i

if.then775.i:                                     ; preds = %while.end773.i
  %490 = load i8** %ffmt.addr.i, align 8
  %arrayidx776.i = getelementptr inbounds i8* %490, i64 1
  %491 = load i8* %arrayidx776.i, align 1
  %492 = load i8** %ffmt.addr.i, align 8
  store i8 %491, i8* %492, align 1
  %493 = load i8** %ffmt.addr.i, align 8
  %arrayidx778.i = getelementptr inbounds i8* %493, i64 1
  store i8 46, i8* %arrayidx778.i, align 1
  %494 = load i32* %w.addr.i, align 4
  %add779.i = add nsw i32 %494, 1
  %idxprom780.i = sext i32 %add779.i to i64
  %495 = load i8** %ffmt.addr.i, align 8
  %arrayidx781.i = getelementptr inbounds i8* %495, i64 %idxprom780.i
  store i8 69, i8* %arrayidx781.i, align 1
  %496 = load i32* %iexp.i, align 4
  %cmp782.i = icmp sge i32 %496, 0
  br i1 %cmp782.i, label %if.then784.i, label %if.else788.i

if.then784.i:                                     ; preds = %if.then775.i
  %497 = load i32* %w.addr.i, align 4
  %add785.i = add nsw i32 %497, 2
  %idxprom786.i = sext i32 %add785.i to i64
  %498 = load i8** %ffmt.addr.i, align 8
  %arrayidx787.i = getelementptr inbounds i8* %498, i64 %idxprom786.i
  store i8 43, i8* %arrayidx787.i, align 1
  br label %if.end793.i

if.else788.i:                                     ; preds = %if.then775.i
  %499 = load i32* %w.addr.i, align 4
  %add789.i = add nsw i32 %499, 2
  %idxprom790.i = sext i32 %add789.i to i64
  %500 = load i8** %ffmt.addr.i, align 8
  %arrayidx791.i = getelementptr inbounds i8* %500, i64 %idxprom790.i
  store i8 45, i8* %arrayidx791.i, align 1
  %501 = load i32* %iexp.i, align 4
  %sub792.i = sub nsw i32 0, %501
  store i32 %sub792.i, i32* %iexp.i, align 4
  br label %if.end793.i

if.end793.i:                                      ; preds = %if.else788.i, %if.then784.i
  %502 = load i32* %ldw.addr.i, align 4
  %and794.i = and i32 %502, 2
  %tobool795.i = icmp ne i32 %and794.i, 0
  br i1 %tobool795.i, label %if.then796.i, label %if.else800.i

if.then796.i:                                     ; preds = %if.end793.i
  %503 = load i32* %w.addr.i, align 4
  %add797.i = add nsw i32 %503, 5
  %idxprom798.i = sext i32 %add797.i to i64
  %504 = load i8** %ffmt.addr.i, align 8
  %arrayidx799.i = getelementptr inbounds i8* %504, i64 %idxprom798.i
  store i8 0, i8* %arrayidx799.i, align 1
  %505 = load i32* %iexp.i, align 4
  store i32 %505, i32* %j.i, align 4
  br label %if.end812.i

if.else800.i:                                     ; preds = %if.end793.i
  %506 = load i32* %iexp.i, align 4
  store i32 %506, i32* %k.i, align 4
  %507 = load i32* %w.addr.i, align 4
  %add801.i = add nsw i32 %507, 6
  %idxprom802.i = sext i32 %add801.i to i64
  %508 = load i8** %ffmt.addr.i, align 8
  %arrayidx803.i = getelementptr inbounds i8* %508, i64 %idxprom802.i
  store i8 0, i8* %arrayidx803.i, align 1
  %509 = load i32* %k.i, align 4
  %div804.i = sdiv i32 %509, 10
  store i32 %div804.i, i32* %j.i, align 4
  %510 = load i32* %k.i, align 4
  %511 = load i32* %j.i, align 4
  %mul805.i = mul nsw i32 %511, 10
  %sub806.i = sub nsw i32 %510, %mul805.i
  store i32 %sub806.i, i32* %k.i, align 4
  %512 = load i32* %k.i, align 4
  %add807.i = add nsw i32 48, %512
  %conv808.i = trunc i32 %add807.i to i8
  %513 = load i32* %w.addr.i, align 4
  %add809.i = add nsw i32 %513, 5
  %idxprom810.i = sext i32 %add809.i to i64
  %514 = load i8** %ffmt.addr.i, align 8
  %arrayidx811.i = getelementptr inbounds i8* %514, i64 %idxprom810.i
  store i8 %conv808.i, i8* %arrayidx811.i, align 1
  br label %if.end812.i

if.end812.i:                                      ; preds = %if.else800.i, %if.then796.i
  %515 = load i32* %j.i, align 4
  %div813.i = sdiv i32 %515, 10
  store i32 %div813.i, i32* %k.i, align 4
  %516 = load i32* %j.i, align 4
  %517 = load i32* %k.i, align 4
  %mul814.i = mul nsw i32 %517, 10
  %sub815.i = sub nsw i32 %516, %mul814.i
  store i32 %sub815.i, i32* %j.i, align 4
  %518 = load i32* %j.i, align 4
  %add816.i = add nsw i32 48, %518
  %conv817.i = trunc i32 %add816.i to i8
  %519 = load i32* %w.addr.i, align 4
  %add818.i = add nsw i32 %519, 4
  %idxprom819.i = sext i32 %add818.i to i64
  %520 = load i8** %ffmt.addr.i, align 8
  %arrayidx820.i = getelementptr inbounds i8* %520, i64 %idxprom819.i
  store i8 %conv817.i, i8* %arrayidx820.i, align 1
  %521 = load i32* %k.i, align 4
  %div821.i = sdiv i32 %521, 10
  store i32 %div821.i, i32* %j.i, align 4
  %522 = load i32* %k.i, align 4
  %523 = load i32* %j.i, align 4
  %mul822.i = mul nsw i32 %523, 10
  %sub823.i = sub nsw i32 %522, %mul822.i
  store i32 %sub823.i, i32* %k.i, align 4
  %524 = load i32* %k.i, align 4
  %add824.i = add nsw i32 48, %524
  %conv825.i = trunc i32 %add824.i to i8
  %525 = load i32* %w.addr.i, align 4
  %add826.i = add nsw i32 %525, 3
  %idxprom827.i = sext i32 %add826.i to i64
  %526 = load i8** %ffmt.addr.i, align 8
  %arrayidx828.i = getelementptr inbounds i8* %526, i64 %idxprom827.i
  store i8 %conv825.i, i8* %arrayidx828.i, align 1
  %527 = load i32* %w.addr.i, align 4
  %add829.i = add nsw i32 %527, 6
  %528 = load i32* %space.i, align 4
  %529 = load i32* %sgn.i, align 4
  %or830.i = or i32 %528, %529
  %add831.i = add nsw i32 %add829.i, %or830.i
  %530 = load i32* %ldw.addr.i, align 4
  %and832.i = and i32 %530, 2
  %cmp833.i = icmp eq i32 %and832.i, 2
  %conv834.i = zext i1 %cmp833.i to i32
  %sub835.i = sub nsw i32 %add831.i, %conv834.i
  store i32 %sub835.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else836.i:                                     ; preds = %while.end773.i
  %531 = load i32* %iexp.i, align 4
  %cmp837.i = icmp slt i32 %531, 0
  br i1 %cmp837.i, label %if.then839.i, label %if.else846.i

if.then839.i:                                     ; preds = %if.else836.i
  %532 = load i32* %w.addr.i, align 4
  %add840.i = add nsw i32 %532, 2
  %idxprom841.i = sext i32 %add840.i to i64
  %533 = load i8** %ffmt.addr.i, align 8
  %arrayidx842.i = getelementptr inbounds i8* %533, i64 %idxprom841.i
  store i8 0, i8* %arrayidx842.i, align 1
  %534 = load i32* %w.addr.i, align 4
  %add843.i = add nsw i32 %534, 2
  %535 = load i32* %space.i, align 4
  %536 = load i32* %sgn.i, align 4
  %or844.i = or i32 %535, %536
  %add845.i = add nsw i32 %add843.i, %or844.i
  store i32 %add845.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

if.else846.i:                                     ; preds = %if.else836.i
  %537 = load i32* %w.addr.i, align 4
  %idxprom847.i = sext i32 %537 to i64
  %538 = load i8** %ffmt.addr.i, align 8
  %arrayidx848.i = getelementptr inbounds i8* %538, i64 %idxprom847.i
  store i8 0, i8* %arrayidx848.i, align 1
  %539 = load i32* %w.addr.i, align 4
  %540 = load i32* %space.i, align 4
  %541 = load i32* %sgn.i, align 4
  %or849.i = or i32 %540, %541
  %add850.i = add nsw i32 %539, %or849.i
  %542 = load i32* %space.i, align 4
  %add851.i = add nsw i32 %add850.i, %542
  store i32 %add851.i, i32* %retval.i
  br label %__pgf90io_sc_fp_ldw.exit

__pgf90io_sc_fp_ldw.exit:                         ; preds = %if.else846.i, %if.then839.i, %if.end812.i, %for.end79.i, %if.end47.i
  %543 = load i32* %retval.i
  store i32 %543, i32* %len, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc30, %__pgf90io_sc_fp_ldw.exit
  %544 = load i32* %len, align 4
  %cmp24 = icmp sle i32 %544, 14
  br i1 %cmp24, label %for.body26, label %for.end32

for.body26:                                       ; preds = %for.cond23
  %545 = load i32* %j, align 4
  %546 = load i32* %len, align 4
  %add27 = add nsw i32 %545, %546
  %idxprom28 = sext i32 %add27 to i64
  %547 = load i8** %p.addr, align 8
  %arrayidx29 = getelementptr inbounds i8* %547, i64 %idxprom28
  store i8 32, i8* %arrayidx29, align 1
  br label %for.inc30

for.inc30:                                        ; preds = %for.body26
  %548 = load i32* %len, align 4
  %inc31 = add nsw i32 %548, 1
  store i32 %inc31, i32* %len, align 4
  br label %for.cond23

for.end32:                                        ; preds = %for.cond23
  %549 = load i32* %j, align 4
  %add33 = add nsw i32 %549, 15
  %conv34 = trunc i32 %add33 to i8
  %550 = load i8** %p.addr, align 8
  %arrayidx35 = getelementptr inbounds i8* %550, i64 0
  store i8 %conv34, i8* %arrayidx35, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_l_ldw(i64 %i, i32 %itype, i8* %p) nounwind alwaysinline {
entry:
  %i.addr = alloca i64, align 8
  %itype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %t = alloca [28 x i8], align 1
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %idx = alloca i32, align 4
  %ineg = alloca i32, align 4
  %lj = alloca i64, align 8
  %lk = alloca i64, align 8
  store i64 %i, i64* %i.addr, align 8
  store i32 %itype, i32* %itype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %itype.addr, align 4
  %cmp = icmp eq i32 %2, 20
  %cond = select i1 %cmp, i32 3, i32 25
  store i32 %cond, i32* %k, align 4
  %3 = load i32* %j, align 4
  %4 = load i32* %k, align 4
  %add = add nsw i32 %3, %4
  %cmp2 = icmp sge i32 %add, 83
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %5, i64 84
  %6 = load i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  %tobool = icmp ne i32 %conv5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx6 = getelementptr inbounds i8* %8, i64 %idxprom
  store i8 10, i8* %arrayidx6, align 1
  %9 = load i32* %j, align 4
  %add7 = add nsw i32 %9, 1
  %idxprom8 = sext i32 %add7 to i64
  %10 = load i8** %p.addr, align 8
  %arrayidx9 = getelementptr inbounds i8* %10, i64 %idxprom8
  store i8 0, i8* %arrayidx9, align 1
  %11 = load i8** %p.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %11, i64 1
  call  void @__pgi_print_string(i8* %arrayidx10)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32* %k, align 4
  %cmp11 = icmp slt i32 %12, 83
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32* %k, align 4
  %idxprom13 = sext i32 %13 to i64
  %14 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %14, i64 %idxprom13
  store i8 32, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %16 = load i32* %j, align 4
  %conv15 = trunc i32 %16 to i8
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 0
  store i8 %conv15, i8* %arrayidx16, align 1
  %18 = load i8** %p.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %18, i64 83
  store i8 0, i8* %arrayidx17, align 1
  %19 = load i8** %p.addr, align 8
  %arrayidx18 = getelementptr inbounds i8* %19, i64 84
  store i8 0, i8* %arrayidx18, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %20 = load i32* %itype.addr, align 4
  %cmp19 = icmp eq i32 %20, 20
  br i1 %cmp19, label %if.then21, label %if.else37

if.then21:                                        ; preds = %if.end
  %21 = load i32* %j, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %j, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i8** %p.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %22, i64 %idxprom23
  store i8 32, i8* %arrayidx24, align 1
  %23 = load i32* %j, align 4
  %inc25 = add nsw i32 %23, 1
  store i32 %inc25, i32* %j, align 4
  %idxprom26 = sext i32 %23 to i64
  %24 = load i8** %p.addr, align 8
  %arrayidx27 = getelementptr inbounds i8* %24, i64 %idxprom26
  store i8 32, i8* %arrayidx27, align 1
  %25 = load i64* %i.addr, align 8
  %tobool28 = icmp ne i64 %25, 0
  br i1 %tobool28, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.then21
  %26 = load i32* %j, align 4
  %inc30 = add nsw i32 %26, 1
  store i32 %inc30, i32* %j, align 4
  %idxprom31 = sext i32 %26 to i64
  %27 = load i8** %p.addr, align 8
  %arrayidx32 = getelementptr inbounds i8* %27, i64 %idxprom31
  store i8 84, i8* %arrayidx32, align 1
  br label %if.end36

if.else:                                          ; preds = %if.then21
  %28 = load i32* %j, align 4
  %inc33 = add nsw i32 %28, 1
  store i32 %inc33, i32* %j, align 4
  %idxprom34 = sext i32 %28 to i64
  %29 = load i8** %p.addr, align 8
  %arrayidx35 = getelementptr inbounds i8* %29, i64 %idxprom34
  store i8 70, i8* %arrayidx35, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then29
  br label %if.end168

if.else37:                                        ; preds = %if.end
  %30 = load i64* %i.addr, align 8
  %cmp38 = icmp eq i64 %30, -9223372036854775808
  br i1 %cmp38, label %if.then40, label %if.else116

if.then40:                                        ; preds = %if.else37
  %31 = load i32* %j, align 4
  %inc41 = add nsw i32 %31, 1
  store i32 %inc41, i32* %j, align 4
  %idxprom42 = sext i32 %31 to i64
  %32 = load i8** %p.addr, align 8
  %arrayidx43 = getelementptr inbounds i8* %32, i64 %idxprom42
  store i8 32, i8* %arrayidx43, align 1
  %33 = load i32* %j, align 4
  %inc44 = add nsw i32 %33, 1
  store i32 %inc44, i32* %j, align 4
  %idxprom45 = sext i32 %33 to i64
  %34 = load i8** %p.addr, align 8
  %arrayidx46 = getelementptr inbounds i8* %34, i64 %idxprom45
  store i8 32, i8* %arrayidx46, align 1
  %35 = load i32* %j, align 4
  %inc47 = add nsw i32 %35, 1
  store i32 %inc47, i32* %j, align 4
  %idxprom48 = sext i32 %35 to i64
  %36 = load i8** %p.addr, align 8
  %arrayidx49 = getelementptr inbounds i8* %36, i64 %idxprom48
  store i8 32, i8* %arrayidx49, align 1
  %37 = load i32* %j, align 4
  %inc50 = add nsw i32 %37, 1
  store i32 %inc50, i32* %j, align 4
  %idxprom51 = sext i32 %37 to i64
  %38 = load i8** %p.addr, align 8
  %arrayidx52 = getelementptr inbounds i8* %38, i64 %idxprom51
  store i8 32, i8* %arrayidx52, align 1
  %39 = load i32* %j, align 4
  %inc53 = add nsw i32 %39, 1
  store i32 %inc53, i32* %j, align 4
  %idxprom54 = sext i32 %39 to i64
  %40 = load i8** %p.addr, align 8
  %arrayidx55 = getelementptr inbounds i8* %40, i64 %idxprom54
  store i8 45, i8* %arrayidx55, align 1
  %41 = load i32* %j, align 4
  %inc56 = add nsw i32 %41, 1
  store i32 %inc56, i32* %j, align 4
  %idxprom57 = sext i32 %41 to i64
  %42 = load i8** %p.addr, align 8
  %arrayidx58 = getelementptr inbounds i8* %42, i64 %idxprom57
  store i8 57, i8* %arrayidx58, align 1
  %43 = load i32* %j, align 4
  %inc59 = add nsw i32 %43, 1
  store i32 %inc59, i32* %j, align 4
  %idxprom60 = sext i32 %43 to i64
  %44 = load i8** %p.addr, align 8
  %arrayidx61 = getelementptr inbounds i8* %44, i64 %idxprom60
  store i8 50, i8* %arrayidx61, align 1
  %45 = load i32* %j, align 4
  %inc62 = add nsw i32 %45, 1
  store i32 %inc62, i32* %j, align 4
  %idxprom63 = sext i32 %45 to i64
  %46 = load i8** %p.addr, align 8
  %arrayidx64 = getelementptr inbounds i8* %46, i64 %idxprom63
  store i8 50, i8* %arrayidx64, align 1
  %47 = load i32* %j, align 4
  %inc65 = add nsw i32 %47, 1
  store i32 %inc65, i32* %j, align 4
  %idxprom66 = sext i32 %47 to i64
  %48 = load i8** %p.addr, align 8
  %arrayidx67 = getelementptr inbounds i8* %48, i64 %idxprom66
  store i8 51, i8* %arrayidx67, align 1
  %49 = load i32* %j, align 4
  %inc68 = add nsw i32 %49, 1
  store i32 %inc68, i32* %j, align 4
  %idxprom69 = sext i32 %49 to i64
  %50 = load i8** %p.addr, align 8
  %arrayidx70 = getelementptr inbounds i8* %50, i64 %idxprom69
  store i8 51, i8* %arrayidx70, align 1
  %51 = load i32* %j, align 4
  %inc71 = add nsw i32 %51, 1
  store i32 %inc71, i32* %j, align 4
  %idxprom72 = sext i32 %51 to i64
  %52 = load i8** %p.addr, align 8
  %arrayidx73 = getelementptr inbounds i8* %52, i64 %idxprom72
  store i8 55, i8* %arrayidx73, align 1
  %53 = load i32* %j, align 4
  %inc74 = add nsw i32 %53, 1
  store i32 %inc74, i32* %j, align 4
  %idxprom75 = sext i32 %53 to i64
  %54 = load i8** %p.addr, align 8
  %arrayidx76 = getelementptr inbounds i8* %54, i64 %idxprom75
  store i8 50, i8* %arrayidx76, align 1
  %55 = load i32* %j, align 4
  %inc77 = add nsw i32 %55, 1
  store i32 %inc77, i32* %j, align 4
  %idxprom78 = sext i32 %55 to i64
  %56 = load i8** %p.addr, align 8
  %arrayidx79 = getelementptr inbounds i8* %56, i64 %idxprom78
  store i8 48, i8* %arrayidx79, align 1
  %57 = load i32* %j, align 4
  %inc80 = add nsw i32 %57, 1
  store i32 %inc80, i32* %j, align 4
  %idxprom81 = sext i32 %57 to i64
  %58 = load i8** %p.addr, align 8
  %arrayidx82 = getelementptr inbounds i8* %58, i64 %idxprom81
  store i8 51, i8* %arrayidx82, align 1
  %59 = load i32* %j, align 4
  %inc83 = add nsw i32 %59, 1
  store i32 %inc83, i32* %j, align 4
  %idxprom84 = sext i32 %59 to i64
  %60 = load i8** %p.addr, align 8
  %arrayidx85 = getelementptr inbounds i8* %60, i64 %idxprom84
  store i8 54, i8* %arrayidx85, align 1
  %61 = load i32* %j, align 4
  %inc86 = add nsw i32 %61, 1
  store i32 %inc86, i32* %j, align 4
  %idxprom87 = sext i32 %61 to i64
  %62 = load i8** %p.addr, align 8
  %arrayidx88 = getelementptr inbounds i8* %62, i64 %idxprom87
  store i8 56, i8* %arrayidx88, align 1
  %63 = load i32* %j, align 4
  %inc89 = add nsw i32 %63, 1
  store i32 %inc89, i32* %j, align 4
  %idxprom90 = sext i32 %63 to i64
  %64 = load i8** %p.addr, align 8
  %arrayidx91 = getelementptr inbounds i8* %64, i64 %idxprom90
  store i8 53, i8* %arrayidx91, align 1
  %65 = load i32* %j, align 4
  %inc92 = add nsw i32 %65, 1
  store i32 %inc92, i32* %j, align 4
  %idxprom93 = sext i32 %65 to i64
  %66 = load i8** %p.addr, align 8
  %arrayidx94 = getelementptr inbounds i8* %66, i64 %idxprom93
  store i8 52, i8* %arrayidx94, align 1
  %67 = load i32* %j, align 4
  %inc95 = add nsw i32 %67, 1
  store i32 %inc95, i32* %j, align 4
  %idxprom96 = sext i32 %67 to i64
  %68 = load i8** %p.addr, align 8
  %arrayidx97 = getelementptr inbounds i8* %68, i64 %idxprom96
  store i8 55, i8* %arrayidx97, align 1
  %69 = load i32* %j, align 4
  %inc98 = add nsw i32 %69, 1
  store i32 %inc98, i32* %j, align 4
  %idxprom99 = sext i32 %69 to i64
  %70 = load i8** %p.addr, align 8
  %arrayidx100 = getelementptr inbounds i8* %70, i64 %idxprom99
  store i8 55, i8* %arrayidx100, align 1
  %71 = load i32* %j, align 4
  %inc101 = add nsw i32 %71, 1
  store i32 %inc101, i32* %j, align 4
  %idxprom102 = sext i32 %71 to i64
  %72 = load i8** %p.addr, align 8
  %arrayidx103 = getelementptr inbounds i8* %72, i64 %idxprom102
  store i8 53, i8* %arrayidx103, align 1
  %73 = load i32* %j, align 4
  %inc104 = add nsw i32 %73, 1
  store i32 %inc104, i32* %j, align 4
  %idxprom105 = sext i32 %73 to i64
  %74 = load i8** %p.addr, align 8
  %arrayidx106 = getelementptr inbounds i8* %74, i64 %idxprom105
  store i8 56, i8* %arrayidx106, align 1
  %75 = load i32* %j, align 4
  %inc107 = add nsw i32 %75, 1
  store i32 %inc107, i32* %j, align 4
  %idxprom108 = sext i32 %75 to i64
  %76 = load i8** %p.addr, align 8
  %arrayidx109 = getelementptr inbounds i8* %76, i64 %idxprom108
  store i8 48, i8* %arrayidx109, align 1
  %77 = load i32* %j, align 4
  %inc110 = add nsw i32 %77, 1
  store i32 %inc110, i32* %j, align 4
  %idxprom111 = sext i32 %77 to i64
  %78 = load i8** %p.addr, align 8
  %arrayidx112 = getelementptr inbounds i8* %78, i64 %idxprom111
  store i8 56, i8* %arrayidx112, align 1
  %79 = load i32* %j, align 4
  %inc113 = add nsw i32 %79, 1
  store i32 %inc113, i32* %j, align 4
  %idxprom114 = sext i32 %79 to i64
  %80 = load i8** %p.addr, align 8
  %arrayidx115 = getelementptr inbounds i8* %80, i64 %idxprom114
  store i8 32, i8* %arrayidx115, align 1
  br label %if.end167

if.else116:                                       ; preds = %if.else37
  %81 = load i64* %i.addr, align 8
  %cmp117 = icmp slt i64 %81, 0
  br i1 %cmp117, label %if.then119, label %if.else120

if.then119:                                       ; preds = %if.else116
  %82 = load i64* %i.addr, align 8
  %sub = sub nsw i64 0, %82
  store i64 %sub, i64* %i.addr, align 8
  store i32 1, i32* %ineg, align 4
  br label %if.end121

if.else120:                                       ; preds = %if.else116
  store i32 0, i32* %ineg, align 4
  br label %if.end121

if.end121:                                        ; preds = %if.else120, %if.then119
  store i32 27, i32* %idx, align 4
  %83 = load i32* %idx, align 4
  %dec = add nsw i32 %83, -1
  store i32 %dec, i32* %idx, align 4
  %idxprom122 = sext i32 %83 to i64
  %arrayidx123 = getelementptr inbounds [28 x i8]* %t, i32 0, i64 %idxprom122
  store i8 32, i8* %arrayidx123, align 1
  %84 = load i64* %i.addr, align 8
  %cmp124 = icmp eq i64 %84, 0
  br i1 %cmp124, label %if.then126, label %if.else130

if.then126:                                       ; preds = %if.end121
  %85 = load i32* %idx, align 4
  %dec127 = add nsw i32 %85, -1
  store i32 %dec127, i32* %idx, align 4
  %idxprom128 = sext i32 %85 to i64
  %arrayidx129 = getelementptr inbounds [28 x i8]* %t, i32 0, i64 %idxprom128
  store i8 48, i8* %arrayidx129, align 1
  br label %if.end139

if.else130:                                       ; preds = %if.end121
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else130
  %86 = load i64* %i.addr, align 8
  %cmp131 = icmp sgt i64 %86, 0
  br i1 %cmp131, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %87 = load i64* %i.addr, align 8
  %div = sdiv i64 %87, 10
  store i64 %div, i64* %lj, align 8
  %88 = load i64* %i.addr, align 8
  %89 = load i64* %lj, align 8
  %mul = mul nsw i64 %89, 10
  %sub133 = sub nsw i64 %88, %mul
  store i64 %sub133, i64* %lk, align 8
  %90 = load i64* %lk, align 8
  %add134 = add nsw i64 48, %90
  %conv135 = trunc i64 %add134 to i8
  %91 = load i32* %idx, align 4
  %dec136 = add nsw i32 %91, -1
  store i32 %dec136, i32* %idx, align 4
  %idxprom137 = sext i32 %91 to i64
  %arrayidx138 = getelementptr inbounds [28 x i8]* %t, i32 0, i64 %idxprom137
  store i8 %conv135, i8* %arrayidx138, align 1
  %92 = load i64* %lj, align 8
  store i64 %92, i64* %i.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end139

if.end139:                                        ; preds = %while.end, %if.then126
  %93 = load i32* %ineg, align 4
  %tobool140 = icmp ne i32 %93, 0
  br i1 %tobool140, label %if.then141, label %if.end145

if.then141:                                       ; preds = %if.end139
  %94 = load i32* %idx, align 4
  %dec142 = add nsw i32 %94, -1
  store i32 %dec142, i32* %idx, align 4
  %idxprom143 = sext i32 %94 to i64
  %arrayidx144 = getelementptr inbounds [28 x i8]* %t, i32 0, i64 %idxprom143
  store i8 45, i8* %arrayidx144, align 1
  br label %if.end145

if.end145:                                        ; preds = %if.then141, %if.end139
  br label %while.cond146

while.cond146:                                    ; preds = %while.body149, %if.end145
  %95 = load i32* %idx, align 4
  %cmp147 = icmp sgt i32 %95, 0
  br i1 %cmp147, label %while.body149, label %while.end153

while.body149:                                    ; preds = %while.cond146
  %96 = load i32* %idx, align 4
  %dec150 = add nsw i32 %96, -1
  store i32 %dec150, i32* %idx, align 4
  %idxprom151 = sext i32 %96 to i64
  %arrayidx152 = getelementptr inbounds [28 x i8]* %t, i32 0, i64 %idxprom151
  store i8 32, i8* %arrayidx152, align 1
  br label %while.cond146

while.end153:                                     ; preds = %while.cond146
  %97 = load i8** %p.addr, align 8
  %arrayidx154 = getelementptr inbounds i8* %97, i64 0
  %98 = load i8* %arrayidx154, align 1
  %conv155 = sext i8 %98 to i32
  store i32 %conv155, i32* %j, align 4
  store i64 3, i64* %i.addr, align 8
  br label %for.cond156

for.cond156:                                      ; preds = %for.inc164, %while.end153
  %99 = load i64* %i.addr, align 8
  %cmp157 = icmp sle i64 %99, 27
  br i1 %cmp157, label %for.body159, label %for.end166

for.body159:                                      ; preds = %for.cond156
  %100 = load i64* %i.addr, align 8
  %arrayidx160 = getelementptr inbounds [28 x i8]* %t, i32 0, i64 %100
  %101 = load i8* %arrayidx160, align 1
  %102 = load i32* %j, align 4
  %inc161 = add nsw i32 %102, 1
  store i32 %inc161, i32* %j, align 4
  %idxprom162 = sext i32 %102 to i64
  %103 = load i8** %p.addr, align 8
  %arrayidx163 = getelementptr inbounds i8* %103, i64 %idxprom162
  store i8 %101, i8* %arrayidx163, align 1
  br label %for.inc164

for.inc164:                                       ; preds = %for.body159
  %104 = load i64* %i.addr, align 8
  %inc165 = add nsw i64 %104, 1
  store i64 %inc165, i64* %i.addr, align 8
  br label %for.cond156

for.end166:                                       ; preds = %for.cond156
  br label %if.end167

if.end167:                                        ; preds = %for.end166, %if.then40
  br label %if.end168

if.end168:                                        ; preds = %if.end167, %if.end36
  %105 = load i32* %j, align 4
  %conv169 = trunc i32 %105 to i8
  %106 = load i8** %p.addr, align 8
  %arrayidx170 = getelementptr inbounds i8* %106, i64 0
  store i8 %conv169, i8* %arrayidx170, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_i_ldw(i32 %i, i32 %itype, i8* %p) nounwind alwaysinline {
entry:
  %i.addr = alloca i32, align 4
  %itype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %t = alloca [16 x i8], align 1
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %idx = alloca i32, align 4
  %ineg = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %itype, i32* %itype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %itype.addr, align 4
  %cmp = icmp eq i32 %2, 19
  %cond = select i1 %cmp, i32 3, i32 14
  store i32 %cond, i32* %k, align 4
  %3 = load i32* %j, align 4
  %4 = load i32* %k, align 4
  %add = add nsw i32 %3, %4
  %cmp2 = icmp sge i32 %add, 83
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %5, i64 84
  %6 = load i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  %tobool = icmp ne i32 %conv5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx6 = getelementptr inbounds i8* %8, i64 %idxprom
  store i8 10, i8* %arrayidx6, align 1
  %9 = load i32* %j, align 4
  %add7 = add nsw i32 %9, 1
  %idxprom8 = sext i32 %add7 to i64
  %10 = load i8** %p.addr, align 8
  %arrayidx9 = getelementptr inbounds i8* %10, i64 %idxprom8
  store i8 0, i8* %arrayidx9, align 1
  %11 = load i8** %p.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %11, i64 1
  call  void @__pgi_print_string(i8* %arrayidx10)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32* %k, align 4
  %cmp11 = icmp slt i32 %12, 83
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32* %k, align 4
  %idxprom13 = sext i32 %13 to i64
  %14 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %14, i64 %idxprom13
  store i8 32, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %16 = load i32* %j, align 4
  %conv15 = trunc i32 %16 to i8
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 0
  store i8 %conv15, i8* %arrayidx16, align 1
  %18 = load i8** %p.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %18, i64 83
  store i8 0, i8* %arrayidx17, align 1
  %19 = load i8** %p.addr, align 8
  %arrayidx18 = getelementptr inbounds i8* %19, i64 84
  store i8 0, i8* %arrayidx18, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %20 = load i32* %itype.addr, align 4
  %cmp19 = icmp eq i32 %20, 19
  br i1 %cmp19, label %if.then21, label %if.else37

if.then21:                                        ; preds = %if.end
  %21 = load i32* %j, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %j, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i8** %p.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %22, i64 %idxprom23
  store i8 32, i8* %arrayidx24, align 1
  %23 = load i32* %i.addr, align 4
  %tobool25 = icmp ne i32 %23, 0
  br i1 %tobool25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then21
  %24 = load i32* %j, align 4
  %inc27 = add nsw i32 %24, 1
  store i32 %inc27, i32* %j, align 4
  %idxprom28 = sext i32 %24 to i64
  %25 = load i8** %p.addr, align 8
  %arrayidx29 = getelementptr inbounds i8* %25, i64 %idxprom28
  store i8 84, i8* %arrayidx29, align 1
  br label %if.end33

if.else:                                          ; preds = %if.then21
  %26 = load i32* %j, align 4
  %inc30 = add nsw i32 %26, 1
  store i32 %inc30, i32* %j, align 4
  %idxprom31 = sext i32 %26 to i64
  %27 = load i8** %p.addr, align 8
  %arrayidx32 = getelementptr inbounds i8* %27, i64 %idxprom31
  store i8 70, i8* %arrayidx32, align 1
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then26
  %28 = load i32* %j, align 4
  %inc34 = add nsw i32 %28, 1
  store i32 %inc34, i32* %j, align 4
  %idxprom35 = sext i32 %28 to i64
  %29 = load i8** %p.addr, align 8
  %arrayidx36 = getelementptr inbounds i8* %29, i64 %idxprom35
  store i8 32, i8* %arrayidx36, align 1
  br label %if.end133

if.else37:                                        ; preds = %if.end
  %30 = load i32* %i.addr, align 4
  %cmp38 = icmp eq i32 %30, -2147483648
  br i1 %cmp38, label %if.then40, label %if.else80

if.then40:                                        ; preds = %if.else37
  %31 = load i32* %j, align 4
  %inc41 = add nsw i32 %31, 1
  store i32 %inc41, i32* %j, align 4
  %idxprom42 = sext i32 %31 to i64
  %32 = load i8** %p.addr, align 8
  %arrayidx43 = getelementptr inbounds i8* %32, i64 %idxprom42
  store i8 32, i8* %arrayidx43, align 1
  %33 = load i32* %j, align 4
  %inc44 = add nsw i32 %33, 1
  store i32 %inc44, i32* %j, align 4
  %idxprom45 = sext i32 %33 to i64
  %34 = load i8** %p.addr, align 8
  %arrayidx46 = getelementptr inbounds i8* %34, i64 %idxprom45
  store i8 45, i8* %arrayidx46, align 1
  %35 = load i32* %j, align 4
  %inc47 = add nsw i32 %35, 1
  store i32 %inc47, i32* %j, align 4
  %idxprom48 = sext i32 %35 to i64
  %36 = load i8** %p.addr, align 8
  %arrayidx49 = getelementptr inbounds i8* %36, i64 %idxprom48
  store i8 50, i8* %arrayidx49, align 1
  %37 = load i32* %j, align 4
  %inc50 = add nsw i32 %37, 1
  store i32 %inc50, i32* %j, align 4
  %idxprom51 = sext i32 %37 to i64
  %38 = load i8** %p.addr, align 8
  %arrayidx52 = getelementptr inbounds i8* %38, i64 %idxprom51
  store i8 49, i8* %arrayidx52, align 1
  %39 = load i32* %j, align 4
  %inc53 = add nsw i32 %39, 1
  store i32 %inc53, i32* %j, align 4
  %idxprom54 = sext i32 %39 to i64
  %40 = load i8** %p.addr, align 8
  %arrayidx55 = getelementptr inbounds i8* %40, i64 %idxprom54
  store i8 52, i8* %arrayidx55, align 1
  %41 = load i32* %j, align 4
  %inc56 = add nsw i32 %41, 1
  store i32 %inc56, i32* %j, align 4
  %idxprom57 = sext i32 %41 to i64
  %42 = load i8** %p.addr, align 8
  %arrayidx58 = getelementptr inbounds i8* %42, i64 %idxprom57
  store i8 55, i8* %arrayidx58, align 1
  %43 = load i32* %j, align 4
  %inc59 = add nsw i32 %43, 1
  store i32 %inc59, i32* %j, align 4
  %idxprom60 = sext i32 %43 to i64
  %44 = load i8** %p.addr, align 8
  %arrayidx61 = getelementptr inbounds i8* %44, i64 %idxprom60
  store i8 52, i8* %arrayidx61, align 1
  %45 = load i32* %j, align 4
  %inc62 = add nsw i32 %45, 1
  store i32 %inc62, i32* %j, align 4
  %idxprom63 = sext i32 %45 to i64
  %46 = load i8** %p.addr, align 8
  %arrayidx64 = getelementptr inbounds i8* %46, i64 %idxprom63
  store i8 56, i8* %arrayidx64, align 1
  %47 = load i32* %j, align 4
  %inc65 = add nsw i32 %47, 1
  store i32 %inc65, i32* %j, align 4
  %idxprom66 = sext i32 %47 to i64
  %48 = load i8** %p.addr, align 8
  %arrayidx67 = getelementptr inbounds i8* %48, i64 %idxprom66
  store i8 51, i8* %arrayidx67, align 1
  %49 = load i32* %j, align 4
  %inc68 = add nsw i32 %49, 1
  store i32 %inc68, i32* %j, align 4
  %idxprom69 = sext i32 %49 to i64
  %50 = load i8** %p.addr, align 8
  %arrayidx70 = getelementptr inbounds i8* %50, i64 %idxprom69
  store i8 54, i8* %arrayidx70, align 1
  %51 = load i32* %j, align 4
  %inc71 = add nsw i32 %51, 1
  store i32 %inc71, i32* %j, align 4
  %idxprom72 = sext i32 %51 to i64
  %52 = load i8** %p.addr, align 8
  %arrayidx73 = getelementptr inbounds i8* %52, i64 %idxprom72
  store i8 52, i8* %arrayidx73, align 1
  %53 = load i32* %j, align 4
  %inc74 = add nsw i32 %53, 1
  store i32 %inc74, i32* %j, align 4
  %idxprom75 = sext i32 %53 to i64
  %54 = load i8** %p.addr, align 8
  %arrayidx76 = getelementptr inbounds i8* %54, i64 %idxprom75
  store i8 56, i8* %arrayidx76, align 1
  %55 = load i32* %j, align 4
  %inc77 = add nsw i32 %55, 1
  store i32 %inc77, i32* %j, align 4
  %idxprom78 = sext i32 %55 to i64
  %56 = load i8** %p.addr, align 8
  %arrayidx79 = getelementptr inbounds i8* %56, i64 %idxprom78
  store i8 32, i8* %arrayidx79, align 1
  br label %if.end132

if.else80:                                        ; preds = %if.else37
  %57 = load i32* %i.addr, align 4
  %cmp81 = icmp slt i32 %57, 0
  br i1 %cmp81, label %if.then83, label %if.else84

if.then83:                                        ; preds = %if.else80
  %58 = load i32* %i.addr, align 4
  %sub = sub nsw i32 0, %58
  store i32 %sub, i32* %i.addr, align 4
  store i32 1, i32* %ineg, align 4
  br label %if.end85

if.else84:                                        ; preds = %if.else80
  store i32 0, i32* %ineg, align 4
  br label %if.end85

if.end85:                                         ; preds = %if.else84, %if.then83
  store i32 15, i32* %idx, align 4
  %59 = load i32* %idx, align 4
  %dec = add nsw i32 %59, -1
  store i32 %dec, i32* %idx, align 4
  %idxprom86 = sext i32 %59 to i64
  %arrayidx87 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom86
  store i8 32, i8* %arrayidx87, align 1
  %60 = load i32* %i.addr, align 4
  %cmp88 = icmp eq i32 %60, 0
  br i1 %cmp88, label %if.then90, label %if.else94

if.then90:                                        ; preds = %if.end85
  %61 = load i32* %idx, align 4
  %dec91 = add nsw i32 %61, -1
  store i32 %dec91, i32* %idx, align 4
  %idxprom92 = sext i32 %61 to i64
  %arrayidx93 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom92
  store i8 48, i8* %arrayidx93, align 1
  br label %if.end103

if.else94:                                        ; preds = %if.end85
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else94
  %62 = load i32* %i.addr, align 4
  %cmp95 = icmp sgt i32 %62, 0
  br i1 %cmp95, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %63 = load i32* %i.addr, align 4
  %div = sdiv i32 %63, 10
  store i32 %div, i32* %j, align 4
  %64 = load i32* %i.addr, align 4
  %65 = load i32* %j, align 4
  %mul = mul nsw i32 %65, 10
  %sub97 = sub nsw i32 %64, %mul
  store i32 %sub97, i32* %k, align 4
  %66 = load i32* %k, align 4
  %add98 = add nsw i32 48, %66
  %conv99 = trunc i32 %add98 to i8
  %67 = load i32* %idx, align 4
  %dec100 = add nsw i32 %67, -1
  store i32 %dec100, i32* %idx, align 4
  %idxprom101 = sext i32 %67 to i64
  %arrayidx102 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom101
  store i8 %conv99, i8* %arrayidx102, align 1
  %68 = load i32* %j, align 4
  store i32 %68, i32* %i.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end103

if.end103:                                        ; preds = %while.end, %if.then90
  %69 = load i32* %ineg, align 4
  %tobool104 = icmp ne i32 %69, 0
  br i1 %tobool104, label %if.then105, label %if.end109

if.then105:                                       ; preds = %if.end103
  %70 = load i32* %idx, align 4
  %dec106 = add nsw i32 %70, -1
  store i32 %dec106, i32* %idx, align 4
  %idxprom107 = sext i32 %70 to i64
  %arrayidx108 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom107
  store i8 45, i8* %arrayidx108, align 1
  br label %if.end109

if.end109:                                        ; preds = %if.then105, %if.end103
  br label %while.cond110

while.cond110:                                    ; preds = %while.body113, %if.end109
  %71 = load i32* %idx, align 4
  %cmp111 = icmp sgt i32 %71, 0
  br i1 %cmp111, label %while.body113, label %while.end117

while.body113:                                    ; preds = %while.cond110
  %72 = load i32* %idx, align 4
  %dec114 = add nsw i32 %72, -1
  store i32 %dec114, i32* %idx, align 4
  %idxprom115 = sext i32 %72 to i64
  %arrayidx116 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom115
  store i8 32, i8* %arrayidx116, align 1
  br label %while.cond110

while.end117:                                     ; preds = %while.cond110
  %73 = load i8** %p.addr, align 8
  %arrayidx118 = getelementptr inbounds i8* %73, i64 0
  %74 = load i8* %arrayidx118, align 1
  %conv119 = sext i8 %74 to i32
  store i32 %conv119, i32* %j, align 4
  store i32 3, i32* %i.addr, align 4
  br label %for.cond120

for.cond120:                                      ; preds = %for.inc129, %while.end117
  %75 = load i32* %i.addr, align 4
  %cmp121 = icmp sle i32 %75, 15
  br i1 %cmp121, label %for.body123, label %for.end131

for.body123:                                      ; preds = %for.cond120
  %76 = load i32* %i.addr, align 4
  %idxprom124 = sext i32 %76 to i64
  %arrayidx125 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom124
  %77 = load i8* %arrayidx125, align 1
  %78 = load i32* %j, align 4
  %inc126 = add nsw i32 %78, 1
  store i32 %inc126, i32* %j, align 4
  %idxprom127 = sext i32 %78 to i64
  %79 = load i8** %p.addr, align 8
  %arrayidx128 = getelementptr inbounds i8* %79, i64 %idxprom127
  store i8 %77, i8* %arrayidx128, align 1
  br label %for.inc129

for.inc129:                                       ; preds = %for.body123
  %80 = load i32* %i.addr, align 4
  %inc130 = add nsw i32 %80, 1
  store i32 %inc130, i32* %i.addr, align 4
  br label %for.cond120

for.end131:                                       ; preds = %for.cond120
  br label %if.end132

if.end132:                                        ; preds = %for.end131, %if.then40
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.end33
  %81 = load i32* %j, align 4
  %conv134 = trunc i32 %81 to i8
  %82 = load i8** %p.addr, align 8
  %arrayidx135 = getelementptr inbounds i8* %82, i64 0
  store i8 %conv134, i8* %arrayidx135, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_f_fmt_write(float %x, i32 %itype, i8* %p) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  %itype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  store float %x, float* %x.addr, align 4
  store i32 %itype, i32* %itype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  ret i32 0
}

define  i32 @__pgf90io_sc_i_fmt_write(i32 %i, i32 %itype, i8* %p) nounwind alwaysinline {
entry:
  %i.addr = alloca i32, align 4
  %itype.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %t = alloca [16 x i8], align 1
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %idx = alloca i32, align 4
  %ineg = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %itype, i32* %itype.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %j, align 4
  %2 = load i32* %itype.addr, align 4
  %cmp = icmp eq i32 %2, 19
  %cond = select i1 %cmp, i32 3, i32 14
  store i32 %cond, i32* %k, align 4
  %3 = load i32* %j, align 4
  %4 = load i32* %k, align 4
  %add = add nsw i32 %3, %4
  %cmp2 = icmp sge i32 %add, 83
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i8** %p.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %5, i64 84
  %6 = load i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  %tobool = icmp ne i32 %conv5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx6 = getelementptr inbounds i8* %8, i64 %idxprom
  store i8 10, i8* %arrayidx6, align 1
  %9 = load i32* %j, align 4
  %add7 = add nsw i32 %9, 1
  %idxprom8 = sext i32 %add7 to i64
  %10 = load i8** %p.addr, align 8
  %arrayidx9 = getelementptr inbounds i8* %10, i64 %idxprom8
  store i8 0, i8* %arrayidx9, align 1
  %11 = load i8** %p.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %11, i64 1
  call  void @__pgi_print_string(i8* %arrayidx10)
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32* %k, align 4
  %cmp11 = icmp slt i32 %12, 83
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32* %k, align 4
  %idxprom13 = sext i32 %13 to i64
  %14 = load i8** %p.addr, align 8
  %arrayidx14 = getelementptr inbounds i8* %14, i64 %idxprom13
  store i8 32, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %j, align 4
  %16 = load i32* %j, align 4
  %conv15 = trunc i32 %16 to i8
  %17 = load i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8* %17, i64 0
  store i8 %conv15, i8* %arrayidx16, align 1
  %18 = load i8** %p.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %18, i64 83
  store i8 0, i8* %arrayidx17, align 1
  %19 = load i8** %p.addr, align 8
  %arrayidx18 = getelementptr inbounds i8* %19, i64 84
  store i8 0, i8* %arrayidx18, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %20 = load i32* %itype.addr, align 4
  %cmp19 = icmp eq i32 %20, 19
  br i1 %cmp19, label %if.then21, label %if.else37

if.then21:                                        ; preds = %if.end
  %21 = load i32* %j, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %j, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i8** %p.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %22, i64 %idxprom23
  store i8 32, i8* %arrayidx24, align 1
  %23 = load i32* %i.addr, align 4
  %tobool25 = icmp ne i32 %23, 0
  br i1 %tobool25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then21
  %24 = load i32* %j, align 4
  %inc27 = add nsw i32 %24, 1
  store i32 %inc27, i32* %j, align 4
  %idxprom28 = sext i32 %24 to i64
  %25 = load i8** %p.addr, align 8
  %arrayidx29 = getelementptr inbounds i8* %25, i64 %idxprom28
  store i8 84, i8* %arrayidx29, align 1
  br label %if.end33

if.else:                                          ; preds = %if.then21
  %26 = load i32* %j, align 4
  %inc30 = add nsw i32 %26, 1
  store i32 %inc30, i32* %j, align 4
  %idxprom31 = sext i32 %26 to i64
  %27 = load i8** %p.addr, align 8
  %arrayidx32 = getelementptr inbounds i8* %27, i64 %idxprom31
  store i8 70, i8* %arrayidx32, align 1
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then26
  %28 = load i32* %j, align 4
  %inc34 = add nsw i32 %28, 1
  store i32 %inc34, i32* %j, align 4
  %idxprom35 = sext i32 %28 to i64
  %29 = load i8** %p.addr, align 8
  %arrayidx36 = getelementptr inbounds i8* %29, i64 %idxprom35
  store i8 32, i8* %arrayidx36, align 1
  br label %if.end89

if.else37:                                        ; preds = %if.end
  %30 = load i32* %i.addr, align 4
  %cmp38 = icmp slt i32 %30, 0
  br i1 %cmp38, label %if.then40, label %if.else41

if.then40:                                        ; preds = %if.else37
  %31 = load i32* %i.addr, align 4
  %sub = sub nsw i32 0, %31
  store i32 %sub, i32* %i.addr, align 4
  store i32 1, i32* %ineg, align 4
  br label %if.end42

if.else41:                                        ; preds = %if.else37
  store i32 0, i32* %ineg, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.else41, %if.then40
  store i32 15, i32* %idx, align 4
  %32 = load i32* %idx, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %idx, align 4
  %idxprom43 = sext i32 %32 to i64
  %arrayidx44 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom43
  store i8 32, i8* %arrayidx44, align 1
  %33 = load i32* %i.addr, align 4
  %cmp45 = icmp eq i32 %33, 0
  br i1 %cmp45, label %if.then47, label %if.else51

if.then47:                                        ; preds = %if.end42
  %34 = load i32* %idx, align 4
  %dec48 = add nsw i32 %34, -1
  store i32 %dec48, i32* %idx, align 4
  %idxprom49 = sext i32 %34 to i64
  %arrayidx50 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom49
  store i8 48, i8* %arrayidx50, align 1
  br label %if.end60

if.else51:                                        ; preds = %if.end42
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else51
  %35 = load i32* %i.addr, align 4
  %cmp52 = icmp sgt i32 %35, 0
  br i1 %cmp52, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %36 = load i32* %i.addr, align 4
  %div = sdiv i32 %36, 10
  store i32 %div, i32* %j, align 4
  %37 = load i32* %i.addr, align 4
  %38 = load i32* %j, align 4
  %mul = mul nsw i32 %38, 10
  %sub54 = sub nsw i32 %37, %mul
  store i32 %sub54, i32* %k, align 4
  %39 = load i32* %k, align 4
  %add55 = add nsw i32 48, %39
  %conv56 = trunc i32 %add55 to i8
  %40 = load i32* %idx, align 4
  %dec57 = add nsw i32 %40, -1
  store i32 %dec57, i32* %idx, align 4
  %idxprom58 = sext i32 %40 to i64
  %arrayidx59 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom58
  store i8 %conv56, i8* %arrayidx59, align 1
  %41 = load i32* %j, align 4
  store i32 %41, i32* %i.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end60

if.end60:                                         ; preds = %while.end, %if.then47
  %42 = load i32* %ineg, align 4
  %tobool61 = icmp ne i32 %42, 0
  br i1 %tobool61, label %if.then62, label %if.end66

if.then62:                                        ; preds = %if.end60
  %43 = load i32* %idx, align 4
  %dec63 = add nsw i32 %43, -1
  store i32 %dec63, i32* %idx, align 4
  %idxprom64 = sext i32 %43 to i64
  %arrayidx65 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom64
  store i8 45, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.then62, %if.end60
  br label %while.cond67

while.cond67:                                     ; preds = %while.body70, %if.end66
  %44 = load i32* %idx, align 4
  %cmp68 = icmp sgt i32 %44, 0
  br i1 %cmp68, label %while.body70, label %while.end74

while.body70:                                     ; preds = %while.cond67
  %45 = load i32* %idx, align 4
  %dec71 = add nsw i32 %45, -1
  store i32 %dec71, i32* %idx, align 4
  %idxprom72 = sext i32 %45 to i64
  %arrayidx73 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom72
  store i8 32, i8* %arrayidx73, align 1
  br label %while.cond67

while.end74:                                      ; preds = %while.cond67
  %46 = load i8** %p.addr, align 8
  %arrayidx75 = getelementptr inbounds i8* %46, i64 0
  %47 = load i8* %arrayidx75, align 1
  %conv76 = sext i8 %47 to i32
  store i32 %conv76, i32* %j, align 4
  store i32 3, i32* %i.addr, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc86, %while.end74
  %48 = load i32* %i.addr, align 4
  %cmp78 = icmp sle i32 %48, 15
  br i1 %cmp78, label %for.body80, label %for.end88

for.body80:                                       ; preds = %for.cond77
  %49 = load i32* %i.addr, align 4
  %idxprom81 = sext i32 %49 to i64
  %arrayidx82 = getelementptr inbounds [16 x i8]* %t, i32 0, i64 %idxprom81
  %50 = load i8* %arrayidx82, align 1
  %51 = load i32* %j, align 4
  %inc83 = add nsw i32 %51, 1
  store i32 %inc83, i32* %j, align 4
  %idxprom84 = sext i32 %51 to i64
  %52 = load i8** %p.addr, align 8
  %arrayidx85 = getelementptr inbounds i8* %52, i64 %idxprom84
  store i8 %50, i8* %arrayidx85, align 1
  br label %for.inc86

for.inc86:                                        ; preds = %for.body80
  %53 = load i32* %i.addr, align 4
  %inc87 = add nsw i32 %53, 1
  store i32 %inc87, i32* %i.addr, align 4
  br label %for.cond77

for.end88:                                        ; preds = %for.cond77
  br label %if.end89

if.end89:                                         ; preds = %for.end88, %if.end33
  %54 = load i32* %j, align 4
  %conv90 = trunc i32 %54 to i8
  %55 = load i8** %p.addr, align 8
  %arrayidx91 = getelementptr inbounds i8* %55, i64 0
  store i8 %conv90, i8* %arrayidx91, align 1
  ret i32 0
}

define  i32 @__pgf90io_sc_ch_ldw(i8* %s, i32 %ftype, i64 %len, i8* %p) nounwind alwaysinline {
entry:
  %s.addr = alloca i8*, align 8
  %ftype.addr = alloca i32, align 4
  %len.addr = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %q = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i32 %ftype, i32* %ftype.addr, align 4
  store i64 %len, i64* %len.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %s.addr, align 8
  store i8* %0, i8** %q, align 8
  %1 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 0
  %2 = load i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %j, align 4
  %3 = load i32* %j, align 4
  %cmp = icmp sgt i32 %3, 2
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %4 = load i32* %j, align 4
  %conv2 = sext i32 %4 to i64
  %5 = load i64* %len.addr, align 8
  %add = add i64 %conv2, %5
  %cmp3 = icmp uge i64 %add, 83
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %6 = load i8** %p.addr, align 8
  %arrayidx5 = getelementptr inbounds i8* %6, i64 84
  %7 = load i8* %arrayidx5, align 1
  %conv6 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %8 = load i32* %j, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i8** %p.addr, align 8
  %arrayidx7 = getelementptr inbounds i8* %9, i64 %idxprom
  store i8 10, i8* %arrayidx7, align 1
  %10 = load i32* %j, align 4
  %add8 = add nsw i32 %10, 1
  %idxprom9 = sext i32 %add8 to i64
  %11 = load i8** %p.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %11, i64 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %12 = load i8** %p.addr, align 8
  %arrayidx11 = getelementptr inbounds i8* %12, i64 1
  call  void @__pgi_print_string(i8* %arrayidx11)
  store i32 2, i32* %j, align 4
  %13 = load i32* %j, align 4
  %conv12 = trunc i32 %13 to i8
  %14 = load i8** %p.addr, align 8
  %arrayidx13 = getelementptr inbounds i8* %14, i64 0
  store i8 %conv12, i8* %arrayidx13, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %15 = load i32* %i, align 4
  %cmp14 = icmp slt i32 %15, 83
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32* %i, align 4
  %idxprom16 = sext i32 %16 to i64
  %17 = load i8** %p.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %17, i64 %idxprom16
  store i8 32, i8* %arrayidx17, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i8** %p.addr, align 8
  %arrayidx18 = getelementptr inbounds i8* %19, i64 83
  store i8 0, i8* %arrayidx18, align 1
  %20 = load i8** %p.addr, align 8
  %arrayidx19 = getelementptr inbounds i8* %20, i64 84
  store i8 0, i8* %arrayidx19, align 1
  br label %if.end

if.end:                                           ; preds = %for.end, %lor.lhs.false
  %21 = load i32* %j, align 4
  %conv20 = sext i32 %21 to i64
  %22 = load i64* %len.addr, align 8
  %add21 = add i64 %conv20, %22
  %cmp22 = icmp uge i64 %add21, 83
  br i1 %cmp22, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end
  %23 = load i8** %p.addr, align 8
  %arrayidx25 = getelementptr inbounds i8* %23, i64 1
  store i8 32, i8* %arrayidx25, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc57, %if.then24
  %24 = load i32* %i, align 4
  %conv27 = sext i32 %24 to i64
  %25 = load i64* %len.addr, align 8
  %cmp28 = icmp ult i64 %conv27, %25
  br i1 %cmp28, label %for.body30, label %for.end59

for.body30:                                       ; preds = %for.cond26
  %26 = load i32* %i, align 4
  %idxprom31 = sext i32 %26 to i64
  %27 = load i8** %q, align 8
  %arrayidx32 = getelementptr inbounds i8* %27, i64 %idxprom31
  %28 = load i8* %arrayidx32, align 1
  %29 = load i32* %j, align 4
  %inc33 = add nsw i32 %29, 1
  store i32 %inc33, i32* %j, align 4
  %idxprom34 = sext i32 %29 to i64
  %30 = load i8** %p.addr, align 8
  %arrayidx35 = getelementptr inbounds i8* %30, i64 %idxprom34
  store i8 %28, i8* %arrayidx35, align 1
  %31 = load i32* %j, align 4
  %cmp36 = icmp eq i32 %31, 83
  br i1 %cmp36, label %if.then38, label %if.end56

if.then38:                                        ; preds = %for.body30
  %32 = load i32* %j, align 4
  %idxprom39 = sext i32 %32 to i64
  %33 = load i8** %p.addr, align 8
  %arrayidx40 = getelementptr inbounds i8* %33, i64 %idxprom39
  store i8 0, i8* %arrayidx40, align 1
  %34 = load i8** %p.addr, align 8
  %arrayidx41 = getelementptr inbounds i8* %34, i64 1
  call  void @__pgi_print_string(i8* %arrayidx41)
  store i32 1, i32* %j, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc48, %if.then38
  %35 = load i32* %j, align 4
  %cmp43 = icmp slt i32 %35, 83
  br i1 %cmp43, label %for.body45, label %for.end50

for.body45:                                       ; preds = %for.cond42
  %36 = load i32* %j, align 4
  %idxprom46 = sext i32 %36 to i64
  %37 = load i8** %p.addr, align 8
  %arrayidx47 = getelementptr inbounds i8* %37, i64 %idxprom46
  store i8 32, i8* %arrayidx47, align 1
  br label %for.inc48

for.inc48:                                        ; preds = %for.body45
  %38 = load i32* %j, align 4
  %inc49 = add nsw i32 %38, 1
  store i32 %inc49, i32* %j, align 4
  br label %for.cond42

for.end50:                                        ; preds = %for.cond42
  store i32 2, i32* %j, align 4
  %39 = load i32* %j, align 4
  %conv51 = trunc i32 %39 to i8
  %40 = load i8** %p.addr, align 8
  %arrayidx52 = getelementptr inbounds i8* %40, i64 0
  store i8 %conv51, i8* %arrayidx52, align 1
  %41 = load i8** %p.addr, align 8
  %arrayidx53 = getelementptr inbounds i8* %41, i64 83
  store i8 0, i8* %arrayidx53, align 1
  %42 = load i8** %p.addr, align 8
  %arrayidx54 = getelementptr inbounds i8* %42, i64 84
  %43 = load i8* %arrayidx54, align 1
  %inc55 = add i8 %43, 1
  store i8 %inc55, i8* %arrayidx54, align 1
  br label %if.end56

if.end56:                                         ; preds = %for.end50, %for.body30
  br label %for.inc57

for.inc57:                                        ; preds = %if.end56
  %44 = load i32* %i, align 4
  %inc58 = add nsw i32 %44, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond26

for.end59:                                        ; preds = %for.cond26
  br label %if.end74

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond60

for.cond60:                                       ; preds = %for.inc70, %if.else
  %45 = load i32* %i, align 4
  %conv61 = sext i32 %45 to i64
  %46 = load i64* %len.addr, align 8
  %cmp62 = icmp ult i64 %conv61, %46
  br i1 %cmp62, label %for.body64, label %for.end72

for.body64:                                       ; preds = %for.cond60
  %47 = load i32* %i, align 4
  %idxprom65 = sext i32 %47 to i64
  %48 = load i8** %q, align 8
  %arrayidx66 = getelementptr inbounds i8* %48, i64 %idxprom65
  %49 = load i8* %arrayidx66, align 1
  %50 = load i32* %j, align 4
  %inc67 = add nsw i32 %50, 1
  store i32 %inc67, i32* %j, align 4
  %idxprom68 = sext i32 %50 to i64
  %51 = load i8** %p.addr, align 8
  %arrayidx69 = getelementptr inbounds i8* %51, i64 %idxprom68
  store i8 %49, i8* %arrayidx69, align 1
  br label %for.inc70

for.inc70:                                        ; preds = %for.body64
  %52 = load i32* %i, align 4
  %inc71 = add nsw i32 %52, 1
  store i32 %inc71, i32* %i, align 4
  br label %for.cond60

for.end72:                                        ; preds = %for.cond60
  %53 = load i32* %j, align 4
  %inc73 = add nsw i32 %53, 1
  store i32 %inc73, i32* %j, align 4
  br label %if.end74

if.end74:                                         ; preds = %for.end72, %for.end59
  %54 = load i32* %j, align 4
  %conv75 = trunc i32 %54 to i8
  %55 = load i8** %p.addr, align 8
  %arrayidx76 = getelementptr inbounds i8* %55, i64 0
  store i8 %conv75, i8* %arrayidx76, align 1
  ret i32 0
}

define  i32 @__pgf90io_ldw_end(i8* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %c = alloca i8, align 1
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  store i8 %1, i8* %c, align 1
  %2 = load i8* %c, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i8* %c, align 1
  %conv2 = sext i8 %3 to i32
  %sub = sub nsw i32 %conv2, 1
  %idxprom = sext i32 %sub to i64
  %4 = load i8** %p.addr, align 8
  %arrayidx3 = getelementptr inbounds i8* %4, i64 %idxprom
  %5 = load i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 32
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8* %c, align 1
  %dec = add i8 %6, -1
  store i8 %dec, i8* %c, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i8* %c, align 1
  %idxprom7 = sext i8 %7 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %8, i64 %idxprom7
  store i8 10, i8* %arrayidx8, align 1
  %9 = load i8* %c, align 1
  %conv9 = sext i8 %9 to i32
  %add = add nsw i32 %conv9, 1
  %idxprom10 = sext i32 %add to i64
  %10 = load i8** %p.addr, align 8
  %arrayidx11 = getelementptr inbounds i8* %10, i64 %idxprom10
  store i8 0, i8* %arrayidx11, align 1
  %11 = load i8** %p.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %11, i64 1
  call  void @__pgi_print_string(i8* %arrayidx12)
  %12 = load i8** %p.addr, align 8
  call  void @free(i8* %12)
  ret i32 0
}

declare  void @free(i8*)

define  i32 @__pgf90io_fmtw_end(i8* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %c = alloca i8, align 1
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8* %0, i64 0
  %1 = load i8* %arrayidx, align 1
  store i8 %1, i8* %c, align 1
  %2 = load i8* %c, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i8* %c, align 1
  %conv2 = sext i8 %3 to i32
  %sub = sub nsw i32 %conv2, 1
  %idxprom = sext i32 %sub to i64
  %4 = load i8** %p.addr, align 8
  %arrayidx3 = getelementptr inbounds i8* %4, i64 %idxprom
  %5 = load i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 32
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8* %c, align 1
  %dec = add i8 %6, -1
  store i8 %dec, i8* %c, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i8* %c, align 1
  %idxprom7 = sext i8 %7 to i64
  %8 = load i8** %p.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %8, i64 %idxprom7
  store i8 10, i8* %arrayidx8, align 1
  %9 = load i8* %c, align 1
  %conv9 = sext i8 %9 to i32
  %add = add nsw i32 %conv9, 1
  %idxprom10 = sext i32 %add to i64
  %10 = load i8** %p.addr, align 8
  %arrayidx11 = getelementptr inbounds i8* %10, i64 %idxprom10
  store i8 0, i8* %arrayidx11, align 1
  %11 = load i8** %p.addr, align 8
  %arrayidx12 = getelementptr inbounds i8* %11, i64 1
  call  void @__pgi_print_string(i8* %arrayidx12)
  %12 = load i8** %p.addr, align 8
  call  void @free(i8* %12)
  ret i32 0
}

define  i32 @__pgi_launch_device(i8* %func, i8* %parameterBuffer, i8* %gridDimension, i8* %blockDimension, i64 %sharedMemSize, i64 %stream) nounwind alwaysinline {
entry:
  %func.addr = alloca i8*, align 8
  %parameterBuffer.addr = alloca i8*, align 8
  %gridDimension.addr = alloca i8*, align 8
  %blockDimension.addr = alloca i8*, align 8
  %sharedMemSize.addr = alloca i64, align 8
  %stream.addr = alloca i64, align 8
  store i8* %func, i8** %func.addr, align 8
  store i8* %parameterBuffer, i8** %parameterBuffer.addr, align 8
  store i8* %gridDimension, i8** %gridDimension.addr, align 8
  store i8* %blockDimension, i8** %blockDimension.addr, align 8
  store i64 %sharedMemSize, i64* %sharedMemSize.addr, align 8
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %func.addr, align 8
  %1 = load i8** %parameterBuffer.addr, align 8
  %2 = bitcast i8* %1 to i8**
  %3 = load i8** %2, align 8
  %4 = load i8** %gridDimension.addr, align 8
  %5 = bitcast i8* %4 to %struct.dim3*
  %6 = load i8** %blockDimension.addr, align 8
  %7 = bitcast i8* %6 to %struct.dim3*
  %8 = load i64* %sharedMemSize.addr, align 8
  %conv = trunc i64 %8 to i32
  %9 = load i64* %stream.addr, align 8
  %10 = inttoptr i64 %9 to %struct.CUstream_st*
  %call = call  i32 @cudaLaunchDevice(i8* %0, i8* %3, %struct.dim3* byval %5, %struct.dim3* byval %7, i32 %conv, %struct.CUstream_st* %10)
  ret i32 %call
}

declare  i32 @cudaLaunchDevice(i8*, i8*, %struct.dim3* byval, %struct.dim3* byval, i32, %struct.CUstream_st*)

define  void @__pgi_get_parameter_buffer(i8* %bp, i64 %align, i64 %size) nounwind alwaysinline {
entry:
  %bp.addr = alloca i8*, align 8
  %align.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %bp, i8** %bp.addr, align 8
  store i64 %align, i64* %align.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64* %align.addr, align 8
  %1 = load i64* %size.addr, align 8
  %call = call  i8* @cudaGetParameterBuffer(i64 %0, i64 %1)
  %2 = load i8** %bp.addr, align 8
  %3 = bitcast i8* %2 to i8**
  store i8* %call, i8** %3, align 8
  ret void
}

declare  i8* @cudaGetParameterBuffer(i64, i64)

define  void @__pgi_setup_argument(i8* %bp, i8* %arg, i64 %ignored, i64 %offset) nounwind alwaysinline {
entry:
  %bp.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %ignored.addr = alloca i64, align 8
  %offset.addr = alloca i64, align 8
  %buffer = alloca i8*, align 8
  store i8* %bp, i8** %bp.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  store i64 %ignored, i64* %ignored.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  %0 = load i8** %bp.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  store i8* %2, i8** %buffer, align 8
  %3 = load i8** %arg.addr, align 8
  %4 = load i8** %buffer, align 8
  %5 = load i64* %offset.addr, align 8
  %add.ptr = getelementptr inbounds i8* %4, i64 %5
  %6 = bitcast i8* %add.ptr to i8**
  store i8* %3, i8** %6, align 8
  ret void
}

define  void @__pgi_setup_arg_by_val(i8* %bp, i8* %arg, i64 %size, i64 %offset) nounwind alwaysinline {
entry:
  %bp.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %offset.addr = alloca i64, align 8
  %buffer = alloca i8*, align 8
  %i = alloca i64, align 8
  store i8* %bp, i8** %bp.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  %0 = load i8** %bp.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  store i8* %2, i8** %buffer, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64* %i, align 8
  %4 = load i64* %size.addr, align 8
  %cmp = icmp ult i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64* %i, align 8
  %6 = load i8** %arg.addr, align 8
  %arrayidx = getelementptr inbounds i8* %6, i64 %5
  %7 = load i8* %arrayidx, align 1
  %8 = load i64* %offset.addr, align 8
  %9 = load i64* %i, align 8
  %add = add i64 %8, %9
  %10 = load i8** %buffer, align 8
  %arrayidx1 = getelementptr inbounds i8* %10, i64 %add
  store i8 %7, i8* %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64* %i, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define  i8* @pgf90_auto_alloc04(i8* %nelem, i8* %len) nounwind alwaysinline {
entry:
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %i.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %nelem.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  %0 = load i8** %nelem.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i64* %1, align 8
  %3 = load i8** %len.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4
  %conv = sext i32 %5 to i64
  %mul = mul i64 %2, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %p, align 8
  %6 = load i8** %p, align 8
  %cmp = icmp eq i8* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([44 x i8]* @.str1, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  %7 = load i8** %errmsg.addr.i, align 8
  store i8* %7, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.then
  %8 = load i8** %str.addr.i.i, align 8
  %9 = load i8* %8, align 1
  %conv.i.i = sext i8 %9 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %10 = load i32* %len.i.i, align 4
  %11 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %10, %11
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %12 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %12, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %13 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %13, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %14 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %14, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %15 = load i32* %len.i.i, align 4
  store i32 %15, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit.i
  %16 = load i32* %i.i, align 4
  %17 = load i32* %errmsglen.i, align 4
  %cmp.i = icmp slt i32 %16, %17
  br i1 %cmp.i, label %for.body.i, label %__pgi_simple_error_msg.exit

for.body.i:                                       ; preds = %for.cond.i
  %18 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %18 to i64
  %19 = load i8** %errmsg.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %19, i64 %idxprom.i
  %20 = load i8* %arrayidx.i, align 1
  %21 = load i32* %i.i, align 4
  %idxprom1.i = sext i32 %21 to i64
  %arrayidx2.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom1.i
  store i8 %20, i8* %arrayidx2.i, align 1
  %22 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

__pgi_simple_error_msg.exit:                      ; preds = %for.cond.i
  %23 = load i32* %i.i, align 4
  %inc3.i = add nsw i32 %23, 1
  store i32 %inc3.i, i32* %i.i, align 4
  %idxprom4.i = sext i32 %23 to i64
  %arrayidx5.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom4.i
  store i8 10, i8* %arrayidx5.i, align 1
  %24 = load i32* %i.i, align 4
  %inc6.i = add nsw i32 %24, 1
  store i32 %inc6.i, i32* %i.i, align 4
  %idxprom7.i = sext i32 %24 to i64
  %arrayidx8.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom7.i
  store i8 0, i8* %arrayidx8.i, align 1
  %arraydecay.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !1
  br label %if.end

if.end:                                           ; preds = %__pgi_simple_error_msg.exit, %entry
  %25 = load i8** %p, align 8
  ret i8* %25
}

define  i8* @pgf90_auto_alloc04_i8(i8* %nelem, i8* %len) nounwind alwaysinline {
entry:
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %i.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %nelem.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  %0 = load i8** %nelem.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i64* %1, align 8
  %3 = load i8** %len.addr, align 8
  %4 = bitcast i8* %3 to i64*
  %5 = load i64* %4, align 8
  %mul = mul i64 %2, %5
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %p, align 8
  %6 = load i8** %p, align 8
  %cmp = icmp eq i8* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([44 x i8]* @.str1, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  %7 = load i8** %errmsg.addr.i, align 8
  store i8* %7, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.then
  %8 = load i8** %str.addr.i.i, align 8
  %9 = load i8* %8, align 1
  %conv.i.i = sext i8 %9 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %10 = load i32* %len.i.i, align 4
  %11 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %10, %11
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %12 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %12, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %13 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %13, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %14 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %14, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %15 = load i32* %len.i.i, align 4
  store i32 %15, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit.i
  %16 = load i32* %i.i, align 4
  %17 = load i32* %errmsglen.i, align 4
  %cmp.i = icmp slt i32 %16, %17
  br i1 %cmp.i, label %for.body.i, label %__pgi_simple_error_msg.exit

for.body.i:                                       ; preds = %for.cond.i
  %18 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %18 to i64
  %19 = load i8** %errmsg.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %19, i64 %idxprom.i
  %20 = load i8* %arrayidx.i, align 1
  %21 = load i32* %i.i, align 4
  %idxprom1.i = sext i32 %21 to i64
  %arrayidx2.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom1.i
  store i8 %20, i8* %arrayidx2.i, align 1
  %22 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %22, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

__pgi_simple_error_msg.exit:                      ; preds = %for.cond.i
  %23 = load i32* %i.i, align 4
  %inc3.i = add nsw i32 %23, 1
  store i32 %inc3.i, i32* %i.i, align 4
  %idxprom4.i = sext i32 %23 to i64
  %arrayidx5.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom4.i
  store i8 10, i8* %arrayidx5.i, align 1
  %24 = load i32* %i.i, align 4
  %inc6.i = add nsw i32 %24, 1
  store i32 %inc6.i, i32* %i.i, align 4
  %idxprom7.i = sext i32 %24 to i64
  %arrayidx8.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom7.i
  store i8 0, i8* %arrayidx8.i, align 1
  %arraydecay.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !1
  br label %if.end

if.end:                                           ; preds = %__pgi_simple_error_msg.exit, %entry
  %25 = load i8** %p, align 8
  ret i8* %25
}

define  void @pgf90_alloc04a(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  %area = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %firsttime.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8** %stat.addr, align 8
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i8** %nelem.addr, align 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64* %7, align 8
  %9 = load i8** %len.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %conv = sext i32 %11 to i64
  %mul = mul i64 %8, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %area, align 8
  %12 = load i8** %area, align 8
  %cmp = icmp eq i8* %12, null
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %13 = load i8** %stat.addr, align 8
  %tobool4 = icmp ne i8* %13, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %14 = load i8** %stat.addr, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 99, i32* %15, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  br label %if.end7

if.else:                                          ; preds = %if.end
  %16 = load i8** %area, align 8
  %17 = load i8** %pointer.addr, align 8
  %18 = bitcast i8* %17 to i8**
  store i8* %16, i8** %18, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.end6
  ret void
}

define  void @pgf90_alloc04(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr.i = alloca i8*, align 8
  %kind.addr.i = alloca i8*, align 8
  %len.addr.i = alloca i8*, align 8
  %stat.addr.i = alloca i8*, align 8
  %pointer.addr.i = alloca i8*, align 8
  %offset.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %align.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %errlen.addr.i = alloca i64, align 8
  %area.i = alloca i8*, align 8
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %nelem.addr, align 8
  %1 = load i8** %kind.addr, align 8
  %2 = load i8** %len.addr, align 8
  %3 = load i8** %stat.addr, align 8
  %4 = load i8** %pointer.addr, align 8
  %5 = load i8** %offset.addr, align 8
  %6 = load i8** %firsttime.addr, align 8
  %7 = load i8** %align.addr, align 8
  %8 = load i8** %errmsg.addr, align 8
  %9 = load i64* %errlen.addr, align 8
  store i8* %0, i8** %nelem.addr.i, align 8
  store i8* %1, i8** %kind.addr.i, align 8
  store i8* %2, i8** %len.addr.i, align 8
  store i8* %3, i8** %stat.addr.i, align 8
  store i8* %4, i8** %pointer.addr.i, align 8
  store i8* %5, i8** %offset.addr.i, align 8
  store i8* %6, i8** %firsttime.addr.i, align 8
  store i8* %7, i8** %align.addr.i, align 8
  store i8* %8, i8** %errmsg.addr.i, align 8
  store i64 %9, i64* %errlen.addr.i, align 8
  %10 = load i8** %stat.addr.i, align 8
  %tobool.i = icmp ne i8* %10, null
  br i1 %tobool.i, label %land.lhs.true.i, label %if.end.i

land.lhs.true.i:                                  ; preds = %entry
  %11 = load i8** %firsttime.addr.i, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  %tobool1.i = icmp ne i32 %13, 0
  br i1 %tobool1.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %land.lhs.true.i
  %14 = load i8** %stat.addr.i, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %land.lhs.true.i, %entry
  %16 = load i8** %nelem.addr.i, align 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64* %17, align 8
  %19 = load i8** %len.addr.i, align 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32* %20, align 4
  %conv.i = sext i32 %21 to i64
  %mul.i = mul i64 %18, %conv.i
  %call.i = call  i8* @malloc(i64 %mul.i) nounwind
  store i8* %call.i, i8** %area.i, align 8
  %22 = load i8** %area.i, align 8
  %cmp.i = icmp eq i8* %22, null
  br i1 %cmp.i, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.end.i
  %23 = load i8** %stat.addr.i, align 8
  %tobool4.i = icmp ne i8* %23, null
  br i1 %tobool4.i, label %if.then5.i, label %if.end6.i

if.then5.i:                                       ; preds = %if.then3.i
  %24 = load i8** %stat.addr.i, align 8
  %25 = bitcast i8* %24 to i32*
  store i32 99, i32* %25, align 4
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then5.i, %if.then3.i
  br label %pgf90_alloc04a.exit

if.else.i:                                        ; preds = %if.end.i
  %26 = load i8** %area.i, align 8
  %27 = load i8** %pointer.addr.i, align 8
  %28 = bitcast i8* %27 to i8**
  store i8* %26, i8** %28, align 8
  br label %pgf90_alloc04a.exit

pgf90_alloc04a.exit:                              ; preds = %if.else.i, %if.end6.i
  ret void
}

define  void @pgf90_alloc04a_i8(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  %area = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %firsttime.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8** %stat.addr, align 8
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i8** %nelem.addr, align 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64* %7, align 8
  %9 = load i8** %len.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %conv = sext i32 %11 to i64
  %mul = mul i64 %8, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %area, align 8
  %12 = load i8** %area, align 8
  %cmp = icmp eq i8* %12, null
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %13 = load i8** %stat.addr, align 8
  %tobool4 = icmp ne i8* %13, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %14 = load i8** %stat.addr, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 99, i32* %15, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  br label %if.end7

if.else:                                          ; preds = %if.end
  %16 = load i8** %area, align 8
  %17 = load i8** %pointer.addr, align 8
  %18 = bitcast i8* %17 to i8**
  store i8* %16, i8** %18, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.end6
  ret void
}

define  void @pgf90_alloc04_i8(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr.i = alloca i8*, align 8
  %kind.addr.i = alloca i8*, align 8
  %len.addr.i = alloca i8*, align 8
  %stat.addr.i = alloca i8*, align 8
  %pointer.addr.i = alloca i8*, align 8
  %offset.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %align.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %errlen.addr.i = alloca i64, align 8
  %area.i = alloca i8*, align 8
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %nelem.addr, align 8
  %1 = load i8** %kind.addr, align 8
  %2 = load i8** %len.addr, align 8
  %3 = load i8** %stat.addr, align 8
  %4 = load i8** %pointer.addr, align 8
  %5 = load i8** %offset.addr, align 8
  %6 = load i8** %firsttime.addr, align 8
  %7 = load i8** %align.addr, align 8
  %8 = load i8** %errmsg.addr, align 8
  %9 = load i64* %errlen.addr, align 8
  store i8* %0, i8** %nelem.addr.i, align 8
  store i8* %1, i8** %kind.addr.i, align 8
  store i8* %2, i8** %len.addr.i, align 8
  store i8* %3, i8** %stat.addr.i, align 8
  store i8* %4, i8** %pointer.addr.i, align 8
  store i8* %5, i8** %offset.addr.i, align 8
  store i8* %6, i8** %firsttime.addr.i, align 8
  store i8* %7, i8** %align.addr.i, align 8
  store i8* %8, i8** %errmsg.addr.i, align 8
  store i64 %9, i64* %errlen.addr.i, align 8
  %10 = load i8** %stat.addr.i, align 8
  %tobool.i = icmp ne i8* %10, null
  br i1 %tobool.i, label %land.lhs.true.i, label %if.end.i

land.lhs.true.i:                                  ; preds = %entry
  %11 = load i8** %firsttime.addr.i, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  %tobool1.i = icmp ne i32 %13, 0
  br i1 %tobool1.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %land.lhs.true.i
  %14 = load i8** %stat.addr.i, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %land.lhs.true.i, %entry
  %16 = load i8** %nelem.addr.i, align 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64* %17, align 8
  %19 = load i8** %len.addr.i, align 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32* %20, align 4
  %conv.i = sext i32 %21 to i64
  %mul.i = mul i64 %18, %conv.i
  %call.i = call  i8* @malloc(i64 %mul.i) nounwind
  store i8* %call.i, i8** %area.i, align 8
  %22 = load i8** %area.i, align 8
  %cmp.i = icmp eq i8* %22, null
  br i1 %cmp.i, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.end.i
  %23 = load i8** %stat.addr.i, align 8
  %tobool4.i = icmp ne i8* %23, null
  br i1 %tobool4.i, label %if.then5.i, label %if.end6.i

if.then5.i:                                       ; preds = %if.then3.i
  %24 = load i8** %stat.addr.i, align 8
  %25 = bitcast i8* %24 to i32*
  store i32 99, i32* %25, align 4
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then5.i, %if.then3.i
  br label %pgf90_alloc04a_i8.exit

if.else.i:                                        ; preds = %if.end.i
  %26 = load i8** %area.i, align 8
  %27 = load i8** %pointer.addr.i, align 8
  %28 = bitcast i8* %27 to i8**
  store i8* %26, i8** %28, align 8
  br label %pgf90_alloc04a_i8.exit

pgf90_alloc04a_i8.exit:                           ; preds = %if.else.i, %if.end6.i
  ret void
}

define  void @pgf90_alloc04_chka(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  %area = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %pointer.addr, align 8
  %1 = load i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end11

if.else:                                          ; preds = %entry
  %2 = load i8** %stat.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %3 = load i8** %firsttime.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %land.lhs.true
  %6 = load i8** %stat.addr, align 8
  %7 = bitcast i8* %6 to i32*
  store i32 0, i32* %7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %land.lhs.true, %if.else
  %8 = load i8** %nelem.addr, align 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64* %9, align 8
  %11 = load i8** %len.addr, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  %conv = sext i32 %13 to i64
  %mul = mul i64 %10, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %area, align 8
  %14 = load i8** %area, align 8
  %cmp = icmp eq i8* %14, null
  br i1 %cmp, label %if.then5, label %if.else9

if.then5:                                         ; preds = %if.end
  %15 = load i8** %stat.addr, align 8
  %tobool6 = icmp ne i8* %15, null
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then5
  %16 = load i8** %stat.addr, align 8
  %17 = bitcast i8* %16 to i32*
  store i32 99, i32* %17, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.then5
  br label %if.end10

if.else9:                                         ; preds = %if.end
  %18 = load i8** %area, align 8
  %19 = load i8** %pointer.addr, align 8
  %20 = bitcast i8* %19 to i8**
  store i8* %18, i8** %20, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.else9, %if.end8
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then
  ret void
}

define  void @pgf90_alloc04_chk(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr.i = alloca i8*, align 8
  %kind.addr.i = alloca i8*, align 8
  %len.addr.i = alloca i8*, align 8
  %stat.addr.i = alloca i8*, align 8
  %pointer.addr.i = alloca i8*, align 8
  %offset.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %align.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %errlen.addr.i = alloca i64, align 8
  %area.i = alloca i8*, align 8
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %nelem.addr, align 8
  %1 = load i8** %kind.addr, align 8
  %2 = load i8** %len.addr, align 8
  %3 = load i8** %stat.addr, align 8
  %4 = load i8** %pointer.addr, align 8
  %5 = load i8** %offset.addr, align 8
  %6 = load i8** %firsttime.addr, align 8
  %7 = load i8** %align.addr, align 8
  %8 = load i8** %errmsg.addr, align 8
  %9 = load i64* %errlen.addr, align 8
  store i8* %0, i8** %nelem.addr.i, align 8
  store i8* %1, i8** %kind.addr.i, align 8
  store i8* %2, i8** %len.addr.i, align 8
  store i8* %3, i8** %stat.addr.i, align 8
  store i8* %4, i8** %pointer.addr.i, align 8
  store i8* %5, i8** %offset.addr.i, align 8
  store i8* %6, i8** %firsttime.addr.i, align 8
  store i8* %7, i8** %align.addr.i, align 8
  store i8* %8, i8** %errmsg.addr.i, align 8
  store i64 %9, i64* %errlen.addr.i, align 8
  %10 = load i8** %pointer.addr.i, align 8
  %11 = load i8* %10, align 1
  %tobool.i = icmp ne i8 %11, 0
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  br label %pgf90_alloc04_chka.exit

if.else.i:                                        ; preds = %entry
  %12 = load i8** %stat.addr.i, align 8
  %tobool1.i = icmp ne i8* %12, null
  br i1 %tobool1.i, label %land.lhs.true.i, label %if.end.i

land.lhs.true.i:                                  ; preds = %if.else.i
  %13 = load i8** %firsttime.addr.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32* %14, align 4
  %tobool2.i = icmp ne i32 %15, 0
  br i1 %tobool2.i, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %land.lhs.true.i
  %16 = load i8** %stat.addr.i, align 8
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %land.lhs.true.i, %if.else.i
  %18 = load i8** %nelem.addr.i, align 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64* %19, align 8
  %21 = load i8** %len.addr.i, align 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32* %22, align 4
  %conv.i = sext i32 %23 to i64
  %mul.i = mul i64 %20, %conv.i
  %call.i = call  i8* @malloc(i64 %mul.i) nounwind
  store i8* %call.i, i8** %area.i, align 8
  %24 = load i8** %area.i, align 8
  %cmp.i = icmp eq i8* %24, null
  br i1 %cmp.i, label %if.then5.i, label %if.else9.i

if.then5.i:                                       ; preds = %if.end.i
  %25 = load i8** %stat.addr.i, align 8
  %tobool6.i = icmp ne i8* %25, null
  br i1 %tobool6.i, label %if.then7.i, label %if.end8.i

if.then7.i:                                       ; preds = %if.then5.i
  %26 = load i8** %stat.addr.i, align 8
  %27 = bitcast i8* %26 to i32*
  store i32 99, i32* %27, align 4
  br label %if.end8.i

if.end8.i:                                        ; preds = %if.then7.i, %if.then5.i
  br label %if.end10.i

if.else9.i:                                       ; preds = %if.end.i
  %28 = load i8** %area.i, align 8
  %29 = load i8** %pointer.addr.i, align 8
  %30 = bitcast i8* %29 to i8**
  store i8* %28, i8** %30, align 8
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.else9.i, %if.end8.i
  br label %pgf90_alloc04_chka.exit

pgf90_alloc04_chka.exit:                          ; preds = %if.end10.i, %if.then.i
  ret void
}

define  void @pgf90_alloc04_chka_i8(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  %area = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %pointer.addr, align 8
  %1 = load i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end11

if.else:                                          ; preds = %entry
  %2 = load i8** %stat.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %3 = load i8** %firsttime.addr, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %land.lhs.true
  %6 = load i8** %stat.addr, align 8
  %7 = bitcast i8* %6 to i32*
  store i32 0, i32* %7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %land.lhs.true, %if.else
  %8 = load i8** %nelem.addr, align 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64* %9, align 8
  %11 = load i8** %len.addr, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  %conv = sext i32 %13 to i64
  %mul = mul i64 %10, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %area, align 8
  %14 = load i8** %area, align 8
  %cmp = icmp eq i8* %14, null
  br i1 %cmp, label %if.then5, label %if.else9

if.then5:                                         ; preds = %if.end
  %15 = load i8** %stat.addr, align 8
  %tobool6 = icmp ne i8* %15, null
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then5
  %16 = load i8** %stat.addr, align 8
  %17 = bitcast i8* %16 to i32*
  store i32 99, i32* %17, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.then5
  br label %if.end10

if.else9:                                         ; preds = %if.end
  %18 = load i8** %area, align 8
  %19 = load i8** %pointer.addr, align 8
  %20 = bitcast i8* %19 to i8**
  store i8* %18, i8** %20, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.else9, %if.end8
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then
  ret void
}

define  void @pgf90_alloc04_chk_i8(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr.i = alloca i8*, align 8
  %kind.addr.i = alloca i8*, align 8
  %len.addr.i = alloca i8*, align 8
  %stat.addr.i = alloca i8*, align 8
  %pointer.addr.i = alloca i8*, align 8
  %offset.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %align.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %errlen.addr.i = alloca i64, align 8
  %area.i = alloca i8*, align 8
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %nelem.addr, align 8
  %1 = load i8** %kind.addr, align 8
  %2 = load i8** %len.addr, align 8
  %3 = load i8** %stat.addr, align 8
  %4 = load i8** %pointer.addr, align 8
  %5 = load i8** %offset.addr, align 8
  %6 = load i8** %firsttime.addr, align 8
  %7 = load i8** %align.addr, align 8
  %8 = load i8** %errmsg.addr, align 8
  %9 = load i64* %errlen.addr, align 8
  store i8* %0, i8** %nelem.addr.i, align 8
  store i8* %1, i8** %kind.addr.i, align 8
  store i8* %2, i8** %len.addr.i, align 8
  store i8* %3, i8** %stat.addr.i, align 8
  store i8* %4, i8** %pointer.addr.i, align 8
  store i8* %5, i8** %offset.addr.i, align 8
  store i8* %6, i8** %firsttime.addr.i, align 8
  store i8* %7, i8** %align.addr.i, align 8
  store i8* %8, i8** %errmsg.addr.i, align 8
  store i64 %9, i64* %errlen.addr.i, align 8
  %10 = load i8** %pointer.addr.i, align 8
  %11 = load i8* %10, align 1
  %tobool.i = icmp ne i8 %11, 0
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  br label %pgf90_alloc04_chka_i8.exit

if.else.i:                                        ; preds = %entry
  %12 = load i8** %stat.addr.i, align 8
  %tobool1.i = icmp ne i8* %12, null
  br i1 %tobool1.i, label %land.lhs.true.i, label %if.end.i

land.lhs.true.i:                                  ; preds = %if.else.i
  %13 = load i8** %firsttime.addr.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32* %14, align 4
  %tobool2.i = icmp ne i32 %15, 0
  br i1 %tobool2.i, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %land.lhs.true.i
  %16 = load i8** %stat.addr.i, align 8
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %land.lhs.true.i, %if.else.i
  %18 = load i8** %nelem.addr.i, align 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64* %19, align 8
  %21 = load i8** %len.addr.i, align 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32* %22, align 4
  %conv.i = sext i32 %23 to i64
  %mul.i = mul i64 %20, %conv.i
  %call.i = call  i8* @malloc(i64 %mul.i) nounwind
  store i8* %call.i, i8** %area.i, align 8
  %24 = load i8** %area.i, align 8
  %cmp.i = icmp eq i8* %24, null
  br i1 %cmp.i, label %if.then5.i, label %if.else9.i

if.then5.i:                                       ; preds = %if.end.i
  %25 = load i8** %stat.addr.i, align 8
  %tobool6.i = icmp ne i8* %25, null
  br i1 %tobool6.i, label %if.then7.i, label %if.end8.i

if.then7.i:                                       ; preds = %if.then5.i
  %26 = load i8** %stat.addr.i, align 8
  %27 = bitcast i8* %26 to i32*
  store i32 99, i32* %27, align 4
  br label %if.end8.i

if.end8.i:                                        ; preds = %if.then7.i, %if.then5.i
  br label %if.end10.i

if.else9.i:                                       ; preds = %if.end.i
  %28 = load i8** %area.i, align 8
  %29 = load i8** %pointer.addr.i, align 8
  %30 = bitcast i8* %29 to i8**
  store i8* %28, i8** %30, align 8
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.else9.i, %if.end8.i
  br label %pgf90_alloc04_chka_i8.exit

pgf90_alloc04_chka_i8.exit:                       ; preds = %if.end10.i, %if.then.i
  ret void
}

define  void @pgf90_dev_mod_alloc04(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %handle, i8* %count, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %handle.addr = alloca i8*, align 8
  %count.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  %area = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %handle, i8** %handle.addr, align 8
  store i8* %count, i8** %count.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %firsttime.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8** %stat.addr, align 8
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i8** %nelem.addr, align 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64* %7, align 8
  %9 = load i8** %len.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %conv = sext i32 %11 to i64
  %mul = mul i64 %8, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %area, align 8
  %12 = load i8** %area, align 8
  %cmp = icmp eq i8* %12, null
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %13 = load i8** %stat.addr, align 8
  %tobool4 = icmp ne i8* %13, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %14 = load i8** %stat.addr, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 99, i32* %15, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  br label %if.end7

if.else:                                          ; preds = %if.end
  %16 = load i8** %area, align 8
  %17 = load i8** %pointer.addr, align 8
  %18 = bitcast i8* %17 to i8**
  store i8* %16, i8** %18, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.end6
  ret void
}

define  void @pgf90_dev_mod_alloc04_i8(i8* %nelem, i8* %kind, i8* %len, i8* %stat, i8* %pointer, i8* %handle, i8* %count, i8* %offset, i8* %firsttime, i8* %align, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %nelem.addr = alloca i8*, align 8
  %kind.addr = alloca i8*, align 8
  %len.addr = alloca i8*, align 8
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %handle.addr = alloca i8*, align 8
  %count.addr = alloca i8*, align 8
  %offset.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %align.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  %area = alloca i8*, align 8
  store i8* %nelem, i8** %nelem.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i8* %len, i8** %len.addr, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %handle, i8** %handle.addr, align 8
  store i8* %count, i8** %count.addr, align 8
  store i8* %offset, i8** %offset.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %align, i8** %align.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %firsttime.addr, align 8
  %2 = bitcast i8* %1 to i32*
  %3 = load i32* %2, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8** %stat.addr, align 8
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i8** %nelem.addr, align 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64* %7, align 8
  %9 = load i8** %len.addr, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %10, align 4
  %conv = sext i32 %11 to i64
  %mul = mul i64 %8, %conv
  %call = call  i8* @malloc(i64 %mul)
  store i8* %call, i8** %area, align 8
  %12 = load i8** %area, align 8
  %cmp = icmp eq i8* %12, null
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %13 = load i8** %stat.addr, align 8
  %tobool4 = icmp ne i8* %13, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %14 = load i8** %stat.addr, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 99, i32* %15, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  br label %if.end7

if.else:                                          ; preds = %if.end
  %16 = load i8** %area, align 8
  %17 = load i8** %pointer.addr, align 8
  %18 = bitcast i8* %17 to i8**
  store i8* %16, i8** %18, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.end6
  ret void
}

define  void @pgf90_auto_dealloc(i8* %pointer) nounwind alwaysinline {
entry:
  %pointer.addr = alloca i8*, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  %0 = load i8** %pointer.addr, align 8
  call  void @free(i8* %0)
  ret void
}

define  void @pgf90_auto_dealloc_i8(i8* %pointer) nounwind alwaysinline {
entry:
  %pointer.addr = alloca i8*, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  %0 = load i8** %pointer.addr, align 8
  call  void @free(i8* %0)
  ret void
}

define  void @pgf90_dev_mod_dealloc03(i8* %stat, i8* %pointer, i8* %handle, i8* %area, i8* %firsttime, i8* %errmsg, i64 %errlen) nounwind alwaysinline {
entry:
  %stat.addr = alloca i8*, align 8
  %pointer.addr = alloca i8*, align 8
  %handle.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %errlen.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %pointer, i8** %pointer.addr, align 8
  store i8* %handle, i8** %handle.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %errlen, i64* %errlen.addr, align 8
  %0 = load i8** %pointer.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  call  void @free(i8* %2)
  %3 = load i8** %stat.addr, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i8** %firsttime.addr, align 8
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load i8** %stat.addr, align 8
  %8 = bitcast i8* %7 to i32*
  store i32 0, i32* %8, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

define  i32 @__pgi_device_synchronize() nounwind alwaysinline {
entry:
  %call = call  i32 @cudaDeviceSynchronize()
  ret i32 %call
}

declare  i32 @cudaDeviceSynchronize()

define  i32 @__pgi_device_get_cache_config(i8* %pcc) nounwind alwaysinline {
entry:
  %pcc.addr = alloca i8*, align 8
  store i8* %pcc, i8** %pcc.addr, align 8
  %0 = load i8** %pcc.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %call = call  i32 @cudaDeviceGetCacheConfig(i32* %1)
  ret i32 %call
}

declare  i32 @cudaDeviceGetCacheConfig(i32*)

define  i32 @__pgi_device_get_limit(i8* %pval, i32 %limit) nounwind alwaysinline {
entry:
  %pval.addr = alloca i8*, align 8
  %limit.addr = alloca i32, align 4
  store i8* %pval, i8** %pval.addr, align 8
  store i32 %limit, i32* %limit.addr, align 4
  %0 = load i8** %pval.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i32* %limit.addr, align 4
  %call = call  i32 @cudaDeviceGetLimit(i64* %1, i32 %2)
  ret i32 %call
}

declare  i32 @cudaDeviceGetLimit(i64*, i32)

define  i32 @__pgi_get_last_error() nounwind alwaysinline {
entry:
  %call = call  i32 @cudaGetLastError()
  ret i32 %call
}

declare  i32 @cudaGetLastError()

define  i32 @__pgi_peek_at_last_error() nounwind alwaysinline {
entry:
  %call = call  i32 @cudaPeekAtLastError()
  ret i32 %call
}

declare  i32 @cudaPeekAtLastError()

define  void @__pgi_get_error_string(i8* %string, i32 %len, i32 %error) nounwind alwaysinline {
entry:
  %string.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %error.addr = alloca i32, align 4
  %src = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 %error, i32* %error.addr, align 4
  %0 = load i32* %error.addr, align 4
  %call = call  i8* @cudaGetErrorString(i32 %0)
  store i8* %call, i8** %src, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i32* %len.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8** %src, align 8
  %3 = load i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load i8** %string.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %string.addr, align 8
  store i8 32, i8* %4, align 1
  br label %if.end

if.else:                                          ; preds = %while.body
  %5 = load i8** %src, align 8
  %incdec.ptr3 = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr3, i8** %src, align 8
  %6 = load i8* %5, align 1
  %7 = load i8** %string.addr, align 8
  %incdec.ptr4 = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr4, i8** %string.addr, align 8
  store i8 %6, i8* %7, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare  i8* @cudaGetErrorString(i32)

define  void @pgf90_str_cpy1(i8* %dst, i64 %dlen, i8* %src, i64 %slen) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dlen.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dlen, i64* %dlen.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %slen, i64* %slen.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64* %dlen.addr, align 8
  %dec = add i64 %0, -1
  store i64 %dec, i64* %dlen.addr, align 8
  %cmp = icmp ugt i64 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64* %slen.addr, align 8
  %cmp1 = icmp ugt i64 %1, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %2 = load i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %2, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %3 = load i8* %2, align 1
  %4 = load i8** %dst.addr, align 8
  %incdec.ptr2 = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr2, i8** %dst.addr, align 8
  store i8 %3, i8* %4, align 1
  %5 = load i64* %slen.addr, align 8
  %dec3 = add i64 %5, -1
  store i64 %dec3, i64* %slen.addr, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %6 = load i8** %dst.addr, align 8
  %incdec.ptr4 = getelementptr inbounds i8* %6, i32 1
  store i8* %incdec.ptr4, i8** %dst.addr, align 8
  store i8 32, i8* %6, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

define  void @pgf90_str_copy(i32 %n, i8* %dst, i64 %dlen, i8* %src, i64 %slen) nounwind alwaysinline {
entry:
  %n.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dlen.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dlen, i64* %dlen.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %slen, i64* %slen.addr, align 8
  %0 = load i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %1 = load i64* %dlen.addr, align 8
  %dec = add i64 %1, -1
  store i64 %dec, i64* %dlen.addr, align 8
  %cmp1 = icmp ugt i64 %1, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i64* %slen.addr, align 8
  %cmp2 = icmp ugt i64 %2, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %while.body
  %3 = load i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %3, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %4 = load i8* %3, align 1
  %5 = load i8** %dst.addr, align 8
  %incdec.ptr4 = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr4, i8** %dst.addr, align 8
  store i8 %4, i8* %5, align 1
  %6 = load i64* %slen.addr, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %slen.addr, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %7 = load i8** %dst.addr, align 8
  %incdec.ptr6 = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %dst.addr, align 8
  store i8 32, i8* %7, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end7

if.end7:                                          ; preds = %while.end, %entry
  ret void
}

define  i32 @pgf90_strcmp(i8* %a1, i8* %a2, i64 %d1_len, i64 %d2_len) nounwind alwaysinline {
entry:
  %retval.i93 = alloca i32, align 4
  %s1.addr.i94 = alloca i8*, align 8
  %s2.addr.i95 = alloca i8*, align 8
  %num_bytes.addr.i96 = alloca i32, align 4
  %i.i97 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %s1.addr.i = alloca i8*, align 8
  %s2.addr.i = alloca i8*, align 8
  %num_bytes.addr.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %a1.addr = alloca i8*, align 8
  %a2.addr = alloca i8*, align 8
  %d1_len.addr = alloca i64, align 8
  %d2_len.addr = alloca i64, align 8
  %ret_val = alloca i32, align 4
  %idx1 = alloca i32, align 4
  %a1_len = alloca i32, align 4
  %a2_len = alloca i32, align 4
  store i8* %a1, i8** %a1.addr, align 8
  store i8* %a2, i8** %a2.addr, align 8
  store i64 %d1_len, i64* %d1_len.addr, align 8
  store i64 %d2_len, i64* %d2_len.addr, align 8
  %0 = load i64* %d1_len.addr, align 8
  %conv = trunc i64 %0 to i32
  store i32 %conv, i32* %a1_len, align 4
  %1 = load i64* %d2_len.addr, align 8
  %conv1 = trunc i64 %1 to i32
  store i32 %conv1, i32* %a2_len, align 4
  %2 = load i32* %a1_len, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %a1_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32* %a2_len, align 4
  %cmp3 = icmp slt i32 %3, 0
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %a2_len, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end
  %4 = load i32* %a1_len, align 4
  %5 = load i32* %a2_len, align 4
  %cmp7 = icmp eq i32 %4, %5
  br i1 %cmp7, label %if.then9, label %if.end25

if.then9:                                         ; preds = %if.end6
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.then9
  %6 = load i32* %a1_len, align 4
  %cmp10 = icmp sgt i32 %6, 0
  br i1 %cmp10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8** %a1.addr, align 8
  %8 = load i8* %7, align 1
  %conv12 = sext i8 %8 to i32
  %9 = load i8** %a2.addr, align 8
  %10 = load i8* %9, align 1
  %conv13 = sext i8 %10 to i32
  %cmp14 = icmp ne i32 %conv12, %conv13
  br i1 %cmp14, label %if.then16, label %if.end23

if.then16:                                        ; preds = %while.body
  %11 = load i8** %a1.addr, align 8
  %12 = load i8* %11, align 1
  %conv17 = sext i8 %12 to i32
  %13 = load i8** %a2.addr, align 8
  %14 = load i8* %13, align 1
  %conv18 = sext i8 %14 to i32
  %cmp19 = icmp ugt i32 %conv17, %conv18
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.then16
  store i32 1, i32* %retval
  br label %return

if.end22:                                         ; preds = %if.then16
  store i32 -1, i32* %retval
  br label %return

if.end23:                                         ; preds = %while.body
  %15 = load i8** %a1.addr, align 8
  %incdec.ptr = getelementptr inbounds i8* %15, i32 1
  store i8* %incdec.ptr, i8** %a1.addr, align 8
  %16 = load i8** %a2.addr, align 8
  %incdec.ptr24 = getelementptr inbounds i8* %16, i32 1
  store i8* %incdec.ptr24, i8** %a2.addr, align 8
  %17 = load i32* %a1_len, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %a1_len, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  br label %return

if.end25:                                         ; preds = %if.end6
  %18 = load i32* %a1_len, align 4
  %19 = load i32* %a2_len, align 4
  %cmp26 = icmp sgt i32 %18, %19
  br i1 %cmp26, label %if.then28, label %if.else

if.then28:                                        ; preds = %if.end25
  %20 = load i8** %a1.addr, align 8
  %21 = load i8** %a2.addr, align 8
  %22 = load i32* %a2_len, align 4
  store i8* %20, i8** %s1.addr.i, align 8
  store i8* %21, i8** %s2.addr.i, align 8
  store i32 %22, i32* %num_bytes.addr.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end15.i, %if.then28
  %23 = load i32* %i.i, align 4
  %24 = load i32* %num_bytes.addr.i, align 4
  %cmp.i = icmp slt i32 %23, %24
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %25 = load i32* %i.i, align 4
  %idxprom.i = sext i32 %25 to i64
  %26 = load i8** %s1.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %26, i64 %idxprom.i
  %27 = load i8* %arrayidx.i, align 1
  %conv.i = sext i8 %27 to i32
  %28 = load i32* %i.i, align 4
  %idxprom1.i = sext i32 %28 to i64
  %29 = load i8** %s2.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8* %29, i64 %idxprom1.i
  %30 = load i8* %arrayidx2.i, align 1
  %conv3.i = sext i8 %30 to i32
  %cmp4.i = icmp slt i32 %conv.i, %conv3.i
  br i1 %cmp4.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body.i
  store i32 -1, i32* %retval.i
  br label %__pgi_memcmp.exit

if.end.i:                                         ; preds = %for.body.i
  %31 = load i32* %i.i, align 4
  %idxprom6.i = sext i32 %31 to i64
  %32 = load i8** %s1.addr.i, align 8
  %arrayidx7.i = getelementptr inbounds i8* %32, i64 %idxprom6.i
  %33 = load i8* %arrayidx7.i, align 1
  %conv8.i = sext i8 %33 to i32
  %34 = load i32* %i.i, align 4
  %idxprom9.i = sext i32 %34 to i64
  %35 = load i8** %s2.addr.i, align 8
  %arrayidx10.i = getelementptr inbounds i8* %35, i64 %idxprom9.i
  %36 = load i8* %arrayidx10.i, align 1
  %conv11.i = sext i8 %36 to i32
  %cmp12.i = icmp sgt i32 %conv8.i, %conv11.i
  br i1 %cmp12.i, label %if.then14.i, label %if.end15.i

if.then14.i:                                      ; preds = %if.end.i
  store i32 1, i32* %retval.i
  br label %__pgi_memcmp.exit

if.end15.i:                                       ; preds = %if.end.i
  %37 = load i32* %i.i, align 4
  %inc.i = add nsw i32 %37, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  store i32 0, i32* %retval.i
  br label %__pgi_memcmp.exit

__pgi_memcmp.exit:                                ; preds = %for.end.i, %if.then14.i, %if.then.i
  %38 = load i32* %retval.i
  store i32 %38, i32* %ret_val, align 4
  %39 = load i32* %ret_val, align 4
  %cmp29 = icmp ne i32 %39, 0
  br i1 %cmp29, label %if.then31, label %if.end40

if.then31:                                        ; preds = %__pgi_memcmp.exit
  %40 = load i32* %ret_val, align 4
  %cmp32 = icmp slt i32 %40, 0
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then31
  store i32 -1, i32* %retval
  br label %return

if.end35:                                         ; preds = %if.then31
  %41 = load i32* %ret_val, align 4
  %cmp36 = icmp sgt i32 %41, 0
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end35
  store i32 1, i32* %retval
  br label %return

if.end39:                                         ; preds = %if.end35
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %__pgi_memcmp.exit
  store i32 0, i32* %idx1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end40
  %42 = load i32* %idx1, align 4
  %43 = load i32* %a1_len, align 4
  %44 = load i32* %a2_len, align 4
  %sub = sub nsw i32 %43, %44
  %cmp41 = icmp slt i32 %42, %sub
  br i1 %cmp41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %45 = load i32* %a2_len, align 4
  %46 = load i32* %idx1, align 4
  %add = add nsw i32 %45, %46
  %idxprom = sext i32 %add to i64
  %47 = load i8** %a1.addr, align 8
  %arrayidx = getelementptr inbounds i8* %47, i64 %idxprom
  %48 = load i8* %arrayidx, align 1
  %conv43 = sext i8 %48 to i32
  %cmp44 = icmp ne i32 %conv43, 32
  br i1 %cmp44, label %if.then46, label %if.end55

if.then46:                                        ; preds = %for.body
  %49 = load i32* %a2_len, align 4
  %50 = load i32* %idx1, align 4
  %add47 = add nsw i32 %49, %50
  %idxprom48 = sext i32 %add47 to i64
  %51 = load i8** %a1.addr, align 8
  %arrayidx49 = getelementptr inbounds i8* %51, i64 %idxprom48
  %52 = load i8* %arrayidx49, align 1
  %conv50 = sext i8 %52 to i32
  %cmp51 = icmp sgt i32 %conv50, 32
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then46
  store i32 1, i32* %retval
  br label %return

if.end54:                                         ; preds = %if.then46
  store i32 -1, i32* %retval
  br label %return

if.end55:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end55
  %53 = load i32* %idx1, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %idx1, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end25
  %54 = load i8** %a1.addr, align 8
  %55 = load i8** %a2.addr, align 8
  %56 = load i32* %a1_len, align 4
  store i8* %54, i8** %s1.addr.i94, align 8
  store i8* %55, i8** %s2.addr.i95, align 8
  store i32 %56, i32* %num_bytes.addr.i96, align 4
  store i32 0, i32* %i.i97, align 4
  br label %for.cond.i99

for.cond.i99:                                     ; preds = %if.end15.i118, %if.else
  %57 = load i32* %i.i97, align 4
  %58 = load i32* %num_bytes.addr.i96, align 4
  %cmp.i98 = icmp slt i32 %57, %58
  br i1 %cmp.i98, label %for.body.i107, label %for.end.i120

for.body.i107:                                    ; preds = %for.cond.i99
  %59 = load i32* %i.i97, align 4
  %idxprom.i100 = sext i32 %59 to i64
  %60 = load i8** %s1.addr.i94, align 8
  %arrayidx.i101 = getelementptr inbounds i8* %60, i64 %idxprom.i100
  %61 = load i8* %arrayidx.i101, align 1
  %conv.i102 = sext i8 %61 to i32
  %62 = load i32* %i.i97, align 4
  %idxprom1.i103 = sext i32 %62 to i64
  %63 = load i8** %s2.addr.i95, align 8
  %arrayidx2.i104 = getelementptr inbounds i8* %63, i64 %idxprom1.i103
  %64 = load i8* %arrayidx2.i104, align 1
  %conv3.i105 = sext i8 %64 to i32
  %cmp4.i106 = icmp slt i32 %conv.i102, %conv3.i105
  br i1 %cmp4.i106, label %if.then.i108, label %if.end.i116

if.then.i108:                                     ; preds = %for.body.i107
  store i32 -1, i32* %retval.i93
  br label %__pgi_memcmp.exit121

if.end.i116:                                      ; preds = %for.body.i107
  %65 = load i32* %i.i97, align 4
  %idxprom6.i109 = sext i32 %65 to i64
  %66 = load i8** %s1.addr.i94, align 8
  %arrayidx7.i110 = getelementptr inbounds i8* %66, i64 %idxprom6.i109
  %67 = load i8* %arrayidx7.i110, align 1
  %conv8.i111 = sext i8 %67 to i32
  %68 = load i32* %i.i97, align 4
  %idxprom9.i112 = sext i32 %68 to i64
  %69 = load i8** %s2.addr.i95, align 8
  %arrayidx10.i113 = getelementptr inbounds i8* %69, i64 %idxprom9.i112
  %70 = load i8* %arrayidx10.i113, align 1
  %conv11.i114 = sext i8 %70 to i32
  %cmp12.i115 = icmp sgt i32 %conv8.i111, %conv11.i114
  br i1 %cmp12.i115, label %if.then14.i117, label %if.end15.i118

if.then14.i117:                                   ; preds = %if.end.i116
  store i32 1, i32* %retval.i93
  br label %__pgi_memcmp.exit121

if.end15.i118:                                    ; preds = %if.end.i116
  %71 = load i32* %i.i97, align 4
  %inc.i119 = add nsw i32 %71, 1
  store i32 %inc.i119, i32* %i.i97, align 4
  br label %for.cond.i99

for.end.i120:                                     ; preds = %for.cond.i99
  store i32 0, i32* %retval.i93
  br label %__pgi_memcmp.exit121

__pgi_memcmp.exit121:                             ; preds = %for.end.i120, %if.then14.i117, %if.then.i108
  %72 = load i32* %retval.i93
  store i32 %72, i32* %ret_val, align 4
  %73 = load i32* %ret_val, align 4
  %cmp57 = icmp ne i32 %73, 0
  br i1 %cmp57, label %if.then59, label %if.end68

if.then59:                                        ; preds = %__pgi_memcmp.exit121
  %74 = load i32* %ret_val, align 4
  %cmp60 = icmp slt i32 %74, 0
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.then59
  store i32 -1, i32* %retval
  br label %return

if.end63:                                         ; preds = %if.then59
  %75 = load i32* %ret_val, align 4
  %cmp64 = icmp sgt i32 %75, 0
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  store i32 1, i32* %retval
  br label %return

if.end67:                                         ; preds = %if.end63
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %__pgi_memcmp.exit121
  store i32 0, i32* %idx1, align 4
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc90, %if.end68
  %76 = load i32* %idx1, align 4
  %77 = load i32* %a2_len, align 4
  %78 = load i32* %a1_len, align 4
  %sub70 = sub nsw i32 %77, %78
  %cmp71 = icmp slt i32 %76, %sub70
  br i1 %cmp71, label %for.body73, label %for.end92

for.body73:                                       ; preds = %for.cond69
  %79 = load i32* %a1_len, align 4
  %80 = load i32* %idx1, align 4
  %add74 = add nsw i32 %79, %80
  %idxprom75 = sext i32 %add74 to i64
  %81 = load i8** %a2.addr, align 8
  %arrayidx76 = getelementptr inbounds i8* %81, i64 %idxprom75
  %82 = load i8* %arrayidx76, align 1
  %conv77 = sext i8 %82 to i32
  %cmp78 = icmp ne i32 %conv77, 32
  br i1 %cmp78, label %if.then80, label %if.end89

if.then80:                                        ; preds = %for.body73
  %83 = load i32* %a1_len, align 4
  %84 = load i32* %idx1, align 4
  %add81 = add nsw i32 %83, %84
  %idxprom82 = sext i32 %add81 to i64
  %85 = load i8** %a2.addr, align 8
  %arrayidx83 = getelementptr inbounds i8* %85, i64 %idxprom82
  %86 = load i8* %arrayidx83, align 1
  %conv84 = sext i8 %86 to i32
  %cmp85 = icmp sgt i32 %conv84, 32
  br i1 %cmp85, label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.then80
  store i32 -1, i32* %retval
  br label %return

if.end88:                                         ; preds = %if.then80
  store i32 1, i32* %retval
  br label %return

if.end89:                                         ; preds = %for.body73
  br label %for.inc90

for.inc90:                                        ; preds = %if.end89
  %87 = load i32* %idx1, align 4
  %inc91 = add nsw i32 %87, 1
  store i32 %inc91, i32* %idx1, align 4
  br label %for.cond69

for.end92:                                        ; preds = %for.cond69
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end92, %if.end88, %if.then87, %if.then66, %if.then62, %for.end, %if.end54, %if.then53, %if.then38, %if.then34, %while.end, %if.end22, %if.then21
  %88 = load i32* %retval
  ret i32 %88
}

define  i32 @pgf90_allocated(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated_i8(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated2(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated2_i8(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated_lhs(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([53 x i8]* @.str3, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated_lhs_i8(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([53 x i8]* @.str3, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated_lhs2(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([53 x i8]* @.str3, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  i32 @pgf90_allocated_lhs2_i8(i8* %p, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %p.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %__filename.addr, align 8
  %2 = load i32* %__lineno.addr, align 4
  %3 = load i8** %__function.addr, align 8
  %4 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %__filename.addr.i, align 8
  store i32 %2, i32* %__lineno.addr.i, align 4
  store i8* %3, i8** %__function.addr.i, align 8
  store i32 %4, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([53 x i8]* @.str3, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %5 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %6 = load i8** %__filename.addr.i, align 8
  store i8* %6, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %7 = load i8** %str.addr.i.i, align 8
  %8 = load i8* %7, align 1
  %conv.i.i = sext i8 %8 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %9 = load i32* %len.i.i, align 4
  %10 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %9, %10
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %11 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %11, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %12 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %12, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %13 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %13, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %14 = load i32* %len.i.i, align 4
  store i32 %14, i32* %fnamelen.i, align 4
  %15 = load i8** %__function.addr.i, align 8
  store i8* %15, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %16 = load i8** %str.addr.i68.i, align 8
  %17 = load i8* %16, align 1
  %conv.i71.i = sext i8 %17 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %18 = load i32* %len.i70.i, align 4
  %19 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %18, %19
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %20 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %20, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %21 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %21, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %22 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %22, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %23 = load i32* %len.i70.i, align 4
  store i32 %23, i32* %funclen.i, align 4
  %24 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %24, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %25 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %25, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %26 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %26, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %26 to i64
  %27 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %27, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %28 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %28, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %29 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %29, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %30 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %30, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %31 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %31, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %32, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %33 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %33, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %34 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %35, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %36 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %36, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %37 = load i32* %start.i.i, align 4
  %38 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %37, %38
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %39 = load i8** %str.addr.i107.i, align 8
  %40 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %40 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %39, i64 %idx.ext.i.i
  %41 = load i8* %add.ptr.i.i, align 1
  store i8 %41, i8* %tmp.i.i, align 1
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %43 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %42, i64 %idx.ext11.i.i
  %44 = load i8* %add.ptr12.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %46 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %45, i64 %idx.ext13.i.i
  store i8 %44, i8* %add.ptr14.i.i, align 1
  %47 = load i8* %tmp.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %49 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %48, i64 %idx.ext15.i.i
  store i8 %47, i8* %add.ptr16.i.i, align 1
  %50 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %50, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %51 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %51, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %52 = load i8** %str.addr.i94.i, align 8
  %53 = load i8* %52, align 1
  %conv.i97.i = sext i8 %53 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %54 = load i32* %len.i96.i, align 4
  %55 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %54, %55
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %56 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %56, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %57 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %57, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %58 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %58, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %59 = load i32* %len.i96.i, align 4
  store i32 %59, i32* %linenolen.i, align 4
  %60 = load i8** %errmsg.addr.i, align 8
  store i8* %60, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %61 = load i8** %str.addr.i81.i, align 8
  %62 = load i8* %61, align 1
  %conv.i84.i = sext i8 %62 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %63 = load i32* %len.i83.i, align 4
  %64 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %63, %64
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %65 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %65, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %66 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %66, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %67 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %67, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %68 = load i32* %len.i83.i, align 4
  store i32 %68, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %69 = load i32* %i.i, align 4
  %70 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %69, %70
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %71 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %71 to i64
  %72 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %72, i64 %idxprom.i
  %73 = load i8* %arrayidx.i, align 1
  %74 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %74 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %73, i8* %arrayidx6.i, align 1
  %75 = load i32* %i.i, align 4
  %inc.i = add i32 %75, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %76 = load i32* %curr.i, align 4
  %77 = load i32* %i.i, align 4
  %add.i = add i32 %76, %77
  store i32 %add.i, i32* %curr.i, align 4
  %78 = load i32* %curr.i, align 4
  %inc7.i = add i32 %78, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %78 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %79 = load i32* %i.i, align 4
  %80 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %79, %80
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %81 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %81 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %82 = load i8* %arrayidx14.i, align 1
  %83 = load i32* %curr.i, align 4
  %84 = load i32* %i.i, align 4
  %add15.i = add i32 %83, %84
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %82, i8* %arrayidx17.i, align 1
  %85 = load i32* %i.i, align 4
  %inc19.i = add i32 %85, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add21.i = add i32 %86, %87
  store i32 %add21.i, i32* %curr.i, align 4
  %88 = load i32* %curr.i, align 4
  %inc22.i = add i32 %88, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %88 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %89 = load i32* %curr.i, align 4
  %inc25.i = add i32 %89, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %89 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %90 = load i32* %curr.i, align 4
  %inc28.i = add i32 %90, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %90 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %91 = load i32* %i.i, align 4
  %92 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %91, %92
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %93 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %93 to i64
  %94 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %94, i64 %idxprom34.i
  %95 = load i8* %arrayidx35.i, align 1
  %96 = load i32* %curr.i, align 4
  %97 = load i32* %i.i, align 4
  %add36.i = add i32 %96, %97
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %95, i8* %arrayidx38.i, align 1
  %98 = load i32* %i.i, align 4
  %inc40.i = add i32 %98, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add42.i = add i32 %99, %100
  store i32 %add42.i, i32* %curr.i, align 4
  %101 = load i32* %curr.i, align 4
  %inc43.i = add i32 %101, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %101 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %102 = load i32* %curr.i, align 4
  %inc46.i = add i32 %102, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %102 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %103 = load i32* %i.i, align 4
  %104 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %103, %104
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %105 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %105 to i64
  %106 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %106, i64 %idxprom52.i
  %107 = load i8* %arrayidx53.i, align 1
  %108 = load i32* %curr.i, align 4
  %109 = load i32* %i.i, align 4
  %add54.i = add i32 %108, %109
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %107, i8* %arrayidx56.i, align 1
  %110 = load i32* %i.i, align 4
  %inc58.i = add i32 %110, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add60.i = add i32 %111, %112
  store i32 %add60.i, i32* %curr.i, align 4
  %113 = load i32* %curr.i, align 4
  %inc61.i = add i32 %113, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %113 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %114 = load i32* %curr.i, align 4
  %inc64.i = add i32 %114, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %114 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %115 = load i8** %p.addr, align 8
  %cmp1 = icmp ne i8* %115, null
  %conv = zext i1 %cmp1 to i32
  ret i32 %conv
}

define  void @pgf90_dealloc03a(i8* %stat, i8* %area, i8* %firsttime, i8* %errmsg, i64 %lenmsg) nounwind alwaysinline {
entry:
  %stat.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %lenmsg.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %lenmsg, i64* %lenmsg.addr, align 8
  %0 = load i8** %area.addr, align 8
  call  void @free(i8* %0)
  ret void
}

define  void @pgf90_dealloc03(i8* %stat, i8* %area, i8* %firsttime, i8* %errmsg, i64 %lenmsg) nounwind alwaysinline {
entry:
  %stat.addr.i = alloca i8*, align 8
  %area.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %lenmsg.addr.i = alloca i64, align 8
  %stat.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %lenmsg.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %lenmsg, i64* %lenmsg.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %1 = load i8** %area.addr, align 8
  %2 = load i8** %firsttime.addr, align 8
  %3 = load i8** %errmsg.addr, align 8
  %4 = load i64* %lenmsg.addr, align 8
  store i8* %0, i8** %stat.addr.i, align 8
  store i8* %1, i8** %area.addr.i, align 8
  store i8* %2, i8** %firsttime.addr.i, align 8
  store i8* %3, i8** %errmsg.addr.i, align 8
  store i64 %4, i64* %lenmsg.addr.i, align 8
  %5 = load i8** %area.addr.i, align 8
  call  void @free(i8* %5) nounwind
  ret void
}

define  void @pgf90_dealloc03a_i8(i8* %stat, i8* %area, i8* %firsttime, i8* %errmsg, i64 %lenmsg) nounwind alwaysinline {
entry:
  %stat.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %lenmsg.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %lenmsg, i64* %lenmsg.addr, align 8
  %0 = load i8** %area.addr, align 8
  call  void @free(i8* %0)
  ret void
}

define  void @pgf90_dealloc03_i8(i8* %stat, i8* %area, i8* %firsttime, i8* %errmsg, i64 %lenmsg) nounwind alwaysinline {
entry:
  %stat.addr.i = alloca i8*, align 8
  %area.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %lenmsg.addr.i = alloca i64, align 8
  %stat.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %errmsg.addr = alloca i8*, align 8
  %lenmsg.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i8* %errmsg, i8** %errmsg.addr, align 8
  store i64 %lenmsg, i64* %lenmsg.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %1 = load i8** %area.addr, align 8
  %2 = load i8** %firsttime.addr, align 8
  %3 = load i8** %errmsg.addr, align 8
  %4 = load i64* %lenmsg.addr, align 8
  store i8* %0, i8** %stat.addr.i, align 8
  store i8* %1, i8** %area.addr.i, align 8
  store i8* %2, i8** %firsttime.addr.i, align 8
  store i8* %3, i8** %errmsg.addr.i, align 8
  store i64 %4, i64* %lenmsg.addr.i, align 8
  %5 = load i8** %area.addr.i, align 8
  call  void @free(i8* %5) nounwind
  ret void
}

define  void @pgf90_dealloc_mbr03a(i8* %stat, i8* %area, i8* %firsttime, i64 %dummy) nounwind alwaysinline {
entry:
  %stat.addr.i = alloca i8*, align 8
  %area.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %lenmsg.addr.i = alloca i64, align 8
  %stat.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %dummy.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i64 %dummy, i64* %dummy.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %1 = load i8** %area.addr, align 8
  %2 = load i8** %firsttime.addr, align 8
  store i8* %0, i8** %stat.addr.i, align 8
  store i8* %1, i8** %area.addr.i, align 8
  store i8* %2, i8** %firsttime.addr.i, align 8
  store i8* null, i8** %errmsg.addr.i, align 8
  store i64 0, i64* %lenmsg.addr.i, align 8
  %3 = load i8** %area.addr.i, align 8
  call  void @free(i8* %3) nounwind
  ret void
}

define  void @pgf90_dealloc_mbr03a_i8(i8* %stat, i8* %area, i8* %firsttime, i64 %dummy) nounwind alwaysinline {
entry:
  %stat.addr.i = alloca i8*, align 8
  %area.addr.i = alloca i8*, align 8
  %firsttime.addr.i = alloca i8*, align 8
  %errmsg.addr.i = alloca i8*, align 8
  %lenmsg.addr.i = alloca i64, align 8
  %stat.addr = alloca i8*, align 8
  %area.addr = alloca i8*, align 8
  %firsttime.addr = alloca i8*, align 8
  %dummy.addr = alloca i64, align 8
  store i8* %stat, i8** %stat.addr, align 8
  store i8* %area, i8** %area.addr, align 8
  store i8* %firsttime, i8** %firsttime.addr, align 8
  store i64 %dummy, i64* %dummy.addr, align 8
  %0 = load i8** %stat.addr, align 8
  %1 = load i8** %area.addr, align 8
  %2 = load i8** %firsttime.addr, align 8
  store i8* %0, i8** %stat.addr.i, align 8
  store i8* %1, i8** %area.addr.i, align 8
  store i8* %2, i8** %firsttime.addr.i, align 8
  store i8* null, i8** %errmsg.addr.i, align 8
  store i64 0, i64* %lenmsg.addr.i, align 8
  %3 = load i8** %area.addr.i, align 8
  call  void @free(i8* %3) nounwind
  ret void
}

define  i32 @__pgi_get_device_count(i8* %count) nounwind alwaysinline {
entry:
  %count.addr = alloca i8*, align 8
  store i8* %count, i8** %count.addr, align 8
  %0 = load i8** %count.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %call = call  i32 @cudaGetDeviceCount(i32* %1)
  ret i32 %call
}

declare  i32 @cudaGetDeviceCount(i32*)

define  i32 @__pgi_get_device_properties(i8* %props, i32 %device) nounwind alwaysinline {
entry:
  %props.addr = alloca i8*, align 8
  %device.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %stat = alloca i32, align 4
  %p = alloca %struct.cudaDeviceProp*, align 8
  store i8* %props, i8** %props.addr, align 8
  store i32 %device, i32* %device.addr, align 4
  %0 = load i8** %props.addr, align 8
  %1 = bitcast i8* %0 to %struct.cudaDeviceProp*
  store %struct.cudaDeviceProp* %1, %struct.cudaDeviceProp** %p, align 8
  %2 = load %struct.cudaDeviceProp** %p, align 8
  %3 = load i32* %device.addr, align 4
  %call = call  i32 @cudaGetDeviceProperties(%struct.cudaDeviceProp* %2, i32 %3)
  store i32 %call, i32* %stat, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32* %i, align 4
  %cmp = icmp slt i32 %4, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.cudaDeviceProp** %p, align 8
  %name = getelementptr inbounds %struct.cudaDeviceProp* %6, i32 0, i32 0
  %arrayidx = getelementptr inbounds [256 x i8]* %name, i32 0, i64 %idxprom
  %7 = load i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %9 = load i32* %i, align 4
  %cmp3 = icmp slt i32 %9, 256
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load %struct.cudaDeviceProp** %p, align 8
  %name7 = getelementptr inbounds %struct.cudaDeviceProp* %11, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [256 x i8]* %name7, i32 0, i64 %idxprom6
  store i8 32, i8* %arrayidx8, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32* %stat, align 4
  ret i32 %12
}

declare  i32 @cudaGetDeviceProperties(%struct.cudaDeviceProp*, i32)

define  i32 @__pgi_get_device(i8* %device) nounwind alwaysinline {
entry:
  %device.addr = alloca i8*, align 8
  store i8* %device, i8** %device.addr, align 8
  %0 = load i8** %device.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %call = call  i32 @cudaGetDevice(i32* %1)
  ret i32 %call
}

declare  i32 @cudaGetDevice(i32*)

define  i32 @__pgi_stream_create_with_flags(i8* %stream, i32 %flags) nounwind alwaysinline {
entry:
  %stream.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %stream, i8** %stream.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8** %stream.addr, align 8
  %1 = bitcast i8* %0 to %struct.CUstream_st**
  %2 = load i32* %flags.addr, align 4
  %call = call  i32 @cudaStreamCreateWithFlags(%struct.CUstream_st** %1, i32 %2)
  ret i32 %call
}

declare  i32 @cudaStreamCreateWithFlags(%struct.CUstream_st**, i32)

define  i32 @__pgi_stream_destroy(i64 %stream) nounwind alwaysinline {
entry:
  %stream.addr = alloca i64, align 8
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i64* %stream.addr, align 8
  %1 = inttoptr i64 %0 to %struct.CUstream_st*
  %call = call  i32 @cudaStreamDestroy(%struct.CUstream_st* %1)
  ret i32 %call
}

declare  i32 @cudaStreamDestroy(%struct.CUstream_st*)

define  i32 @__pgi_stream_wait_event(i64 %stream, i64 %event, i32 %flags) nounwind alwaysinline {
entry:
  %stream.addr = alloca i64, align 8
  %event.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %stream, i64* %stream.addr, align 8
  store i64 %event, i64* %event.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64* %stream.addr, align 8
  %1 = inttoptr i64 %0 to %struct.CUstream_st*
  %2 = load i64* %event.addr, align 8
  %3 = inttoptr i64 %2 to %struct.CUevent_st*
  %4 = load i32* %flags.addr, align 4
  %call = call  i32 @cudaStreamWaitEvent(%struct.CUstream_st* %1, %struct.CUevent_st* %3, i32 %4)
  ret i32 %call
}

declare  i32 @cudaStreamWaitEvent(%struct.CUstream_st*, %struct.CUevent_st*, i32)

define  i32 @__pgi_event_create_with_flags(i8* %event, i32 %flags) nounwind alwaysinline {
entry:
  %event.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %event, i8** %event.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8** %event.addr, align 8
  %1 = bitcast i8* %0 to %struct.CUevent_st**
  %2 = load i32* %flags.addr, align 4
  %call = call  i32 @cudaEventCreateWithFlags(%struct.CUevent_st** %1, i32 %2)
  ret i32 %call
}

declare  i32 @cudaEventCreateWithFlags(%struct.CUevent_st**, i32)

define  i32 @__pgi_event_record(i64 %event, i64 %stream) nounwind alwaysinline {
entry:
  %event.addr = alloca i64, align 8
  %stream.addr = alloca i64, align 8
  store i64 %event, i64* %event.addr, align 8
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i64* %event.addr, align 8
  %1 = inttoptr i64 %0 to %struct.CUevent_st*
  %2 = load i64* %stream.addr, align 8
  %3 = inttoptr i64 %2 to %struct.CUstream_st*
  %call = call  i32 @cudaEventRecord(%struct.CUevent_st* %1, %struct.CUstream_st* %3)
  ret i32 %call
}

declare  i32 @cudaEventRecord(%struct.CUevent_st*, %struct.CUstream_st*)

define  i32 @__pgi_event_destroy(i64 %event) nounwind alwaysinline {
entry:
  %event.addr = alloca i64, align 8
  store i64 %event, i64* %event.addr, align 8
  %0 = load i64* %event.addr, align 8
  %1 = inttoptr i64 %0 to %struct.CUevent_st*
  %call = call  i32 @cudaEventDestroy(%struct.CUevent_st* %1)
  ret i32 %call
}

declare  i32 @cudaEventDestroy(%struct.CUevent_st*)

define  i32 @__pgi_func_get_attributes(i8* %attr, i8* %func) nounwind alwaysinline {
entry:
  %attr.addr = alloca i8*, align 8
  %func.addr = alloca i8*, align 8
  store i8* %attr, i8** %attr.addr, align 8
  store i8* %func, i8** %func.addr, align 8
  %0 = load i8** %attr.addr, align 8
  %1 = bitcast i8* %0 to %struct.cudaFuncAttributes*
  %2 = load i8** %func.addr, align 8
  %call = call  i32 @cudaFuncGetAttributes(%struct.cudaFuncAttributes* %1, i8* %2)
  ret i32 %call
}

declare  i32 @cudaFuncGetAttributes(%struct.cudaFuncAttributes*, i8*)

define  i32 @__pgi_runtime_get_version(i8* %ver) nounwind alwaysinline {
entry:
  %ver.addr = alloca i8*, align 8
  store i8* %ver, i8** %ver.addr, align 8
  %0 = load i8** %ver.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %call = call  i32 @cudaRuntimeGetVersion(i32* %1)
  ret i32 %call
}

declare  i32 @cudaRuntimeGetVersion(i32*)

define  i32 @__pgi_memcpy_asyncc1(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %2, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

declare  i32 @cudaMemcpyAsync(i8*, i8*, i64, i32, %struct.CUstream_st*)

define  i32 @__pgi_memcpy_asynci1(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %2, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asynci2(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 2
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asynci4(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 4
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asynci8(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncl1(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %2, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncl2(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 2
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncl4(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 4
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncl8(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncr4(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 4
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncr8(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncc8(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 8
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_asyncc16(i8* %dst, i8* %src, i64 %count, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i8** %src.addr, align 8
  %2 = load i64* %count.addr, align 8
  %mul = mul nsw i64 %2, 16
  %3 = load i32* %kind.addr, align 4
  %4 = load i64* %stream.addr, align 8
  %5 = inttoptr i64 %4 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpyAsync(i8* %0, i8* %1, i64 %mul, i32 %3, %struct.CUstream_st* %5)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncc1(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %4 = load i64* %width.addr, align 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

declare  i32 @cudaMemcpy2DAsync(i8*, i64, i8*, i64, i64, i64, i32, %struct.CUstream_st*)

define  i32 @__pgi_memcpy_2d_asynci1(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %4 = load i64* %width.addr, align 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asynci2(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 2
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 2
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 2
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asynci4(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 4
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 4
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 4
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asynci8(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 8
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncl1(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %4 = load i64* %width.addr, align 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncl2(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 2
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 2
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 2
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncl4(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 4
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 4
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 4
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncl8(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 8
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncr4(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 4
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 4
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 4
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncr8(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 8
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncc8(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 8
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 8
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 8
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_memcpy_2d_asyncc16(i8* %dst, i64 %dpitch, i8* %src, i64 %spitch, i64 %width, i64 %height, i32 %kind, i64 %stream) nounwind alwaysinline {
entry:
  %dst.addr = alloca i8*, align 8
  %dpitch.addr = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %spitch.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %kind.addr = alloca i32, align 4
  %stream.addr = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dpitch, i64* %dpitch.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %spitch, i64* %spitch.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  store i32 %kind, i32* %kind.addr, align 4
  store i64 %stream, i64* %stream.addr, align 8
  %0 = load i8** %dst.addr, align 8
  %1 = load i64* %spitch.addr, align 8
  %mul = mul nsw i64 %1, 16
  %2 = load i8** %src.addr, align 8
  %3 = load i64* %dpitch.addr, align 8
  %mul1 = mul nsw i64 %3, 16
  %4 = load i64* %width.addr, align 8
  %mul2 = mul nsw i64 %4, 16
  %5 = load i64* %height.addr, align 8
  %6 = load i32* %kind.addr, align 4
  %7 = load i64* %stream.addr, align 8
  %8 = inttoptr i64 %7 to %struct.CUstream_st*
  %call = call  i32 @cudaMemcpy2DAsync(i8* %0, i64 %mul, i8* %2, i64 %mul1, i64 %mul2, i64 %5, i32 %6, %struct.CUstream_st* %8)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocc1(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %2)
  ret i32 %call
}

declare  i32 @cudaMalloc(i8**, i64)

define  i32 @__pgi_cuda_malloci1(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %2)
  ret i32 %call
}

define  i32 @__pgi_cuda_malloci2(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 2
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_malloci4(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 4
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_malloci8(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocl1(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %2)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocl2(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 2
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocl4(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 4
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocl8(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocr4(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 4
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocr8(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocc8(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 8
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_mallocc16(i8* %p, i64 %n, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %desc.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i64* %n.addr, align 8
  %mul = mul nsw i64 %2, 16
  %call = call  i32 @cudaMalloc(i8** %1, i64 %mul)
  ret i32 %call
}

define  i32 @__pgi_cuda_freec1(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

declare  i32 @cudaFree(i8*)

define  i32 @__pgi_cuda_freei1(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freei2(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freei4(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freei8(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freel1(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freel2(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freel4(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freel8(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freer4(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freer8(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freec8(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  i32 @__pgi_cuda_freec16(i8* %p, i8* %desc) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %desc.addr = alloca i8*, align 8
  %stat = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i8* %desc, i8** %desc.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load i8** %1, align 8
  %call = call  i32 @cudaFree(i8* %2)
  store i32 %call, i32* %stat, align 4
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8** %p.addr, align 8
  %4 = bitcast i8* %3 to i8**
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32* %stat, align 4
  ret i32 %5
}

define  void @__pgi_dcmplx(%struct.dcmplx2* noalias sret %agg.result, double %real, double %imag) nounwind alwaysinline {
entry:
  %real.addr = alloca double, align 8
  %imag.addr = alloca double, align 8
  %retval = alloca %struct.dcmplx2, align 8
  store double %real, double* %real.addr, align 8
  store double %imag, double* %imag.addr, align 8
  %0 = load double* %real.addr, align 8
  %r = getelementptr inbounds %struct.dcmplx2* %retval, i32 0, i32 0
  store double %0, double* %r, align 8
  %1 = load double* %imag.addr, align 8
  %i = getelementptr inbounds %struct.dcmplx2* %retval, i32 0, i32 1
  store double %1, double* %i, align 8
  %2 = bitcast %struct.dcmplx2* %agg.result to i8*
  %3 = bitcast %struct.dcmplx2* %retval to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 16, i32 8, i1 false)
  ret void
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define  void @__pgi_scmplx(%struct.cmplx2* noalias sret %agg.result, float %real, float %imag) nounwind alwaysinline {
entry:
  %real.addr = alloca float, align 4
  %imag.addr = alloca float, align 4
  %retval = alloca %struct.cmplx2, align 4
  store float %real, float* %real.addr, align 4
  store float %imag, float* %imag.addr, align 4
  %0 = load float* %real.addr, align 4
  %r = getelementptr inbounds %struct.cmplx2* %retval, i32 0, i32 0
  store float %0, float* %r, align 4
  %1 = load float* %imag.addr, align 4
  %i = getelementptr inbounds %struct.cmplx2* %retval, i32 0, i32 1
  store float %1, float* %i, align 4
  %2 = bitcast %struct.cmplx2* %agg.result to i8*
  %3 = bitcast %struct.cmplx2* %retval to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 8, i32 4, i1 false)
  ret void
}

define  void @__pgi_vbarrier() nounwind alwaysinline {
entry:
  %bnum = alloca i32, align 4
  %numt = alloca i32, align 4
  %call = call  i32 @__pgi_threadidx(i32 2)
  %add = add nsw i32 %call, 1
  store i32 %add, i32* %bnum, align 4
  %call1 = call  i32 @__pgi_numthreads(i32 1)
  store i32 %call1, i32* %numt, align 4
  %call2 = call  i32 @__pgi_numthreads(i32 2)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @llvm.cuda.syncthreads()
  br label %if.end66

if.else:                                          ; preds = %entry
  %0 = load i32* %numt, align 4
  %cmp3 = icmp ule i32 %0, 32
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  call  void @__pgi_syncwarp()
  br label %if.end65

if.else5:                                         ; preds = %if.else
  %1 = load i32* %numt, align 4
  %cmp6 = icmp eq i32 %1, 64
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else5
  %2 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 64;", "r"(i32 %2) nounwind, !srcloc !171
  br label %if.end64

if.else8:                                         ; preds = %if.else5
  %3 = load i32* %numt, align 4
  %cmp9 = icmp eq i32 %3, 96
  br i1 %cmp9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else8
  %4 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 96;", "r"(i32 %4) nounwind, !srcloc !172
  br label %if.end63

if.else11:                                        ; preds = %if.else8
  %5 = load i32* %numt, align 4
  %cmp12 = icmp eq i32 %5, 128
  br i1 %cmp12, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.else11
  %6 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 128;", "r"(i32 %6) nounwind, !srcloc !173
  br label %if.end62

if.else14:                                        ; preds = %if.else11
  %7 = load i32* %numt, align 4
  %cmp15 = icmp eq i32 %7, 160
  br i1 %cmp15, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.else14
  %8 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 160;", "r"(i32 %8) nounwind, !srcloc !174
  br label %if.end61

if.else17:                                        ; preds = %if.else14
  %9 = load i32* %numt, align 4
  %cmp18 = icmp eq i32 %9, 192
  br i1 %cmp18, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else17
  %10 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 192;", "r"(i32 %10) nounwind, !srcloc !175
  br label %if.end60

if.else20:                                        ; preds = %if.else17
  %11 = load i32* %numt, align 4
  %cmp21 = icmp eq i32 %11, 224
  br i1 %cmp21, label %if.then22, label %if.else23

if.then22:                                        ; preds = %if.else20
  %12 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 224;", "r"(i32 %12) nounwind, !srcloc !176
  br label %if.end59

if.else23:                                        ; preds = %if.else20
  %13 = load i32* %numt, align 4
  %cmp24 = icmp eq i32 %13, 256
  br i1 %cmp24, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.else23
  %14 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 256;", "r"(i32 %14) nounwind, !srcloc !177
  br label %if.end58

if.else26:                                        ; preds = %if.else23
  %15 = load i32* %numt, align 4
  %cmp27 = icmp eq i32 %15, 288
  br i1 %cmp27, label %if.then28, label %if.else29

if.then28:                                        ; preds = %if.else26
  %16 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 288;", "r"(i32 %16) nounwind, !srcloc !178
  br label %if.end57

if.else29:                                        ; preds = %if.else26
  %17 = load i32* %numt, align 4
  %cmp30 = icmp eq i32 %17, 320
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %if.else29
  %18 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 320;", "r"(i32 %18) nounwind, !srcloc !179
  br label %if.end56

if.else32:                                        ; preds = %if.else29
  %19 = load i32* %numt, align 4
  %cmp33 = icmp eq i32 %19, 352
  br i1 %cmp33, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.else32
  %20 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 352;", "r"(i32 %20) nounwind, !srcloc !180
  br label %if.end55

if.else35:                                        ; preds = %if.else32
  %21 = load i32* %numt, align 4
  %cmp36 = icmp eq i32 %21, 384
  br i1 %cmp36, label %if.then37, label %if.else38

if.then37:                                        ; preds = %if.else35
  %22 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 384;", "r"(i32 %22) nounwind, !srcloc !181
  br label %if.end54

if.else38:                                        ; preds = %if.else35
  %23 = load i32* %numt, align 4
  %cmp39 = icmp eq i32 %23, 416
  br i1 %cmp39, label %if.then40, label %if.else41

if.then40:                                        ; preds = %if.else38
  %24 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 416;", "r"(i32 %24) nounwind, !srcloc !182
  br label %if.end53

if.else41:                                        ; preds = %if.else38
  %25 = load i32* %numt, align 4
  %cmp42 = icmp eq i32 %25, 448
  br i1 %cmp42, label %if.then43, label %if.else44

if.then43:                                        ; preds = %if.else41
  %26 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 448;", "r"(i32 %26) nounwind, !srcloc !183
  br label %if.end52

if.else44:                                        ; preds = %if.else41
  %27 = load i32* %numt, align 4
  %cmp45 = icmp eq i32 %27, 480
  br i1 %cmp45, label %if.then46, label %if.else47

if.then46:                                        ; preds = %if.else44
  %28 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 480;", "r"(i32 %28) nounwind, !srcloc !184
  br label %if.end51

if.else47:                                        ; preds = %if.else44
  %29 = load i32* %numt, align 4
  %cmp48 = icmp eq i32 %29, 512
  br i1 %cmp48, label %if.then49, label %if.else50

if.then49:                                        ; preds = %if.else47
  %30 = load i32* %bnum, align 4
  call void asm sideeffect "bar.sync $0, 512;", "r"(i32 %30) nounwind, !srcloc !185
  br label %if.end

if.else50:                                        ; preds = %if.else47
  br label %if.end

if.end:                                           ; preds = %if.else50, %if.then49
  br label %if.end51

if.end51:                                         ; preds = %if.end, %if.then46
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then43
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then40
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then37
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.then34
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then31
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then28
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then25
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then22
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then19
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then16
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then13
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then10
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then7
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then4
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then
  ret void
}

define  void @__pgi_vbarrier2() nounwind alwaysinline {
entry:
  %bnum = alloca i32, align 4
  %numt = alloca i32, align 4
  %call = call  i32 @__pgi_threadidx(i32 2)
  %add = add nsw i32 %call, 1
  store i32 %add, i32* %bnum, align 4
  %call1 = call  i32 @__pgi_numthreads(i32 1)
  store i32 %call1, i32* %numt, align 4
  %call2 = call  i32 @__pgi_numthreads(i32 2)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @llvm.cuda.syncthreads()
  br label %if.end13

if.else:                                          ; preds = %entry
  %0 = load i32* %numt, align 4
  %cmp3 = icmp ule i32 %0, 32
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  call  void @__pgi_syncwarp()
  br label %if.end12

if.else5:                                         ; preds = %if.else
  %1 = load i32* %bnum, align 4
  %cmp6 = icmp eq i32 %1, 1
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else5
  %2 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 1, $0;", "r"(i32 %2) nounwind, !srcloc !186
  br label %if.end11

if.else8:                                         ; preds = %if.else5
  %3 = load i32* %bnum, align 4
  %cmp9 = icmp eq i32 %3, 2
  br i1 %cmp9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.else8
  %4 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 2, $0;", "r"(i32 %4) nounwind, !srcloc !187
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.else8
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then7
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then4
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then
  ret void
}

define  void @__pgi_vbarrier4() nounwind alwaysinline {
entry:
  %bnum = alloca i32, align 4
  %numt = alloca i32, align 4
  %call = call  i32 @__pgi_threadidx(i32 2)
  %add = add nsw i32 %call, 1
  store i32 %add, i32* %bnum, align 4
  %call1 = call  i32 @__pgi_numthreads(i32 1)
  store i32 %call1, i32* %numt, align 4
  %call2 = call  i32 @__pgi_numthreads(i32 2)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @llvm.cuda.syncthreads()
  br label %if.end21

if.else:                                          ; preds = %entry
  %0 = load i32* %numt, align 4
  %cmp3 = icmp ule i32 %0, 32
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  call  void @__pgi_syncwarp()
  br label %if.end20

if.else5:                                         ; preds = %if.else
  %1 = load i32* %bnum, align 4
  %cmp6 = icmp eq i32 %1, 1
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else5
  %2 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 1, $0;", "r"(i32 %2) nounwind, !srcloc !188
  br label %if.end19

if.else8:                                         ; preds = %if.else5
  %3 = load i32* %bnum, align 4
  %cmp9 = icmp eq i32 %3, 2
  br i1 %cmp9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else8
  %4 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 2, $0;", "r"(i32 %4) nounwind, !srcloc !189
  br label %if.end18

if.else11:                                        ; preds = %if.else8
  %5 = load i32* %bnum, align 4
  %cmp12 = icmp eq i32 %5, 3
  br i1 %cmp12, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.else11
  %6 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 3, $0;", "r"(i32 %6) nounwind, !srcloc !190
  br label %if.end17

if.else14:                                        ; preds = %if.else11
  %7 = load i32* %bnum, align 4
  %cmp15 = icmp eq i32 %7, 4
  br i1 %cmp15, label %if.then16, label %if.end

if.then16:                                        ; preds = %if.else14
  %8 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 4, $0;", "r"(i32 %8) nounwind, !srcloc !191
  br label %if.end

if.end:                                           ; preds = %if.then16, %if.else14
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then13
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then10
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then7
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then4
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then
  ret void
}

define  void @__pgi_vbarrier8() nounwind alwaysinline {
entry:
  %bnum = alloca i32, align 4
  %numt = alloca i32, align 4
  %call = call  i32 @__pgi_threadidx(i32 2)
  %add = add nsw i32 %call, 1
  store i32 %add, i32* %bnum, align 4
  %call1 = call  i32 @__pgi_numthreads(i32 1)
  store i32 %call1, i32* %numt, align 4
  %call2 = call  i32 @__pgi_numthreads(i32 2)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @llvm.cuda.syncthreads()
  br label %if.end37

if.else:                                          ; preds = %entry
  %0 = load i32* %numt, align 4
  %cmp3 = icmp ule i32 %0, 32
  br i1 %cmp3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  call  void @__pgi_syncwarp()
  br label %if.end36

if.else5:                                         ; preds = %if.else
  %1 = load i32* %bnum, align 4
  %cmp6 = icmp eq i32 %1, 1
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else5
  %2 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 1, $0;", "r"(i32 %2) nounwind, !srcloc !192
  br label %if.end35

if.else8:                                         ; preds = %if.else5
  %3 = load i32* %bnum, align 4
  %cmp9 = icmp eq i32 %3, 2
  br i1 %cmp9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else8
  %4 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 2, $0;", "r"(i32 %4) nounwind, !srcloc !193
  br label %if.end34

if.else11:                                        ; preds = %if.else8
  %5 = load i32* %bnum, align 4
  %cmp12 = icmp eq i32 %5, 3
  br i1 %cmp12, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.else11
  %6 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 3, $0;", "r"(i32 %6) nounwind, !srcloc !194
  br label %if.end33

if.else14:                                        ; preds = %if.else11
  %7 = load i32* %bnum, align 4
  %cmp15 = icmp eq i32 %7, 4
  br i1 %cmp15, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.else14
  %8 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 4, $0;", "r"(i32 %8) nounwind, !srcloc !195
  br label %if.end32

if.else17:                                        ; preds = %if.else14
  %9 = load i32* %bnum, align 4
  %cmp18 = icmp eq i32 %9, 5
  br i1 %cmp18, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else17
  %10 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 5, $0;", "r"(i32 %10) nounwind, !srcloc !196
  br label %if.end31

if.else20:                                        ; preds = %if.else17
  %11 = load i32* %bnum, align 4
  %cmp21 = icmp eq i32 %11, 6
  br i1 %cmp21, label %if.then22, label %if.else23

if.then22:                                        ; preds = %if.else20
  %12 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 6, $0;", "r"(i32 %12) nounwind, !srcloc !197
  br label %if.end30

if.else23:                                        ; preds = %if.else20
  %13 = load i32* %bnum, align 4
  %cmp24 = icmp eq i32 %13, 7
  br i1 %cmp24, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.else23
  %14 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 7, $0;", "r"(i32 %14) nounwind, !srcloc !198
  br label %if.end29

if.else26:                                        ; preds = %if.else23
  %15 = load i32* %bnum, align 4
  %cmp27 = icmp eq i32 %15, 8
  br i1 %cmp27, label %if.then28, label %if.end

if.then28:                                        ; preds = %if.else26
  %16 = load i32* %numt, align 4
  call void asm sideeffect "bar.sync 8, $0;", "r"(i32 %16) nounwind, !srcloc !199
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.else26
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then25
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then22
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then19
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then16
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then13
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then10
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then7
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then4
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then
  ret void
}

define  i32 @__pgi_all(i32 %a) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = call i32 asm sideeffect "{ \0A\09.reg .pred \09%p1; \0A\09.reg .pred \09%p2; \0A\09setp.ne.u32 \09%p1, $1, 0; \0A\09vote.sync.all.pred \09%p2, %p1, 0xffffffff; \0A\09selp.s32 \09$0, 1, 0, %p2; \0A\09}", "=r,r"(i32 %0) nounwind, !srcloc !200
  store i32 %1, i32* %result, align 4
  %2 = load i32* %result, align 4
  ret i32 %2
}

define  i32 @__pgi_any(i32 %a) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = call i32 asm sideeffect "{ \0A\09.reg .pred \09%p1; \0A\09.reg .pred \09%p2; \0A\09setp.ne.u32 \09%p1, $1, 0; \0A\09vote.sync.any.pred \09%p2, %p1, 0xffffffff; \0A\09selp.s32 \09$0, 1, 0, %p2; \0A\09}", "=r,r"(i32 %0) nounwind, !srcloc !201
  store i32 %1, i32* %result, align 4
  %2 = load i32* %result, align 4
  ret i32 %2
}

define  i32 @__pgi_ballot(i32 %a) nounwind alwaysinline {
entry:
  %a.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32* %a.addr, align 4
  %1 = call i32 asm sideeffect "{ \0A\09.reg .pred \09%p1; \0A\09setp.ne.u32 \09%p1, $1, 0; \0A\09vote.sync.ballot.b32 \09$0, %p1, 0xffffffff; \0A\09}", "=r,r"(i32 %0) nounwind, !srcloc !202
  store i32 %1, i32* %result, align 4
  %2 = load i32* %result, align 4
  ret i32 %2
}

define  void @pgf90_mcopy1(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i8*, align 8
  %ss = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i8** %d.addr, align 8
  store i8* %3, i8** %dd, align 8
  %4 = load i8** %s.addr, align 8
  store i8* %4, i8** %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i64* %size.addr, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool3 = icmp ne i64 %5, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8** %ss, align 8
  %incdec.ptr = getelementptr inbounds i8* %6, i32 1
  store i8* %incdec.ptr, i8** %ss, align 8
  %7 = load i8* %6, align 1
  %8 = load i8** %dd, align 8
  %incdec.ptr4 = getelementptr inbounds i8* %8, i32 1
  store i8* %incdec.ptr4, i8** %dd, align 8
  store i8 %7, i8* %8, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mcopy2(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i16*, align 8
  %ss = alloca i16*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i8** %d.addr, align 8
  %4 = bitcast i8* %3 to i16*
  store i16* %4, i16** %dd, align 8
  %5 = load i8** %s.addr, align 8
  %6 = bitcast i8* %5 to i16*
  store i16* %6, i16** %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i16** %ss, align 8
  %incdec.ptr = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr, i16** %ss, align 8
  %9 = load i16* %8, align 2
  %10 = load i16** %dd, align 8
  %incdec.ptr4 = getelementptr inbounds i16* %10, i32 1
  store i16* %incdec.ptr4, i16** %dd, align 8
  store i16 %9, i16* %10, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mcopy4(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i32*, align 8
  %ss = alloca i32*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i8** %d.addr, align 8
  %4 = bitcast i8* %3 to i32*
  store i32* %4, i32** %dd, align 8
  %5 = load i8** %s.addr, align 8
  %6 = bitcast i8* %5 to i32*
  store i32* %6, i32** %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32** %ss, align 8
  %incdec.ptr = getelementptr inbounds i32* %8, i32 1
  store i32* %incdec.ptr, i32** %ss, align 8
  %9 = load i32* %8, align 4
  %10 = load i32** %dd, align 8
  %incdec.ptr4 = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr4, i32** %dd, align 8
  store i32 %9, i32* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mcopy8(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i64*, align 8
  %ss = alloca i64*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i8** %d.addr, align 8
  %4 = bitcast i8* %3 to i64*
  store i64* %4, i64** %dd, align 8
  %5 = load i8** %s.addr, align 8
  %6 = bitcast i8* %5 to i64*
  store i64* %6, i64** %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64** %ss, align 8
  %incdec.ptr = getelementptr inbounds i64* %8, i32 1
  store i64* %incdec.ptr, i64** %ss, align 8
  %9 = load i64* %8, align 8
  %10 = load i64** %dd, align 8
  %incdec.ptr4 = getelementptr inbounds i64* %10, i32 1
  store i64* %incdec.ptr4, i64** %dd, align 8
  store i64 %9, i64* %10, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mcopyz8(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i32*, align 8
  %ss = alloca i32*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i8** %d.addr, align 8
  %4 = bitcast i8* %3 to i32*
  store i32* %4, i32** %dd, align 8
  %5 = load i8** %s.addr, align 8
  %6 = bitcast i8* %5 to i32*
  store i32* %6, i32** %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32** %ss, align 8
  %incdec.ptr = getelementptr inbounds i32* %8, i32 1
  store i32* %incdec.ptr, i32** %ss, align 8
  %9 = load i32* %8, align 4
  %10 = load i32** %dd, align 8
  %incdec.ptr4 = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr4, i32** %dd, align 8
  store i32 %9, i32* %10, align 4
  %11 = load i32** %ss, align 8
  %incdec.ptr5 = getelementptr inbounds i32* %11, i32 1
  store i32* %incdec.ptr5, i32** %ss, align 8
  %12 = load i32* %11, align 4
  %13 = load i32** %dd, align 8
  %incdec.ptr6 = getelementptr inbounds i32* %13, i32 1
  store i32* %incdec.ptr6, i32** %dd, align 8
  store i32 %12, i32* %13, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mcopyz16(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i64*, align 8
  %ss = alloca i64*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i8** %d.addr, align 8
  %4 = bitcast i8* %3 to i64*
  store i64* %4, i64** %dd, align 8
  %5 = load i8** %s.addr, align 8
  %6 = bitcast i8* %5 to i64*
  store i64* %6, i64** %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64** %ss, align 8
  %incdec.ptr = getelementptr inbounds i64* %8, i32 1
  store i64* %incdec.ptr, i64** %ss, align 8
  %9 = load i64* %8, align 8
  %10 = load i64** %dd, align 8
  %incdec.ptr4 = getelementptr inbounds i64* %10, i32 1
  store i64* %incdec.ptr4, i64** %dd, align 8
  store i64 %9, i64* %10, align 8
  %11 = load i64** %ss, align 8
  %incdec.ptr5 = getelementptr inbounds i64* %11, i32 1
  store i64* %incdec.ptr5, i64** %ss, align 8
  %12 = load i64* %11, align 8
  %13 = load i64** %dd, align 8
  %incdec.ptr6 = getelementptr inbounds i64* %13, i32 1
  store i64* %incdec.ptr6, i64** %dd, align 8
  store i64 %12, i64* %13, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mset1(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i8*, align 8
  %ss = alloca i8, align 1
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  store i8* %2, i8** %dd, align 8
  %3 = load i8** %s.addr, align 8
  %4 = load i8* %3, align 1
  store i8 %4, i8* %ss, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i64* %size.addr, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %5, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8* %ss, align 1
  %7 = load i8** %dd, align 8
  %incdec.ptr = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr, i8** %dd, align 8
  store i8 %6, i8* %7, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mset2(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i16*, align 8
  %ss = alloca i16, align 2
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i16*
  store i16* %3, i16** %dd, align 8
  %4 = load i8** %s.addr, align 8
  %5 = bitcast i8* %4 to i16*
  %6 = load i16* %5, align 2
  store i16 %6, i16* %ss, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %7, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i16* %ss, align 2
  %9 = load i16** %dd, align 8
  %incdec.ptr = getelementptr inbounds i16* %9, i32 1
  store i16* %incdec.ptr, i16** %dd, align 8
  store i16 %8, i16* %9, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mset4(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i32*, align 8
  %ss = alloca i32, align 4
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %dd, align 8
  %4 = load i8** %s.addr, align 8
  %5 = bitcast i8* %4 to i32*
  %6 = load i32* %5, align 4
  store i32 %6, i32* %ss, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %7, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32* %ss, align 4
  %9 = load i32** %dd, align 8
  %incdec.ptr = getelementptr inbounds i32* %9, i32 1
  store i32* %incdec.ptr, i32** %dd, align 8
  store i32 %8, i32* %9, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mset8(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i64*, align 8
  %ss = alloca i64, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %dd, align 8
  %4 = load i8** %s.addr, align 8
  %5 = bitcast i8* %4 to i64*
  %6 = load i64* %5, align 8
  store i64 %6, i64* %ss, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %size.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %7, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64* %ss, align 8
  %9 = load i64** %dd, align 8
  %incdec.ptr = getelementptr inbounds i64* %9, i32 1
  store i64* %incdec.ptr, i64** %dd, align 8
  store i64 %8, i64* %9, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_msetz8(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i32*, align 8
  %ss0 = alloca i32, align 4
  %ss1 = alloca i32, align 4
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %dd, align 8
  %4 = load i8** %s.addr, align 8
  %5 = bitcast i8* %4 to i32*
  %arrayidx = getelementptr inbounds i32* %5, i64 0
  %6 = load i32* %arrayidx, align 4
  store i32 %6, i32* %ss0, align 4
  %7 = load i8** %s.addr, align 8
  %8 = bitcast i8* %7 to i32*
  %arrayidx1 = getelementptr inbounds i32* %8, i64 1
  %9 = load i32* %arrayidx1, align 4
  store i32 %9, i32* %ss1, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %10 = load i64* %size.addr, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool2 = icmp ne i64 %10, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i32* %ss0, align 4
  %12 = load i32** %dd, align 8
  %incdec.ptr = getelementptr inbounds i32* %12, i32 1
  store i32* %incdec.ptr, i32** %dd, align 8
  store i32 %11, i32* %12, align 4
  %13 = load i32* %ss1, align 4
  %14 = load i32** %dd, align 8
  %incdec.ptr3 = getelementptr inbounds i32* %14, i32 1
  store i32* %incdec.ptr3, i32** %dd, align 8
  store i32 %13, i32* %14, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_msetz16(i8* %d, i8* %s, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i64*, align 8
  %ss0 = alloca i64, align 8
  %ss1 = alloca i64, align 8
  store i8* %d, i8** %d.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %dd, align 8
  %4 = load i8** %s.addr, align 8
  %5 = bitcast i8* %4 to i64*
  %arrayidx = getelementptr inbounds i64* %5, i64 0
  %6 = load i64* %arrayidx, align 8
  store i64 %6, i64* %ss0, align 8
  %7 = load i8** %s.addr, align 8
  %8 = bitcast i8* %7 to i64*
  %arrayidx1 = getelementptr inbounds i64* %8, i64 1
  %9 = load i64* %arrayidx1, align 8
  store i64 %9, i64* %ss1, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %10 = load i64* %size.addr, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool2 = icmp ne i64 %10, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i64* %ss0, align 8
  %12 = load i64** %dd, align 8
  %incdec.ptr = getelementptr inbounds i64* %12, i32 1
  store i64* %incdec.ptr, i64** %dd, align 8
  store i64 %11, i64* %12, align 8
  %13 = load i64* %ss1, align 8
  %14 = load i64** %dd, align 8
  %incdec.ptr3 = getelementptr inbounds i64* %14, i32 1
  store i64* %incdec.ptr3, i64** %dd, align 8
  store i64 %13, i64* %14, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mzero1(i8* %d, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i8*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  store i8* %2, i8** %dd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load i64* %size.addr, align 8
  %dec = add i64 %3, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %3, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8** %dd, align 8
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %dd, align 8
  store i8 0, i8* %4, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mzero2(i8* %d, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i16*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i16*
  store i16* %3, i16** %dd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i64* %size.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i16** %dd, align 8
  %incdec.ptr = getelementptr inbounds i16* %5, i32 1
  store i16* %incdec.ptr, i16** %dd, align 8
  store i16 0, i16* %5, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mzero4(i8* %d, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i32*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %dd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i64* %size.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32** %dd, align 8
  %incdec.ptr = getelementptr inbounds i32* %5, i32 1
  store i32* %incdec.ptr, i32** %dd, align 8
  store i32 0, i32* %5, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mzero8(i8* %d, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i64*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %dd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i64* %size.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i64** %dd, align 8
  %incdec.ptr = getelementptr inbounds i64* %5, i32 1
  store i64* %incdec.ptr, i64** %dd, align 8
  store i64 0, i64* %5, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mzeroz8(i8* %d, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i32*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %dd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i64* %size.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32** %dd, align 8
  %incdec.ptr = getelementptr inbounds i32* %5, i32 1
  store i32* %incdec.ptr, i32** %dd, align 8
  store i32 0, i32* %5, align 4
  %6 = load i32** %dd, align 8
  %incdec.ptr2 = getelementptr inbounds i32* %6, i32 1
  store i32* %incdec.ptr2, i32** %dd, align 8
  store i32 0, i32* %6, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @pgf90_mzeroz16(i8* %d, i64 %size) nounwind alwaysinline {
entry:
  %d.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dd = alloca i64*, align 8
  store i8* %d, i8** %d.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8** %d.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64* %size.addr, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** %d.addr, align 8
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %dd, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i64* %size.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i64** %dd, align 8
  %incdec.ptr = getelementptr inbounds i64* %5, i32 1
  store i64* %incdec.ptr, i64** %dd, align 8
  store i64 0, i64* %5, align 8
  %6 = load i64** %dd, align 8
  %incdec.ptr2 = getelementptr inbounds i64* %6, i32 1
  store i64* %incdec.ptr2, i64** %dd, align 8
  store i64 0, i64* %6, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

define  void @__pgi_managed_delete(i8* %addr) nounwind alwaysinline {
entry:
  %addr.addr = alloca i8*, align 8
  store i8* %addr, i8** %addr.addr, align 8
  ret void
}

define  void @__pgi_cxa_vec_ctor(i8* %array_address, i64 %element_count, i64 %element_size, i8* %constructor, i8* %destructor) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %constructor.addr.i = alloca void (i8*)*, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %end.i = alloca i8*, align 8
  %array_address.addr = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %constructor.addr = alloca i8*, align 8
  %destructor.addr = alloca i8*, align 8
  %foo = alloca void (i8*)*, align 8
  %bar = alloca void (i8*)*, align 8
  store i8* %array_address, i8** %array_address.addr, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i8* %constructor, i8** %constructor.addr, align 8
  store i8* %destructor, i8** %destructor.addr, align 8
  %0 = load i8** %constructor.addr, align 8
  %1 = bitcast i8* %0 to void (i8*)*
  store void (i8*)* %1, void (i8*)** %foo, align 8
  %2 = load i8** %destructor.addr, align 8
  %3 = bitcast i8* %2 to void (i8*)*
  store void (i8*)* %3, void (i8*)** %bar, align 8
  %4 = load i8** %array_address.addr, align 8
  %5 = load i64* %element_count.addr, align 8
  %6 = load i64* %element_size.addr, align 8
  %7 = load void (i8*)** %foo, align 8
  %8 = load void (i8*)** %bar, align 8
  store i8* %4, i8** %array_address.addr.i, align 8
  store i64 %5, i64* %element_count.addr.i, align 8
  store i64 %6, i64* %element_size.addr.i, align 8
  store void (i8*)* %7, void (i8*)** %constructor.addr.i, align 8
  store void (i8*)* %8, void (i8*)** %destructor.addr.i, align 8
  %9 = load void (i8*)** %constructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %9, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_ctor.exit

if.then.i:                                        ; preds = %entry
  %10 = load i8** %array_address.addr.i, align 8
  store i8* %10, i8** %element.i, align 8
  %11 = load i8** %element.i, align 8
  %12 = load i64* %element_count.addr.i, align 8
  %13 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %12, %13
  %add.ptr.i = getelementptr inbounds i8* %11, i64 %mul.i
  store i8* %add.ptr.i, i8** %end.i, align 8
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.then.i
  %14 = load i8** %element.i, align 8
  %15 = load i8** %end.i, align 8
  %cmp.i = icmp ult i8* %14, %15
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %16 = load void (i8*)** %constructor.addr.i, align 8
  %17 = load i8** %element.i, align 8
  call  void %16(i8* %17) nounwind
  %18 = load i64* %element_size.addr.i, align 8
  %19 = load i8** %element.i, align 8
  %add.ptr1.i = getelementptr inbounds i8* %19, i64 %18
  store i8* %add.ptr1.i, i8** %element.i, align 8
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  br label %__cxa_vec_ctor.exit

__cxa_vec_ctor.exit:                              ; preds = %for.end.i, %entry
  ret void
}

define  void @__cxa_vec_ctor(i8* %array_address, i64 %element_count, i64 %element_size, void (i8*)* %constructor, void (i8*)* %destructor) nounwind alwaysinline {
entry:
  %array_address.addr = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %constructor.addr = alloca void (i8*)*, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %element = alloca i8*, align 8
  %end = alloca i8*, align 8
  store i8* %array_address, i8** %array_address.addr, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store void (i8*)* %constructor, void (i8*)** %constructor.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  %0 = load void (i8*)** %constructor.addr, align 8
  %tobool = icmp ne void (i8*)* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %array_address.addr, align 8
  store i8* %1, i8** %element, align 8
  %2 = load i8** %element, align 8
  %3 = load i64* %element_count.addr, align 8
  %4 = load i64* %element_size.addr, align 8
  %mul = mul i64 %3, %4
  %add.ptr = getelementptr inbounds i8* %2, i64 %mul
  store i8* %add.ptr, i8** %end, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i8** %element, align 8
  %6 = load i8** %end, align 8
  %cmp = icmp ult i8* %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load void (i8*)** %constructor.addr, align 8
  %8 = load i8** %element, align 8
  call  void %7(i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i64* %element_size.addr, align 8
  %10 = load i8** %element, align 8
  %add.ptr1 = getelementptr inbounds i8* %10, i64 %9
  store i8* %add.ptr1, i8** %element, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

define  void @pgf90_copy_f77_argl(i8* %ab, i8* %ad, i8* %afirst, i8* %db, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %ab.addr = alloca i8*, align 8
  %ad.addr = alloca i8*, align 8
  %afirst.addr = alloca i8*, align 8
  %db.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  store i8* %ab, i8** %ab.addr, align 8
  store i8* %ad, i8** %ad.addr, align 8
  store i8* %afirst, i8** %afirst.addr, align 8
  store i8* %db, i8** %db.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %ad.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load %struct.F90_Desc** %srcdesc, align 8
  %flags = getelementptr inbounds %struct.F90_Desc* %2, i32 0, i32 4
  %3 = load i32* %flags, align 4
  %and = and i32 %3, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([37 x i8]* @.str4, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %8 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %8, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %9 = load i8** %__filename.addr.i, align 8
  store i8* %9, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %10 = load i8** %str.addr.i.i, align 8
  %11 = load i8* %10, align 1
  %conv.i.i = sext i8 %11 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %12 = load i32* %len.i.i, align 4
  %13 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %12, %13
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %14 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %14, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %15 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %15, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %16 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %16, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %17 = load i32* %len.i.i, align 4
  store i32 %17, i32* %fnamelen.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  store i8* %18, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %19 = load i8** %str.addr.i68.i, align 8
  %20 = load i8* %19, align 1
  %conv.i71.i = sext i8 %20 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %21 = load i32* %len.i70.i, align 4
  %22 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %21, %22
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %23 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %23, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %24 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %24, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %25 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %25, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %26 = load i32* %len.i70.i, align 4
  store i32 %26, i32* %funclen.i, align 4
  %27 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %27, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %28 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %28, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %29 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %29, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %29 to i64
  %30 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %30, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %31 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %31, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %32 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %32, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %33 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %33, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %34 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %34, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %35, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %36 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %36, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %37 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %38, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %39 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %39, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %40 = load i32* %start.i.i, align 4
  %41 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %40, %41
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %43 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %42, i64 %idx.ext.i.i
  %44 = load i8* %add.ptr.i.i, align 1
  store i8 %44, i8* %tmp.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %46 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %45, i64 %idx.ext11.i.i
  %47 = load i8* %add.ptr12.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %49 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %48, i64 %idx.ext13.i.i
  store i8 %47, i8* %add.ptr14.i.i, align 1
  %50 = load i8* %tmp.i.i, align 1
  %51 = load i8** %str.addr.i107.i, align 8
  %52 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %52 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %51, i64 %idx.ext15.i.i
  store i8 %50, i8* %add.ptr16.i.i, align 1
  %53 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %53, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %54 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %54, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %55 = load i8** %str.addr.i94.i, align 8
  %56 = load i8* %55, align 1
  %conv.i97.i = sext i8 %56 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %57 = load i32* %len.i96.i, align 4
  %58 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %57, %58
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %59 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %59, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %60 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %60, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %61 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %61, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %62 = load i32* %len.i96.i, align 4
  store i32 %62, i32* %linenolen.i, align 4
  %63 = load i8** %errmsg.addr.i, align 8
  store i8* %63, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %64 = load i8** %str.addr.i81.i, align 8
  %65 = load i8* %64, align 1
  %conv.i84.i = sext i8 %65 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %66 = load i32* %len.i83.i, align 4
  %67 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %66, %67
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %68 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %68, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %69 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %69, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %70 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %71 = load i32* %len.i83.i, align 4
  store i32 %71, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %72 = load i32* %i.i, align 4
  %73 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %72, %73
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %74 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %74 to i64
  %75 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %75, i64 %idxprom.i
  %76 = load i8* %arrayidx.i, align 1
  %77 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %77 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %76, i8* %arrayidx6.i, align 1
  %78 = load i32* %i.i, align 4
  %inc.i = add i32 %78, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %79 = load i32* %curr.i, align 4
  %80 = load i32* %i.i, align 4
  %add.i = add i32 %79, %80
  store i32 %add.i, i32* %curr.i, align 4
  %81 = load i32* %curr.i, align 4
  %inc7.i = add i32 %81, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %81 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %82 = load i32* %i.i, align 4
  %83 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %82, %83
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %84 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %84 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %85 = load i8* %arrayidx14.i, align 1
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add15.i = add i32 %86, %87
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %85, i8* %arrayidx17.i, align 1
  %88 = load i32* %i.i, align 4
  %inc19.i = add i32 %88, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %89 = load i32* %curr.i, align 4
  %90 = load i32* %i.i, align 4
  %add21.i = add i32 %89, %90
  store i32 %add21.i, i32* %curr.i, align 4
  %91 = load i32* %curr.i, align 4
  %inc22.i = add i32 %91, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %91 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %92 = load i32* %curr.i, align 4
  %inc25.i = add i32 %92, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %92 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %93 = load i32* %curr.i, align 4
  %inc28.i = add i32 %93, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %93 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %94 = load i32* %i.i, align 4
  %95 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %94, %95
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %96 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %96 to i64
  %97 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %97, i64 %idxprom34.i
  %98 = load i8* %arrayidx35.i, align 1
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add36.i = add i32 %99, %100
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %98, i8* %arrayidx38.i, align 1
  %101 = load i32* %i.i, align 4
  %inc40.i = add i32 %101, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %102 = load i32* %curr.i, align 4
  %103 = load i32* %i.i, align 4
  %add42.i = add i32 %102, %103
  store i32 %add42.i, i32* %curr.i, align 4
  %104 = load i32* %curr.i, align 4
  %inc43.i = add i32 %104, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %104 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %105 = load i32* %curr.i, align 4
  %inc46.i = add i32 %105, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %105 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %106 = load i32* %i.i, align 4
  %107 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %106, %107
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %108 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %108 to i64
  %109 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %109, i64 %idxprom52.i
  %110 = load i8* %arrayidx53.i, align 1
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add54.i = add i32 %111, %112
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %110, i8* %arrayidx56.i, align 1
  %113 = load i32* %i.i, align 4
  %inc58.i = add i32 %113, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %114 = load i32* %curr.i, align 4
  %115 = load i32* %i.i, align 4
  %add60.i = add i32 %114, %115
  store i32 %add60.i, i32* %curr.i, align 4
  %116 = load i32* %curr.i, align 4
  %inc61.i = add i32 %116, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %116 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %117 = load i32* %curr.i, align 4
  %inc64.i = add i32 %117, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %117 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %118 = load i8** %afirst.addr, align 8
  %119 = load i8** %db.addr, align 8
  %120 = bitcast i8* %119 to i8**
  store i8* %118, i8** %120, align 8
  ret void
}

define  void @pgf90_copy_f77_argsl(i8* %ab, i8* %ad, i8* %afirst, i8* %db, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %ab.addr = alloca i8*, align 8
  %ad.addr = alloca i8*, align 8
  %afirst.addr = alloca i8*, align 8
  %db.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  store i8* %ab, i8** %ab.addr, align 8
  store i8* %ad, i8** %ad.addr, align 8
  store i8* %afirst, i8** %afirst.addr, align 8
  store i8* %db, i8** %db.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %ad.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load %struct.F90_Desc** %srcdesc, align 8
  %flags = getelementptr inbounds %struct.F90_Desc* %2, i32 0, i32 4
  %3 = load i32* %flags, align 4
  %and = and i32 %3, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([37 x i8]* @.str4, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %8 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %8, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %9 = load i8** %__filename.addr.i, align 8
  store i8* %9, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %10 = load i8** %str.addr.i.i, align 8
  %11 = load i8* %10, align 1
  %conv.i.i = sext i8 %11 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %12 = load i32* %len.i.i, align 4
  %13 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %12, %13
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %14 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %14, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %15 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %15, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %16 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %16, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %17 = load i32* %len.i.i, align 4
  store i32 %17, i32* %fnamelen.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  store i8* %18, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %19 = load i8** %str.addr.i68.i, align 8
  %20 = load i8* %19, align 1
  %conv.i71.i = sext i8 %20 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %21 = load i32* %len.i70.i, align 4
  %22 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %21, %22
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %23 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %23, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %24 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %24, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %25 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %25, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %26 = load i32* %len.i70.i, align 4
  store i32 %26, i32* %funclen.i, align 4
  %27 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %27, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %28 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %28, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %29 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %29, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %29 to i64
  %30 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %30, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %31 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %31, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %32 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %32, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %33 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %33, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %34 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %34, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %35, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %36 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %36, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %37 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %38, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %39 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %39, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %40 = load i32* %start.i.i, align 4
  %41 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %40, %41
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %43 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %42, i64 %idx.ext.i.i
  %44 = load i8* %add.ptr.i.i, align 1
  store i8 %44, i8* %tmp.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %46 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %45, i64 %idx.ext11.i.i
  %47 = load i8* %add.ptr12.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %49 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %48, i64 %idx.ext13.i.i
  store i8 %47, i8* %add.ptr14.i.i, align 1
  %50 = load i8* %tmp.i.i, align 1
  %51 = load i8** %str.addr.i107.i, align 8
  %52 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %52 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %51, i64 %idx.ext15.i.i
  store i8 %50, i8* %add.ptr16.i.i, align 1
  %53 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %53, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %54 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %54, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %55 = load i8** %str.addr.i94.i, align 8
  %56 = load i8* %55, align 1
  %conv.i97.i = sext i8 %56 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %57 = load i32* %len.i96.i, align 4
  %58 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %57, %58
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %59 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %59, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %60 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %60, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %61 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %61, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %62 = load i32* %len.i96.i, align 4
  store i32 %62, i32* %linenolen.i, align 4
  %63 = load i8** %errmsg.addr.i, align 8
  store i8* %63, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %64 = load i8** %str.addr.i81.i, align 8
  %65 = load i8* %64, align 1
  %conv.i84.i = sext i8 %65 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %66 = load i32* %len.i83.i, align 4
  %67 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %66, %67
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %68 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %68, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %69 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %69, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %70 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %71 = load i32* %len.i83.i, align 4
  store i32 %71, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %72 = load i32* %i.i, align 4
  %73 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %72, %73
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %74 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %74 to i64
  %75 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %75, i64 %idxprom.i
  %76 = load i8* %arrayidx.i, align 1
  %77 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %77 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %76, i8* %arrayidx6.i, align 1
  %78 = load i32* %i.i, align 4
  %inc.i = add i32 %78, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %79 = load i32* %curr.i, align 4
  %80 = load i32* %i.i, align 4
  %add.i = add i32 %79, %80
  store i32 %add.i, i32* %curr.i, align 4
  %81 = load i32* %curr.i, align 4
  %inc7.i = add i32 %81, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %81 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %82 = load i32* %i.i, align 4
  %83 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %82, %83
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %84 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %84 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %85 = load i8* %arrayidx14.i, align 1
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add15.i = add i32 %86, %87
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %85, i8* %arrayidx17.i, align 1
  %88 = load i32* %i.i, align 4
  %inc19.i = add i32 %88, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %89 = load i32* %curr.i, align 4
  %90 = load i32* %i.i, align 4
  %add21.i = add i32 %89, %90
  store i32 %add21.i, i32* %curr.i, align 4
  %91 = load i32* %curr.i, align 4
  %inc22.i = add i32 %91, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %91 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %92 = load i32* %curr.i, align 4
  %inc25.i = add i32 %92, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %92 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %93 = load i32* %curr.i, align 4
  %inc28.i = add i32 %93, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %93 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %94 = load i32* %i.i, align 4
  %95 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %94, %95
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %96 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %96 to i64
  %97 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %97, i64 %idxprom34.i
  %98 = load i8* %arrayidx35.i, align 1
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add36.i = add i32 %99, %100
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %98, i8* %arrayidx38.i, align 1
  %101 = load i32* %i.i, align 4
  %inc40.i = add i32 %101, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %102 = load i32* %curr.i, align 4
  %103 = load i32* %i.i, align 4
  %add42.i = add i32 %102, %103
  store i32 %add42.i, i32* %curr.i, align 4
  %104 = load i32* %curr.i, align 4
  %inc43.i = add i32 %104, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %104 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %105 = load i32* %curr.i, align 4
  %inc46.i = add i32 %105, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %105 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %106 = load i32* %i.i, align 4
  %107 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %106, %107
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %108 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %108 to i64
  %109 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %109, i64 %idxprom52.i
  %110 = load i8* %arrayidx53.i, align 1
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add54.i = add i32 %111, %112
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %110, i8* %arrayidx56.i, align 1
  %113 = load i32* %i.i, align 4
  %inc58.i = add i32 %113, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %114 = load i32* %curr.i, align 4
  %115 = load i32* %i.i, align 4
  %add60.i = add i32 %114, %115
  store i32 %add60.i, i32* %curr.i, align 4
  %116 = load i32* %curr.i, align 4
  %inc61.i = add i32 %116, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %116 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %117 = load i32* %curr.i, align 4
  %inc64.i = add i32 %117, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %117 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %118 = load i8** %afirst.addr, align 8
  %119 = load i8** %db.addr, align 8
  %120 = bitcast i8* %119 to i8**
  store i8* %118, i8** %120, align 8
  ret void
}

define  void @pgf90_copy_f90_argl(i8* %ab, i8* %ad, i8* %db, i8* %dd, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %d.addr.i = alloca %struct.F90_Desc*, align 8
  %rank.addr.i = alloca i32, align 4
  %a.addr.i = alloca %struct.F90_Desc*, align 8
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %ab.addr = alloca i8*, align 8
  %ad.addr = alloca i8*, align 8
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  %tgtdesc = alloca %struct.F90_Desc*, align 8
  %i = alloca i32, align 4
  store i8* %ab, i8** %ab.addr, align 8
  store i8* %ad, i8** %ad.addr, align 8
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %ad.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load i8** %dd.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc*
  store %struct.F90_Desc* %3, %struct.F90_Desc** %tgtdesc, align 8
  %4 = load %struct.F90_Desc** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %4, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %lstride = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 4
  %5 = load i32* %lstride, align 4
  %cmp = icmp ne i32 %5, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8** %__filename.addr, align 8
  %7 = load i32* %__lineno.addr, align 4
  %8 = load i8** %__function.addr, align 8
  %9 = load i32* %__abort.addr, align 4
  store i8* %6, i8** %__filename.addr.i, align 8
  store i32 %7, i32* %__lineno.addr.i, align 4
  store i8* %8, i8** %__function.addr.i, align 8
  store i32 %9, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([37 x i8]* @.str5, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %10 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %10, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %11 = load i8** %__filename.addr.i, align 8
  store i8* %11, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %12 = load i8** %str.addr.i.i, align 8
  %13 = load i8* %12, align 1
  %conv.i.i = sext i8 %13 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %14 = load i32* %len.i.i, align 4
  %15 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %14, %15
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %16 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %16, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %17 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %17, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %18 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %18, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %19 = load i32* %len.i.i, align 4
  store i32 %19, i32* %fnamelen.i, align 4
  %20 = load i8** %__function.addr.i, align 8
  store i8* %20, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %21 = load i8** %str.addr.i68.i, align 8
  %22 = load i8* %21, align 1
  %conv.i71.i = sext i8 %22 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %23 = load i32* %len.i70.i, align 4
  %24 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %23, %24
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %25 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %25, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %26 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %26, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %27 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %27, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %28 = load i32* %len.i70.i, align 4
  store i32 %28, i32* %funclen.i, align 4
  %29 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %29, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %30 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %30, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %31 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %31, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %32, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %33 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %33, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %34 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %34, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %35 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %35, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %36 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %36, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %36 to i64
  %37 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %37, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %38 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %38, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %39 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %40, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %41 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %41, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %42 = load i32* %start.i.i, align 4
  %43 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %42, %43
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %44 = load i8** %str.addr.i107.i, align 8
  %45 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %45 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %44, i64 %idx.ext.i.i
  %46 = load i8* %add.ptr.i.i, align 1
  store i8 %46, i8* %tmp.i.i, align 1
  %47 = load i8** %str.addr.i107.i, align 8
  %48 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %48 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %47, i64 %idx.ext11.i.i
  %49 = load i8* %add.ptr12.i.i, align 1
  %50 = load i8** %str.addr.i107.i, align 8
  %51 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %51 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %50, i64 %idx.ext13.i.i
  store i8 %49, i8* %add.ptr14.i.i, align 1
  %52 = load i8* %tmp.i.i, align 1
  %53 = load i8** %str.addr.i107.i, align 8
  %54 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %54 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %53, i64 %idx.ext15.i.i
  store i8 %52, i8* %add.ptr16.i.i, align 1
  %55 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %55, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %56 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %56, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %57 = load i8** %str.addr.i94.i, align 8
  %58 = load i8* %57, align 1
  %conv.i97.i = sext i8 %58 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %59 = load i32* %len.i96.i, align 4
  %60 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %59, %60
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %61 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %61, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %62 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %62, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %63 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %63, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %64 = load i32* %len.i96.i, align 4
  store i32 %64, i32* %linenolen.i, align 4
  %65 = load i8** %errmsg.addr.i, align 8
  store i8* %65, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %66 = load i8** %str.addr.i81.i, align 8
  %67 = load i8* %66, align 1
  %conv.i84.i = sext i8 %67 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %68 = load i32* %len.i83.i, align 4
  %69 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %68, %69
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %70 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %70, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %71 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %71, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %72 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %72, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %73 = load i32* %len.i83.i, align 4
  store i32 %73, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %74 = load i32* %i.i, align 4
  %75 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %74, %75
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %76 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %76 to i64
  %77 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %77, i64 %idxprom.i
  %78 = load i8* %arrayidx.i, align 1
  %79 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %79 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %78, i8* %arrayidx6.i, align 1
  %80 = load i32* %i.i, align 4
  %inc.i = add i32 %80, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %81 = load i32* %curr.i, align 4
  %82 = load i32* %i.i, align 4
  %add.i = add i32 %81, %82
  store i32 %add.i, i32* %curr.i, align 4
  %83 = load i32* %curr.i, align 4
  %inc7.i = add i32 %83, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %83 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %84 = load i32* %i.i, align 4
  %85 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %84, %85
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %86 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %86 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %87 = load i8* %arrayidx14.i, align 1
  %88 = load i32* %curr.i, align 4
  %89 = load i32* %i.i, align 4
  %add15.i = add i32 %88, %89
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %87, i8* %arrayidx17.i, align 1
  %90 = load i32* %i.i, align 4
  %inc19.i = add i32 %90, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %91 = load i32* %curr.i, align 4
  %92 = load i32* %i.i, align 4
  %add21.i = add i32 %91, %92
  store i32 %add21.i, i32* %curr.i, align 4
  %93 = load i32* %curr.i, align 4
  %inc22.i = add i32 %93, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %93 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %94 = load i32* %curr.i, align 4
  %inc25.i = add i32 %94, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %94 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %95 = load i32* %curr.i, align 4
  %inc28.i = add i32 %95, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %95 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %96 = load i32* %i.i, align 4
  %97 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %96, %97
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %98 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %98 to i64
  %99 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %99, i64 %idxprom34.i
  %100 = load i8* %arrayidx35.i, align 1
  %101 = load i32* %curr.i, align 4
  %102 = load i32* %i.i, align 4
  %add36.i = add i32 %101, %102
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %100, i8* %arrayidx38.i, align 1
  %103 = load i32* %i.i, align 4
  %inc40.i = add i32 %103, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %104 = load i32* %curr.i, align 4
  %105 = load i32* %i.i, align 4
  %add42.i = add i32 %104, %105
  store i32 %add42.i, i32* %curr.i, align 4
  %106 = load i32* %curr.i, align 4
  %inc43.i = add i32 %106, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %106 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %107 = load i32* %curr.i, align 4
  %inc46.i = add i32 %107, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %107 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %108 = load i32* %i.i, align 4
  %109 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %108, %109
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %110 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %110 to i64
  %111 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %111, i64 %idxprom52.i
  %112 = load i8* %arrayidx53.i, align 1
  %113 = load i32* %curr.i, align 4
  %114 = load i32* %i.i, align 4
  %add54.i = add i32 %113, %114
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %112, i8* %arrayidx56.i, align 1
  %115 = load i32* %i.i, align 4
  %inc58.i = add i32 %115, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %116 = load i32* %curr.i, align 4
  %117 = load i32* %i.i, align 4
  %add60.i = add i32 %116, %117
  store i32 %add60.i, i32* %curr.i, align 4
  %118 = load i32* %curr.i, align 4
  %inc61.i = add i32 %118, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %118 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %119 = load i32* %curr.i, align 4
  %inc64.i = add i32 %119, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %119 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %120 = load %struct.F90_Desc** %tgtdesc, align 8
  %121 = load %struct.F90_Desc** %srcdesc, align 8
  %rank = getelementptr inbounds %struct.F90_Desc* %121, i32 0, i32 1
  %122 = load i32* %rank, align 4
  %123 = load %struct.F90_Desc** %srcdesc, align 8
  store %struct.F90_Desc* %120, %struct.F90_Desc** %d.addr.i, align 8
  store i32 %122, i32* %rank.addr.i, align 4
  store %struct.F90_Desc* %123, %struct.F90_Desc** %a.addr.i, align 8
  %124 = load %struct.F90_Desc** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc* %124, i32 0, i32 0
  store i32 35, i32* %tag.i, align 4
  %125 = load i32* %rank.addr.i, align 4
  %126 = load %struct.F90_Desc** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc* %126, i32 0, i32 1
  store i32 %125, i32* %rank1.i, align 4
  %127 = load %struct.F90_Desc** %a.addr.i, align 8
  %kind.i = getelementptr inbounds %struct.F90_Desc* %127, i32 0, i32 2
  %128 = load i32* %kind.i, align 4
  %129 = load %struct.F90_Desc** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc* %129, i32 0, i32 2
  store i32 %128, i32* %kind2.i, align 4
  %130 = load %struct.F90_Desc** %a.addr.i, align 8
  %len.i = getelementptr inbounds %struct.F90_Desc* %130, i32 0, i32 3
  %131 = load i32* %len.i, align 4
  %132 = load %struct.F90_Desc** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc* %132, i32 0, i32 3
  store i32 %131, i32* %len3.i, align 4
  %133 = load %struct.F90_Desc** %a.addr.i, align 8
  %flags.i = getelementptr inbounds %struct.F90_Desc* %133, i32 0, i32 4
  %134 = load i32* %flags.i, align 4
  %135 = load %struct.F90_Desc** %d.addr.i, align 8
  %flags4.i = getelementptr inbounds %struct.F90_Desc* %135, i32 0, i32 4
  store i32 %134, i32* %flags4.i, align 4
  %136 = load %struct.F90_Desc** %a.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc* %136, i32 0, i32 6
  %137 = load i32* %gsize.i, align 4
  %138 = load %struct.F90_Desc** %d.addr.i, align 8
  %gsize5.i = getelementptr inbounds %struct.F90_Desc* %138, i32 0, i32 6
  store i32 %137, i32* %gsize5.i, align 4
  %139 = load %struct.F90_Desc** %a.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc* %139, i32 0, i32 5
  %140 = load i32* %lsize.i, align 4
  %141 = load %struct.F90_Desc** %d.addr.i, align 8
  %lsize6.i = getelementptr inbounds %struct.F90_Desc* %141, i32 0, i32 5
  store i32 %140, i32* %lsize6.i, align 4
  %142 = load %struct.F90_Desc** %a.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc* %142, i32 0, i32 8
  %143 = load i32** %gbase.i, align 8
  %144 = load %struct.F90_Desc** %d.addr.i, align 8
  %gbase7.i = getelementptr inbounds %struct.F90_Desc* %144, i32 0, i32 8
  store i32* %143, i32** %gbase7.i, align 8
  %145 = load %struct.F90_Desc** %a.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc* %145, i32 0, i32 7
  %146 = load i32* %lbase.i, align 4
  %147 = load %struct.F90_Desc** %d.addr.i, align 8
  %lbase8.i = getelementptr inbounds %struct.F90_Desc* %147, i32 0, i32 7
  store i32 %146, i32* %lbase8.i, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %148 = load i32* %i, align 4
  %149 = load %struct.F90_Desc** %srcdesc, align 8
  %rank1 = getelementptr inbounds %struct.F90_Desc* %149, i32 0, i32 1
  %150 = load i32* %rank1, align 4
  %cmp2 = icmp slt i32 %148, %150
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %151 = load i32* %i, align 4
  %idxprom = sext i32 %151 to i64
  %152 = load %struct.F90_Desc** %tgtdesc, align 8
  %dim3 = getelementptr inbounds %struct.F90_Desc* %152, i32 0, i32 10
  %arrayidx4 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim3, i32 0, i64 %idxprom
  %153 = load i32* %i, align 4
  %idxprom5 = sext i32 %153 to i64
  %154 = load %struct.F90_Desc** %srcdesc, align 8
  %dim6 = getelementptr inbounds %struct.F90_Desc* %154, i32 0, i32 10
  %arrayidx7 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim6, i32 0, i64 %idxprom5
  %155 = bitcast %struct.F90_DescDim* %arrayidx4 to i8*
  %156 = bitcast %struct.F90_DescDim* %arrayidx7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 24, i32 4, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %157 = load i32* %i, align 4
  %inc = add nsw i32 %157, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %158 = load i8** %ab.addr, align 8
  %159 = bitcast i8* %158 to i8**
  %160 = load i8** %159, align 8
  %161 = load i8** %db.addr, align 8
  %162 = bitcast i8* %161 to i8**
  store i8* %160, i8** %162, align 8
  ret void
}

define  void @pgf90_copy_f77_argl_i8(i8* %ab, i8* %ad, i8* %afirst, i8* %db, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %ab.addr = alloca i8*, align 8
  %ad.addr = alloca i8*, align 8
  %afirst.addr = alloca i8*, align 8
  %db.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  store i8* %ab, i8** %ab.addr, align 8
  store i8* %ad, i8** %ad.addr, align 8
  store i8* %afirst, i8** %afirst.addr, align 8
  store i8* %db, i8** %db.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %ad.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load %struct.F90_Desc_la** %srcdesc, align 8
  %flags = getelementptr inbounds %struct.F90_Desc_la* %2, i32 0, i32 4
  %3 = load i64* %flags, align 8
  %and = and i64 %3, 536870912
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([37 x i8]* @.str4, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %8 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %8, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %9 = load i8** %__filename.addr.i, align 8
  store i8* %9, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %10 = load i8** %str.addr.i.i, align 8
  %11 = load i8* %10, align 1
  %conv.i.i = sext i8 %11 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %12 = load i32* %len.i.i, align 4
  %13 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %12, %13
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %14 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %14, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %15 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %15, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %16 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %16, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %17 = load i32* %len.i.i, align 4
  store i32 %17, i32* %fnamelen.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  store i8* %18, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %19 = load i8** %str.addr.i68.i, align 8
  %20 = load i8* %19, align 1
  %conv.i71.i = sext i8 %20 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %21 = load i32* %len.i70.i, align 4
  %22 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %21, %22
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %23 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %23, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %24 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %24, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %25 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %25, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %26 = load i32* %len.i70.i, align 4
  store i32 %26, i32* %funclen.i, align 4
  %27 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %27, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %28 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %28, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %29 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %29, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %29 to i64
  %30 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %30, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %31 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %31, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %32 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %32, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %33 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %33, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %34 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %34, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %35, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %36 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %36, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %37 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %38, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %39 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %39, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %40 = load i32* %start.i.i, align 4
  %41 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %40, %41
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %43 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %42, i64 %idx.ext.i.i
  %44 = load i8* %add.ptr.i.i, align 1
  store i8 %44, i8* %tmp.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %46 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %45, i64 %idx.ext11.i.i
  %47 = load i8* %add.ptr12.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %49 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %48, i64 %idx.ext13.i.i
  store i8 %47, i8* %add.ptr14.i.i, align 1
  %50 = load i8* %tmp.i.i, align 1
  %51 = load i8** %str.addr.i107.i, align 8
  %52 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %52 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %51, i64 %idx.ext15.i.i
  store i8 %50, i8* %add.ptr16.i.i, align 1
  %53 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %53, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %54 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %54, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %55 = load i8** %str.addr.i94.i, align 8
  %56 = load i8* %55, align 1
  %conv.i97.i = sext i8 %56 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %57 = load i32* %len.i96.i, align 4
  %58 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %57, %58
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %59 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %59, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %60 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %60, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %61 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %61, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %62 = load i32* %len.i96.i, align 4
  store i32 %62, i32* %linenolen.i, align 4
  %63 = load i8** %errmsg.addr.i, align 8
  store i8* %63, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %64 = load i8** %str.addr.i81.i, align 8
  %65 = load i8* %64, align 1
  %conv.i84.i = sext i8 %65 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %66 = load i32* %len.i83.i, align 4
  %67 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %66, %67
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %68 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %68, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %69 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %69, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %70 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %71 = load i32* %len.i83.i, align 4
  store i32 %71, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %72 = load i32* %i.i, align 4
  %73 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %72, %73
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %74 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %74 to i64
  %75 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %75, i64 %idxprom.i
  %76 = load i8* %arrayidx.i, align 1
  %77 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %77 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %76, i8* %arrayidx6.i, align 1
  %78 = load i32* %i.i, align 4
  %inc.i = add i32 %78, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %79 = load i32* %curr.i, align 4
  %80 = load i32* %i.i, align 4
  %add.i = add i32 %79, %80
  store i32 %add.i, i32* %curr.i, align 4
  %81 = load i32* %curr.i, align 4
  %inc7.i = add i32 %81, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %81 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %82 = load i32* %i.i, align 4
  %83 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %82, %83
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %84 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %84 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %85 = load i8* %arrayidx14.i, align 1
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add15.i = add i32 %86, %87
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %85, i8* %arrayidx17.i, align 1
  %88 = load i32* %i.i, align 4
  %inc19.i = add i32 %88, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %89 = load i32* %curr.i, align 4
  %90 = load i32* %i.i, align 4
  %add21.i = add i32 %89, %90
  store i32 %add21.i, i32* %curr.i, align 4
  %91 = load i32* %curr.i, align 4
  %inc22.i = add i32 %91, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %91 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %92 = load i32* %curr.i, align 4
  %inc25.i = add i32 %92, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %92 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %93 = load i32* %curr.i, align 4
  %inc28.i = add i32 %93, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %93 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %94 = load i32* %i.i, align 4
  %95 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %94, %95
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %96 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %96 to i64
  %97 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %97, i64 %idxprom34.i
  %98 = load i8* %arrayidx35.i, align 1
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add36.i = add i32 %99, %100
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %98, i8* %arrayidx38.i, align 1
  %101 = load i32* %i.i, align 4
  %inc40.i = add i32 %101, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %102 = load i32* %curr.i, align 4
  %103 = load i32* %i.i, align 4
  %add42.i = add i32 %102, %103
  store i32 %add42.i, i32* %curr.i, align 4
  %104 = load i32* %curr.i, align 4
  %inc43.i = add i32 %104, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %104 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %105 = load i32* %curr.i, align 4
  %inc46.i = add i32 %105, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %105 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %106 = load i32* %i.i, align 4
  %107 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %106, %107
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %108 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %108 to i64
  %109 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %109, i64 %idxprom52.i
  %110 = load i8* %arrayidx53.i, align 1
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add54.i = add i32 %111, %112
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %110, i8* %arrayidx56.i, align 1
  %113 = load i32* %i.i, align 4
  %inc58.i = add i32 %113, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %114 = load i32* %curr.i, align 4
  %115 = load i32* %i.i, align 4
  %add60.i = add i32 %114, %115
  store i32 %add60.i, i32* %curr.i, align 4
  %116 = load i32* %curr.i, align 4
  %inc61.i = add i32 %116, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %116 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %117 = load i32* %curr.i, align 4
  %inc64.i = add i32 %117, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %117 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %118 = load i8** %afirst.addr, align 8
  %119 = load i8** %db.addr, align 8
  %120 = bitcast i8* %119 to i8**
  store i8* %118, i8** %120, align 8
  ret void
}

define  void @pgf90_copy_f77_argsl_i8(i8* %ab, i8* %ad, i8* %afirst, i8* %db, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %ab.addr = alloca i8*, align 8
  %ad.addr = alloca i8*, align 8
  %afirst.addr = alloca i8*, align 8
  %db.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  store i8* %ab, i8** %ab.addr, align 8
  store i8* %ad, i8** %ad.addr, align 8
  store i8* %afirst, i8** %afirst.addr, align 8
  store i8* %db, i8** %db.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %ad.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load %struct.F90_Desc_la** %srcdesc, align 8
  %flags = getelementptr inbounds %struct.F90_Desc_la* %2, i32 0, i32 4
  %3 = load i64* %flags, align 8
  %and = and i64 %3, 536870912
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([37 x i8]* @.str4, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %8 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %8, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %9 = load i8** %__filename.addr.i, align 8
  store i8* %9, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %10 = load i8** %str.addr.i.i, align 8
  %11 = load i8* %10, align 1
  %conv.i.i = sext i8 %11 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %12 = load i32* %len.i.i, align 4
  %13 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %12, %13
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %14 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %14, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %15 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %15, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %16 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %16, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %17 = load i32* %len.i.i, align 4
  store i32 %17, i32* %fnamelen.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  store i8* %18, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %19 = load i8** %str.addr.i68.i, align 8
  %20 = load i8* %19, align 1
  %conv.i71.i = sext i8 %20 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %21 = load i32* %len.i70.i, align 4
  %22 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %21, %22
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %23 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %23, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %24 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %24, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %25 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %25, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %26 = load i32* %len.i70.i, align 4
  store i32 %26, i32* %funclen.i, align 4
  %27 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %27, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %28 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %28, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %29 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %29, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %29 to i64
  %30 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %30, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %31 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %31, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %32 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %32, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %33 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %33, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %34 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %34, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %35, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %36 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %36, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %37 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %38, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %39 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %39, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %40 = load i32* %start.i.i, align 4
  %41 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %40, %41
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %42 = load i8** %str.addr.i107.i, align 8
  %43 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %43 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %42, i64 %idx.ext.i.i
  %44 = load i8* %add.ptr.i.i, align 1
  store i8 %44, i8* %tmp.i.i, align 1
  %45 = load i8** %str.addr.i107.i, align 8
  %46 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %46 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %45, i64 %idx.ext11.i.i
  %47 = load i8* %add.ptr12.i.i, align 1
  %48 = load i8** %str.addr.i107.i, align 8
  %49 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %49 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %48, i64 %idx.ext13.i.i
  store i8 %47, i8* %add.ptr14.i.i, align 1
  %50 = load i8* %tmp.i.i, align 1
  %51 = load i8** %str.addr.i107.i, align 8
  %52 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %52 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %51, i64 %idx.ext15.i.i
  store i8 %50, i8* %add.ptr16.i.i, align 1
  %53 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %53, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %54 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %54, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %55 = load i8** %str.addr.i94.i, align 8
  %56 = load i8* %55, align 1
  %conv.i97.i = sext i8 %56 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %57 = load i32* %len.i96.i, align 4
  %58 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %57, %58
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %59 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %59, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %60 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %60, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %61 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %61, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %62 = load i32* %len.i96.i, align 4
  store i32 %62, i32* %linenolen.i, align 4
  %63 = load i8** %errmsg.addr.i, align 8
  store i8* %63, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %64 = load i8** %str.addr.i81.i, align 8
  %65 = load i8* %64, align 1
  %conv.i84.i = sext i8 %65 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %66 = load i32* %len.i83.i, align 4
  %67 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %66, %67
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %68 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %68, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %69 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %69, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %70 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %70, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %71 = load i32* %len.i83.i, align 4
  store i32 %71, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %72 = load i32* %i.i, align 4
  %73 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %72, %73
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %74 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %74 to i64
  %75 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %75, i64 %idxprom.i
  %76 = load i8* %arrayidx.i, align 1
  %77 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %77 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %76, i8* %arrayidx6.i, align 1
  %78 = load i32* %i.i, align 4
  %inc.i = add i32 %78, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %79 = load i32* %curr.i, align 4
  %80 = load i32* %i.i, align 4
  %add.i = add i32 %79, %80
  store i32 %add.i, i32* %curr.i, align 4
  %81 = load i32* %curr.i, align 4
  %inc7.i = add i32 %81, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %81 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %82 = load i32* %i.i, align 4
  %83 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %82, %83
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %84 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %84 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %85 = load i8* %arrayidx14.i, align 1
  %86 = load i32* %curr.i, align 4
  %87 = load i32* %i.i, align 4
  %add15.i = add i32 %86, %87
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %85, i8* %arrayidx17.i, align 1
  %88 = load i32* %i.i, align 4
  %inc19.i = add i32 %88, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %89 = load i32* %curr.i, align 4
  %90 = load i32* %i.i, align 4
  %add21.i = add i32 %89, %90
  store i32 %add21.i, i32* %curr.i, align 4
  %91 = load i32* %curr.i, align 4
  %inc22.i = add i32 %91, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %91 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %92 = load i32* %curr.i, align 4
  %inc25.i = add i32 %92, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %92 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %93 = load i32* %curr.i, align 4
  %inc28.i = add i32 %93, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %93 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %94 = load i32* %i.i, align 4
  %95 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %94, %95
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %96 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %96 to i64
  %97 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %97, i64 %idxprom34.i
  %98 = load i8* %arrayidx35.i, align 1
  %99 = load i32* %curr.i, align 4
  %100 = load i32* %i.i, align 4
  %add36.i = add i32 %99, %100
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %98, i8* %arrayidx38.i, align 1
  %101 = load i32* %i.i, align 4
  %inc40.i = add i32 %101, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %102 = load i32* %curr.i, align 4
  %103 = load i32* %i.i, align 4
  %add42.i = add i32 %102, %103
  store i32 %add42.i, i32* %curr.i, align 4
  %104 = load i32* %curr.i, align 4
  %inc43.i = add i32 %104, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %104 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %105 = load i32* %curr.i, align 4
  %inc46.i = add i32 %105, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %105 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %106 = load i32* %i.i, align 4
  %107 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %106, %107
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %108 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %108 to i64
  %109 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %109, i64 %idxprom52.i
  %110 = load i8* %arrayidx53.i, align 1
  %111 = load i32* %curr.i, align 4
  %112 = load i32* %i.i, align 4
  %add54.i = add i32 %111, %112
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %110, i8* %arrayidx56.i, align 1
  %113 = load i32* %i.i, align 4
  %inc58.i = add i32 %113, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %114 = load i32* %curr.i, align 4
  %115 = load i32* %i.i, align 4
  %add60.i = add i32 %114, %115
  store i32 %add60.i, i32* %curr.i, align 4
  %116 = load i32* %curr.i, align 4
  %inc61.i = add i32 %116, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %116 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %117 = load i32* %curr.i, align 4
  %inc64.i = add i32 %117, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %117 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %118 = load i8** %afirst.addr, align 8
  %119 = load i8** %db.addr, align 8
  %120 = bitcast i8* %119 to i8**
  store i8* %118, i8** %120, align 8
  ret void
}

define  void @pgf90_copy_f90_argl_i8(i8* %ab, i8* %ad, i8* %db, i8* %dd, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %d.addr.i = alloca %struct.F90_Desc_la*, align 8
  %rank.addr.i = alloca i32, align 4
  %a.addr.i = alloca %struct.F90_Desc_la*, align 8
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %buf.i = alloca [1024 x i8], align 1
  %linenobuf.i = alloca [16 x i8], align 1
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %ab.addr = alloca i8*, align 8
  %ad.addr = alloca i8*, align 8
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  %tgtdesc = alloca %struct.F90_Desc_la*, align 8
  %i = alloca i32, align 4
  store i8* %ab, i8** %ab.addr, align 8
  store i8* %ad, i8** %ad.addr, align 8
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %ad.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load i8** %dd.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %3, %struct.F90_Desc_la** %tgtdesc, align 8
  %4 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %4, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %lstride = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 4
  %5 = load i64* %lstride, align 8
  %cmp = icmp ne i64 %5, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8** %__filename.addr, align 8
  %7 = load i32* %__lineno.addr, align 4
  %8 = load i8** %__function.addr, align 8
  %9 = load i32* %__abort.addr, align 4
  store i8* %6, i8** %__filename.addr.i, align 8
  store i32 %7, i32* %__lineno.addr.i, align 4
  store i8* %8, i8** %__function.addr.i, align 8
  store i32 %9, i32* %__abort.addr.i, align 4
  store i8* getelementptr inbounds ([37 x i8]* @.str5, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %10 = load i32* %__abort.addr.i, align 4
  %tobool.i = icmp ne i32 %10, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then
  %11 = load i8** %__filename.addr.i, align 8
  store i8* %11, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %12 = load i8** %str.addr.i.i, align 8
  %13 = load i8* %12, align 1
  %conv.i.i = sext i8 %13 to i32
  %tobool.i.i = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %14 = load i32* %len.i.i, align 4
  %15 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i = icmp ult i32 %14, %15
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %16 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i, %land.rhs.i.i ]
  br i1 %16, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %17 = load i32* %len.i.i, align 4
  %inc.i.i = add i32 %17, 1
  store i32 %inc.i.i, i32* %len.i.i, align 4
  %18 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %18, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %19 = load i32* %len.i.i, align 4
  store i32 %19, i32* %fnamelen.i, align 4
  %20 = load i8** %__function.addr.i, align 8
  store i8* %20, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %21 = load i8** %str.addr.i68.i, align 8
  %22 = load i8* %21, align 1
  %conv.i71.i = sext i8 %22 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %23 = load i32* %len.i70.i, align 4
  %24 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %23, %24
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %25 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %25, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %26 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %26, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %27 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %27, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %28 = load i32* %len.i70.i, align 4
  store i32 %28, i32* %funclen.i, align 4
  %29 = load i32* %__lineno.addr.i, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i32 %29, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i, align 4
  %30 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %30, 0
  br i1 %cmp.i108.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %__pgi_strlen.exit80.i
  %31 = load i32* %i.i.i, align 4
  %inc.i109.i = add nsw i32 %31, 1
  store i32 %inc.i109.i, i32* %i.i.i, align 4
  %idxprom.i.i = sext i32 %31 to i64
  %32 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %32, i64 %idxprom.i.i
  store i8 48, i8* %arrayidx.i.i, align 1
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i
  %33 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %33, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %34 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %34, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %35 = load i32* %remain.i.i, align 4
  %add.i.i = add i32 %35, 48
  %conv.i112.i = trunc i32 %add.i.i to i8
  %36 = load i32* %i.i.i, align 4
  %inc2.i.i = add nsw i32 %36, 1
  store i32 %inc2.i.i, i32* %i.i.i, align 4
  %idxprom3.i.i = sext i32 %36 to i64
  %37 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %37, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %38 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %38, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %39 = load i32* %i.i.i, align 4
  %idxprom5.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i = getelementptr inbounds i8* %40, i64 %idxprom5.i.i
  store i8 0, i8* %arrayidx6.i.i, align 1
  store i32 0, i32* %start.i.i, align 4
  %41 = load i32* %i.i.i, align 4
  %sub.i.i = sub nsw i32 %41, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %42 = load i32* %start.i.i, align 4
  %43 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %42, %43
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %44 = load i8** %str.addr.i107.i, align 8
  %45 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %45 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %44, i64 %idx.ext.i.i
  %46 = load i8* %add.ptr.i.i, align 1
  store i8 %46, i8* %tmp.i.i, align 1
  %47 = load i8** %str.addr.i107.i, align 8
  %48 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %48 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %47, i64 %idx.ext11.i.i
  %49 = load i8* %add.ptr12.i.i, align 1
  %50 = load i8** %str.addr.i107.i, align 8
  %51 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %51 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %50, i64 %idx.ext13.i.i
  store i8 %49, i8* %add.ptr14.i.i, align 1
  %52 = load i8* %tmp.i.i, align 1
  %53 = load i8** %str.addr.i107.i, align 8
  %54 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %54 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %53, i64 %idx.ext15.i.i
  store i8 %52, i8* %add.ptr16.i.i, align 1
  %55 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %55, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %56 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %56, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %57 = load i8** %str.addr.i94.i, align 8
  %58 = load i8* %57, align 1
  %conv.i97.i = sext i8 %58 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %59 = load i32* %len.i96.i, align 4
  %60 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %59, %60
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %61 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %61, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %62 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %62, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %63 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %63, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %64 = load i32* %len.i96.i, align 4
  store i32 %64, i32* %linenolen.i, align 4
  %65 = load i8** %errmsg.addr.i, align 8
  store i8* %65, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %66 = load i8** %str.addr.i81.i, align 8
  %67 = load i8* %66, align 1
  %conv.i84.i = sext i8 %67 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %68 = load i32* %len.i83.i, align 4
  %69 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %68, %69
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %70 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %70, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %71 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %71, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %72 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %72, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %73 = load i32* %len.i83.i, align 4
  store i32 %73, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %74 = load i32* %i.i, align 4
  %75 = load i32* %fnamelen.i, align 4
  %cmp.i = icmp ult i32 %74, %75
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %76 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %76 to i64
  %77 = load i8** %__filename.addr.i, align 8
  %arrayidx.i = getelementptr inbounds i8* %77, i64 %idxprom.i
  %78 = load i8* %arrayidx.i, align 1
  %79 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %79 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom5.i
  store i8 %78, i8* %arrayidx6.i, align 1
  %80 = load i32* %i.i, align 4
  %inc.i = add i32 %80, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %81 = load i32* %curr.i, align 4
  %82 = load i32* %i.i, align 4
  %add.i = add i32 %81, %82
  store i32 %add.i, i32* %curr.i, align 4
  %83 = load i32* %curr.i, align 4
  %inc7.i = add i32 %83, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %83 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %84 = load i32* %i.i, align 4
  %85 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %84, %85
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %86 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %86 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i, i32 0, i64 %idxprom13.i
  %87 = load i8* %arrayidx14.i, align 1
  %88 = load i32* %curr.i, align 4
  %89 = load i32* %i.i, align 4
  %add15.i = add i32 %88, %89
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom16.i
  store i8 %87, i8* %arrayidx17.i, align 1
  %90 = load i32* %i.i, align 4
  %inc19.i = add i32 %90, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %91 = load i32* %curr.i, align 4
  %92 = load i32* %i.i, align 4
  %add21.i = add i32 %91, %92
  store i32 %add21.i, i32* %curr.i, align 4
  %93 = load i32* %curr.i, align 4
  %inc22.i = add i32 %93, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %93 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %94 = load i32* %curr.i, align 4
  %inc25.i = add i32 %94, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %94 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %95 = load i32* %curr.i, align 4
  %inc28.i = add i32 %95, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %95 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %96 = load i32* %i.i, align 4
  %97 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %96, %97
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %98 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %98 to i64
  %99 = load i8** %__function.addr.i, align 8
  %arrayidx35.i = getelementptr inbounds i8* %99, i64 %idxprom34.i
  %100 = load i8* %arrayidx35.i, align 1
  %101 = load i32* %curr.i, align 4
  %102 = load i32* %i.i, align 4
  %add36.i = add i32 %101, %102
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom37.i
  store i8 %100, i8* %arrayidx38.i, align 1
  %103 = load i32* %i.i, align 4
  %inc40.i = add i32 %103, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %104 = load i32* %curr.i, align 4
  %105 = load i32* %i.i, align 4
  %add42.i = add i32 %104, %105
  store i32 %add42.i, i32* %curr.i, align 4
  %106 = load i32* %curr.i, align 4
  %inc43.i = add i32 %106, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %106 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %107 = load i32* %curr.i, align 4
  %inc46.i = add i32 %107, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %107 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %108 = load i32* %i.i, align 4
  %109 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %108, %109
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %110 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %110 to i64
  %111 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %111, i64 %idxprom52.i
  %112 = load i8* %arrayidx53.i, align 1
  %113 = load i32* %curr.i, align 4
  %114 = load i32* %i.i, align 4
  %add54.i = add i32 %113, %114
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom55.i
  store i8 %112, i8* %arrayidx56.i, align 1
  %115 = load i32* %i.i, align 4
  %inc58.i = add i32 %115, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %116 = load i32* %curr.i, align 4
  %117 = load i32* %i.i, align 4
  %add60.i = add i32 %116, %117
  store i32 %add60.i, i32* %curr.i, align 4
  %118 = load i32* %curr.i, align 4
  %inc61.i = add i32 %118, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %118 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %119 = load i32* %curr.i, align 4
  %inc64.i = add i32 %119, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %119 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i
  br label %if.end

if.end:                                           ; preds = %__pgi_error_msg.exit, %entry
  %120 = load %struct.F90_Desc_la** %tgtdesc, align 8
  %121 = load %struct.F90_Desc_la** %srcdesc, align 8
  %rank = getelementptr inbounds %struct.F90_Desc_la* %121, i32 0, i32 1
  %122 = load i64* %rank, align 8
  %conv = trunc i64 %122 to i32
  %123 = load %struct.F90_Desc_la** %srcdesc, align 8
  store %struct.F90_Desc_la* %120, %struct.F90_Desc_la** %d.addr.i, align 8
  store i32 %conv, i32* %rank.addr.i, align 4
  store %struct.F90_Desc_la* %123, %struct.F90_Desc_la** %a.addr.i, align 8
  %124 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %tag.i = getelementptr inbounds %struct.F90_Desc_la* %124, i32 0, i32 0
  store i64 35, i64* %tag.i, align 8
  %125 = load i32* %rank.addr.i, align 4
  %conv.i = sext i32 %125 to i64
  %126 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %rank1.i = getelementptr inbounds %struct.F90_Desc_la* %126, i32 0, i32 1
  store i64 %conv.i, i64* %rank1.i, align 8
  %127 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %kind.i = getelementptr inbounds %struct.F90_Desc_la* %127, i32 0, i32 2
  %128 = load i64* %kind.i, align 8
  %129 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %kind2.i = getelementptr inbounds %struct.F90_Desc_la* %129, i32 0, i32 2
  store i64 %128, i64* %kind2.i, align 8
  %130 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %len.i = getelementptr inbounds %struct.F90_Desc_la* %130, i32 0, i32 3
  %131 = load i64* %len.i, align 8
  %132 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %len3.i = getelementptr inbounds %struct.F90_Desc_la* %132, i32 0, i32 3
  store i64 %131, i64* %len3.i, align 8
  %133 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %flags.i = getelementptr inbounds %struct.F90_Desc_la* %133, i32 0, i32 4
  %134 = load i64* %flags.i, align 8
  %135 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %flags4.i = getelementptr inbounds %struct.F90_Desc_la* %135, i32 0, i32 4
  store i64 %134, i64* %flags4.i, align 8
  %136 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %gsize.i = getelementptr inbounds %struct.F90_Desc_la* %136, i32 0, i32 6
  %137 = load i64* %gsize.i, align 8
  %138 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %gsize5.i = getelementptr inbounds %struct.F90_Desc_la* %138, i32 0, i32 6
  store i64 %137, i64* %gsize5.i, align 8
  %139 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %lsize.i = getelementptr inbounds %struct.F90_Desc_la* %139, i32 0, i32 5
  %140 = load i64* %lsize.i, align 8
  %141 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %lsize6.i = getelementptr inbounds %struct.F90_Desc_la* %141, i32 0, i32 5
  store i64 %140, i64* %lsize6.i, align 8
  %142 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %gbase.i = getelementptr inbounds %struct.F90_Desc_la* %142, i32 0, i32 8
  %143 = load i64** %gbase.i, align 8
  %144 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %gbase7.i = getelementptr inbounds %struct.F90_Desc_la* %144, i32 0, i32 8
  store i64* %143, i64** %gbase7.i, align 8
  %145 = load %struct.F90_Desc_la** %a.addr.i, align 8
  %lbase.i = getelementptr inbounds %struct.F90_Desc_la* %145, i32 0, i32 7
  %146 = load i64* %lbase.i, align 8
  %147 = load %struct.F90_Desc_la** %d.addr.i, align 8
  %lbase8.i = getelementptr inbounds %struct.F90_Desc_la* %147, i32 0, i32 7
  store i64 %146, i64* %lbase8.i, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %148 = load i32* %i, align 4
  %conv1 = sext i32 %148 to i64
  %149 = load %struct.F90_Desc_la** %srcdesc, align 8
  %rank2 = getelementptr inbounds %struct.F90_Desc_la* %149, i32 0, i32 1
  %150 = load i64* %rank2, align 8
  %cmp3 = icmp slt i64 %conv1, %150
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %151 = load i32* %i, align 4
  %idxprom = sext i32 %151 to i64
  %152 = load %struct.F90_Desc_la** %tgtdesc, align 8
  %dim5 = getelementptr inbounds %struct.F90_Desc_la* %152, i32 0, i32 10
  %arrayidx6 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim5, i32 0, i64 %idxprom
  %153 = load i32* %i, align 4
  %idxprom7 = sext i32 %153 to i64
  %154 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim8 = getelementptr inbounds %struct.F90_Desc_la* %154, i32 0, i32 10
  %arrayidx9 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim8, i32 0, i64 %idxprom7
  %155 = bitcast %struct.F90_DescDim_la* %arrayidx6 to i8*
  %156 = bitcast %struct.F90_DescDim_la* %arrayidx9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 48, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %157 = load i32* %i, align 4
  %inc = add nsw i32 %157, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %158 = load i8** %ab.addr, align 8
  %159 = bitcast i8* %158 to i8**
  %160 = load i8** %159, align 8
  %161 = load i8** %db.addr, align 8
  %162 = bitcast i8* %161 to i8**
  store i8* %160, i8** %162, align 8
  ret void
}

define  void @__pgi_exit() nounwind alwaysinline {
entry:
  call void asm sideeffect "exit;", ""() nounwind, !srcloc !203
  ret void
}

define  i32 @pgf90_conformable_dd(i8* %db, i8* %dd, i8* %sd, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i16 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i17 = alloca i8*, align 8
  %__lineno.addr.i18 = alloca i32, align 4
  %__function.addr.i19 = alloca i8*, align 8
  %__abort.addr.i20 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  %dstdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  %ndim = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load i8** %dd.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc*
  store %struct.F90_Desc* %3, %struct.F90_Desc** %dstdesc, align 8
  %4 = load i8** %db.addr, align 8
  store i8* %4, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %5 = load i8** %pb, align 8
  %6 = load i8** %__filename.addr, align 8
  %7 = load i32* %__lineno.addr, align 4
  %8 = load i8** %__function.addr, align 8
  %9 = load i32* %__abort.addr, align 4
  store i8* %5, i8** %p.addr.i, align 8
  store i8* %6, i8** %__filename.addr.i, align 8
  store i32 %7, i32* %__lineno.addr.i, align 4
  store i8* %8, i8** %__function.addr.i, align 8
  store i32 %9, i32* %__abort.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %10, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %11 = load i8** %__filename.addr.i, align 8
  %12 = load i32* %__lineno.addr.i, align 4
  %13 = load i8** %__function.addr.i, align 8
  %14 = load i32* %__abort.addr.i, align 4
  store i8* %11, i8** %__filename.addr.i.i, align 8
  store i32 %12, i32* %__lineno.addr.i.i, align 4
  store i8* %13, i8** %__function.addr.i.i, align 8
  store i32 %14, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %15 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %15, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %16 = load i8** %__filename.addr.i.i, align 8
  store i8* %16, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %17 = load i8** %str.addr.i.i.i, align 8
  %18 = load i8* %17, align 1
  %conv.i.i.i = sext i8 %18 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %19 = load i32* %len.i.i.i, align 4
  %20 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %19, %20
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %21 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %21, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %22, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %23 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %23, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %24 = load i32* %len.i.i.i, align 4
  store i32 %24, i32* %fnamelen.i.i, align 4
  %25 = load i8** %__function.addr.i.i, align 8
  store i8* %25, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %26 = load i8** %str.addr.i68.i.i, align 8
  %27 = load i8* %26, align 1
  %conv.i71.i.i = sext i8 %27 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %28 = load i32* %len.i70.i.i, align 4
  %29 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %28, %29
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %30 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %30, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %31, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %32 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %32, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %33 = load i32* %len.i70.i.i, align 4
  store i32 %33, i32* %funclen.i.i, align 4
  %34 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %34, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %35 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %35, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %36 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %36, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %36 to i64
  %37 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %37, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %38 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %38, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %39 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %39, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %40 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %40, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %41 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %41, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %41 to i64
  %42 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %42, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %43 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %43, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %44 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %44 to i64
  %45 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %45, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %46 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %46, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %47 = load i32* %start.i.i.i, align 4
  %48 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %47, %48
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %49 = load i8** %str.addr.i107.i.i, align 8
  %50 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %50 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %49, i64 %idx.ext.i.i.i
  %51 = load i8* %add.ptr.i.i.i, align 1
  store i8 %51, i8* %tmp.i.i.i, align 1
  %52 = load i8** %str.addr.i107.i.i, align 8
  %53 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %53 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %52, i64 %idx.ext11.i.i.i
  %54 = load i8* %add.ptr12.i.i.i, align 1
  %55 = load i8** %str.addr.i107.i.i, align 8
  %56 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %56 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %55, i64 %idx.ext13.i.i.i
  store i8 %54, i8* %add.ptr14.i.i.i, align 1
  %57 = load i8* %tmp.i.i.i, align 1
  %58 = load i8** %str.addr.i107.i.i, align 8
  %59 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %59 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %58, i64 %idx.ext15.i.i.i
  store i8 %57, i8* %add.ptr16.i.i.i, align 1
  %60 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %60, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %61 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %61, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %62 = load i8** %str.addr.i94.i.i, align 8
  %63 = load i8* %62, align 1
  %conv.i97.i.i = sext i8 %63 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %64 = load i32* %len.i96.i.i, align 4
  %65 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %64, %65
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %66 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %66, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %67, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %68 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %68, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %69 = load i32* %len.i96.i.i, align 4
  store i32 %69, i32* %linenolen.i.i, align 4
  %70 = load i8** %errmsg.addr.i.i, align 8
  store i8* %70, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %71 = load i8** %str.addr.i81.i.i, align 8
  %72 = load i8* %71, align 1
  %conv.i84.i.i = sext i8 %72 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %73 = load i32* %len.i83.i.i, align 4
  %74 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %73, %74
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %75 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %75, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %76, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %77 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %77, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %78 = load i32* %len.i83.i.i, align 4
  store i32 %78, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %79 = load i32* %i.i.i, align 4
  %80 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %79, %80
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %81 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %81 to i64
  %82 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %82, i64 %idxprom.i.i
  %83 = load i8* %arrayidx.i.i, align 1
  %84 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %84 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %83, i8* %arrayidx6.i.i, align 1
  %85 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %85, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %86 = load i32* %curr.i.i, align 4
  %87 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %86, %87
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %88 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %88, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %88 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %89 = load i32* %i.i.i, align 4
  %90 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %89, %90
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %91 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %91 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %92 = load i8* %arrayidx14.i.i, align 1
  %93 = load i32* %curr.i.i, align 4
  %94 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %93, %94
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %92, i8* %arrayidx17.i.i, align 1
  %95 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %95, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %96 = load i32* %curr.i.i, align 4
  %97 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %96, %97
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %98 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %98, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %98 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %99 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %99, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %99 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %100 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %100, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %100 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %101 = load i32* %i.i.i, align 4
  %102 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %101, %102
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %103 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %103 to i64
  %104 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %104, i64 %idxprom34.i.i
  %105 = load i8* %arrayidx35.i.i, align 1
  %106 = load i32* %curr.i.i, align 4
  %107 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %106, %107
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %105, i8* %arrayidx38.i.i, align 1
  %108 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %108, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %109 = load i32* %curr.i.i, align 4
  %110 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %109, %110
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %111 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %111, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %111 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %112 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %112, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %112 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %113 = load i32* %i.i.i, align 4
  %114 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %113, %114
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %115 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %115 to i64
  %116 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %116, i64 %idxprom52.i.i
  %117 = load i8* %arrayidx53.i.i, align 1
  %118 = load i32* %curr.i.i, align 4
  %119 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %118, %119
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %117, i8* %arrayidx56.i.i, align 1
  %120 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %120, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %121 = load i32* %curr.i.i, align 4
  %122 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %121, %122
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %123 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %123, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %123 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %124 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %124, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %124 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %125 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %125, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %126 = load %struct.F90_Desc** %srcdesc, align 8
  %rank = getelementptr inbounds %struct.F90_Desc* %126, i32 0, i32 1
  %127 = load i32* %rank, align 4
  store i32 %127, i32* %ndim, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %128 = load i32* %i, align 4
  %129 = load i32* %ndim, align 4
  %cmp = icmp slt i32 %128, %129
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %130 = load i32* %i, align 4
  %idxprom = sext i32 %130 to i64
  %131 = load %struct.F90_Desc** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %131, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %132 = load i32* %extent, align 4
  %133 = load i32* %i, align 4
  %idxprom1 = sext i32 %133 to i64
  %134 = load %struct.F90_Desc** %srcdesc, align 8
  %dim2 = getelementptr inbounds %struct.F90_Desc* %134, i32 0, i32 10
  %arrayidx3 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim2, i32 0, i64 %idxprom1
  %extent4 = getelementptr inbounds %struct.F90_DescDim* %arrayidx3, i32 0, i32 1
  %135 = load i32* %extent4, align 4
  %cmp5 = icmp ne i32 %132, %135
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end7:                                          ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %136 = load i32* %i, align 4
  %inc = add nsw i32 %136, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then6, %for.cond
  %137 = load i32* %conformable, align 4
  %cmp8 = icmp ne i32 %137, 1
  br i1 %cmp8, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %for.end
  %138 = load %struct.F90_Desc** %dstdesc, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc* %138, i32 0, i32 6
  %139 = load i32* %gsize, align 4
  %140 = load %struct.F90_Desc** %srcdesc, align 8
  %gsize9 = getelementptr inbounds %struct.F90_Desc* %140, i32 0, i32 6
  %141 = load i32* %gsize9, align 4
  %cmp10 = icmp sge i32 %139, %141
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %for.end
  %142 = load i32* %conformable, align 4
  %cmp13 = icmp slt i32 %142, 0
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end12
  %143 = load i8** %__filename.addr, align 8
  %144 = load i32* %__lineno.addr, align 4
  %145 = load i8** %__function.addr, align 8
  %146 = load i32* %__abort.addr, align 4
  store i8* %143, i8** %__filename.addr.i17, align 8
  store i32 %144, i32* %__lineno.addr.i18, align 4
  store i8* %145, i8** %__function.addr.i19, align 8
  store i32 %146, i32* %__abort.addr.i20, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %147 = load i32* %__abort.addr.i20, align 4
  %tobool.i = icmp ne i32 %147, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i21

if.then.i21:                                      ; preds = %if.then14
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then14
  %148 = load i8** %__filename.addr.i17, align 8
  store i8* %148, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %149 = load i8** %str.addr.i.i, align 8
  %150 = load i8* %149, align 1
  %conv.i.i = sext i8 %150 to i32
  %tobool.i.i22 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i22, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %151 = load i32* %len.i.i, align 4
  %152 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i23 = icmp ult i32 %151, %152
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %153 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i23, %land.rhs.i.i ]
  br i1 %153, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %154 = load i32* %len.i.i, align 4
  %inc.i.i24 = add i32 %154, 1
  store i32 %inc.i.i24, i32* %len.i.i, align 4
  %155 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %155, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %156 = load i32* %len.i.i, align 4
  store i32 %156, i32* %fnamelen.i, align 4
  %157 = load i8** %__function.addr.i19, align 8
  store i8* %157, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %158 = load i8** %str.addr.i68.i, align 8
  %159 = load i8* %158, align 1
  %conv.i71.i = sext i8 %159 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %160 = load i32* %len.i70.i, align 4
  %161 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %160, %161
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %162 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %162, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %163 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %163, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %164 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %164, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %165 = load i32* %len.i70.i, align 4
  store i32 %165, i32* %funclen.i, align 4
  %166 = load i32* %__lineno.addr.i18, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %166, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i16, align 4
  %167 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %167, 0
  br i1 %cmp.i108.i, label %if.then.i.i27, label %if.end.i.i28

if.then.i.i27:                                    ; preds = %__pgi_strlen.exit80.i
  %168 = load i32* %i.i.i16, align 4
  %inc.i109.i = add nsw i32 %168, 1
  store i32 %inc.i109.i, i32* %i.i.i16, align 4
  %idxprom.i.i25 = sext i32 %168 to i64
  %169 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i26 = getelementptr inbounds i8* %169, i64 %idxprom.i.i25
  store i8 48, i8* %arrayidx.i.i26, align 1
  br label %if.end.i.i28

if.end.i.i28:                                     ; preds = %if.then.i.i27, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i28
  %170 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %170, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %171 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %171, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %172 = load i32* %remain.i.i, align 4
  %add.i.i29 = add i32 %172, 48
  %conv.i112.i = trunc i32 %add.i.i29 to i8
  %173 = load i32* %i.i.i16, align 4
  %inc2.i.i = add nsw i32 %173, 1
  store i32 %inc2.i.i, i32* %i.i.i16, align 4
  %idxprom3.i.i = sext i32 %173 to i64
  %174 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %174, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %175 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %175, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %176 = load i32* %i.i.i16, align 4
  %idxprom5.i.i30 = sext i32 %176 to i64
  %177 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i31 = getelementptr inbounds i8* %177, i64 %idxprom5.i.i30
  store i8 0, i8* %arrayidx6.i.i31, align 1
  store i32 0, i32* %start.i.i, align 4
  %178 = load i32* %i.i.i16, align 4
  %sub.i.i = sub nsw i32 %178, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %179 = load i32* %start.i.i, align 4
  %180 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %179, %180
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %182 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %181, i64 %idx.ext.i.i
  %183 = load i8* %add.ptr.i.i, align 1
  store i8 %183, i8* %tmp.i.i, align 1
  %184 = load i8** %str.addr.i107.i, align 8
  %185 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %185 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %184, i64 %idx.ext11.i.i
  %186 = load i8* %add.ptr12.i.i, align 1
  %187 = load i8** %str.addr.i107.i, align 8
  %188 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %188 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %187, i64 %idx.ext13.i.i
  store i8 %186, i8* %add.ptr14.i.i, align 1
  %189 = load i8* %tmp.i.i, align 1
  %190 = load i8** %str.addr.i107.i, align 8
  %191 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %191 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %190, i64 %idx.ext15.i.i
  store i8 %189, i8* %add.ptr16.i.i, align 1
  %192 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %192, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %193 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %193, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %194 = load i8** %str.addr.i94.i, align 8
  %195 = load i8* %194, align 1
  %conv.i97.i = sext i8 %195 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %196 = load i32* %len.i96.i, align 4
  %197 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %196, %197
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %198 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %198, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %199 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %199, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %200 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %200, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %201 = load i32* %len.i96.i, align 4
  store i32 %201, i32* %linenolen.i, align 4
  %202 = load i8** %errmsg.addr.i, align 8
  store i8* %202, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %203 = load i8** %str.addr.i81.i, align 8
  %204 = load i8* %203, align 1
  %conv.i84.i = sext i8 %204 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %205 = load i32* %len.i83.i, align 4
  %206 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %205, %206
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %207 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %207, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %208 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %208, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %209 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %209, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %210 = load i32* %len.i83.i, align 4
  store i32 %210, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %211 = load i32* %i.i, align 4
  %212 = load i32* %fnamelen.i, align 4
  %cmp.i32 = icmp ult i32 %211, %212
  br i1 %cmp.i32, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %213 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %213 to i64
  %214 = load i8** %__filename.addr.i17, align 8
  %arrayidx.i = getelementptr inbounds i8* %214, i64 %idxprom.i
  %215 = load i8* %arrayidx.i, align 1
  %216 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %216 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %215, i8* %arrayidx6.i, align 1
  %217 = load i32* %i.i, align 4
  %inc.i = add i32 %217, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %218 = load i32* %curr.i, align 4
  %219 = load i32* %i.i, align 4
  %add.i = add i32 %218, %219
  store i32 %add.i, i32* %curr.i, align 4
  %220 = load i32* %curr.i, align 4
  %inc7.i = add i32 %220, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %220 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %221 = load i32* %i.i, align 4
  %222 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %221, %222
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %223 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %223 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %224 = load i8* %arrayidx14.i, align 1
  %225 = load i32* %curr.i, align 4
  %226 = load i32* %i.i, align 4
  %add15.i = add i32 %225, %226
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %224, i8* %arrayidx17.i, align 1
  %227 = load i32* %i.i, align 4
  %inc19.i = add i32 %227, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %228 = load i32* %curr.i, align 4
  %229 = load i32* %i.i, align 4
  %add21.i = add i32 %228, %229
  store i32 %add21.i, i32* %curr.i, align 4
  %230 = load i32* %curr.i, align 4
  %inc22.i = add i32 %230, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %230 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %231 = load i32* %curr.i, align 4
  %inc25.i = add i32 %231, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %231 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %232 = load i32* %curr.i, align 4
  %inc28.i = add i32 %232, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %232 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %233 = load i32* %i.i, align 4
  %234 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %233, %234
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %235 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %235 to i64
  %236 = load i8** %__function.addr.i19, align 8
  %arrayidx35.i = getelementptr inbounds i8* %236, i64 %idxprom34.i
  %237 = load i8* %arrayidx35.i, align 1
  %238 = load i32* %curr.i, align 4
  %239 = load i32* %i.i, align 4
  %add36.i = add i32 %238, %239
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %237, i8* %arrayidx38.i, align 1
  %240 = load i32* %i.i, align 4
  %inc40.i = add i32 %240, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %241 = load i32* %curr.i, align 4
  %242 = load i32* %i.i, align 4
  %add42.i = add i32 %241, %242
  store i32 %add42.i, i32* %curr.i, align 4
  %243 = load i32* %curr.i, align 4
  %inc43.i = add i32 %243, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %243 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %244 = load i32* %curr.i, align 4
  %inc46.i = add i32 %244, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %244 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %245 = load i32* %i.i, align 4
  %246 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %245, %246
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %247 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %247 to i64
  %248 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %248, i64 %idxprom52.i
  %249 = load i8* %arrayidx53.i, align 1
  %250 = load i32* %curr.i, align 4
  %251 = load i32* %i.i, align 4
  %add54.i = add i32 %250, %251
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %249, i8* %arrayidx56.i, align 1
  %252 = load i32* %i.i, align 4
  %inc58.i = add i32 %252, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %253 = load i32* %curr.i, align 4
  %254 = load i32* %i.i, align 4
  %add60.i = add i32 %253, %254
  store i32 %add60.i, i32* %curr.i, align 4
  %255 = load i32* %curr.i, align 4
  %inc61.i = add i32 %255, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %255 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %256 = load i32* %curr.i, align 4
  %inc64.i = add i32 %256, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %256 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i21
  br label %if.end15

if.end15:                                         ; preds = %__pgi_error_msg.exit, %if.end12
  %257 = load i32* %conformable, align 4
  store i32 %257, i32* %retval
  br label %return

return:                                           ; preds = %if.end15, %if.then
  %258 = load i32* %retval
  ret i32 %258
}

define  i32 @pgf90_conformable_d1v(i8* %db, i8* %dd, i32 %ext0, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i10 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i11 = alloca i8*, align 8
  %__lineno.addr.i12 = alloca i32, align 4
  %__function.addr.i13 = alloca i8*, align 8
  %__abort.addr.i14 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ext0.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i32 %ext0, i32* %ext0.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load %struct.F90_Desc** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %124, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %125 = load i32* %extent, align 4
  %126 = load i32* %ext0.addr, align 4
  %cmp = icmp ne i32 %125, %126
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %127 = load i32* %conformable, align 4
  %cmp3 = icmp ne i32 %127, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end2
  %128 = load %struct.F90_Desc** %dstdesc, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc* %128, i32 0, i32 6
  %129 = load i32* %gsize, align 4
  %130 = load i32* %ext0.addr, align 4
  %cmp4 = icmp sge i32 %129, %130
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %if.end2
  %131 = load i32* %conformable, align 4
  %cmp7 = icmp slt i32 %131, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %132 = load i8** %__filename.addr, align 8
  %133 = load i32* %__lineno.addr, align 4
  %134 = load i8** %__function.addr, align 8
  %135 = load i32* %__abort.addr, align 4
  store i8* %132, i8** %__filename.addr.i11, align 8
  store i32 %133, i32* %__lineno.addr.i12, align 4
  store i8* %134, i8** %__function.addr.i13, align 8
  store i32 %135, i32* %__abort.addr.i14, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %136 = load i32* %__abort.addr.i14, align 4
  %tobool.i = icmp ne i32 %136, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i15

if.then.i15:                                      ; preds = %if.then8
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then8
  %137 = load i8** %__filename.addr.i11, align 8
  store i8* %137, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %138 = load i8** %str.addr.i.i, align 8
  %139 = load i8* %138, align 1
  %conv.i.i = sext i8 %139 to i32
  %tobool.i.i16 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i16, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %140 = load i32* %len.i.i, align 4
  %141 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i17 = icmp ult i32 %140, %141
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %142 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i17, %land.rhs.i.i ]
  br i1 %142, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %143 = load i32* %len.i.i, align 4
  %inc.i.i18 = add i32 %143, 1
  store i32 %inc.i.i18, i32* %len.i.i, align 4
  %144 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %144, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %145 = load i32* %len.i.i, align 4
  store i32 %145, i32* %fnamelen.i, align 4
  %146 = load i8** %__function.addr.i13, align 8
  store i8* %146, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %147 = load i8** %str.addr.i68.i, align 8
  %148 = load i8* %147, align 1
  %conv.i71.i = sext i8 %148 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %149 = load i32* %len.i70.i, align 4
  %150 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %149, %150
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %151 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %151, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %152 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %152, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %153 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %154 = load i32* %len.i70.i, align 4
  store i32 %154, i32* %funclen.i, align 4
  %155 = load i32* %__lineno.addr.i12, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %155, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i10, align 4
  %156 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %156, 0
  br i1 %cmp.i108.i, label %if.then.i.i21, label %if.end.i.i22

if.then.i.i21:                                    ; preds = %__pgi_strlen.exit80.i
  %157 = load i32* %i.i.i10, align 4
  %inc.i109.i = add nsw i32 %157, 1
  store i32 %inc.i109.i, i32* %i.i.i10, align 4
  %idxprom.i.i19 = sext i32 %157 to i64
  %158 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i20 = getelementptr inbounds i8* %158, i64 %idxprom.i.i19
  store i8 48, i8* %arrayidx.i.i20, align 1
  br label %if.end.i.i22

if.end.i.i22:                                     ; preds = %if.then.i.i21, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i22
  %159 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %159, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %160 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %160, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %161 = load i32* %remain.i.i, align 4
  %add.i.i23 = add i32 %161, 48
  %conv.i112.i = trunc i32 %add.i.i23 to i8
  %162 = load i32* %i.i.i10, align 4
  %inc2.i.i = add nsw i32 %162, 1
  store i32 %inc2.i.i, i32* %i.i.i10, align 4
  %idxprom3.i.i = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %163, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %164 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %164, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %165 = load i32* %i.i.i10, align 4
  %idxprom5.i.i24 = sext i32 %165 to i64
  %166 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i25 = getelementptr inbounds i8* %166, i64 %idxprom5.i.i24
  store i8 0, i8* %arrayidx6.i.i25, align 1
  store i32 0, i32* %start.i.i, align 4
  %167 = load i32* %i.i.i10, align 4
  %sub.i.i = sub nsw i32 %167, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %168 = load i32* %start.i.i, align 4
  %169 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %168, %169
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %170 = load i8** %str.addr.i107.i, align 8
  %171 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %171 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %170, i64 %idx.ext.i.i
  %172 = load i8* %add.ptr.i.i, align 1
  store i8 %172, i8* %tmp.i.i, align 1
  %173 = load i8** %str.addr.i107.i, align 8
  %174 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %174 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %173, i64 %idx.ext11.i.i
  %175 = load i8* %add.ptr12.i.i, align 1
  %176 = load i8** %str.addr.i107.i, align 8
  %177 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %177 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %176, i64 %idx.ext13.i.i
  store i8 %175, i8* %add.ptr14.i.i, align 1
  %178 = load i8* %tmp.i.i, align 1
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %180 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %179, i64 %idx.ext15.i.i
  store i8 %178, i8* %add.ptr16.i.i, align 1
  %181 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %181, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %182 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %182, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %183 = load i8** %str.addr.i94.i, align 8
  %184 = load i8* %183, align 1
  %conv.i97.i = sext i8 %184 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %185 = load i32* %len.i96.i, align 4
  %186 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %185, %186
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %187 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %187, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %188 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %188, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %189 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %189, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %190 = load i32* %len.i96.i, align 4
  store i32 %190, i32* %linenolen.i, align 4
  %191 = load i8** %errmsg.addr.i, align 8
  store i8* %191, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %192 = load i8** %str.addr.i81.i, align 8
  %193 = load i8* %192, align 1
  %conv.i84.i = sext i8 %193 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %194 = load i32* %len.i83.i, align 4
  %195 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %194, %195
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %196 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %196, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %197 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %197, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %198 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %199 = load i32* %len.i83.i, align 4
  store i32 %199, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %200 = load i32* %i.i, align 4
  %201 = load i32* %fnamelen.i, align 4
  %cmp.i26 = icmp ult i32 %200, %201
  br i1 %cmp.i26, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %202 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %202 to i64
  %203 = load i8** %__filename.addr.i11, align 8
  %arrayidx.i = getelementptr inbounds i8* %203, i64 %idxprom.i
  %204 = load i8* %arrayidx.i, align 1
  %205 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %205 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %204, i8* %arrayidx6.i, align 1
  %206 = load i32* %i.i, align 4
  %inc.i = add i32 %206, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %207 = load i32* %curr.i, align 4
  %208 = load i32* %i.i, align 4
  %add.i = add i32 %207, %208
  store i32 %add.i, i32* %curr.i, align 4
  %209 = load i32* %curr.i, align 4
  %inc7.i = add i32 %209, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %209 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %210 = load i32* %i.i, align 4
  %211 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %210, %211
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %212 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %212 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %213 = load i8* %arrayidx14.i, align 1
  %214 = load i32* %curr.i, align 4
  %215 = load i32* %i.i, align 4
  %add15.i = add i32 %214, %215
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %213, i8* %arrayidx17.i, align 1
  %216 = load i32* %i.i, align 4
  %inc19.i = add i32 %216, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %217 = load i32* %curr.i, align 4
  %218 = load i32* %i.i, align 4
  %add21.i = add i32 %217, %218
  store i32 %add21.i, i32* %curr.i, align 4
  %219 = load i32* %curr.i, align 4
  %inc22.i = add i32 %219, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %219 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %220 = load i32* %curr.i, align 4
  %inc25.i = add i32 %220, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %220 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %221 = load i32* %curr.i, align 4
  %inc28.i = add i32 %221, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %221 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %222 = load i32* %i.i, align 4
  %223 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %222, %223
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %224 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %224 to i64
  %225 = load i8** %__function.addr.i13, align 8
  %arrayidx35.i = getelementptr inbounds i8* %225, i64 %idxprom34.i
  %226 = load i8* %arrayidx35.i, align 1
  %227 = load i32* %curr.i, align 4
  %228 = load i32* %i.i, align 4
  %add36.i = add i32 %227, %228
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %226, i8* %arrayidx38.i, align 1
  %229 = load i32* %i.i, align 4
  %inc40.i = add i32 %229, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %230 = load i32* %curr.i, align 4
  %231 = load i32* %i.i, align 4
  %add42.i = add i32 %230, %231
  store i32 %add42.i, i32* %curr.i, align 4
  %232 = load i32* %curr.i, align 4
  %inc43.i = add i32 %232, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %232 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %233 = load i32* %curr.i, align 4
  %inc46.i = add i32 %233, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %233 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %234 = load i32* %i.i, align 4
  %235 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %234, %235
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %236 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %236 to i64
  %237 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %237, i64 %idxprom52.i
  %238 = load i8* %arrayidx53.i, align 1
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add54.i = add i32 %239, %240
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %238, i8* %arrayidx56.i, align 1
  %241 = load i32* %i.i, align 4
  %inc58.i = add i32 %241, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add60.i = add i32 %242, %243
  store i32 %add60.i, i32* %curr.i, align 4
  %244 = load i32* %curr.i, align 4
  %inc61.i = add i32 %244, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %244 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %245 = load i32* %curr.i, align 4
  %inc64.i = add i32 %245, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %245 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i15
  br label %if.end9

if.end9:                                          ; preds = %__pgi_error_msg.exit, %if.end6
  %246 = load i32* %conformable, align 4
  store i32 %246, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %247 = load i32* %retval
  ret i32 %247
}

define  i32 @pgf90_conformable_d2v(i8* %db, i8* %dd, i32 %ext0, i32 %ext1, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i15 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i16 = alloca i8*, align 8
  %__lineno.addr.i17 = alloca i32, align 4
  %__function.addr.i18 = alloca i8*, align 8
  %__abort.addr.i19 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ext0.addr = alloca i32, align 4
  %ext1.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i32 %ext0, i32* %ext0.addr, align 4
  store i32 %ext1, i32* %ext1.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %gsize, align 4
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i32* %ext0.addr, align 4
  %125 = load i32* %ext1.addr, align 4
  %mul = mul nsw i32 %124, %125
  store i32 %mul, i32* %gsize, align 4
  %126 = load %struct.F90_Desc** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %126, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %127 = load i32* %extent, align 4
  %128 = load i32* %ext0.addr, align 4
  %cmp = icmp ne i32 %127, %128
  br i1 %cmp, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %129 = load %struct.F90_Desc** %dstdesc, align 8
  %dim1 = getelementptr inbounds %struct.F90_Desc* %129, i32 0, i32 10
  %arrayidx2 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim1, i32 0, i64 1
  %extent3 = getelementptr inbounds %struct.F90_DescDim* %arrayidx2, i32 0, i32 1
  %130 = load i32* %extent3, align 4
  %131 = load i32* %ext1.addr, align 4
  %cmp4 = icmp ne i32 %130, %131
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %lor.lhs.false
  %132 = load i32* %conformable, align 4
  %cmp7 = icmp ne i32 %132, 1
  br i1 %cmp7, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end6
  %133 = load %struct.F90_Desc** %dstdesc, align 8
  %gsize8 = getelementptr inbounds %struct.F90_Desc* %133, i32 0, i32 6
  %134 = load i32* %gsize8, align 4
  %135 = load i32* %gsize, align 4
  %cmp9 = icmp sge i32 %134, %135
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %if.end6
  %136 = load i32* %conformable, align 4
  %cmp12 = icmp slt i32 %136, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %137 = load i8** %__filename.addr, align 8
  %138 = load i32* %__lineno.addr, align 4
  %139 = load i8** %__function.addr, align 8
  %140 = load i32* %__abort.addr, align 4
  store i8* %137, i8** %__filename.addr.i16, align 8
  store i32 %138, i32* %__lineno.addr.i17, align 4
  store i8* %139, i8** %__function.addr.i18, align 8
  store i32 %140, i32* %__abort.addr.i19, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %141 = load i32* %__abort.addr.i19, align 4
  %tobool.i = icmp ne i32 %141, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i20

if.then.i20:                                      ; preds = %if.then13
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then13
  %142 = load i8** %__filename.addr.i16, align 8
  store i8* %142, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %143 = load i8** %str.addr.i.i, align 8
  %144 = load i8* %143, align 1
  %conv.i.i = sext i8 %144 to i32
  %tobool.i.i21 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i21, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %145 = load i32* %len.i.i, align 4
  %146 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i22 = icmp ult i32 %145, %146
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %147 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i22, %land.rhs.i.i ]
  br i1 %147, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %148 = load i32* %len.i.i, align 4
  %inc.i.i23 = add i32 %148, 1
  store i32 %inc.i.i23, i32* %len.i.i, align 4
  %149 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %149, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %150 = load i32* %len.i.i, align 4
  store i32 %150, i32* %fnamelen.i, align 4
  %151 = load i8** %__function.addr.i18, align 8
  store i8* %151, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %152 = load i8** %str.addr.i68.i, align 8
  %153 = load i8* %152, align 1
  %conv.i71.i = sext i8 %153 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %154 = load i32* %len.i70.i, align 4
  %155 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %154, %155
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %156 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %156, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %157 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %157, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %158 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %158, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %159 = load i32* %len.i70.i, align 4
  store i32 %159, i32* %funclen.i, align 4
  %160 = load i32* %__lineno.addr.i17, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %160, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i15, align 4
  %161 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %161, 0
  br i1 %cmp.i108.i, label %if.then.i.i26, label %if.end.i.i27

if.then.i.i26:                                    ; preds = %__pgi_strlen.exit80.i
  %162 = load i32* %i.i.i15, align 4
  %inc.i109.i = add nsw i32 %162, 1
  store i32 %inc.i109.i, i32* %i.i.i15, align 4
  %idxprom.i.i24 = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i25 = getelementptr inbounds i8* %163, i64 %idxprom.i.i24
  store i8 48, i8* %arrayidx.i.i25, align 1
  br label %if.end.i.i27

if.end.i.i27:                                     ; preds = %if.then.i.i26, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i27
  %164 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %164, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %165 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %165, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %166 = load i32* %remain.i.i, align 4
  %add.i.i28 = add i32 %166, 48
  %conv.i112.i = trunc i32 %add.i.i28 to i8
  %167 = load i32* %i.i.i15, align 4
  %inc2.i.i = add nsw i32 %167, 1
  store i32 %inc2.i.i, i32* %i.i.i15, align 4
  %idxprom3.i.i = sext i32 %167 to i64
  %168 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %168, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %169 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %169, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %170 = load i32* %i.i.i15, align 4
  %idxprom5.i.i29 = sext i32 %170 to i64
  %171 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i30 = getelementptr inbounds i8* %171, i64 %idxprom5.i.i29
  store i8 0, i8* %arrayidx6.i.i30, align 1
  store i32 0, i32* %start.i.i, align 4
  %172 = load i32* %i.i.i15, align 4
  %sub.i.i = sub nsw i32 %172, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %173 = load i32* %start.i.i, align 4
  %174 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %173, %174
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %176 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %175, i64 %idx.ext.i.i
  %177 = load i8* %add.ptr.i.i, align 1
  store i8 %177, i8* %tmp.i.i, align 1
  %178 = load i8** %str.addr.i107.i, align 8
  %179 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %179 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %178, i64 %idx.ext11.i.i
  %180 = load i8* %add.ptr12.i.i, align 1
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %182 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %181, i64 %idx.ext13.i.i
  store i8 %180, i8* %add.ptr14.i.i, align 1
  %183 = load i8* %tmp.i.i, align 1
  %184 = load i8** %str.addr.i107.i, align 8
  %185 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %185 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %184, i64 %idx.ext15.i.i
  store i8 %183, i8* %add.ptr16.i.i, align 1
  %186 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %186, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %187 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %187, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %188 = load i8** %str.addr.i94.i, align 8
  %189 = load i8* %188, align 1
  %conv.i97.i = sext i8 %189 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %190 = load i32* %len.i96.i, align 4
  %191 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %190, %191
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %192 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %192, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %193 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %193, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %194 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %195 = load i32* %len.i96.i, align 4
  store i32 %195, i32* %linenolen.i, align 4
  %196 = load i8** %errmsg.addr.i, align 8
  store i8* %196, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %197 = load i8** %str.addr.i81.i, align 8
  %198 = load i8* %197, align 1
  %conv.i84.i = sext i8 %198 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %199 = load i32* %len.i83.i, align 4
  %200 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %199, %200
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %201 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %201, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %202 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %202, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %203 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %203, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %204 = load i32* %len.i83.i, align 4
  store i32 %204, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %205 = load i32* %i.i, align 4
  %206 = load i32* %fnamelen.i, align 4
  %cmp.i31 = icmp ult i32 %205, %206
  br i1 %cmp.i31, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %207 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %207 to i64
  %208 = load i8** %__filename.addr.i16, align 8
  %arrayidx.i = getelementptr inbounds i8* %208, i64 %idxprom.i
  %209 = load i8* %arrayidx.i, align 1
  %210 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %210 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %209, i8* %arrayidx6.i, align 1
  %211 = load i32* %i.i, align 4
  %inc.i = add i32 %211, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %212 = load i32* %curr.i, align 4
  %213 = load i32* %i.i, align 4
  %add.i = add i32 %212, %213
  store i32 %add.i, i32* %curr.i, align 4
  %214 = load i32* %curr.i, align 4
  %inc7.i = add i32 %214, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %214 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %215, %216
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %217 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %217 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %218 = load i8* %arrayidx14.i, align 1
  %219 = load i32* %curr.i, align 4
  %220 = load i32* %i.i, align 4
  %add15.i = add i32 %219, %220
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %218, i8* %arrayidx17.i, align 1
  %221 = load i32* %i.i, align 4
  %inc19.i = add i32 %221, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add21.i = add i32 %222, %223
  store i32 %add21.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc22.i = add i32 %224, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %224 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %225 = load i32* %curr.i, align 4
  %inc25.i = add i32 %225, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %225 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %226 = load i32* %curr.i, align 4
  %inc28.i = add i32 %226, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %226 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %227 = load i32* %i.i, align 4
  %228 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %227, %228
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %229 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %229 to i64
  %230 = load i8** %__function.addr.i18, align 8
  %arrayidx35.i = getelementptr inbounds i8* %230, i64 %idxprom34.i
  %231 = load i8* %arrayidx35.i, align 1
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add36.i = add i32 %232, %233
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %231, i8* %arrayidx38.i, align 1
  %234 = load i32* %i.i, align 4
  %inc40.i = add i32 %234, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add42.i = add i32 %235, %236
  store i32 %add42.i, i32* %curr.i, align 4
  %237 = load i32* %curr.i, align 4
  %inc43.i = add i32 %237, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %237 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %238 = load i32* %curr.i, align 4
  %inc46.i = add i32 %238, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %238 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %239 = load i32* %i.i, align 4
  %240 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %239, %240
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %241 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %241 to i64
  %242 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %242, i64 %idxprom52.i
  %243 = load i8* %arrayidx53.i, align 1
  %244 = load i32* %curr.i, align 4
  %245 = load i32* %i.i, align 4
  %add54.i = add i32 %244, %245
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %243, i8* %arrayidx56.i, align 1
  %246 = load i32* %i.i, align 4
  %inc58.i = add i32 %246, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %247 = load i32* %curr.i, align 4
  %248 = load i32* %i.i, align 4
  %add60.i = add i32 %247, %248
  store i32 %add60.i, i32* %curr.i, align 4
  %249 = load i32* %curr.i, align 4
  %inc61.i = add i32 %249, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %249 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %250 = load i32* %curr.i, align 4
  %inc64.i = add i32 %250, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %250 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i20
  br label %if.end14

if.end14:                                         ; preds = %__pgi_error_msg.exit, %if.end11
  %251 = load i32* %conformable, align 4
  store i32 %251, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then
  %252 = load i32* %retval
  ret i32 %252
}

define  i32 @pgf90_conformable_d3v(i8* %db, i8* %dd, i32 %ext0, i32 %ext1, i32 %ext2, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i21 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i22 = alloca i8*, align 8
  %__lineno.addr.i23 = alloca i32, align 4
  %__function.addr.i24 = alloca i8*, align 8
  %__abort.addr.i25 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ext0.addr = alloca i32, align 4
  %ext1.addr = alloca i32, align 4
  %ext2.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i32 %ext0, i32* %ext0.addr, align 4
  store i32 %ext1, i32* %ext1.addr, align 4
  store i32 %ext2, i32* %ext2.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %gsize, align 4
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i32* %ext0.addr, align 4
  %125 = load i32* %ext1.addr, align 4
  %mul = mul nsw i32 %124, %125
  %126 = load i32* %ext2.addr, align 4
  %mul1 = mul nsw i32 %mul, %126
  store i32 %mul1, i32* %gsize, align 4
  %127 = load %struct.F90_Desc** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %127, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %128 = load i32* %extent, align 4
  %129 = load i32* %ext0.addr, align 4
  %cmp = icmp ne i32 %128, %129
  br i1 %cmp, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %130 = load %struct.F90_Desc** %dstdesc, align 8
  %dim2 = getelementptr inbounds %struct.F90_Desc* %130, i32 0, i32 10
  %arrayidx3 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim2, i32 0, i64 1
  %extent4 = getelementptr inbounds %struct.F90_DescDim* %arrayidx3, i32 0, i32 1
  %131 = load i32* %extent4, align 4
  %132 = load i32* %ext1.addr, align 4
  %cmp5 = icmp ne i32 %131, %132
  br i1 %cmp5, label %if.then11, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %133 = load %struct.F90_Desc** %dstdesc, align 8
  %dim7 = getelementptr inbounds %struct.F90_Desc* %133, i32 0, i32 10
  %arrayidx8 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7, i32 0, i64 2
  %extent9 = getelementptr inbounds %struct.F90_DescDim* %arrayidx8, i32 0, i32 1
  %134 = load i32* %extent9, align 4
  %135 = load i32* %ext2.addr, align 4
  %cmp10 = icmp ne i32 %134, %135
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %lor.lhs.false6
  %136 = load i32* %conformable, align 4
  %cmp13 = icmp ne i32 %136, 1
  br i1 %cmp13, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end12
  %137 = load %struct.F90_Desc** %dstdesc, align 8
  %gsize14 = getelementptr inbounds %struct.F90_Desc* %137, i32 0, i32 6
  %138 = load i32* %gsize14, align 4
  %139 = load i32* %gsize, align 4
  %cmp15 = icmp sge i32 %138, %139
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %if.end12
  %140 = load i32* %conformable, align 4
  %cmp18 = icmp slt i32 %140, 0
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %141 = load i8** %__filename.addr, align 8
  %142 = load i32* %__lineno.addr, align 4
  %143 = load i8** %__function.addr, align 8
  %144 = load i32* %__abort.addr, align 4
  store i8* %141, i8** %__filename.addr.i22, align 8
  store i32 %142, i32* %__lineno.addr.i23, align 4
  store i8* %143, i8** %__function.addr.i24, align 8
  store i32 %144, i32* %__abort.addr.i25, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %145 = load i32* %__abort.addr.i25, align 4
  %tobool.i = icmp ne i32 %145, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i26

if.then.i26:                                      ; preds = %if.then19
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then19
  %146 = load i8** %__filename.addr.i22, align 8
  store i8* %146, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %147 = load i8** %str.addr.i.i, align 8
  %148 = load i8* %147, align 1
  %conv.i.i = sext i8 %148 to i32
  %tobool.i.i27 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i27, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %149 = load i32* %len.i.i, align 4
  %150 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i28 = icmp ult i32 %149, %150
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %151 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i28, %land.rhs.i.i ]
  br i1 %151, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %152 = load i32* %len.i.i, align 4
  %inc.i.i29 = add i32 %152, 1
  store i32 %inc.i.i29, i32* %len.i.i, align 4
  %153 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %154 = load i32* %len.i.i, align 4
  store i32 %154, i32* %fnamelen.i, align 4
  %155 = load i8** %__function.addr.i24, align 8
  store i8* %155, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %156 = load i8** %str.addr.i68.i, align 8
  %157 = load i8* %156, align 1
  %conv.i71.i = sext i8 %157 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %158 = load i32* %len.i70.i, align 4
  %159 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %158, %159
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %160 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %160, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %161 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %161, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %162 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %162, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %163 = load i32* %len.i70.i, align 4
  store i32 %163, i32* %funclen.i, align 4
  %164 = load i32* %__lineno.addr.i23, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %164, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i21, align 4
  %165 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %165, 0
  br i1 %cmp.i108.i, label %if.then.i.i32, label %if.end.i.i33

if.then.i.i32:                                    ; preds = %__pgi_strlen.exit80.i
  %166 = load i32* %i.i.i21, align 4
  %inc.i109.i = add nsw i32 %166, 1
  store i32 %inc.i109.i, i32* %i.i.i21, align 4
  %idxprom.i.i30 = sext i32 %166 to i64
  %167 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i31 = getelementptr inbounds i8* %167, i64 %idxprom.i.i30
  store i8 48, i8* %arrayidx.i.i31, align 1
  br label %if.end.i.i33

if.end.i.i33:                                     ; preds = %if.then.i.i32, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i33
  %168 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %168, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %169 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %169, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %170 = load i32* %remain.i.i, align 4
  %add.i.i34 = add i32 %170, 48
  %conv.i112.i = trunc i32 %add.i.i34 to i8
  %171 = load i32* %i.i.i21, align 4
  %inc2.i.i = add nsw i32 %171, 1
  store i32 %inc2.i.i, i32* %i.i.i21, align 4
  %idxprom3.i.i = sext i32 %171 to i64
  %172 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %172, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %173 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %173, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %174 = load i32* %i.i.i21, align 4
  %idxprom5.i.i35 = sext i32 %174 to i64
  %175 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i36 = getelementptr inbounds i8* %175, i64 %idxprom5.i.i35
  store i8 0, i8* %arrayidx6.i.i36, align 1
  store i32 0, i32* %start.i.i, align 4
  %176 = load i32* %i.i.i21, align 4
  %sub.i.i = sub nsw i32 %176, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %177 = load i32* %start.i.i, align 4
  %178 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %177, %178
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %180 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %179, i64 %idx.ext.i.i
  %181 = load i8* %add.ptr.i.i, align 1
  store i8 %181, i8* %tmp.i.i, align 1
  %182 = load i8** %str.addr.i107.i, align 8
  %183 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %183 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %182, i64 %idx.ext11.i.i
  %184 = load i8* %add.ptr12.i.i, align 1
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %186 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %185, i64 %idx.ext13.i.i
  store i8 %184, i8* %add.ptr14.i.i, align 1
  %187 = load i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %189 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %188, i64 %idx.ext15.i.i
  store i8 %187, i8* %add.ptr16.i.i, align 1
  %190 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %190, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %191 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %191, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %192 = load i8** %str.addr.i94.i, align 8
  %193 = load i8* %192, align 1
  %conv.i97.i = sext i8 %193 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %194 = load i32* %len.i96.i, align 4
  %195 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %194, %195
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %196 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %196, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %197 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %197, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %198 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %199 = load i32* %len.i96.i, align 4
  store i32 %199, i32* %linenolen.i, align 4
  %200 = load i8** %errmsg.addr.i, align 8
  store i8* %200, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %201 = load i8** %str.addr.i81.i, align 8
  %202 = load i8* %201, align 1
  %conv.i84.i = sext i8 %202 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %203 = load i32* %len.i83.i, align 4
  %204 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %203, %204
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %205 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %205, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %206 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %206, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %207 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %207, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %208 = load i32* %len.i83.i, align 4
  store i32 %208, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %209 = load i32* %i.i, align 4
  %210 = load i32* %fnamelen.i, align 4
  %cmp.i37 = icmp ult i32 %209, %210
  br i1 %cmp.i37, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %211 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %211 to i64
  %212 = load i8** %__filename.addr.i22, align 8
  %arrayidx.i = getelementptr inbounds i8* %212, i64 %idxprom.i
  %213 = load i8* %arrayidx.i, align 1
  %214 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %214 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %213, i8* %arrayidx6.i, align 1
  %215 = load i32* %i.i, align 4
  %inc.i = add i32 %215, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %216 = load i32* %curr.i, align 4
  %217 = load i32* %i.i, align 4
  %add.i = add i32 %216, %217
  store i32 %add.i, i32* %curr.i, align 4
  %218 = load i32* %curr.i, align 4
  %inc7.i = add i32 %218, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %218 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %219 = load i32* %i.i, align 4
  %220 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %219, %220
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %221 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %221 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %222 = load i8* %arrayidx14.i, align 1
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add15.i = add i32 %223, %224
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %222, i8* %arrayidx17.i, align 1
  %225 = load i32* %i.i, align 4
  %inc19.i = add i32 %225, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %226 = load i32* %curr.i, align 4
  %227 = load i32* %i.i, align 4
  %add21.i = add i32 %226, %227
  store i32 %add21.i, i32* %curr.i, align 4
  %228 = load i32* %curr.i, align 4
  %inc22.i = add i32 %228, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %228 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %229 = load i32* %curr.i, align 4
  %inc25.i = add i32 %229, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %229 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %230 = load i32* %curr.i, align 4
  %inc28.i = add i32 %230, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %230 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %231 = load i32* %i.i, align 4
  %232 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %231, %232
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %233 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %233 to i64
  %234 = load i8** %__function.addr.i24, align 8
  %arrayidx35.i = getelementptr inbounds i8* %234, i64 %idxprom34.i
  %235 = load i8* %arrayidx35.i, align 1
  %236 = load i32* %curr.i, align 4
  %237 = load i32* %i.i, align 4
  %add36.i = add i32 %236, %237
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %235, i8* %arrayidx38.i, align 1
  %238 = load i32* %i.i, align 4
  %inc40.i = add i32 %238, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add42.i = add i32 %239, %240
  store i32 %add42.i, i32* %curr.i, align 4
  %241 = load i32* %curr.i, align 4
  %inc43.i = add i32 %241, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %241 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %242 = load i32* %curr.i, align 4
  %inc46.i = add i32 %242, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %242 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %243 = load i32* %i.i, align 4
  %244 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %243, %244
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %245 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %245 to i64
  %246 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %246, i64 %idxprom52.i
  %247 = load i8* %arrayidx53.i, align 1
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add54.i = add i32 %248, %249
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %247, i8* %arrayidx56.i, align 1
  %250 = load i32* %i.i, align 4
  %inc58.i = add i32 %250, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %251 = load i32* %curr.i, align 4
  %252 = load i32* %i.i, align 4
  %add60.i = add i32 %251, %252
  store i32 %add60.i, i32* %curr.i, align 4
  %253 = load i32* %curr.i, align 4
  %inc61.i = add i32 %253, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %253 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %254 = load i32* %curr.i, align 4
  %inc64.i = add i32 %254, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %254 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i26
  br label %if.end20

if.end20:                                         ; preds = %__pgi_error_msg.exit, %if.end17
  %255 = load i32* %conformable, align 4
  store i32 %255, i32* %retval
  br label %return

return:                                           ; preds = %if.end20, %if.then
  %256 = load i32* %retval
  ret i32 %256
}

define  i32 @pgf90_conformable_dnv(i8* %db, i8* %dd, i32 %ndim, i32 %ext0, i32 %ext1, i32 %ext2, i32 %ext3, i32 %ext4, i32 %ext5, i32 %ext6, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i24 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i25 = alloca i8*, align 8
  %__lineno.addr.i26 = alloca i32, align 4
  %__function.addr.i27 = alloca i8*, align 8
  %__abort.addr.i28 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ndim.addr = alloca i32, align 4
  %ext0.addr = alloca i32, align 4
  %ext1.addr = alloca i32, align 4
  %ext2.addr = alloca i32, align 4
  %ext3.addr = alloca i32, align 4
  %ext4.addr = alloca i32, align 4
  %ext5.addr = alloca i32, align 4
  %ext6.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc*, align 8
  %extent = alloca [7 x i32], align 4
  %pb = alloca i8*, align 8
  %i = alloca i32, align 4
  %gsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i32 %ndim, i32* %ndim.addr, align 4
  store i32 %ext0, i32* %ext0.addr, align 4
  store i32 %ext1, i32* %ext1.addr, align 4
  store i32 %ext2, i32* %ext2.addr, align 4
  store i32 %ext3, i32* %ext3.addr, align 4
  store i32 %ext4, i32* %ext4.addr, align 4
  store i32 %ext5, i32* %ext5.addr, align 4
  store i32 %ext6, i32* %ext6.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %gsize, align 4
  store i32 1, i32* %conformable, align 4
  %3 = load i32* %ext0.addr, align 4
  %arrayidx = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 0
  store i32 %3, i32* %arrayidx, align 4
  %4 = load i32* %ext1.addr, align 4
  %arrayidx1 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 1
  store i32 %4, i32* %arrayidx1, align 4
  %5 = load i32* %ext2.addr, align 4
  %arrayidx2 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 2
  store i32 %5, i32* %arrayidx2, align 4
  %6 = load i32* %ext3.addr, align 4
  %arrayidx3 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 3
  store i32 %6, i32* %arrayidx3, align 4
  %7 = load i32* %ext4.addr, align 4
  %arrayidx4 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 4
  store i32 %7, i32* %arrayidx4, align 4
  %8 = load i32* %ext5.addr, align 4
  %arrayidx5 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 5
  store i32 %8, i32* %arrayidx5, align 4
  %9 = load i32* %ext6.addr, align 4
  %arrayidx6 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 6
  store i32 %9, i32* %arrayidx6, align 4
  %10 = load i8** %pb, align 8
  %11 = load i8** %__filename.addr, align 8
  %12 = load i32* %__lineno.addr, align 4
  %13 = load i8** %__function.addr, align 8
  %14 = load i32* %__abort.addr, align 4
  store i8* %10, i8** %p.addr.i, align 8
  store i8* %11, i8** %__filename.addr.i, align 8
  store i32 %12, i32* %__lineno.addr.i, align 4
  store i8* %13, i8** %__function.addr.i, align 8
  store i32 %14, i32* %__abort.addr.i, align 4
  %15 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %15, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %16 = load i8** %__filename.addr.i, align 8
  %17 = load i32* %__lineno.addr.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  %19 = load i32* %__abort.addr.i, align 4
  store i8* %16, i8** %__filename.addr.i.i, align 8
  store i32 %17, i32* %__lineno.addr.i.i, align 4
  store i8* %18, i8** %__function.addr.i.i, align 8
  store i32 %19, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %20 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %20, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %21 = load i8** %__filename.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %22 = load i8** %str.addr.i.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i.i.i = sext i8 %23 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %24 = load i32* %len.i.i.i, align 4
  %25 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %24, %25
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %26 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %26, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %27 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %27, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %28 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %29 = load i32* %len.i.i.i, align 4
  store i32 %29, i32* %fnamelen.i.i, align 4
  %30 = load i8** %__function.addr.i.i, align 8
  store i8* %30, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %31 = load i8** %str.addr.i68.i.i, align 8
  %32 = load i8* %31, align 1
  %conv.i71.i.i = sext i8 %32 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %33 = load i32* %len.i70.i.i, align 4
  %34 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %33, %34
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %35 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %35, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %36 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %36, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %37 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %37, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %38 = load i32* %len.i70.i.i, align 4
  store i32 %38, i32* %funclen.i.i, align 4
  %39 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %39, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %40 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %40, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %41 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %41, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %41 to i64
  %42 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %42, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %43 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %43, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %44 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %44, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %45 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %45, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %46 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %46, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %46 to i64
  %47 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %47, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %48 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %48, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %49 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %49 to i64
  %50 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %50, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %51 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %51, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %52 = load i32* %start.i.i.i, align 4
  %53 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %52, %53
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %55 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext.i.i.i
  %56 = load i8* %add.ptr.i.i.i, align 1
  store i8 %56, i8* %tmp.i.i.i, align 1
  %57 = load i8** %str.addr.i107.i.i, align 8
  %58 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %58 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %57, i64 %idx.ext11.i.i.i
  %59 = load i8* %add.ptr12.i.i.i, align 1
  %60 = load i8** %str.addr.i107.i.i, align 8
  %61 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %61 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %60, i64 %idx.ext13.i.i.i
  store i8 %59, i8* %add.ptr14.i.i.i, align 1
  %62 = load i8* %tmp.i.i.i, align 1
  %63 = load i8** %str.addr.i107.i.i, align 8
  %64 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %64 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %63, i64 %idx.ext15.i.i.i
  store i8 %62, i8* %add.ptr16.i.i.i, align 1
  %65 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %65, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %66 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %66, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %67 = load i8** %str.addr.i94.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i97.i.i = sext i8 %68 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %69 = load i32* %len.i96.i.i, align 4
  %70 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %69, %70
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %71 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %71, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %72 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %72, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %73 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %74 = load i32* %len.i96.i.i, align 4
  store i32 %74, i32* %linenolen.i.i, align 4
  %75 = load i8** %errmsg.addr.i.i, align 8
  store i8* %75, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %76 = load i8** %str.addr.i81.i.i, align 8
  %77 = load i8* %76, align 1
  %conv.i84.i.i = sext i8 %77 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %78 = load i32* %len.i83.i.i, align 4
  %79 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %78, %79
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %80 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %80, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %81 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %81, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %82 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %82, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %83 = load i32* %len.i83.i.i, align 4
  store i32 %83, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %84 = load i32* %i.i.i, align 4
  %85 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %84, %85
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %86 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %86 to i64
  %87 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %87, i64 %idxprom.i.i
  %88 = load i8* %arrayidx.i.i, align 1
  %89 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %89 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %88, i8* %arrayidx6.i.i, align 1
  %90 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %90, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %91, %92
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %93 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %93, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %93 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %94 = load i32* %i.i.i, align 4
  %95 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %94, %95
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %96 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %96 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %97 = load i8* %arrayidx14.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %99 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %98, %99
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %97, i8* %arrayidx17.i.i, align 1
  %100 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %100, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %101 = load i32* %curr.i.i, align 4
  %102 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %101, %102
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %103 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %103, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %103 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %104, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %104 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %105 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %105, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %105 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %106 = load i32* %i.i.i, align 4
  %107 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %106, %107
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %108 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %108 to i64
  %109 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %109, i64 %idxprom34.i.i
  %110 = load i8* %arrayidx35.i.i, align 1
  %111 = load i32* %curr.i.i, align 4
  %112 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %111, %112
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %110, i8* %arrayidx38.i.i, align 1
  %113 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %113, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %114, %115
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %116 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %116, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %116 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %117 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %117, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %117 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %118 = load i32* %i.i.i, align 4
  %119 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %118, %119
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %120 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %120 to i64
  %121 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %121, i64 %idxprom52.i.i
  %122 = load i8* %arrayidx53.i.i, align 1
  %123 = load i32* %curr.i.i, align 4
  %124 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %123, %124
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %122, i8* %arrayidx56.i.i, align 1
  %125 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %125, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %126 = load i32* %curr.i.i, align 4
  %127 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %126, %127
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %128 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %128, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %128 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %129 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %129, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %129 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %130 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %130, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %131 = load i32* %i, align 4
  %132 = load i32* %ndim.addr, align 4
  %cmp = icmp slt i32 %131, %132
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %133 = load i32* %i, align 4
  %idxprom = sext i32 %133 to i64
  %arrayidx7 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 %idxprom
  %134 = load i32* %arrayidx7, align 4
  %135 = load i32* %gsize, align 4
  %mul = mul nsw i32 %135, %134
  store i32 %mul, i32* %gsize, align 4
  %136 = load i32* %i, align 4
  %idxprom8 = sext i32 %136 to i64
  %137 = load %struct.F90_Desc** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %137, i32 0, i32 10
  %arrayidx9 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom8
  %extent10 = getelementptr inbounds %struct.F90_DescDim* %arrayidx9, i32 0, i32 1
  %138 = load i32* %extent10, align 4
  %139 = load i32* %i, align 4
  %idxprom11 = sext i32 %139 to i64
  %arrayidx12 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 %idxprom11
  %140 = load i32* %arrayidx12, align 4
  %cmp13 = icmp ne i32 %138, %140
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end15:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %141 = load i32* %i, align 4
  %inc = add nsw i32 %141, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then14, %for.cond
  %142 = load i32* %conformable, align 4
  %cmp16 = icmp ne i32 %142, 1
  br i1 %cmp16, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %for.end
  %143 = load %struct.F90_Desc** %dstdesc, align 8
  %gsize17 = getelementptr inbounds %struct.F90_Desc* %143, i32 0, i32 6
  %144 = load i32* %gsize17, align 4
  %145 = load i32* %gsize, align 4
  %cmp18 = icmp sge i32 %144, %145
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %land.lhs.true, %for.end
  %146 = load i32* %conformable, align 4
  %cmp21 = icmp slt i32 %146, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end20
  %147 = load i8** %__filename.addr, align 8
  %148 = load i32* %__lineno.addr, align 4
  %149 = load i8** %__function.addr, align 8
  %150 = load i32* %__abort.addr, align 4
  store i8* %147, i8** %__filename.addr.i25, align 8
  store i32 %148, i32* %__lineno.addr.i26, align 4
  store i8* %149, i8** %__function.addr.i27, align 8
  store i32 %150, i32* %__abort.addr.i28, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %151 = load i32* %__abort.addr.i28, align 4
  %tobool.i = icmp ne i32 %151, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i29

if.then.i29:                                      ; preds = %if.then22
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then22
  %152 = load i8** %__filename.addr.i25, align 8
  store i8* %152, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %153 = load i8** %str.addr.i.i, align 8
  %154 = load i8* %153, align 1
  %conv.i.i = sext i8 %154 to i32
  %tobool.i.i30 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i30, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %155 = load i32* %len.i.i, align 4
  %156 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i31 = icmp ult i32 %155, %156
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %157 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i31, %land.rhs.i.i ]
  br i1 %157, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %158 = load i32* %len.i.i, align 4
  %inc.i.i32 = add i32 %158, 1
  store i32 %inc.i.i32, i32* %len.i.i, align 4
  %159 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %160 = load i32* %len.i.i, align 4
  store i32 %160, i32* %fnamelen.i, align 4
  %161 = load i8** %__function.addr.i27, align 8
  store i8* %161, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %162 = load i8** %str.addr.i68.i, align 8
  %163 = load i8* %162, align 1
  %conv.i71.i = sext i8 %163 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %164 = load i32* %len.i70.i, align 4
  %165 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %164, %165
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %166 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %166, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %167 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %167, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %168 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %168, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %169 = load i32* %len.i70.i, align 4
  store i32 %169, i32* %funclen.i, align 4
  %170 = load i32* %__lineno.addr.i26, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %170, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i24, align 4
  %171 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %171, 0
  br i1 %cmp.i108.i, label %if.then.i.i35, label %if.end.i.i36

if.then.i.i35:                                    ; preds = %__pgi_strlen.exit80.i
  %172 = load i32* %i.i.i24, align 4
  %inc.i109.i = add nsw i32 %172, 1
  store i32 %inc.i109.i, i32* %i.i.i24, align 4
  %idxprom.i.i33 = sext i32 %172 to i64
  %173 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i34 = getelementptr inbounds i8* %173, i64 %idxprom.i.i33
  store i8 48, i8* %arrayidx.i.i34, align 1
  br label %if.end.i.i36

if.end.i.i36:                                     ; preds = %if.then.i.i35, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i36
  %174 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %174, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %175 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %175, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %176 = load i32* %remain.i.i, align 4
  %add.i.i37 = add i32 %176, 48
  %conv.i112.i = trunc i32 %add.i.i37 to i8
  %177 = load i32* %i.i.i24, align 4
  %inc2.i.i = add nsw i32 %177, 1
  store i32 %inc2.i.i, i32* %i.i.i24, align 4
  %idxprom3.i.i = sext i32 %177 to i64
  %178 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %178, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %179 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %179, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %180 = load i32* %i.i.i24, align 4
  %idxprom5.i.i38 = sext i32 %180 to i64
  %181 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i39 = getelementptr inbounds i8* %181, i64 %idxprom5.i.i38
  store i8 0, i8* %arrayidx6.i.i39, align 1
  store i32 0, i32* %start.i.i, align 4
  %182 = load i32* %i.i.i24, align 4
  %sub.i.i = sub nsw i32 %182, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %183 = load i32* %start.i.i, align 4
  %184 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %183, %184
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %186 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %185, i64 %idx.ext.i.i
  %187 = load i8* %add.ptr.i.i, align 1
  store i8 %187, i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %189 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %188, i64 %idx.ext11.i.i
  %190 = load i8* %add.ptr12.i.i, align 1
  %191 = load i8** %str.addr.i107.i, align 8
  %192 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %192 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %191, i64 %idx.ext13.i.i
  store i8 %190, i8* %add.ptr14.i.i, align 1
  %193 = load i8* %tmp.i.i, align 1
  %194 = load i8** %str.addr.i107.i, align 8
  %195 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %195 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %194, i64 %idx.ext15.i.i
  store i8 %193, i8* %add.ptr16.i.i, align 1
  %196 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %196, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %197 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %197, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %198 = load i8** %str.addr.i94.i, align 8
  %199 = load i8* %198, align 1
  %conv.i97.i = sext i8 %199 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %200 = load i32* %len.i96.i, align 4
  %201 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %200, %201
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %202 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %202, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %203 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %203, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %204 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %205 = load i32* %len.i96.i, align 4
  store i32 %205, i32* %linenolen.i, align 4
  %206 = load i8** %errmsg.addr.i, align 8
  store i8* %206, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %207 = load i8** %str.addr.i81.i, align 8
  %208 = load i8* %207, align 1
  %conv.i84.i = sext i8 %208 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %209 = load i32* %len.i83.i, align 4
  %210 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %209, %210
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %211 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %211, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %212 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %212, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %213 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %213, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %214 = load i32* %len.i83.i, align 4
  store i32 %214, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %fnamelen.i, align 4
  %cmp.i40 = icmp ult i32 %215, %216
  br i1 %cmp.i40, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %217 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %217 to i64
  %218 = load i8** %__filename.addr.i25, align 8
  %arrayidx.i = getelementptr inbounds i8* %218, i64 %idxprom.i
  %219 = load i8* %arrayidx.i, align 1
  %220 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %220 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %219, i8* %arrayidx6.i, align 1
  %221 = load i32* %i.i, align 4
  %inc.i = add i32 %221, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add.i = add i32 %222, %223
  store i32 %add.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc7.i = add i32 %224, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %224 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %225 = load i32* %i.i, align 4
  %226 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %225, %226
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %227 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %227 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %228 = load i8* %arrayidx14.i, align 1
  %229 = load i32* %curr.i, align 4
  %230 = load i32* %i.i, align 4
  %add15.i = add i32 %229, %230
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %228, i8* %arrayidx17.i, align 1
  %231 = load i32* %i.i, align 4
  %inc19.i = add i32 %231, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add21.i = add i32 %232, %233
  store i32 %add21.i, i32* %curr.i, align 4
  %234 = load i32* %curr.i, align 4
  %inc22.i = add i32 %234, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %234 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %235 = load i32* %curr.i, align 4
  %inc25.i = add i32 %235, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %235 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %236 = load i32* %curr.i, align 4
  %inc28.i = add i32 %236, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %236 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %237 = load i32* %i.i, align 4
  %238 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %237, %238
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %239 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %239 to i64
  %240 = load i8** %__function.addr.i27, align 8
  %arrayidx35.i = getelementptr inbounds i8* %240, i64 %idxprom34.i
  %241 = load i8* %arrayidx35.i, align 1
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add36.i = add i32 %242, %243
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %241, i8* %arrayidx38.i, align 1
  %244 = load i32* %i.i, align 4
  %inc40.i = add i32 %244, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %245 = load i32* %curr.i, align 4
  %246 = load i32* %i.i, align 4
  %add42.i = add i32 %245, %246
  store i32 %add42.i, i32* %curr.i, align 4
  %247 = load i32* %curr.i, align 4
  %inc43.i = add i32 %247, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %247 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %248 = load i32* %curr.i, align 4
  %inc46.i = add i32 %248, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %248 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %249 = load i32* %i.i, align 4
  %250 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %249, %250
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %251 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %251 to i64
  %252 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %252, i64 %idxprom52.i
  %253 = load i8* %arrayidx53.i, align 1
  %254 = load i32* %curr.i, align 4
  %255 = load i32* %i.i, align 4
  %add54.i = add i32 %254, %255
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %253, i8* %arrayidx56.i, align 1
  %256 = load i32* %i.i, align 4
  %inc58.i = add i32 %256, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %257 = load i32* %curr.i, align 4
  %258 = load i32* %i.i, align 4
  %add60.i = add i32 %257, %258
  store i32 %add60.i, i32* %curr.i, align 4
  %259 = load i32* %curr.i, align 4
  %inc61.i = add i32 %259, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %259 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %260 = load i32* %curr.i, align 4
  %inc64.i = add i32 %260, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %260 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i29
  br label %if.end23

if.end23:                                         ; preds = %__pgi_error_msg.exit, %if.end20
  %261 = load i32* %conformable, align 4
  store i32 %261, i32* %retval
  br label %return

return:                                           ; preds = %if.end23, %if.then
  %262 = load i32* %retval
  ret i32 %262
}

define  i32 @pgf90_conformable_1dv(i8* %db, i8* %sd, i32 %ext0, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i10 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i11 = alloca i8*, align 8
  %__lineno.addr.i12 = alloca i32, align 4
  %__function.addr.i13 = alloca i8*, align 8
  %__abort.addr.i14 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ext0.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i32 %ext0, i32* %ext0.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load %struct.F90_Desc** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %124, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %125 = load i32* %extent, align 4
  %126 = load i32* %ext0.addr, align 4
  %cmp = icmp ne i32 %125, %126
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %127 = load i32* %conformable, align 4
  %cmp3 = icmp ne i32 %127, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end2
  %128 = load i32* %ext0.addr, align 4
  %129 = load %struct.F90_Desc** %srcdesc, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc* %129, i32 0, i32 6
  %130 = load i32* %gsize, align 4
  %cmp4 = icmp sge i32 %128, %130
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %if.end2
  %131 = load i32* %conformable, align 4
  %cmp7 = icmp slt i32 %131, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %132 = load i8** %__filename.addr, align 8
  %133 = load i32* %__lineno.addr, align 4
  %134 = load i8** %__function.addr, align 8
  %135 = load i32* %__abort.addr, align 4
  store i8* %132, i8** %__filename.addr.i11, align 8
  store i32 %133, i32* %__lineno.addr.i12, align 4
  store i8* %134, i8** %__function.addr.i13, align 8
  store i32 %135, i32* %__abort.addr.i14, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %136 = load i32* %__abort.addr.i14, align 4
  %tobool.i = icmp ne i32 %136, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i15

if.then.i15:                                      ; preds = %if.then8
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then8
  %137 = load i8** %__filename.addr.i11, align 8
  store i8* %137, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %138 = load i8** %str.addr.i.i, align 8
  %139 = load i8* %138, align 1
  %conv.i.i = sext i8 %139 to i32
  %tobool.i.i16 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i16, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %140 = load i32* %len.i.i, align 4
  %141 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i17 = icmp ult i32 %140, %141
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %142 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i17, %land.rhs.i.i ]
  br i1 %142, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %143 = load i32* %len.i.i, align 4
  %inc.i.i18 = add i32 %143, 1
  store i32 %inc.i.i18, i32* %len.i.i, align 4
  %144 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %144, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %145 = load i32* %len.i.i, align 4
  store i32 %145, i32* %fnamelen.i, align 4
  %146 = load i8** %__function.addr.i13, align 8
  store i8* %146, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %147 = load i8** %str.addr.i68.i, align 8
  %148 = load i8* %147, align 1
  %conv.i71.i = sext i8 %148 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %149 = load i32* %len.i70.i, align 4
  %150 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %149, %150
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %151 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %151, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %152 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %152, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %153 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %154 = load i32* %len.i70.i, align 4
  store i32 %154, i32* %funclen.i, align 4
  %155 = load i32* %__lineno.addr.i12, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %155, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i10, align 4
  %156 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %156, 0
  br i1 %cmp.i108.i, label %if.then.i.i21, label %if.end.i.i22

if.then.i.i21:                                    ; preds = %__pgi_strlen.exit80.i
  %157 = load i32* %i.i.i10, align 4
  %inc.i109.i = add nsw i32 %157, 1
  store i32 %inc.i109.i, i32* %i.i.i10, align 4
  %idxprom.i.i19 = sext i32 %157 to i64
  %158 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i20 = getelementptr inbounds i8* %158, i64 %idxprom.i.i19
  store i8 48, i8* %arrayidx.i.i20, align 1
  br label %if.end.i.i22

if.end.i.i22:                                     ; preds = %if.then.i.i21, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i22
  %159 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %159, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %160 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %160, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %161 = load i32* %remain.i.i, align 4
  %add.i.i23 = add i32 %161, 48
  %conv.i112.i = trunc i32 %add.i.i23 to i8
  %162 = load i32* %i.i.i10, align 4
  %inc2.i.i = add nsw i32 %162, 1
  store i32 %inc2.i.i, i32* %i.i.i10, align 4
  %idxprom3.i.i = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %163, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %164 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %164, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %165 = load i32* %i.i.i10, align 4
  %idxprom5.i.i24 = sext i32 %165 to i64
  %166 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i25 = getelementptr inbounds i8* %166, i64 %idxprom5.i.i24
  store i8 0, i8* %arrayidx6.i.i25, align 1
  store i32 0, i32* %start.i.i, align 4
  %167 = load i32* %i.i.i10, align 4
  %sub.i.i = sub nsw i32 %167, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %168 = load i32* %start.i.i, align 4
  %169 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %168, %169
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %170 = load i8** %str.addr.i107.i, align 8
  %171 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %171 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %170, i64 %idx.ext.i.i
  %172 = load i8* %add.ptr.i.i, align 1
  store i8 %172, i8* %tmp.i.i, align 1
  %173 = load i8** %str.addr.i107.i, align 8
  %174 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %174 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %173, i64 %idx.ext11.i.i
  %175 = load i8* %add.ptr12.i.i, align 1
  %176 = load i8** %str.addr.i107.i, align 8
  %177 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %177 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %176, i64 %idx.ext13.i.i
  store i8 %175, i8* %add.ptr14.i.i, align 1
  %178 = load i8* %tmp.i.i, align 1
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %180 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %179, i64 %idx.ext15.i.i
  store i8 %178, i8* %add.ptr16.i.i, align 1
  %181 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %181, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %182 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %182, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %183 = load i8** %str.addr.i94.i, align 8
  %184 = load i8* %183, align 1
  %conv.i97.i = sext i8 %184 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %185 = load i32* %len.i96.i, align 4
  %186 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %185, %186
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %187 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %187, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %188 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %188, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %189 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %189, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %190 = load i32* %len.i96.i, align 4
  store i32 %190, i32* %linenolen.i, align 4
  %191 = load i8** %errmsg.addr.i, align 8
  store i8* %191, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %192 = load i8** %str.addr.i81.i, align 8
  %193 = load i8* %192, align 1
  %conv.i84.i = sext i8 %193 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %194 = load i32* %len.i83.i, align 4
  %195 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %194, %195
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %196 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %196, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %197 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %197, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %198 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %199 = load i32* %len.i83.i, align 4
  store i32 %199, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %200 = load i32* %i.i, align 4
  %201 = load i32* %fnamelen.i, align 4
  %cmp.i26 = icmp ult i32 %200, %201
  br i1 %cmp.i26, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %202 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %202 to i64
  %203 = load i8** %__filename.addr.i11, align 8
  %arrayidx.i = getelementptr inbounds i8* %203, i64 %idxprom.i
  %204 = load i8* %arrayidx.i, align 1
  %205 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %205 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %204, i8* %arrayidx6.i, align 1
  %206 = load i32* %i.i, align 4
  %inc.i = add i32 %206, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %207 = load i32* %curr.i, align 4
  %208 = load i32* %i.i, align 4
  %add.i = add i32 %207, %208
  store i32 %add.i, i32* %curr.i, align 4
  %209 = load i32* %curr.i, align 4
  %inc7.i = add i32 %209, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %209 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %210 = load i32* %i.i, align 4
  %211 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %210, %211
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %212 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %212 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %213 = load i8* %arrayidx14.i, align 1
  %214 = load i32* %curr.i, align 4
  %215 = load i32* %i.i, align 4
  %add15.i = add i32 %214, %215
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %213, i8* %arrayidx17.i, align 1
  %216 = load i32* %i.i, align 4
  %inc19.i = add i32 %216, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %217 = load i32* %curr.i, align 4
  %218 = load i32* %i.i, align 4
  %add21.i = add i32 %217, %218
  store i32 %add21.i, i32* %curr.i, align 4
  %219 = load i32* %curr.i, align 4
  %inc22.i = add i32 %219, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %219 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %220 = load i32* %curr.i, align 4
  %inc25.i = add i32 %220, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %220 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %221 = load i32* %curr.i, align 4
  %inc28.i = add i32 %221, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %221 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %222 = load i32* %i.i, align 4
  %223 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %222, %223
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %224 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %224 to i64
  %225 = load i8** %__function.addr.i13, align 8
  %arrayidx35.i = getelementptr inbounds i8* %225, i64 %idxprom34.i
  %226 = load i8* %arrayidx35.i, align 1
  %227 = load i32* %curr.i, align 4
  %228 = load i32* %i.i, align 4
  %add36.i = add i32 %227, %228
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %226, i8* %arrayidx38.i, align 1
  %229 = load i32* %i.i, align 4
  %inc40.i = add i32 %229, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %230 = load i32* %curr.i, align 4
  %231 = load i32* %i.i, align 4
  %add42.i = add i32 %230, %231
  store i32 %add42.i, i32* %curr.i, align 4
  %232 = load i32* %curr.i, align 4
  %inc43.i = add i32 %232, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %232 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %233 = load i32* %curr.i, align 4
  %inc46.i = add i32 %233, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %233 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %234 = load i32* %i.i, align 4
  %235 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %234, %235
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %236 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %236 to i64
  %237 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %237, i64 %idxprom52.i
  %238 = load i8* %arrayidx53.i, align 1
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add54.i = add i32 %239, %240
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %238, i8* %arrayidx56.i, align 1
  %241 = load i32* %i.i, align 4
  %inc58.i = add i32 %241, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add60.i = add i32 %242, %243
  store i32 %add60.i, i32* %curr.i, align 4
  %244 = load i32* %curr.i, align 4
  %inc61.i = add i32 %244, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %244 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %245 = load i32* %curr.i, align 4
  %inc64.i = add i32 %245, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %245 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i15
  br label %if.end9

if.end9:                                          ; preds = %__pgi_error_msg.exit, %if.end6
  %246 = load i32* %conformable, align 4
  store i32 %246, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %247 = load i32* %retval
  ret i32 %247
}

define  i32 @pgf90_conformable_2dv(i8* %db, i8* %sd, i32 %ext0, i32 %ext1, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i15 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i16 = alloca i8*, align 8
  %__lineno.addr.i17 = alloca i32, align 4
  %__function.addr.i18 = alloca i8*, align 8
  %__abort.addr.i19 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ext0.addr = alloca i32, align 4
  %ext1.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i32 %ext0, i32* %ext0.addr, align 4
  store i32 %ext1, i32* %ext1.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %gsize, align 4
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i32* %ext0.addr, align 4
  %125 = load i32* %ext1.addr, align 4
  %mul = mul nsw i32 %124, %125
  store i32 %mul, i32* %gsize, align 4
  %126 = load %struct.F90_Desc** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %126, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %127 = load i32* %extent, align 4
  %128 = load i32* %ext0.addr, align 4
  %cmp = icmp ne i32 %127, %128
  br i1 %cmp, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %129 = load %struct.F90_Desc** %srcdesc, align 8
  %dim1 = getelementptr inbounds %struct.F90_Desc* %129, i32 0, i32 10
  %arrayidx2 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim1, i32 0, i64 1
  %extent3 = getelementptr inbounds %struct.F90_DescDim* %arrayidx2, i32 0, i32 1
  %130 = load i32* %extent3, align 4
  %131 = load i32* %ext1.addr, align 4
  %cmp4 = icmp ne i32 %130, %131
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %lor.lhs.false
  %132 = load i32* %conformable, align 4
  %cmp7 = icmp ne i32 %132, 1
  br i1 %cmp7, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end6
  %133 = load i32* %gsize, align 4
  %134 = load %struct.F90_Desc** %srcdesc, align 8
  %gsize8 = getelementptr inbounds %struct.F90_Desc* %134, i32 0, i32 6
  %135 = load i32* %gsize8, align 4
  %cmp9 = icmp sge i32 %133, %135
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %if.end6
  %136 = load i32* %conformable, align 4
  %cmp12 = icmp slt i32 %136, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %137 = load i8** %__filename.addr, align 8
  %138 = load i32* %__lineno.addr, align 4
  %139 = load i8** %__function.addr, align 8
  %140 = load i32* %__abort.addr, align 4
  store i8* %137, i8** %__filename.addr.i16, align 8
  store i32 %138, i32* %__lineno.addr.i17, align 4
  store i8* %139, i8** %__function.addr.i18, align 8
  store i32 %140, i32* %__abort.addr.i19, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %141 = load i32* %__abort.addr.i19, align 4
  %tobool.i = icmp ne i32 %141, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i20

if.then.i20:                                      ; preds = %if.then13
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then13
  %142 = load i8** %__filename.addr.i16, align 8
  store i8* %142, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %143 = load i8** %str.addr.i.i, align 8
  %144 = load i8* %143, align 1
  %conv.i.i = sext i8 %144 to i32
  %tobool.i.i21 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i21, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %145 = load i32* %len.i.i, align 4
  %146 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i22 = icmp ult i32 %145, %146
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %147 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i22, %land.rhs.i.i ]
  br i1 %147, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %148 = load i32* %len.i.i, align 4
  %inc.i.i23 = add i32 %148, 1
  store i32 %inc.i.i23, i32* %len.i.i, align 4
  %149 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %149, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %150 = load i32* %len.i.i, align 4
  store i32 %150, i32* %fnamelen.i, align 4
  %151 = load i8** %__function.addr.i18, align 8
  store i8* %151, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %152 = load i8** %str.addr.i68.i, align 8
  %153 = load i8* %152, align 1
  %conv.i71.i = sext i8 %153 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %154 = load i32* %len.i70.i, align 4
  %155 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %154, %155
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %156 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %156, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %157 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %157, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %158 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %158, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %159 = load i32* %len.i70.i, align 4
  store i32 %159, i32* %funclen.i, align 4
  %160 = load i32* %__lineno.addr.i17, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %160, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i15, align 4
  %161 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %161, 0
  br i1 %cmp.i108.i, label %if.then.i.i26, label %if.end.i.i27

if.then.i.i26:                                    ; preds = %__pgi_strlen.exit80.i
  %162 = load i32* %i.i.i15, align 4
  %inc.i109.i = add nsw i32 %162, 1
  store i32 %inc.i109.i, i32* %i.i.i15, align 4
  %idxprom.i.i24 = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i25 = getelementptr inbounds i8* %163, i64 %idxprom.i.i24
  store i8 48, i8* %arrayidx.i.i25, align 1
  br label %if.end.i.i27

if.end.i.i27:                                     ; preds = %if.then.i.i26, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i27
  %164 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %164, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %165 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %165, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %166 = load i32* %remain.i.i, align 4
  %add.i.i28 = add i32 %166, 48
  %conv.i112.i = trunc i32 %add.i.i28 to i8
  %167 = load i32* %i.i.i15, align 4
  %inc2.i.i = add nsw i32 %167, 1
  store i32 %inc2.i.i, i32* %i.i.i15, align 4
  %idxprom3.i.i = sext i32 %167 to i64
  %168 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %168, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %169 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %169, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %170 = load i32* %i.i.i15, align 4
  %idxprom5.i.i29 = sext i32 %170 to i64
  %171 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i30 = getelementptr inbounds i8* %171, i64 %idxprom5.i.i29
  store i8 0, i8* %arrayidx6.i.i30, align 1
  store i32 0, i32* %start.i.i, align 4
  %172 = load i32* %i.i.i15, align 4
  %sub.i.i = sub nsw i32 %172, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %173 = load i32* %start.i.i, align 4
  %174 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %173, %174
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %176 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %175, i64 %idx.ext.i.i
  %177 = load i8* %add.ptr.i.i, align 1
  store i8 %177, i8* %tmp.i.i, align 1
  %178 = load i8** %str.addr.i107.i, align 8
  %179 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %179 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %178, i64 %idx.ext11.i.i
  %180 = load i8* %add.ptr12.i.i, align 1
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %182 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %181, i64 %idx.ext13.i.i
  store i8 %180, i8* %add.ptr14.i.i, align 1
  %183 = load i8* %tmp.i.i, align 1
  %184 = load i8** %str.addr.i107.i, align 8
  %185 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %185 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %184, i64 %idx.ext15.i.i
  store i8 %183, i8* %add.ptr16.i.i, align 1
  %186 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %186, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %187 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %187, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %188 = load i8** %str.addr.i94.i, align 8
  %189 = load i8* %188, align 1
  %conv.i97.i = sext i8 %189 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %190 = load i32* %len.i96.i, align 4
  %191 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %190, %191
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %192 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %192, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %193 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %193, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %194 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %195 = load i32* %len.i96.i, align 4
  store i32 %195, i32* %linenolen.i, align 4
  %196 = load i8** %errmsg.addr.i, align 8
  store i8* %196, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %197 = load i8** %str.addr.i81.i, align 8
  %198 = load i8* %197, align 1
  %conv.i84.i = sext i8 %198 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %199 = load i32* %len.i83.i, align 4
  %200 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %199, %200
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %201 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %201, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %202 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %202, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %203 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %203, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %204 = load i32* %len.i83.i, align 4
  store i32 %204, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %205 = load i32* %i.i, align 4
  %206 = load i32* %fnamelen.i, align 4
  %cmp.i31 = icmp ult i32 %205, %206
  br i1 %cmp.i31, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %207 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %207 to i64
  %208 = load i8** %__filename.addr.i16, align 8
  %arrayidx.i = getelementptr inbounds i8* %208, i64 %idxprom.i
  %209 = load i8* %arrayidx.i, align 1
  %210 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %210 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %209, i8* %arrayidx6.i, align 1
  %211 = load i32* %i.i, align 4
  %inc.i = add i32 %211, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %212 = load i32* %curr.i, align 4
  %213 = load i32* %i.i, align 4
  %add.i = add i32 %212, %213
  store i32 %add.i, i32* %curr.i, align 4
  %214 = load i32* %curr.i, align 4
  %inc7.i = add i32 %214, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %214 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %215, %216
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %217 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %217 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %218 = load i8* %arrayidx14.i, align 1
  %219 = load i32* %curr.i, align 4
  %220 = load i32* %i.i, align 4
  %add15.i = add i32 %219, %220
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %218, i8* %arrayidx17.i, align 1
  %221 = load i32* %i.i, align 4
  %inc19.i = add i32 %221, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add21.i = add i32 %222, %223
  store i32 %add21.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc22.i = add i32 %224, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %224 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %225 = load i32* %curr.i, align 4
  %inc25.i = add i32 %225, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %225 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %226 = load i32* %curr.i, align 4
  %inc28.i = add i32 %226, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %226 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %227 = load i32* %i.i, align 4
  %228 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %227, %228
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %229 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %229 to i64
  %230 = load i8** %__function.addr.i18, align 8
  %arrayidx35.i = getelementptr inbounds i8* %230, i64 %idxprom34.i
  %231 = load i8* %arrayidx35.i, align 1
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add36.i = add i32 %232, %233
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %231, i8* %arrayidx38.i, align 1
  %234 = load i32* %i.i, align 4
  %inc40.i = add i32 %234, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add42.i = add i32 %235, %236
  store i32 %add42.i, i32* %curr.i, align 4
  %237 = load i32* %curr.i, align 4
  %inc43.i = add i32 %237, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %237 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %238 = load i32* %curr.i, align 4
  %inc46.i = add i32 %238, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %238 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %239 = load i32* %i.i, align 4
  %240 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %239, %240
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %241 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %241 to i64
  %242 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %242, i64 %idxprom52.i
  %243 = load i8* %arrayidx53.i, align 1
  %244 = load i32* %curr.i, align 4
  %245 = load i32* %i.i, align 4
  %add54.i = add i32 %244, %245
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %243, i8* %arrayidx56.i, align 1
  %246 = load i32* %i.i, align 4
  %inc58.i = add i32 %246, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %247 = load i32* %curr.i, align 4
  %248 = load i32* %i.i, align 4
  %add60.i = add i32 %247, %248
  store i32 %add60.i, i32* %curr.i, align 4
  %249 = load i32* %curr.i, align 4
  %inc61.i = add i32 %249, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %249 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %250 = load i32* %curr.i, align 4
  %inc64.i = add i32 %250, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %250 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i20
  br label %if.end14

if.end14:                                         ; preds = %__pgi_error_msg.exit, %if.end11
  %251 = load i32* %conformable, align 4
  store i32 %251, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then
  %252 = load i32* %retval
  ret i32 %252
}

define  i32 @pgf90_conformable_3dv(i8* %db, i8* %sd, i32 %ext0, i32 %ext1, i32 %ext2, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i21 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i22 = alloca i8*, align 8
  %__lineno.addr.i23 = alloca i32, align 4
  %__function.addr.i24 = alloca i8*, align 8
  %__abort.addr.i25 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ext0.addr = alloca i32, align 4
  %ext1.addr = alloca i32, align 4
  %ext2.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i32 %ext0, i32* %ext0.addr, align 4
  store i32 %ext1, i32* %ext1.addr, align 4
  store i32 %ext2, i32* %ext2.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %gsize, align 4
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i32* %ext0.addr, align 4
  %125 = load i32* %ext1.addr, align 4
  %mul = mul nsw i32 %124, %125
  %126 = load i32* %ext2.addr, align 4
  %mul1 = mul nsw i32 %mul, %126
  store i32 %mul1, i32* %gsize, align 4
  %127 = load %struct.F90_Desc** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %127, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim* %arrayidx, i32 0, i32 1
  %128 = load i32* %extent, align 4
  %129 = load i32* %ext0.addr, align 4
  %cmp = icmp ne i32 %128, %129
  br i1 %cmp, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %130 = load %struct.F90_Desc** %srcdesc, align 8
  %dim2 = getelementptr inbounds %struct.F90_Desc* %130, i32 0, i32 10
  %arrayidx3 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim2, i32 0, i64 1
  %extent4 = getelementptr inbounds %struct.F90_DescDim* %arrayidx3, i32 0, i32 1
  %131 = load i32* %extent4, align 4
  %132 = load i32* %ext1.addr, align 4
  %cmp5 = icmp ne i32 %131, %132
  br i1 %cmp5, label %if.then11, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %133 = load %struct.F90_Desc** %srcdesc, align 8
  %dim7 = getelementptr inbounds %struct.F90_Desc* %133, i32 0, i32 10
  %arrayidx8 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim7, i32 0, i64 2
  %extent9 = getelementptr inbounds %struct.F90_DescDim* %arrayidx8, i32 0, i32 1
  %134 = load i32* %extent9, align 4
  %135 = load i32* %ext2.addr, align 4
  %cmp10 = icmp ne i32 %134, %135
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %lor.lhs.false6
  %136 = load i32* %conformable, align 4
  %cmp13 = icmp ne i32 %136, 1
  br i1 %cmp13, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end12
  %137 = load %struct.F90_Desc** %srcdesc, align 8
  %gsize14 = getelementptr inbounds %struct.F90_Desc* %137, i32 0, i32 6
  %138 = load i32* %gsize14, align 4
  %139 = load i32* %gsize, align 4
  %cmp15 = icmp sge i32 %138, %139
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %if.end12
  %140 = load i32* %conformable, align 4
  %cmp18 = icmp slt i32 %140, 0
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %141 = load i8** %__filename.addr, align 8
  %142 = load i32* %__lineno.addr, align 4
  %143 = load i8** %__function.addr, align 8
  %144 = load i32* %__abort.addr, align 4
  store i8* %141, i8** %__filename.addr.i22, align 8
  store i32 %142, i32* %__lineno.addr.i23, align 4
  store i8* %143, i8** %__function.addr.i24, align 8
  store i32 %144, i32* %__abort.addr.i25, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %145 = load i32* %__abort.addr.i25, align 4
  %tobool.i = icmp ne i32 %145, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i26

if.then.i26:                                      ; preds = %if.then19
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then19
  %146 = load i8** %__filename.addr.i22, align 8
  store i8* %146, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %147 = load i8** %str.addr.i.i, align 8
  %148 = load i8* %147, align 1
  %conv.i.i = sext i8 %148 to i32
  %tobool.i.i27 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i27, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %149 = load i32* %len.i.i, align 4
  %150 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i28 = icmp ult i32 %149, %150
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %151 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i28, %land.rhs.i.i ]
  br i1 %151, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %152 = load i32* %len.i.i, align 4
  %inc.i.i29 = add i32 %152, 1
  store i32 %inc.i.i29, i32* %len.i.i, align 4
  %153 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %154 = load i32* %len.i.i, align 4
  store i32 %154, i32* %fnamelen.i, align 4
  %155 = load i8** %__function.addr.i24, align 8
  store i8* %155, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %156 = load i8** %str.addr.i68.i, align 8
  %157 = load i8* %156, align 1
  %conv.i71.i = sext i8 %157 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %158 = load i32* %len.i70.i, align 4
  %159 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %158, %159
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %160 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %160, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %161 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %161, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %162 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %162, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %163 = load i32* %len.i70.i, align 4
  store i32 %163, i32* %funclen.i, align 4
  %164 = load i32* %__lineno.addr.i23, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %164, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i21, align 4
  %165 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %165, 0
  br i1 %cmp.i108.i, label %if.then.i.i32, label %if.end.i.i33

if.then.i.i32:                                    ; preds = %__pgi_strlen.exit80.i
  %166 = load i32* %i.i.i21, align 4
  %inc.i109.i = add nsw i32 %166, 1
  store i32 %inc.i109.i, i32* %i.i.i21, align 4
  %idxprom.i.i30 = sext i32 %166 to i64
  %167 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i31 = getelementptr inbounds i8* %167, i64 %idxprom.i.i30
  store i8 48, i8* %arrayidx.i.i31, align 1
  br label %if.end.i.i33

if.end.i.i33:                                     ; preds = %if.then.i.i32, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i33
  %168 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %168, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %169 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %169, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %170 = load i32* %remain.i.i, align 4
  %add.i.i34 = add i32 %170, 48
  %conv.i112.i = trunc i32 %add.i.i34 to i8
  %171 = load i32* %i.i.i21, align 4
  %inc2.i.i = add nsw i32 %171, 1
  store i32 %inc2.i.i, i32* %i.i.i21, align 4
  %idxprom3.i.i = sext i32 %171 to i64
  %172 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %172, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %173 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %173, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %174 = load i32* %i.i.i21, align 4
  %idxprom5.i.i35 = sext i32 %174 to i64
  %175 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i36 = getelementptr inbounds i8* %175, i64 %idxprom5.i.i35
  store i8 0, i8* %arrayidx6.i.i36, align 1
  store i32 0, i32* %start.i.i, align 4
  %176 = load i32* %i.i.i21, align 4
  %sub.i.i = sub nsw i32 %176, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %177 = load i32* %start.i.i, align 4
  %178 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %177, %178
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %180 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %179, i64 %idx.ext.i.i
  %181 = load i8* %add.ptr.i.i, align 1
  store i8 %181, i8* %tmp.i.i, align 1
  %182 = load i8** %str.addr.i107.i, align 8
  %183 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %183 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %182, i64 %idx.ext11.i.i
  %184 = load i8* %add.ptr12.i.i, align 1
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %186 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %185, i64 %idx.ext13.i.i
  store i8 %184, i8* %add.ptr14.i.i, align 1
  %187 = load i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %189 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %188, i64 %idx.ext15.i.i
  store i8 %187, i8* %add.ptr16.i.i, align 1
  %190 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %190, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %191 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %191, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %192 = load i8** %str.addr.i94.i, align 8
  %193 = load i8* %192, align 1
  %conv.i97.i = sext i8 %193 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %194 = load i32* %len.i96.i, align 4
  %195 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %194, %195
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %196 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %196, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %197 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %197, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %198 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %199 = load i32* %len.i96.i, align 4
  store i32 %199, i32* %linenolen.i, align 4
  %200 = load i8** %errmsg.addr.i, align 8
  store i8* %200, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %201 = load i8** %str.addr.i81.i, align 8
  %202 = load i8* %201, align 1
  %conv.i84.i = sext i8 %202 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %203 = load i32* %len.i83.i, align 4
  %204 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %203, %204
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %205 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %205, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %206 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %206, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %207 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %207, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %208 = load i32* %len.i83.i, align 4
  store i32 %208, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %209 = load i32* %i.i, align 4
  %210 = load i32* %fnamelen.i, align 4
  %cmp.i37 = icmp ult i32 %209, %210
  br i1 %cmp.i37, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %211 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %211 to i64
  %212 = load i8** %__filename.addr.i22, align 8
  %arrayidx.i = getelementptr inbounds i8* %212, i64 %idxprom.i
  %213 = load i8* %arrayidx.i, align 1
  %214 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %214 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %213, i8* %arrayidx6.i, align 1
  %215 = load i32* %i.i, align 4
  %inc.i = add i32 %215, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %216 = load i32* %curr.i, align 4
  %217 = load i32* %i.i, align 4
  %add.i = add i32 %216, %217
  store i32 %add.i, i32* %curr.i, align 4
  %218 = load i32* %curr.i, align 4
  %inc7.i = add i32 %218, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %218 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %219 = load i32* %i.i, align 4
  %220 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %219, %220
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %221 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %221 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %222 = load i8* %arrayidx14.i, align 1
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add15.i = add i32 %223, %224
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %222, i8* %arrayidx17.i, align 1
  %225 = load i32* %i.i, align 4
  %inc19.i = add i32 %225, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %226 = load i32* %curr.i, align 4
  %227 = load i32* %i.i, align 4
  %add21.i = add i32 %226, %227
  store i32 %add21.i, i32* %curr.i, align 4
  %228 = load i32* %curr.i, align 4
  %inc22.i = add i32 %228, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %228 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %229 = load i32* %curr.i, align 4
  %inc25.i = add i32 %229, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %229 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %230 = load i32* %curr.i, align 4
  %inc28.i = add i32 %230, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %230 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %231 = load i32* %i.i, align 4
  %232 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %231, %232
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %233 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %233 to i64
  %234 = load i8** %__function.addr.i24, align 8
  %arrayidx35.i = getelementptr inbounds i8* %234, i64 %idxprom34.i
  %235 = load i8* %arrayidx35.i, align 1
  %236 = load i32* %curr.i, align 4
  %237 = load i32* %i.i, align 4
  %add36.i = add i32 %236, %237
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %235, i8* %arrayidx38.i, align 1
  %238 = load i32* %i.i, align 4
  %inc40.i = add i32 %238, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add42.i = add i32 %239, %240
  store i32 %add42.i, i32* %curr.i, align 4
  %241 = load i32* %curr.i, align 4
  %inc43.i = add i32 %241, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %241 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %242 = load i32* %curr.i, align 4
  %inc46.i = add i32 %242, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %242 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %243 = load i32* %i.i, align 4
  %244 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %243, %244
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %245 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %245 to i64
  %246 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %246, i64 %idxprom52.i
  %247 = load i8* %arrayidx53.i, align 1
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add54.i = add i32 %248, %249
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %247, i8* %arrayidx56.i, align 1
  %250 = load i32* %i.i, align 4
  %inc58.i = add i32 %250, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %251 = load i32* %curr.i, align 4
  %252 = load i32* %i.i, align 4
  %add60.i = add i32 %251, %252
  store i32 %add60.i, i32* %curr.i, align 4
  %253 = load i32* %curr.i, align 4
  %inc61.i = add i32 %253, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %253 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %254 = load i32* %curr.i, align 4
  %inc64.i = add i32 %254, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %254 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i26
  br label %if.end20

if.end20:                                         ; preds = %__pgi_error_msg.exit, %if.end17
  %255 = load i32* %conformable, align 4
  store i32 %255, i32* %retval
  br label %return

return:                                           ; preds = %if.end20, %if.then
  %256 = load i32* %retval
  ret i32 %256
}

define  i32 @pgf90_conformable_ndv(i8* %db, i8* %sd, i32 %ndim, i32 %ext0, i32 %ext1, i32 %ext2, i32 %ext3, i32 %ext4, i32 %ext5, i32 %ext6, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i24 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i25 = alloca i8*, align 8
  %__lineno.addr.i26 = alloca i32, align 4
  %__function.addr.i27 = alloca i8*, align 8
  %__abort.addr.i28 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ndim.addr = alloca i32, align 4
  %ext0.addr = alloca i32, align 4
  %ext1.addr = alloca i32, align 4
  %ext2.addr = alloca i32, align 4
  %ext3.addr = alloca i32, align 4
  %ext4.addr = alloca i32, align 4
  %ext5.addr = alloca i32, align 4
  %ext6.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc*, align 8
  %extent = alloca [7 x i32], align 4
  %pb = alloca i8*, align 8
  %i = alloca i32, align 4
  %gsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i32 %ndim, i32* %ndim.addr, align 4
  store i32 %ext0, i32* %ext0.addr, align 4
  store i32 %ext1, i32* %ext1.addr, align 4
  store i32 %ext2, i32* %ext2.addr, align 4
  store i32 %ext3, i32* %ext3.addr, align 4
  store i32 %ext4, i32* %ext4.addr, align 4
  store i32 %ext5, i32* %ext5.addr, align 4
  store i32 %ext6, i32* %ext6.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc*
  store %struct.F90_Desc* %1, %struct.F90_Desc** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %gsize, align 4
  store i32 1, i32* %conformable, align 4
  %3 = load i32* %ext0.addr, align 4
  %arrayidx = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 0
  store i32 %3, i32* %arrayidx, align 4
  %4 = load i32* %ext1.addr, align 4
  %arrayidx1 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 1
  store i32 %4, i32* %arrayidx1, align 4
  %5 = load i32* %ext2.addr, align 4
  %arrayidx2 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 2
  store i32 %5, i32* %arrayidx2, align 4
  %6 = load i32* %ext3.addr, align 4
  %arrayidx3 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 3
  store i32 %6, i32* %arrayidx3, align 4
  %7 = load i32* %ext4.addr, align 4
  %arrayidx4 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 4
  store i32 %7, i32* %arrayidx4, align 4
  %8 = load i32* %ext5.addr, align 4
  %arrayidx5 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 5
  store i32 %8, i32* %arrayidx5, align 4
  %9 = load i32* %ext6.addr, align 4
  %arrayidx6 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 6
  store i32 %9, i32* %arrayidx6, align 4
  %10 = load i8** %pb, align 8
  %11 = load i8** %__filename.addr, align 8
  %12 = load i32* %__lineno.addr, align 4
  %13 = load i8** %__function.addr, align 8
  %14 = load i32* %__abort.addr, align 4
  store i8* %10, i8** %p.addr.i, align 8
  store i8* %11, i8** %__filename.addr.i, align 8
  store i32 %12, i32* %__lineno.addr.i, align 4
  store i8* %13, i8** %__function.addr.i, align 8
  store i32 %14, i32* %__abort.addr.i, align 4
  %15 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %15, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %16 = load i8** %__filename.addr.i, align 8
  %17 = load i32* %__lineno.addr.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  %19 = load i32* %__abort.addr.i, align 4
  store i8* %16, i8** %__filename.addr.i.i, align 8
  store i32 %17, i32* %__lineno.addr.i.i, align 4
  store i8* %18, i8** %__function.addr.i.i, align 8
  store i32 %19, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %20 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %20, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %21 = load i8** %__filename.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %22 = load i8** %str.addr.i.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i.i.i = sext i8 %23 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %24 = load i32* %len.i.i.i, align 4
  %25 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %24, %25
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %26 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %26, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %27 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %27, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %28 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %29 = load i32* %len.i.i.i, align 4
  store i32 %29, i32* %fnamelen.i.i, align 4
  %30 = load i8** %__function.addr.i.i, align 8
  store i8* %30, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %31 = load i8** %str.addr.i68.i.i, align 8
  %32 = load i8* %31, align 1
  %conv.i71.i.i = sext i8 %32 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %33 = load i32* %len.i70.i.i, align 4
  %34 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %33, %34
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %35 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %35, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %36 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %36, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %37 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %37, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %38 = load i32* %len.i70.i.i, align 4
  store i32 %38, i32* %funclen.i.i, align 4
  %39 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %39, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %40 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %40, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %41 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %41, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %41 to i64
  %42 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %42, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %43 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %43, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %44 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %44, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %45 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %45, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %46 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %46, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %46 to i64
  %47 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %47, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %48 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %48, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %49 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %49 to i64
  %50 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %50, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %51 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %51, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %52 = load i32* %start.i.i.i, align 4
  %53 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %52, %53
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %55 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext.i.i.i
  %56 = load i8* %add.ptr.i.i.i, align 1
  store i8 %56, i8* %tmp.i.i.i, align 1
  %57 = load i8** %str.addr.i107.i.i, align 8
  %58 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %58 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %57, i64 %idx.ext11.i.i.i
  %59 = load i8* %add.ptr12.i.i.i, align 1
  %60 = load i8** %str.addr.i107.i.i, align 8
  %61 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %61 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %60, i64 %idx.ext13.i.i.i
  store i8 %59, i8* %add.ptr14.i.i.i, align 1
  %62 = load i8* %tmp.i.i.i, align 1
  %63 = load i8** %str.addr.i107.i.i, align 8
  %64 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %64 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %63, i64 %idx.ext15.i.i.i
  store i8 %62, i8* %add.ptr16.i.i.i, align 1
  %65 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %65, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %66 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %66, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %67 = load i8** %str.addr.i94.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i97.i.i = sext i8 %68 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %69 = load i32* %len.i96.i.i, align 4
  %70 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %69, %70
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %71 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %71, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %72 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %72, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %73 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %74 = load i32* %len.i96.i.i, align 4
  store i32 %74, i32* %linenolen.i.i, align 4
  %75 = load i8** %errmsg.addr.i.i, align 8
  store i8* %75, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %76 = load i8** %str.addr.i81.i.i, align 8
  %77 = load i8* %76, align 1
  %conv.i84.i.i = sext i8 %77 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %78 = load i32* %len.i83.i.i, align 4
  %79 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %78, %79
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %80 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %80, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %81 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %81, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %82 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %82, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %83 = load i32* %len.i83.i.i, align 4
  store i32 %83, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %84 = load i32* %i.i.i, align 4
  %85 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %84, %85
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %86 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %86 to i64
  %87 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %87, i64 %idxprom.i.i
  %88 = load i8* %arrayidx.i.i, align 1
  %89 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %89 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %88, i8* %arrayidx6.i.i, align 1
  %90 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %90, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %91, %92
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %93 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %93, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %93 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %94 = load i32* %i.i.i, align 4
  %95 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %94, %95
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %96 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %96 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %97 = load i8* %arrayidx14.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %99 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %98, %99
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %97, i8* %arrayidx17.i.i, align 1
  %100 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %100, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %101 = load i32* %curr.i.i, align 4
  %102 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %101, %102
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %103 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %103, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %103 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %104, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %104 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %105 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %105, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %105 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %106 = load i32* %i.i.i, align 4
  %107 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %106, %107
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %108 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %108 to i64
  %109 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %109, i64 %idxprom34.i.i
  %110 = load i8* %arrayidx35.i.i, align 1
  %111 = load i32* %curr.i.i, align 4
  %112 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %111, %112
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %110, i8* %arrayidx38.i.i, align 1
  %113 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %113, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %114, %115
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %116 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %116, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %116 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %117 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %117, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %117 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %118 = load i32* %i.i.i, align 4
  %119 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %118, %119
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %120 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %120 to i64
  %121 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %121, i64 %idxprom52.i.i
  %122 = load i8* %arrayidx53.i.i, align 1
  %123 = load i32* %curr.i.i, align 4
  %124 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %123, %124
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %122, i8* %arrayidx56.i.i, align 1
  %125 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %125, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %126 = load i32* %curr.i.i, align 4
  %127 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %126, %127
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %128 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %128, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %128 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %129 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %129, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %129 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %130 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %130, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %131 = load i32* %i, align 4
  %132 = load i32* %ndim.addr, align 4
  %cmp = icmp slt i32 %131, %132
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %133 = load i32* %i, align 4
  %idxprom = sext i32 %133 to i64
  %arrayidx7 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 %idxprom
  %134 = load i32* %arrayidx7, align 4
  %135 = load i32* %gsize, align 4
  %mul = mul nsw i32 %135, %134
  store i32 %mul, i32* %gsize, align 4
  %136 = load i32* %i, align 4
  %idxprom8 = sext i32 %136 to i64
  %137 = load %struct.F90_Desc** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc* %137, i32 0, i32 10
  %arrayidx9 = getelementptr inbounds [7 x %struct.F90_DescDim]* %dim, i32 0, i64 %idxprom8
  %extent10 = getelementptr inbounds %struct.F90_DescDim* %arrayidx9, i32 0, i32 1
  %138 = load i32* %extent10, align 4
  %139 = load i32* %i, align 4
  %idxprom11 = sext i32 %139 to i64
  %arrayidx12 = getelementptr inbounds [7 x i32]* %extent, i32 0, i64 %idxprom11
  %140 = load i32* %arrayidx12, align 4
  %cmp13 = icmp ne i32 %138, %140
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end15:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %141 = load i32* %i, align 4
  %inc = add nsw i32 %141, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then14, %for.cond
  %142 = load i32* %conformable, align 4
  %cmp16 = icmp ne i32 %142, 1
  br i1 %cmp16, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %for.end
  %143 = load %struct.F90_Desc** %srcdesc, align 8
  %gsize17 = getelementptr inbounds %struct.F90_Desc* %143, i32 0, i32 6
  %144 = load i32* %gsize17, align 4
  %145 = load i32* %gsize, align 4
  %cmp18 = icmp sge i32 %144, %145
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %land.lhs.true, %for.end
  %146 = load i32* %conformable, align 4
  %cmp21 = icmp slt i32 %146, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end20
  %147 = load i8** %__filename.addr, align 8
  %148 = load i32* %__lineno.addr, align 4
  %149 = load i8** %__function.addr, align 8
  %150 = load i32* %__abort.addr, align 4
  store i8* %147, i8** %__filename.addr.i25, align 8
  store i32 %148, i32* %__lineno.addr.i26, align 4
  store i8* %149, i8** %__function.addr.i27, align 8
  store i32 %150, i32* %__abort.addr.i28, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %151 = load i32* %__abort.addr.i28, align 4
  %tobool.i = icmp ne i32 %151, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i29

if.then.i29:                                      ; preds = %if.then22
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then22
  %152 = load i8** %__filename.addr.i25, align 8
  store i8* %152, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %153 = load i8** %str.addr.i.i, align 8
  %154 = load i8* %153, align 1
  %conv.i.i = sext i8 %154 to i32
  %tobool.i.i30 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i30, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %155 = load i32* %len.i.i, align 4
  %156 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i31 = icmp ult i32 %155, %156
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %157 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i31, %land.rhs.i.i ]
  br i1 %157, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %158 = load i32* %len.i.i, align 4
  %inc.i.i32 = add i32 %158, 1
  store i32 %inc.i.i32, i32* %len.i.i, align 4
  %159 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %160 = load i32* %len.i.i, align 4
  store i32 %160, i32* %fnamelen.i, align 4
  %161 = load i8** %__function.addr.i27, align 8
  store i8* %161, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %162 = load i8** %str.addr.i68.i, align 8
  %163 = load i8* %162, align 1
  %conv.i71.i = sext i8 %163 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %164 = load i32* %len.i70.i, align 4
  %165 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %164, %165
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %166 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %166, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %167 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %167, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %168 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %168, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %169 = load i32* %len.i70.i, align 4
  store i32 %169, i32* %funclen.i, align 4
  %170 = load i32* %__lineno.addr.i26, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %170, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i24, align 4
  %171 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %171, 0
  br i1 %cmp.i108.i, label %if.then.i.i35, label %if.end.i.i36

if.then.i.i35:                                    ; preds = %__pgi_strlen.exit80.i
  %172 = load i32* %i.i.i24, align 4
  %inc.i109.i = add nsw i32 %172, 1
  store i32 %inc.i109.i, i32* %i.i.i24, align 4
  %idxprom.i.i33 = sext i32 %172 to i64
  %173 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i34 = getelementptr inbounds i8* %173, i64 %idxprom.i.i33
  store i8 48, i8* %arrayidx.i.i34, align 1
  br label %if.end.i.i36

if.end.i.i36:                                     ; preds = %if.then.i.i35, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i36
  %174 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %174, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %175 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %175, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %176 = load i32* %remain.i.i, align 4
  %add.i.i37 = add i32 %176, 48
  %conv.i112.i = trunc i32 %add.i.i37 to i8
  %177 = load i32* %i.i.i24, align 4
  %inc2.i.i = add nsw i32 %177, 1
  store i32 %inc2.i.i, i32* %i.i.i24, align 4
  %idxprom3.i.i = sext i32 %177 to i64
  %178 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %178, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %179 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %179, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %180 = load i32* %i.i.i24, align 4
  %idxprom5.i.i38 = sext i32 %180 to i64
  %181 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i39 = getelementptr inbounds i8* %181, i64 %idxprom5.i.i38
  store i8 0, i8* %arrayidx6.i.i39, align 1
  store i32 0, i32* %start.i.i, align 4
  %182 = load i32* %i.i.i24, align 4
  %sub.i.i = sub nsw i32 %182, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %183 = load i32* %start.i.i, align 4
  %184 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %183, %184
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %186 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %185, i64 %idx.ext.i.i
  %187 = load i8* %add.ptr.i.i, align 1
  store i8 %187, i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %189 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %188, i64 %idx.ext11.i.i
  %190 = load i8* %add.ptr12.i.i, align 1
  %191 = load i8** %str.addr.i107.i, align 8
  %192 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %192 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %191, i64 %idx.ext13.i.i
  store i8 %190, i8* %add.ptr14.i.i, align 1
  %193 = load i8* %tmp.i.i, align 1
  %194 = load i8** %str.addr.i107.i, align 8
  %195 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %195 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %194, i64 %idx.ext15.i.i
  store i8 %193, i8* %add.ptr16.i.i, align 1
  %196 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %196, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %197 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %197, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %198 = load i8** %str.addr.i94.i, align 8
  %199 = load i8* %198, align 1
  %conv.i97.i = sext i8 %199 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %200 = load i32* %len.i96.i, align 4
  %201 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %200, %201
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %202 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %202, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %203 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %203, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %204 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %205 = load i32* %len.i96.i, align 4
  store i32 %205, i32* %linenolen.i, align 4
  %206 = load i8** %errmsg.addr.i, align 8
  store i8* %206, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %207 = load i8** %str.addr.i81.i, align 8
  %208 = load i8* %207, align 1
  %conv.i84.i = sext i8 %208 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %209 = load i32* %len.i83.i, align 4
  %210 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %209, %210
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %211 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %211, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %212 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %212, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %213 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %213, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %214 = load i32* %len.i83.i, align 4
  store i32 %214, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %fnamelen.i, align 4
  %cmp.i40 = icmp ult i32 %215, %216
  br i1 %cmp.i40, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %217 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %217 to i64
  %218 = load i8** %__filename.addr.i25, align 8
  %arrayidx.i = getelementptr inbounds i8* %218, i64 %idxprom.i
  %219 = load i8* %arrayidx.i, align 1
  %220 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %220 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %219, i8* %arrayidx6.i, align 1
  %221 = load i32* %i.i, align 4
  %inc.i = add i32 %221, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add.i = add i32 %222, %223
  store i32 %add.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc7.i = add i32 %224, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %224 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %225 = load i32* %i.i, align 4
  %226 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %225, %226
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %227 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %227 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %228 = load i8* %arrayidx14.i, align 1
  %229 = load i32* %curr.i, align 4
  %230 = load i32* %i.i, align 4
  %add15.i = add i32 %229, %230
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %228, i8* %arrayidx17.i, align 1
  %231 = load i32* %i.i, align 4
  %inc19.i = add i32 %231, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add21.i = add i32 %232, %233
  store i32 %add21.i, i32* %curr.i, align 4
  %234 = load i32* %curr.i, align 4
  %inc22.i = add i32 %234, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %234 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %235 = load i32* %curr.i, align 4
  %inc25.i = add i32 %235, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %235 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %236 = load i32* %curr.i, align 4
  %inc28.i = add i32 %236, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %236 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %237 = load i32* %i.i, align 4
  %238 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %237, %238
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %239 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %239 to i64
  %240 = load i8** %__function.addr.i27, align 8
  %arrayidx35.i = getelementptr inbounds i8* %240, i64 %idxprom34.i
  %241 = load i8* %arrayidx35.i, align 1
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add36.i = add i32 %242, %243
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %241, i8* %arrayidx38.i, align 1
  %244 = load i32* %i.i, align 4
  %inc40.i = add i32 %244, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %245 = load i32* %curr.i, align 4
  %246 = load i32* %i.i, align 4
  %add42.i = add i32 %245, %246
  store i32 %add42.i, i32* %curr.i, align 4
  %247 = load i32* %curr.i, align 4
  %inc43.i = add i32 %247, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %247 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %248 = load i32* %curr.i, align 4
  %inc46.i = add i32 %248, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %248 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %249 = load i32* %i.i, align 4
  %250 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %249, %250
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %251 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %251 to i64
  %252 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %252, i64 %idxprom52.i
  %253 = load i8* %arrayidx53.i, align 1
  %254 = load i32* %curr.i, align 4
  %255 = load i32* %i.i, align 4
  %add54.i = add i32 %254, %255
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %253, i8* %arrayidx56.i, align 1
  %256 = load i32* %i.i, align 4
  %inc58.i = add i32 %256, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %257 = load i32* %curr.i, align 4
  %258 = load i32* %i.i, align 4
  %add60.i = add i32 %257, %258
  store i32 %add60.i, i32* %curr.i, align 4
  %259 = load i32* %curr.i, align 4
  %inc61.i = add i32 %259, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %259 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %260 = load i32* %curr.i, align 4
  %inc64.i = add i32 %260, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %260 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i29
  br label %if.end23

if.end23:                                         ; preds = %__pgi_error_msg.exit, %if.end20
  %261 = load i32* %conformable, align 4
  store i32 %261, i32* %retval
  br label %return

return:                                           ; preds = %if.end23, %if.then
  %262 = load i32* %retval
  ret i32 %262
}

define  i32 @pgf90_conformable_11v(i8* %db, i32 %dext0, i32 %sext0, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i10 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i11 = alloca i8*, align 8
  %__lineno.addr.i12 = alloca i32, align 4
  %__function.addr.i13 = alloca i8*, align 8
  %__abort.addr.i14 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dext0.addr = alloca i32, align 4
  %sext0.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i32 %dext0, i32* %dext0.addr, align 4
  store i32 %sext0, i32* %sext0.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %1 = load i8** %pb, align 8
  %2 = load i8** %__filename.addr, align 8
  %3 = load i32* %__lineno.addr, align 4
  %4 = load i8** %__function.addr, align 8
  %5 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %2, i8** %__filename.addr.i, align 8
  store i32 %3, i32* %__lineno.addr.i, align 4
  store i8* %4, i8** %__function.addr.i, align 8
  store i32 %5, i32* %__abort.addr.i, align 4
  %6 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %7 = load i8** %__filename.addr.i, align 8
  %8 = load i32* %__lineno.addr.i, align 4
  %9 = load i8** %__function.addr.i, align 8
  %10 = load i32* %__abort.addr.i, align 4
  store i8* %7, i8** %__filename.addr.i.i, align 8
  store i32 %8, i32* %__lineno.addr.i.i, align 4
  store i8* %9, i8** %__function.addr.i.i, align 8
  store i32 %10, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %11 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %11, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %12 = load i8** %__filename.addr.i.i, align 8
  store i8* %12, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %13 = load i8** %str.addr.i.i.i, align 8
  %14 = load i8* %13, align 1
  %conv.i.i.i = sext i8 %14 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %15 = load i32* %len.i.i.i, align 4
  %16 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %15, %16
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %17 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %17, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %18 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %18, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %19 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  store i32 %20, i32* %fnamelen.i.i, align 4
  %21 = load i8** %__function.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %22 = load i8** %str.addr.i68.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i71.i.i = sext i8 %23 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %24 = load i32* %len.i70.i.i, align 4
  %25 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %24, %25
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %26 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %26, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %27 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %27, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %28 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  store i32 %29, i32* %funclen.i.i, align 4
  %30 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %30, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %31 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %31, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %32 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %32, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %32 to i64
  %33 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %33, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %34 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %34, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %35 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %35, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %36 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %36, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %37 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %37, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %38, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %39 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %39, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %40 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %40 to i64
  %41 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %41, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %42 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %42, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %43 = load i32* %start.i.i.i, align 4
  %44 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %43, %44
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %45 = load i8** %str.addr.i107.i.i, align 8
  %46 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %46 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %45, i64 %idx.ext.i.i.i
  %47 = load i8* %add.ptr.i.i.i, align 1
  store i8 %47, i8* %tmp.i.i.i, align 1
  %48 = load i8** %str.addr.i107.i.i, align 8
  %49 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %49 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %48, i64 %idx.ext11.i.i.i
  %50 = load i8* %add.ptr12.i.i.i, align 1
  %51 = load i8** %str.addr.i107.i.i, align 8
  %52 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %52 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %51, i64 %idx.ext13.i.i.i
  store i8 %50, i8* %add.ptr14.i.i.i, align 1
  %53 = load i8* %tmp.i.i.i, align 1
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %55 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext15.i.i.i
  store i8 %53, i8* %add.ptr16.i.i.i, align 1
  %56 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %56, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %57 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %57, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %58 = load i8** %str.addr.i94.i.i, align 8
  %59 = load i8* %58, align 1
  %conv.i97.i.i = sext i8 %59 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %60 = load i32* %len.i96.i.i, align 4
  %61 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %60, %61
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %62 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %62, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %63 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %63, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %64 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  store i32 %65, i32* %linenolen.i.i, align 4
  %66 = load i8** %errmsg.addr.i.i, align 8
  store i8* %66, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %67 = load i8** %str.addr.i81.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i84.i.i = sext i8 %68 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %69 = load i32* %len.i83.i.i, align 4
  %70 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %69, %70
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %71 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %71, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %72 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %72, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %73 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  store i32 %74, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %75 = load i32* %i.i.i, align 4
  %76 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %75, %76
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %77 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %77 to i64
  %78 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %78, i64 %idxprom.i.i
  %79 = load i8* %arrayidx.i.i, align 1
  %80 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %80 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %79, i8* %arrayidx6.i.i, align 1
  %81 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %81, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %82 = load i32* %curr.i.i, align 4
  %83 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %82, %83
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %84 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %84, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %84 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %85 = load i32* %i.i.i, align 4
  %86 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %85, %86
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %87 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %87 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %88 = load i8* %arrayidx14.i.i, align 1
  %89 = load i32* %curr.i.i, align 4
  %90 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %89, %90
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %88, i8* %arrayidx17.i.i, align 1
  %91 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %91, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %92 = load i32* %curr.i.i, align 4
  %93 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %92, %93
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %94 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %94, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %94 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %95 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %95, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %95 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %96 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %96, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %96 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %97 = load i32* %i.i.i, align 4
  %98 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %97, %98
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %99 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %99 to i64
  %100 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %100, i64 %idxprom34.i.i
  %101 = load i8* %arrayidx35.i.i, align 1
  %102 = load i32* %curr.i.i, align 4
  %103 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %102, %103
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %101, i8* %arrayidx38.i.i, align 1
  %104 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %104, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %105 = load i32* %curr.i.i, align 4
  %106 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %105, %106
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %107 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %107, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %107 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %108 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %108, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %108 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %109 = load i32* %i.i.i, align 4
  %110 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %109, %110
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %111 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %111 to i64
  %112 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %112, i64 %idxprom52.i.i
  %113 = load i8* %arrayidx53.i.i, align 1
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %114, %115
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %113, i8* %arrayidx56.i.i, align 1
  %116 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %116, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %117 = load i32* %curr.i.i, align 4
  %118 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %117, %118
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %119 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %119, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %119 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %120 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %120, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %120 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %121 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %121, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %122 = load i32* %sext0.addr, align 4
  %123 = load i32* %dext0.addr, align 4
  %cmp = icmp ne i32 %122, %123
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %124 = load i32* %conformable, align 4
  %cmp3 = icmp ne i32 %124, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end2
  %125 = load i32* %dext0.addr, align 4
  %126 = load i32* %sext0.addr, align 4
  %cmp4 = icmp sge i32 %125, %126
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %if.end2
  %127 = load i32* %conformable, align 4
  %cmp7 = icmp slt i32 %127, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %128 = load i8** %__filename.addr, align 8
  %129 = load i32* %__lineno.addr, align 4
  %130 = load i8** %__function.addr, align 8
  %131 = load i32* %__abort.addr, align 4
  store i8* %128, i8** %__filename.addr.i11, align 8
  store i32 %129, i32* %__lineno.addr.i12, align 4
  store i8* %130, i8** %__function.addr.i13, align 8
  store i32 %131, i32* %__abort.addr.i14, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %132 = load i32* %__abort.addr.i14, align 4
  %tobool.i = icmp ne i32 %132, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i15

if.then.i15:                                      ; preds = %if.then8
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then8
  %133 = load i8** %__filename.addr.i11, align 8
  store i8* %133, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %134 = load i8** %str.addr.i.i, align 8
  %135 = load i8* %134, align 1
  %conv.i.i = sext i8 %135 to i32
  %tobool.i.i16 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i16, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %136 = load i32* %len.i.i, align 4
  %137 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i17 = icmp ult i32 %136, %137
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %138 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i17, %land.rhs.i.i ]
  br i1 %138, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %139 = load i32* %len.i.i, align 4
  %inc.i.i18 = add i32 %139, 1
  store i32 %inc.i.i18, i32* %len.i.i, align 4
  %140 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %140, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %141 = load i32* %len.i.i, align 4
  store i32 %141, i32* %fnamelen.i, align 4
  %142 = load i8** %__function.addr.i13, align 8
  store i8* %142, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %143 = load i8** %str.addr.i68.i, align 8
  %144 = load i8* %143, align 1
  %conv.i71.i = sext i8 %144 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %145 = load i32* %len.i70.i, align 4
  %146 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %145, %146
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %147 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %147, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %148 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %148, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %149 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %149, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %150 = load i32* %len.i70.i, align 4
  store i32 %150, i32* %funclen.i, align 4
  %151 = load i32* %__lineno.addr.i12, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %151, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i10, align 4
  %152 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %152, 0
  br i1 %cmp.i108.i, label %if.then.i.i21, label %if.end.i.i22

if.then.i.i21:                                    ; preds = %__pgi_strlen.exit80.i
  %153 = load i32* %i.i.i10, align 4
  %inc.i109.i = add nsw i32 %153, 1
  store i32 %inc.i109.i, i32* %i.i.i10, align 4
  %idxprom.i.i19 = sext i32 %153 to i64
  %154 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i20 = getelementptr inbounds i8* %154, i64 %idxprom.i.i19
  store i8 48, i8* %arrayidx.i.i20, align 1
  br label %if.end.i.i22

if.end.i.i22:                                     ; preds = %if.then.i.i21, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i22
  %155 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %155, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %156 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %156, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %157 = load i32* %remain.i.i, align 4
  %add.i.i23 = add i32 %157, 48
  %conv.i112.i = trunc i32 %add.i.i23 to i8
  %158 = load i32* %i.i.i10, align 4
  %inc2.i.i = add nsw i32 %158, 1
  store i32 %inc2.i.i, i32* %i.i.i10, align 4
  %idxprom3.i.i = sext i32 %158 to i64
  %159 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %159, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %160 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %160, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %161 = load i32* %i.i.i10, align 4
  %idxprom5.i.i24 = sext i32 %161 to i64
  %162 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i25 = getelementptr inbounds i8* %162, i64 %idxprom5.i.i24
  store i8 0, i8* %arrayidx6.i.i25, align 1
  store i32 0, i32* %start.i.i, align 4
  %163 = load i32* %i.i.i10, align 4
  %sub.i.i = sub nsw i32 %163, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %164 = load i32* %start.i.i, align 4
  %165 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %164, %165
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %166 = load i8** %str.addr.i107.i, align 8
  %167 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %167 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %166, i64 %idx.ext.i.i
  %168 = load i8* %add.ptr.i.i, align 1
  store i8 %168, i8* %tmp.i.i, align 1
  %169 = load i8** %str.addr.i107.i, align 8
  %170 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %170 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %169, i64 %idx.ext11.i.i
  %171 = load i8* %add.ptr12.i.i, align 1
  %172 = load i8** %str.addr.i107.i, align 8
  %173 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %173 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %172, i64 %idx.ext13.i.i
  store i8 %171, i8* %add.ptr14.i.i, align 1
  %174 = load i8* %tmp.i.i, align 1
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %176 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %175, i64 %idx.ext15.i.i
  store i8 %174, i8* %add.ptr16.i.i, align 1
  %177 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %177, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %178 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %178, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %179 = load i8** %str.addr.i94.i, align 8
  %180 = load i8* %179, align 1
  %conv.i97.i = sext i8 %180 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %181 = load i32* %len.i96.i, align 4
  %182 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %181, %182
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %183 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %183, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %184 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %184, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %185 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %185, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %186 = load i32* %len.i96.i, align 4
  store i32 %186, i32* %linenolen.i, align 4
  %187 = load i8** %errmsg.addr.i, align 8
  store i8* %187, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %188 = load i8** %str.addr.i81.i, align 8
  %189 = load i8* %188, align 1
  %conv.i84.i = sext i8 %189 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %190 = load i32* %len.i83.i, align 4
  %191 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %190, %191
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %192 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %192, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %193 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %193, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %194 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %195 = load i32* %len.i83.i, align 4
  store i32 %195, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %196 = load i32* %i.i, align 4
  %197 = load i32* %fnamelen.i, align 4
  %cmp.i26 = icmp ult i32 %196, %197
  br i1 %cmp.i26, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %198 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %198 to i64
  %199 = load i8** %__filename.addr.i11, align 8
  %arrayidx.i = getelementptr inbounds i8* %199, i64 %idxprom.i
  %200 = load i8* %arrayidx.i, align 1
  %201 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %201 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %200, i8* %arrayidx6.i, align 1
  %202 = load i32* %i.i, align 4
  %inc.i = add i32 %202, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %203 = load i32* %curr.i, align 4
  %204 = load i32* %i.i, align 4
  %add.i = add i32 %203, %204
  store i32 %add.i, i32* %curr.i, align 4
  %205 = load i32* %curr.i, align 4
  %inc7.i = add i32 %205, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %205 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %206 = load i32* %i.i, align 4
  %207 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %206, %207
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %208 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %208 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %209 = load i8* %arrayidx14.i, align 1
  %210 = load i32* %curr.i, align 4
  %211 = load i32* %i.i, align 4
  %add15.i = add i32 %210, %211
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %209, i8* %arrayidx17.i, align 1
  %212 = load i32* %i.i, align 4
  %inc19.i = add i32 %212, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %213 = load i32* %curr.i, align 4
  %214 = load i32* %i.i, align 4
  %add21.i = add i32 %213, %214
  store i32 %add21.i, i32* %curr.i, align 4
  %215 = load i32* %curr.i, align 4
  %inc22.i = add i32 %215, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %215 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %216 = load i32* %curr.i, align 4
  %inc25.i = add i32 %216, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %216 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %217 = load i32* %curr.i, align 4
  %inc28.i = add i32 %217, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %217 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %218 = load i32* %i.i, align 4
  %219 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %218, %219
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %220 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %220 to i64
  %221 = load i8** %__function.addr.i13, align 8
  %arrayidx35.i = getelementptr inbounds i8* %221, i64 %idxprom34.i
  %222 = load i8* %arrayidx35.i, align 1
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add36.i = add i32 %223, %224
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %222, i8* %arrayidx38.i, align 1
  %225 = load i32* %i.i, align 4
  %inc40.i = add i32 %225, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %226 = load i32* %curr.i, align 4
  %227 = load i32* %i.i, align 4
  %add42.i = add i32 %226, %227
  store i32 %add42.i, i32* %curr.i, align 4
  %228 = load i32* %curr.i, align 4
  %inc43.i = add i32 %228, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %228 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %229 = load i32* %curr.i, align 4
  %inc46.i = add i32 %229, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %229 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %230 = load i32* %i.i, align 4
  %231 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %230, %231
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %232 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %232 to i64
  %233 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %233, i64 %idxprom52.i
  %234 = load i8* %arrayidx53.i, align 1
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add54.i = add i32 %235, %236
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %234, i8* %arrayidx56.i, align 1
  %237 = load i32* %i.i, align 4
  %inc58.i = add i32 %237, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %238 = load i32* %curr.i, align 4
  %239 = load i32* %i.i, align 4
  %add60.i = add i32 %238, %239
  store i32 %add60.i, i32* %curr.i, align 4
  %240 = load i32* %curr.i, align 4
  %inc61.i = add i32 %240, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %240 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %241 = load i32* %curr.i, align 4
  %inc64.i = add i32 %241, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %241 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i15
  br label %if.end9

if.end9:                                          ; preds = %__pgi_error_msg.exit, %if.end6
  %242 = load i32* %conformable, align 4
  store i32 %242, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %243 = load i32* %retval
  ret i32 %243
}

define  i32 @pgf90_conformable_22v(i8* %db, i32 %dext0, i32 %sext0, i32 %dext1, i32 %sext1, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i12 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i13 = alloca i8*, align 8
  %__lineno.addr.i14 = alloca i32, align 4
  %__function.addr.i15 = alloca i8*, align 8
  %__abort.addr.i16 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dext0.addr = alloca i32, align 4
  %sext0.addr = alloca i32, align 4
  %dext1.addr = alloca i32, align 4
  %sext1.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %pb = alloca i8*, align 8
  %sgsize = alloca i32, align 4
  %dgsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i32 %dext0, i32* %dext0.addr, align 4
  store i32 %sext0, i32* %sext0.addr, align 4
  store i32 %dext1, i32* %dext1.addr, align 4
  store i32 %sext1, i32* %sext1.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i32 1, i32* %sgsize, align 4
  store i32 1, i32* %dgsize, align 4
  store i32 1, i32* %conformable, align 4
  %1 = load i8** %pb, align 8
  %2 = load i8** %__filename.addr, align 8
  %3 = load i32* %__lineno.addr, align 4
  %4 = load i8** %__function.addr, align 8
  %5 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %2, i8** %__filename.addr.i, align 8
  store i32 %3, i32* %__lineno.addr.i, align 4
  store i8* %4, i8** %__function.addr.i, align 8
  store i32 %5, i32* %__abort.addr.i, align 4
  %6 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %7 = load i8** %__filename.addr.i, align 8
  %8 = load i32* %__lineno.addr.i, align 4
  %9 = load i8** %__function.addr.i, align 8
  %10 = load i32* %__abort.addr.i, align 4
  store i8* %7, i8** %__filename.addr.i.i, align 8
  store i32 %8, i32* %__lineno.addr.i.i, align 4
  store i8* %9, i8** %__function.addr.i.i, align 8
  store i32 %10, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %11 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %11, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %12 = load i8** %__filename.addr.i.i, align 8
  store i8* %12, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %13 = load i8** %str.addr.i.i.i, align 8
  %14 = load i8* %13, align 1
  %conv.i.i.i = sext i8 %14 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %15 = load i32* %len.i.i.i, align 4
  %16 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %15, %16
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %17 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %17, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %18 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %18, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %19 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  store i32 %20, i32* %fnamelen.i.i, align 4
  %21 = load i8** %__function.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %22 = load i8** %str.addr.i68.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i71.i.i = sext i8 %23 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %24 = load i32* %len.i70.i.i, align 4
  %25 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %24, %25
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %26 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %26, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %27 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %27, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %28 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  store i32 %29, i32* %funclen.i.i, align 4
  %30 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %30, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %31 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %31, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %32 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %32, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %32 to i64
  %33 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %33, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %34 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %34, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %35 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %35, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %36 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %36, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %37 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %37, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %38, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %39 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %39, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %40 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %40 to i64
  %41 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %41, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %42 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %42, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %43 = load i32* %start.i.i.i, align 4
  %44 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %43, %44
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %45 = load i8** %str.addr.i107.i.i, align 8
  %46 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %46 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %45, i64 %idx.ext.i.i.i
  %47 = load i8* %add.ptr.i.i.i, align 1
  store i8 %47, i8* %tmp.i.i.i, align 1
  %48 = load i8** %str.addr.i107.i.i, align 8
  %49 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %49 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %48, i64 %idx.ext11.i.i.i
  %50 = load i8* %add.ptr12.i.i.i, align 1
  %51 = load i8** %str.addr.i107.i.i, align 8
  %52 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %52 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %51, i64 %idx.ext13.i.i.i
  store i8 %50, i8* %add.ptr14.i.i.i, align 1
  %53 = load i8* %tmp.i.i.i, align 1
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %55 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext15.i.i.i
  store i8 %53, i8* %add.ptr16.i.i.i, align 1
  %56 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %56, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %57 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %57, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %58 = load i8** %str.addr.i94.i.i, align 8
  %59 = load i8* %58, align 1
  %conv.i97.i.i = sext i8 %59 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %60 = load i32* %len.i96.i.i, align 4
  %61 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %60, %61
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %62 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %62, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %63 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %63, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %64 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  store i32 %65, i32* %linenolen.i.i, align 4
  %66 = load i8** %errmsg.addr.i.i, align 8
  store i8* %66, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %67 = load i8** %str.addr.i81.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i84.i.i = sext i8 %68 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %69 = load i32* %len.i83.i.i, align 4
  %70 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %69, %70
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %71 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %71, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %72 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %72, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %73 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  store i32 %74, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %75 = load i32* %i.i.i, align 4
  %76 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %75, %76
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %77 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %77 to i64
  %78 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %78, i64 %idxprom.i.i
  %79 = load i8* %arrayidx.i.i, align 1
  %80 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %80 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %79, i8* %arrayidx6.i.i, align 1
  %81 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %81, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %82 = load i32* %curr.i.i, align 4
  %83 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %82, %83
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %84 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %84, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %84 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %85 = load i32* %i.i.i, align 4
  %86 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %85, %86
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %87 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %87 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %88 = load i8* %arrayidx14.i.i, align 1
  %89 = load i32* %curr.i.i, align 4
  %90 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %89, %90
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %88, i8* %arrayidx17.i.i, align 1
  %91 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %91, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %92 = load i32* %curr.i.i, align 4
  %93 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %92, %93
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %94 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %94, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %94 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %95 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %95, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %95 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %96 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %96, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %96 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %97 = load i32* %i.i.i, align 4
  %98 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %97, %98
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %99 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %99 to i64
  %100 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %100, i64 %idxprom34.i.i
  %101 = load i8* %arrayidx35.i.i, align 1
  %102 = load i32* %curr.i.i, align 4
  %103 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %102, %103
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %101, i8* %arrayidx38.i.i, align 1
  %104 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %104, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %105 = load i32* %curr.i.i, align 4
  %106 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %105, %106
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %107 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %107, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %107 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %108 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %108, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %108 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %109 = load i32* %i.i.i, align 4
  %110 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %109, %110
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %111 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %111 to i64
  %112 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %112, i64 %idxprom52.i.i
  %113 = load i8* %arrayidx53.i.i, align 1
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %114, %115
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %113, i8* %arrayidx56.i.i, align 1
  %116 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %116, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %117 = load i32* %curr.i.i, align 4
  %118 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %117, %118
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %119 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %119, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %119 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %120 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %120, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %120 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %121 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %121, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %122 = load i32* %sext0.addr, align 4
  %123 = load i32* %sext1.addr, align 4
  %mul = mul nsw i32 %122, %123
  store i32 %mul, i32* %sgsize, align 4
  %124 = load i32* %dext0.addr, align 4
  %125 = load i32* %dext1.addr, align 4
  %mul1 = mul nsw i32 %124, %125
  store i32 %mul1, i32* %dgsize, align 4
  %126 = load i32* %dext0.addr, align 4
  %127 = load i32* %sext0.addr, align 4
  %cmp = icmp ne i32 %126, %127
  br i1 %cmp, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %128 = load i32* %dext1.addr, align 4
  %129 = load i32* %sext1.addr, align 4
  %cmp2 = icmp ne i32 %128, %129
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %lor.lhs.false
  %130 = load i32* %conformable, align 4
  %cmp5 = icmp ne i32 %130, 1
  br i1 %cmp5, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %if.end4
  %131 = load i32* %dgsize, align 4
  %132 = load i32* %sgsize, align 4
  %cmp6 = icmp sge i32 %131, %132
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %land.lhs.true, %if.end4
  %133 = load i32* %conformable, align 4
  %cmp9 = icmp slt i32 %133, 0
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  %134 = load i8** %__filename.addr, align 8
  %135 = load i32* %__lineno.addr, align 4
  %136 = load i8** %__function.addr, align 8
  %137 = load i32* %__abort.addr, align 4
  store i8* %134, i8** %__filename.addr.i13, align 8
  store i32 %135, i32* %__lineno.addr.i14, align 4
  store i8* %136, i8** %__function.addr.i15, align 8
  store i32 %137, i32* %__abort.addr.i16, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %138 = load i32* %__abort.addr.i16, align 4
  %tobool.i = icmp ne i32 %138, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i17

if.then.i17:                                      ; preds = %if.then10
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then10
  %139 = load i8** %__filename.addr.i13, align 8
  store i8* %139, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %140 = load i8** %str.addr.i.i, align 8
  %141 = load i8* %140, align 1
  %conv.i.i = sext i8 %141 to i32
  %tobool.i.i18 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i18, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %142 = load i32* %len.i.i, align 4
  %143 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i19 = icmp ult i32 %142, %143
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %144 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i19, %land.rhs.i.i ]
  br i1 %144, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %145 = load i32* %len.i.i, align 4
  %inc.i.i20 = add i32 %145, 1
  store i32 %inc.i.i20, i32* %len.i.i, align 4
  %146 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %146, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %147 = load i32* %len.i.i, align 4
  store i32 %147, i32* %fnamelen.i, align 4
  %148 = load i8** %__function.addr.i15, align 8
  store i8* %148, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %149 = load i8** %str.addr.i68.i, align 8
  %150 = load i8* %149, align 1
  %conv.i71.i = sext i8 %150 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %151 = load i32* %len.i70.i, align 4
  %152 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %151, %152
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %153 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %153, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %154 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %154, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %155 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %155, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %156 = load i32* %len.i70.i, align 4
  store i32 %156, i32* %funclen.i, align 4
  %157 = load i32* %__lineno.addr.i14, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %157, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i12, align 4
  %158 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %158, 0
  br i1 %cmp.i108.i, label %if.then.i.i23, label %if.end.i.i24

if.then.i.i23:                                    ; preds = %__pgi_strlen.exit80.i
  %159 = load i32* %i.i.i12, align 4
  %inc.i109.i = add nsw i32 %159, 1
  store i32 %inc.i109.i, i32* %i.i.i12, align 4
  %idxprom.i.i21 = sext i32 %159 to i64
  %160 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i22 = getelementptr inbounds i8* %160, i64 %idxprom.i.i21
  store i8 48, i8* %arrayidx.i.i22, align 1
  br label %if.end.i.i24

if.end.i.i24:                                     ; preds = %if.then.i.i23, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i24
  %161 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %161, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %162 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %162, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %163 = load i32* %remain.i.i, align 4
  %add.i.i25 = add i32 %163, 48
  %conv.i112.i = trunc i32 %add.i.i25 to i8
  %164 = load i32* %i.i.i12, align 4
  %inc2.i.i = add nsw i32 %164, 1
  store i32 %inc2.i.i, i32* %i.i.i12, align 4
  %idxprom3.i.i = sext i32 %164 to i64
  %165 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %165, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %166 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %166, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %167 = load i32* %i.i.i12, align 4
  %idxprom5.i.i26 = sext i32 %167 to i64
  %168 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i27 = getelementptr inbounds i8* %168, i64 %idxprom5.i.i26
  store i8 0, i8* %arrayidx6.i.i27, align 1
  store i32 0, i32* %start.i.i, align 4
  %169 = load i32* %i.i.i12, align 4
  %sub.i.i = sub nsw i32 %169, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %170 = load i32* %start.i.i, align 4
  %171 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %170, %171
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %172 = load i8** %str.addr.i107.i, align 8
  %173 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %173 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %172, i64 %idx.ext.i.i
  %174 = load i8* %add.ptr.i.i, align 1
  store i8 %174, i8* %tmp.i.i, align 1
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %176 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %175, i64 %idx.ext11.i.i
  %177 = load i8* %add.ptr12.i.i, align 1
  %178 = load i8** %str.addr.i107.i, align 8
  %179 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %179 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %178, i64 %idx.ext13.i.i
  store i8 %177, i8* %add.ptr14.i.i, align 1
  %180 = load i8* %tmp.i.i, align 1
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %182 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %181, i64 %idx.ext15.i.i
  store i8 %180, i8* %add.ptr16.i.i, align 1
  %183 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %183, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %184 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %184, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %185 = load i8** %str.addr.i94.i, align 8
  %186 = load i8* %185, align 1
  %conv.i97.i = sext i8 %186 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %187 = load i32* %len.i96.i, align 4
  %188 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %187, %188
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %189 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %189, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %190 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %190, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %191 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %191, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %192 = load i32* %len.i96.i, align 4
  store i32 %192, i32* %linenolen.i, align 4
  %193 = load i8** %errmsg.addr.i, align 8
  store i8* %193, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %194 = load i8** %str.addr.i81.i, align 8
  %195 = load i8* %194, align 1
  %conv.i84.i = sext i8 %195 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %196 = load i32* %len.i83.i, align 4
  %197 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %196, %197
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %198 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %198, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %199 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %199, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %200 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %200, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %201 = load i32* %len.i83.i, align 4
  store i32 %201, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %202 = load i32* %i.i, align 4
  %203 = load i32* %fnamelen.i, align 4
  %cmp.i28 = icmp ult i32 %202, %203
  br i1 %cmp.i28, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %204 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %204 to i64
  %205 = load i8** %__filename.addr.i13, align 8
  %arrayidx.i = getelementptr inbounds i8* %205, i64 %idxprom.i
  %206 = load i8* %arrayidx.i, align 1
  %207 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %207 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %206, i8* %arrayidx6.i, align 1
  %208 = load i32* %i.i, align 4
  %inc.i = add i32 %208, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %209 = load i32* %curr.i, align 4
  %210 = load i32* %i.i, align 4
  %add.i = add i32 %209, %210
  store i32 %add.i, i32* %curr.i, align 4
  %211 = load i32* %curr.i, align 4
  %inc7.i = add i32 %211, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %211 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %212 = load i32* %i.i, align 4
  %213 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %212, %213
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %214 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %214 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %215 = load i8* %arrayidx14.i, align 1
  %216 = load i32* %curr.i, align 4
  %217 = load i32* %i.i, align 4
  %add15.i = add i32 %216, %217
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %215, i8* %arrayidx17.i, align 1
  %218 = load i32* %i.i, align 4
  %inc19.i = add i32 %218, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %219 = load i32* %curr.i, align 4
  %220 = load i32* %i.i, align 4
  %add21.i = add i32 %219, %220
  store i32 %add21.i, i32* %curr.i, align 4
  %221 = load i32* %curr.i, align 4
  %inc22.i = add i32 %221, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %221 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %222 = load i32* %curr.i, align 4
  %inc25.i = add i32 %222, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %222 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %223 = load i32* %curr.i, align 4
  %inc28.i = add i32 %223, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %223 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %224 = load i32* %i.i, align 4
  %225 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %224, %225
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %226 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %226 to i64
  %227 = load i8** %__function.addr.i15, align 8
  %arrayidx35.i = getelementptr inbounds i8* %227, i64 %idxprom34.i
  %228 = load i8* %arrayidx35.i, align 1
  %229 = load i32* %curr.i, align 4
  %230 = load i32* %i.i, align 4
  %add36.i = add i32 %229, %230
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %228, i8* %arrayidx38.i, align 1
  %231 = load i32* %i.i, align 4
  %inc40.i = add i32 %231, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add42.i = add i32 %232, %233
  store i32 %add42.i, i32* %curr.i, align 4
  %234 = load i32* %curr.i, align 4
  %inc43.i = add i32 %234, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %234 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %235 = load i32* %curr.i, align 4
  %inc46.i = add i32 %235, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %235 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %236 = load i32* %i.i, align 4
  %237 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %236, %237
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %238 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %238 to i64
  %239 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %239, i64 %idxprom52.i
  %240 = load i8* %arrayidx53.i, align 1
  %241 = load i32* %curr.i, align 4
  %242 = load i32* %i.i, align 4
  %add54.i = add i32 %241, %242
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %240, i8* %arrayidx56.i, align 1
  %243 = load i32* %i.i, align 4
  %inc58.i = add i32 %243, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %244 = load i32* %curr.i, align 4
  %245 = load i32* %i.i, align 4
  %add60.i = add i32 %244, %245
  store i32 %add60.i, i32* %curr.i, align 4
  %246 = load i32* %curr.i, align 4
  %inc61.i = add i32 %246, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %246 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %247 = load i32* %curr.i, align 4
  %inc64.i = add i32 %247, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %247 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i17
  br label %if.end11

if.end11:                                         ; preds = %__pgi_error_msg.exit, %if.end8
  %248 = load i32* %conformable, align 4
  store i32 %248, i32* %retval
  br label %return

return:                                           ; preds = %if.end11, %if.then
  %249 = load i32* %retval
  ret i32 %249
}

define  i32 @pgf90_conformable_33v(i8* %db, i32 %dext0, i32 %sext0, i32 %dext1, i32 %sext1, i32 %dext2, i32 %sext2, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i16 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i17 = alloca i8*, align 8
  %__lineno.addr.i18 = alloca i32, align 4
  %__function.addr.i19 = alloca i8*, align 8
  %__abort.addr.i20 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dext0.addr = alloca i32, align 4
  %sext0.addr = alloca i32, align 4
  %dext1.addr = alloca i32, align 4
  %sext1.addr = alloca i32, align 4
  %dext2.addr = alloca i32, align 4
  %sext2.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %pb = alloca i8*, align 8
  %sgsize = alloca i32, align 4
  %dgsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i32 %dext0, i32* %dext0.addr, align 4
  store i32 %sext0, i32* %sext0.addr, align 4
  store i32 %dext1, i32* %dext1.addr, align 4
  store i32 %sext1, i32* %sext1.addr, align 4
  store i32 %dext2, i32* %dext2.addr, align 4
  store i32 %sext2, i32* %sext2.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i32 1, i32* %sgsize, align 4
  store i32 1, i32* %dgsize, align 4
  store i32 1, i32* %conformable, align 4
  %1 = load i8** %pb, align 8
  %2 = load i8** %__filename.addr, align 8
  %3 = load i32* %__lineno.addr, align 4
  %4 = load i8** %__function.addr, align 8
  %5 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %2, i8** %__filename.addr.i, align 8
  store i32 %3, i32* %__lineno.addr.i, align 4
  store i8* %4, i8** %__function.addr.i, align 8
  store i32 %5, i32* %__abort.addr.i, align 4
  %6 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %7 = load i8** %__filename.addr.i, align 8
  %8 = load i32* %__lineno.addr.i, align 4
  %9 = load i8** %__function.addr.i, align 8
  %10 = load i32* %__abort.addr.i, align 4
  store i8* %7, i8** %__filename.addr.i.i, align 8
  store i32 %8, i32* %__lineno.addr.i.i, align 4
  store i8* %9, i8** %__function.addr.i.i, align 8
  store i32 %10, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %11 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %11, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %12 = load i8** %__filename.addr.i.i, align 8
  store i8* %12, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %13 = load i8** %str.addr.i.i.i, align 8
  %14 = load i8* %13, align 1
  %conv.i.i.i = sext i8 %14 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %15 = load i32* %len.i.i.i, align 4
  %16 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %15, %16
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %17 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %17, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %18 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %18, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %19 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  store i32 %20, i32* %fnamelen.i.i, align 4
  %21 = load i8** %__function.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %22 = load i8** %str.addr.i68.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i71.i.i = sext i8 %23 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %24 = load i32* %len.i70.i.i, align 4
  %25 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %24, %25
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %26 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %26, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %27 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %27, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %28 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  store i32 %29, i32* %funclen.i.i, align 4
  %30 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %30, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %31 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %31, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %32 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %32, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %32 to i64
  %33 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %33, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %34 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %34, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %35 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %35, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %36 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %36, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %37 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %37, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %38, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %39 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %39, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %40 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %40 to i64
  %41 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %41, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %42 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %42, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %43 = load i32* %start.i.i.i, align 4
  %44 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %43, %44
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %45 = load i8** %str.addr.i107.i.i, align 8
  %46 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %46 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %45, i64 %idx.ext.i.i.i
  %47 = load i8* %add.ptr.i.i.i, align 1
  store i8 %47, i8* %tmp.i.i.i, align 1
  %48 = load i8** %str.addr.i107.i.i, align 8
  %49 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %49 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %48, i64 %idx.ext11.i.i.i
  %50 = load i8* %add.ptr12.i.i.i, align 1
  %51 = load i8** %str.addr.i107.i.i, align 8
  %52 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %52 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %51, i64 %idx.ext13.i.i.i
  store i8 %50, i8* %add.ptr14.i.i.i, align 1
  %53 = load i8* %tmp.i.i.i, align 1
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %55 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext15.i.i.i
  store i8 %53, i8* %add.ptr16.i.i.i, align 1
  %56 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %56, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %57 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %57, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %58 = load i8** %str.addr.i94.i.i, align 8
  %59 = load i8* %58, align 1
  %conv.i97.i.i = sext i8 %59 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %60 = load i32* %len.i96.i.i, align 4
  %61 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %60, %61
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %62 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %62, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %63 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %63, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %64 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  store i32 %65, i32* %linenolen.i.i, align 4
  %66 = load i8** %errmsg.addr.i.i, align 8
  store i8* %66, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %67 = load i8** %str.addr.i81.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i84.i.i = sext i8 %68 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %69 = load i32* %len.i83.i.i, align 4
  %70 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %69, %70
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %71 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %71, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %72 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %72, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %73 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  store i32 %74, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %75 = load i32* %i.i.i, align 4
  %76 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %75, %76
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %77 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %77 to i64
  %78 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %78, i64 %idxprom.i.i
  %79 = load i8* %arrayidx.i.i, align 1
  %80 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %80 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %79, i8* %arrayidx6.i.i, align 1
  %81 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %81, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %82 = load i32* %curr.i.i, align 4
  %83 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %82, %83
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %84 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %84, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %84 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %85 = load i32* %i.i.i, align 4
  %86 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %85, %86
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %87 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %87 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %88 = load i8* %arrayidx14.i.i, align 1
  %89 = load i32* %curr.i.i, align 4
  %90 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %89, %90
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %88, i8* %arrayidx17.i.i, align 1
  %91 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %91, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %92 = load i32* %curr.i.i, align 4
  %93 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %92, %93
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %94 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %94, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %94 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %95 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %95, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %95 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %96 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %96, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %96 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %97 = load i32* %i.i.i, align 4
  %98 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %97, %98
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %99 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %99 to i64
  %100 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %100, i64 %idxprom34.i.i
  %101 = load i8* %arrayidx35.i.i, align 1
  %102 = load i32* %curr.i.i, align 4
  %103 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %102, %103
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %101, i8* %arrayidx38.i.i, align 1
  %104 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %104, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %105 = load i32* %curr.i.i, align 4
  %106 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %105, %106
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %107 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %107, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %107 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %108 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %108, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %108 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %109 = load i32* %i.i.i, align 4
  %110 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %109, %110
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %111 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %111 to i64
  %112 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %112, i64 %idxprom52.i.i
  %113 = load i8* %arrayidx53.i.i, align 1
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %114, %115
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %113, i8* %arrayidx56.i.i, align 1
  %116 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %116, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %117 = load i32* %curr.i.i, align 4
  %118 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %117, %118
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %119 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %119, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %119 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %120 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %120, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %120 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %121 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %121, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %122 = load i32* %sext0.addr, align 4
  %123 = load i32* %sext1.addr, align 4
  %mul = mul nsw i32 %122, %123
  %124 = load i32* %sext2.addr, align 4
  %mul1 = mul nsw i32 %mul, %124
  store i32 %mul1, i32* %sgsize, align 4
  %125 = load i32* %dext0.addr, align 4
  %126 = load i32* %dext1.addr, align 4
  %mul2 = mul nsw i32 %125, %126
  %127 = load i32* %dext2.addr, align 4
  %mul3 = mul nsw i32 %mul2, %127
  store i32 %mul3, i32* %dgsize, align 4
  %128 = load i32* %dext0.addr, align 4
  %129 = load i32* %sext0.addr, align 4
  %cmp = icmp ne i32 %128, %129
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %130 = load i32* %dext1.addr, align 4
  %131 = load i32* %sext1.addr, align 4
  %cmp4 = icmp ne i32 %130, %131
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %132 = load i32* %dext2.addr, align 4
  %133 = load i32* %sext2.addr, align 4
  %cmp6 = icmp ne i32 %132, %133
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %lor.lhs.false5
  %134 = load i32* %conformable, align 4
  %cmp9 = icmp ne i32 %134, 1
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end8
  %135 = load i32* %dgsize, align 4
  %136 = load i32* %sgsize, align 4
  %cmp10 = icmp sge i32 %135, %136
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %137 = load i32* %conformable, align 4
  %cmp13 = icmp slt i32 %137, 0
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end12
  %138 = load i8** %__filename.addr, align 8
  %139 = load i32* %__lineno.addr, align 4
  %140 = load i8** %__function.addr, align 8
  %141 = load i32* %__abort.addr, align 4
  store i8* %138, i8** %__filename.addr.i17, align 8
  store i32 %139, i32* %__lineno.addr.i18, align 4
  store i8* %140, i8** %__function.addr.i19, align 8
  store i32 %141, i32* %__abort.addr.i20, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %142 = load i32* %__abort.addr.i20, align 4
  %tobool.i = icmp ne i32 %142, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i21

if.then.i21:                                      ; preds = %if.then14
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then14
  %143 = load i8** %__filename.addr.i17, align 8
  store i8* %143, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %144 = load i8** %str.addr.i.i, align 8
  %145 = load i8* %144, align 1
  %conv.i.i = sext i8 %145 to i32
  %tobool.i.i22 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i22, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %146 = load i32* %len.i.i, align 4
  %147 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i23 = icmp ult i32 %146, %147
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %148 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i23, %land.rhs.i.i ]
  br i1 %148, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %149 = load i32* %len.i.i, align 4
  %inc.i.i24 = add i32 %149, 1
  store i32 %inc.i.i24, i32* %len.i.i, align 4
  %150 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %150, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %151 = load i32* %len.i.i, align 4
  store i32 %151, i32* %fnamelen.i, align 4
  %152 = load i8** %__function.addr.i19, align 8
  store i8* %152, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %153 = load i8** %str.addr.i68.i, align 8
  %154 = load i8* %153, align 1
  %conv.i71.i = sext i8 %154 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %155 = load i32* %len.i70.i, align 4
  %156 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %155, %156
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %157 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %157, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %158 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %158, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %159 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %160 = load i32* %len.i70.i, align 4
  store i32 %160, i32* %funclen.i, align 4
  %161 = load i32* %__lineno.addr.i18, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %161, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i16, align 4
  %162 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %162, 0
  br i1 %cmp.i108.i, label %if.then.i.i27, label %if.end.i.i28

if.then.i.i27:                                    ; preds = %__pgi_strlen.exit80.i
  %163 = load i32* %i.i.i16, align 4
  %inc.i109.i = add nsw i32 %163, 1
  store i32 %inc.i109.i, i32* %i.i.i16, align 4
  %idxprom.i.i25 = sext i32 %163 to i64
  %164 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i26 = getelementptr inbounds i8* %164, i64 %idxprom.i.i25
  store i8 48, i8* %arrayidx.i.i26, align 1
  br label %if.end.i.i28

if.end.i.i28:                                     ; preds = %if.then.i.i27, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i28
  %165 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %165, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %166 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %166, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %167 = load i32* %remain.i.i, align 4
  %add.i.i29 = add i32 %167, 48
  %conv.i112.i = trunc i32 %add.i.i29 to i8
  %168 = load i32* %i.i.i16, align 4
  %inc2.i.i = add nsw i32 %168, 1
  store i32 %inc2.i.i, i32* %i.i.i16, align 4
  %idxprom3.i.i = sext i32 %168 to i64
  %169 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %169, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %170 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %170, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %171 = load i32* %i.i.i16, align 4
  %idxprom5.i.i30 = sext i32 %171 to i64
  %172 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i31 = getelementptr inbounds i8* %172, i64 %idxprom5.i.i30
  store i8 0, i8* %arrayidx6.i.i31, align 1
  store i32 0, i32* %start.i.i, align 4
  %173 = load i32* %i.i.i16, align 4
  %sub.i.i = sub nsw i32 %173, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %174 = load i32* %start.i.i, align 4
  %175 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %174, %175
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %176 = load i8** %str.addr.i107.i, align 8
  %177 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %177 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %176, i64 %idx.ext.i.i
  %178 = load i8* %add.ptr.i.i, align 1
  store i8 %178, i8* %tmp.i.i, align 1
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %180 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %179, i64 %idx.ext11.i.i
  %181 = load i8* %add.ptr12.i.i, align 1
  %182 = load i8** %str.addr.i107.i, align 8
  %183 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %183 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %182, i64 %idx.ext13.i.i
  store i8 %181, i8* %add.ptr14.i.i, align 1
  %184 = load i8* %tmp.i.i, align 1
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %186 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %185, i64 %idx.ext15.i.i
  store i8 %184, i8* %add.ptr16.i.i, align 1
  %187 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %187, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %188 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %188, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %189 = load i8** %str.addr.i94.i, align 8
  %190 = load i8* %189, align 1
  %conv.i97.i = sext i8 %190 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %191 = load i32* %len.i96.i, align 4
  %192 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %191, %192
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %193 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %193, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %194 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %194, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %195 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %195, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %196 = load i32* %len.i96.i, align 4
  store i32 %196, i32* %linenolen.i, align 4
  %197 = load i8** %errmsg.addr.i, align 8
  store i8* %197, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %198 = load i8** %str.addr.i81.i, align 8
  %199 = load i8* %198, align 1
  %conv.i84.i = sext i8 %199 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %200 = load i32* %len.i83.i, align 4
  %201 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %200, %201
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %202 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %202, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %203 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %203, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %204 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %205 = load i32* %len.i83.i, align 4
  store i32 %205, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %206 = load i32* %i.i, align 4
  %207 = load i32* %fnamelen.i, align 4
  %cmp.i32 = icmp ult i32 %206, %207
  br i1 %cmp.i32, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %208 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %208 to i64
  %209 = load i8** %__filename.addr.i17, align 8
  %arrayidx.i = getelementptr inbounds i8* %209, i64 %idxprom.i
  %210 = load i8* %arrayidx.i, align 1
  %211 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %211 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %210, i8* %arrayidx6.i, align 1
  %212 = load i32* %i.i, align 4
  %inc.i = add i32 %212, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %213 = load i32* %curr.i, align 4
  %214 = load i32* %i.i, align 4
  %add.i = add i32 %213, %214
  store i32 %add.i, i32* %curr.i, align 4
  %215 = load i32* %curr.i, align 4
  %inc7.i = add i32 %215, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %215 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %216 = load i32* %i.i, align 4
  %217 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %216, %217
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %218 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %218 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %219 = load i8* %arrayidx14.i, align 1
  %220 = load i32* %curr.i, align 4
  %221 = load i32* %i.i, align 4
  %add15.i = add i32 %220, %221
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %219, i8* %arrayidx17.i, align 1
  %222 = load i32* %i.i, align 4
  %inc19.i = add i32 %222, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add21.i = add i32 %223, %224
  store i32 %add21.i, i32* %curr.i, align 4
  %225 = load i32* %curr.i, align 4
  %inc22.i = add i32 %225, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %225 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %226 = load i32* %curr.i, align 4
  %inc25.i = add i32 %226, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %226 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %227 = load i32* %curr.i, align 4
  %inc28.i = add i32 %227, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %227 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %228 = load i32* %i.i, align 4
  %229 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %228, %229
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %230 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %230 to i64
  %231 = load i8** %__function.addr.i19, align 8
  %arrayidx35.i = getelementptr inbounds i8* %231, i64 %idxprom34.i
  %232 = load i8* %arrayidx35.i, align 1
  %233 = load i32* %curr.i, align 4
  %234 = load i32* %i.i, align 4
  %add36.i = add i32 %233, %234
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %232, i8* %arrayidx38.i, align 1
  %235 = load i32* %i.i, align 4
  %inc40.i = add i32 %235, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %236 = load i32* %curr.i, align 4
  %237 = load i32* %i.i, align 4
  %add42.i = add i32 %236, %237
  store i32 %add42.i, i32* %curr.i, align 4
  %238 = load i32* %curr.i, align 4
  %inc43.i = add i32 %238, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %238 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %239 = load i32* %curr.i, align 4
  %inc46.i = add i32 %239, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %239 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %240 = load i32* %i.i, align 4
  %241 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %240, %241
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %242 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %242 to i64
  %243 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %243, i64 %idxprom52.i
  %244 = load i8* %arrayidx53.i, align 1
  %245 = load i32* %curr.i, align 4
  %246 = load i32* %i.i, align 4
  %add54.i = add i32 %245, %246
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %244, i8* %arrayidx56.i, align 1
  %247 = load i32* %i.i, align 4
  %inc58.i = add i32 %247, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add60.i = add i32 %248, %249
  store i32 %add60.i, i32* %curr.i, align 4
  %250 = load i32* %curr.i, align 4
  %inc61.i = add i32 %250, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %250 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %251 = load i32* %curr.i, align 4
  %inc64.i = add i32 %251, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %251 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i21
  br label %if.end15

if.end15:                                         ; preds = %__pgi_error_msg.exit, %if.end12
  %252 = load i32* %conformable, align 4
  store i32 %252, i32* %retval
  br label %return

return:                                           ; preds = %if.end15, %if.then
  %253 = load i32* %retval
  ret i32 %253
}

define  i32 @pgf90_conformable_nnv(i8* %db, i32 %ndim, i32 %dext0, i32 %sext0, i32 %dext1, i32 %sext1, i32 %dext2, i32 %sext2, i32 %dext3, i32 %sext3, i32 %dext4, i32 %sext4, i32 %dext5, i32 %sext5, i32 %dext6, i32 %sext6, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i32 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i33 = alloca i8*, align 8
  %__lineno.addr.i34 = alloca i32, align 4
  %__function.addr.i35 = alloca i8*, align 8
  %__abort.addr.i36 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %ndim.addr = alloca i32, align 4
  %dext0.addr = alloca i32, align 4
  %sext0.addr = alloca i32, align 4
  %dext1.addr = alloca i32, align 4
  %sext1.addr = alloca i32, align 4
  %dext2.addr = alloca i32, align 4
  %sext2.addr = alloca i32, align 4
  %dext3.addr = alloca i32, align 4
  %sext3.addr = alloca i32, align 4
  %dext4.addr = alloca i32, align 4
  %sext4.addr = alloca i32, align 4
  %dext5.addr = alloca i32, align 4
  %sext5.addr = alloca i32, align 4
  %dext6.addr = alloca i32, align 4
  %sext6.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %sextent = alloca [7 x i32], align 4
  %dextent = alloca [7 x i32], align 4
  %pb = alloca i8*, align 8
  %i = alloca i32, align 4
  %sgsize = alloca i32, align 4
  %dgsize = alloca i32, align 4
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i32 %ndim, i32* %ndim.addr, align 4
  store i32 %dext0, i32* %dext0.addr, align 4
  store i32 %sext0, i32* %sext0.addr, align 4
  store i32 %dext1, i32* %dext1.addr, align 4
  store i32 %sext1, i32* %sext1.addr, align 4
  store i32 %dext2, i32* %dext2.addr, align 4
  store i32 %sext2, i32* %sext2.addr, align 4
  store i32 %dext3, i32* %dext3.addr, align 4
  store i32 %sext3, i32* %sext3.addr, align 4
  store i32 %dext4, i32* %dext4.addr, align 4
  store i32 %sext4, i32* %sext4.addr, align 4
  store i32 %dext5, i32* %dext5.addr, align 4
  store i32 %sext5, i32* %sext5.addr, align 4
  store i32 %dext6, i32* %dext6.addr, align 4
  store i32 %sext6, i32* %sext6.addr, align 4
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i32 1, i32* %sgsize, align 4
  store i32 1, i32* %dgsize, align 4
  store i32 1, i32* %conformable, align 4
  %1 = load i32* %sext0.addr, align 4
  %arrayidx = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 0
  store i32 %1, i32* %arrayidx, align 4
  %2 = load i32* %sext1.addr, align 4
  %arrayidx1 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 1
  store i32 %2, i32* %arrayidx1, align 4
  %3 = load i32* %sext2.addr, align 4
  %arrayidx2 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 2
  store i32 %3, i32* %arrayidx2, align 4
  %4 = load i32* %sext3.addr, align 4
  %arrayidx3 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 3
  store i32 %4, i32* %arrayidx3, align 4
  %5 = load i32* %sext4.addr, align 4
  %arrayidx4 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 4
  store i32 %5, i32* %arrayidx4, align 4
  %6 = load i32* %sext5.addr, align 4
  %arrayidx5 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 5
  store i32 %6, i32* %arrayidx5, align 4
  %7 = load i32* %sext6.addr, align 4
  %arrayidx6 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 6
  store i32 %7, i32* %arrayidx6, align 4
  %8 = load i32* %dext0.addr, align 4
  %arrayidx7 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 0
  store i32 %8, i32* %arrayidx7, align 4
  %9 = load i32* %dext1.addr, align 4
  %arrayidx8 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 1
  store i32 %9, i32* %arrayidx8, align 4
  %10 = load i32* %dext2.addr, align 4
  %arrayidx9 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 2
  store i32 %10, i32* %arrayidx9, align 4
  %11 = load i32* %dext3.addr, align 4
  %arrayidx10 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 3
  store i32 %11, i32* %arrayidx10, align 4
  %12 = load i32* %dext4.addr, align 4
  %arrayidx11 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 4
  store i32 %12, i32* %arrayidx11, align 4
  %13 = load i32* %dext5.addr, align 4
  %arrayidx12 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 5
  store i32 %13, i32* %arrayidx12, align 4
  %14 = load i32* %dext6.addr, align 4
  %arrayidx13 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 6
  store i32 %14, i32* %arrayidx13, align 4
  %15 = load i8** %pb, align 8
  %16 = load i8** %__filename.addr, align 8
  %17 = load i32* %__lineno.addr, align 4
  %18 = load i8** %__function.addr, align 8
  %19 = load i32* %__abort.addr, align 4
  store i8* %15, i8** %p.addr.i, align 8
  store i8* %16, i8** %__filename.addr.i, align 8
  store i32 %17, i32* %__lineno.addr.i, align 4
  store i8* %18, i8** %__function.addr.i, align 8
  store i32 %19, i32* %__abort.addr.i, align 4
  %20 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %20, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %21 = load i8** %__filename.addr.i, align 8
  %22 = load i32* %__lineno.addr.i, align 4
  %23 = load i8** %__function.addr.i, align 8
  %24 = load i32* %__abort.addr.i, align 4
  store i8* %21, i8** %__filename.addr.i.i, align 8
  store i32 %22, i32* %__lineno.addr.i.i, align 4
  store i8* %23, i8** %__function.addr.i.i, align 8
  store i32 %24, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %25 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %25, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %26 = load i8** %__filename.addr.i.i, align 8
  store i8* %26, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %27 = load i8** %str.addr.i.i.i, align 8
  %28 = load i8* %27, align 1
  %conv.i.i.i = sext i8 %28 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %29 = load i32* %len.i.i.i, align 4
  %30 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %29, %30
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %31 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %31, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %32 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %32, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %33 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %33, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %34 = load i32* %len.i.i.i, align 4
  store i32 %34, i32* %fnamelen.i.i, align 4
  %35 = load i8** %__function.addr.i.i, align 8
  store i8* %35, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %36 = load i8** %str.addr.i68.i.i, align 8
  %37 = load i8* %36, align 1
  %conv.i71.i.i = sext i8 %37 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %38 = load i32* %len.i70.i.i, align 4
  %39 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %38, %39
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %40 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %40, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %41 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %41, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %42 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %42, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %43 = load i32* %len.i70.i.i, align 4
  store i32 %43, i32* %funclen.i.i, align 4
  %44 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %44, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %45 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %45, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %46 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %46, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %46 to i64
  %47 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %47, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %48 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %48, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %49 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %49, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %50 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %50, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %51 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %51, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %51 to i64
  %52 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %52, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %53 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %53, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %54 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %54 to i64
  %55 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %55, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %56 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %56, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %57 = load i32* %start.i.i.i, align 4
  %58 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %57, %58
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %59 = load i8** %str.addr.i107.i.i, align 8
  %60 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %60 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %59, i64 %idx.ext.i.i.i
  %61 = load i8* %add.ptr.i.i.i, align 1
  store i8 %61, i8* %tmp.i.i.i, align 1
  %62 = load i8** %str.addr.i107.i.i, align 8
  %63 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %63 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %62, i64 %idx.ext11.i.i.i
  %64 = load i8* %add.ptr12.i.i.i, align 1
  %65 = load i8** %str.addr.i107.i.i, align 8
  %66 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %66 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %65, i64 %idx.ext13.i.i.i
  store i8 %64, i8* %add.ptr14.i.i.i, align 1
  %67 = load i8* %tmp.i.i.i, align 1
  %68 = load i8** %str.addr.i107.i.i, align 8
  %69 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %69 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %68, i64 %idx.ext15.i.i.i
  store i8 %67, i8* %add.ptr16.i.i.i, align 1
  %70 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %70, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %71 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %71, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %72 = load i8** %str.addr.i94.i.i, align 8
  %73 = load i8* %72, align 1
  %conv.i97.i.i = sext i8 %73 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %74 = load i32* %len.i96.i.i, align 4
  %75 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %74, %75
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %76 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %76, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %77 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %77, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %78 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %78, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %79 = load i32* %len.i96.i.i, align 4
  store i32 %79, i32* %linenolen.i.i, align 4
  %80 = load i8** %errmsg.addr.i.i, align 8
  store i8* %80, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %81 = load i8** %str.addr.i81.i.i, align 8
  %82 = load i8* %81, align 1
  %conv.i84.i.i = sext i8 %82 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %83 = load i32* %len.i83.i.i, align 4
  %84 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %83, %84
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %85 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %85, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %86 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %86, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %87 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %87, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %88 = load i32* %len.i83.i.i, align 4
  store i32 %88, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %89 = load i32* %i.i.i, align 4
  %90 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %89, %90
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %91 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %91 to i64
  %92 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %92, i64 %idxprom.i.i
  %93 = load i8* %arrayidx.i.i, align 1
  %94 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %94 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %93, i8* %arrayidx6.i.i, align 1
  %95 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %95, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %96 = load i32* %curr.i.i, align 4
  %97 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %96, %97
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %98 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %98, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %98 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %99, %100
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %101 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %102 = load i8* %arrayidx14.i.i, align 1
  %103 = load i32* %curr.i.i, align 4
  %104 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %103, %104
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %102, i8* %arrayidx17.i.i, align 1
  %105 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %105, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %106 = load i32* %curr.i.i, align 4
  %107 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %106, %107
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %108 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %108, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %108 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %109 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %109, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %109 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %110, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %110 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %111, %112
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %113 to i64
  %114 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %114, i64 %idxprom34.i.i
  %115 = load i8* %arrayidx35.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %116, %117
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %115, i8* %arrayidx38.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %118, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %119, %120
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %121, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %121 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %122, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %122 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %123 = load i32* %i.i.i, align 4
  %124 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %123, %124
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %125 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %125 to i64
  %126 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %126, i64 %idxprom52.i.i
  %127 = load i8* %arrayidx53.i.i, align 1
  %128 = load i32* %curr.i.i, align 4
  %129 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %128, %129
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %127, i8* %arrayidx56.i.i, align 1
  %130 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %130, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %131 = load i32* %curr.i.i, align 4
  %132 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %131, %132
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %133 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %133, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %133 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %134 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %134, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %134 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %135 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %135, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %136 = load i32* %i, align 4
  %137 = load i32* %ndim.addr, align 4
  %cmp = icmp slt i32 %136, %137
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %138 = load i32* %i, align 4
  %idxprom = sext i32 %138 to i64
  %arrayidx14 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 %idxprom
  %139 = load i32* %arrayidx14, align 4
  %140 = load i32* %sgsize, align 4
  %mul = mul nsw i32 %140, %139
  store i32 %mul, i32* %sgsize, align 4
  %141 = load i32* %i, align 4
  %idxprom15 = sext i32 %141 to i64
  %arrayidx16 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 %idxprom15
  %142 = load i32* %arrayidx16, align 4
  %143 = load i32* %dgsize, align 4
  %mul17 = mul nsw i32 %143, %142
  store i32 %mul17, i32* %dgsize, align 4
  %144 = load i32* %i, align 4
  %idxprom18 = sext i32 %144 to i64
  %arrayidx19 = getelementptr inbounds [7 x i32]* %sextent, i32 0, i64 %idxprom18
  %145 = load i32* %arrayidx19, align 4
  %146 = load i32* %i, align 4
  %idxprom20 = sext i32 %146 to i64
  %arrayidx21 = getelementptr inbounds [7 x i32]* %dextent, i32 0, i64 %idxprom20
  %147 = load i32* %arrayidx21, align 4
  %cmp22 = icmp ne i32 %145, %147
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end24:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end24
  %148 = load i32* %i, align 4
  %inc = add nsw i32 %148, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then23, %for.cond
  %149 = load i32* %conformable, align 4
  %cmp25 = icmp ne i32 %149, 1
  br i1 %cmp25, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.end
  %150 = load i32* %dgsize, align 4
  %151 = load i32* %sgsize, align 4
  %cmp26 = icmp sge i32 %150, %151
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %land.lhs.true, %for.end
  %152 = load i32* %conformable, align 4
  %cmp29 = icmp slt i32 %152, 0
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end28
  %153 = load i8** %__filename.addr, align 8
  %154 = load i32* %__lineno.addr, align 4
  %155 = load i8** %__function.addr, align 8
  %156 = load i32* %__abort.addr, align 4
  store i8* %153, i8** %__filename.addr.i33, align 8
  store i32 %154, i32* %__lineno.addr.i34, align 4
  store i8* %155, i8** %__function.addr.i35, align 8
  store i32 %156, i32* %__abort.addr.i36, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %157 = load i32* %__abort.addr.i36, align 4
  %tobool.i = icmp ne i32 %157, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i37

if.then.i37:                                      ; preds = %if.then30
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then30
  %158 = load i8** %__filename.addr.i33, align 8
  store i8* %158, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %159 = load i8** %str.addr.i.i, align 8
  %160 = load i8* %159, align 1
  %conv.i.i = sext i8 %160 to i32
  %tobool.i.i38 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i38, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %161 = load i32* %len.i.i, align 4
  %162 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i39 = icmp ult i32 %161, %162
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %163 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i39, %land.rhs.i.i ]
  br i1 %163, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %164 = load i32* %len.i.i, align 4
  %inc.i.i40 = add i32 %164, 1
  store i32 %inc.i.i40, i32* %len.i.i, align 4
  %165 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %165, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %166 = load i32* %len.i.i, align 4
  store i32 %166, i32* %fnamelen.i, align 4
  %167 = load i8** %__function.addr.i35, align 8
  store i8* %167, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %168 = load i8** %str.addr.i68.i, align 8
  %169 = load i8* %168, align 1
  %conv.i71.i = sext i8 %169 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %170 = load i32* %len.i70.i, align 4
  %171 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %170, %171
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %172 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %172, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %173 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %173, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %174 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %174, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %175 = load i32* %len.i70.i, align 4
  store i32 %175, i32* %funclen.i, align 4
  %176 = load i32* %__lineno.addr.i34, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %176, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i32, align 4
  %177 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %177, 0
  br i1 %cmp.i108.i, label %if.then.i.i43, label %if.end.i.i44

if.then.i.i43:                                    ; preds = %__pgi_strlen.exit80.i
  %178 = load i32* %i.i.i32, align 4
  %inc.i109.i = add nsw i32 %178, 1
  store i32 %inc.i109.i, i32* %i.i.i32, align 4
  %idxprom.i.i41 = sext i32 %178 to i64
  %179 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i42 = getelementptr inbounds i8* %179, i64 %idxprom.i.i41
  store i8 48, i8* %arrayidx.i.i42, align 1
  br label %if.end.i.i44

if.end.i.i44:                                     ; preds = %if.then.i.i43, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i44
  %180 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %180, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %181 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %181, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %182 = load i32* %remain.i.i, align 4
  %add.i.i45 = add i32 %182, 48
  %conv.i112.i = trunc i32 %add.i.i45 to i8
  %183 = load i32* %i.i.i32, align 4
  %inc2.i.i = add nsw i32 %183, 1
  store i32 %inc2.i.i, i32* %i.i.i32, align 4
  %idxprom3.i.i = sext i32 %183 to i64
  %184 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %184, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %185 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %185, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %186 = load i32* %i.i.i32, align 4
  %idxprom5.i.i46 = sext i32 %186 to i64
  %187 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i47 = getelementptr inbounds i8* %187, i64 %idxprom5.i.i46
  store i8 0, i8* %arrayidx6.i.i47, align 1
  store i32 0, i32* %start.i.i, align 4
  %188 = load i32* %i.i.i32, align 4
  %sub.i.i = sub nsw i32 %188, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %189 = load i32* %start.i.i, align 4
  %190 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %189, %190
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %191 = load i8** %str.addr.i107.i, align 8
  %192 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %192 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %191, i64 %idx.ext.i.i
  %193 = load i8* %add.ptr.i.i, align 1
  store i8 %193, i8* %tmp.i.i, align 1
  %194 = load i8** %str.addr.i107.i, align 8
  %195 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %195 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %194, i64 %idx.ext11.i.i
  %196 = load i8* %add.ptr12.i.i, align 1
  %197 = load i8** %str.addr.i107.i, align 8
  %198 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %198 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %197, i64 %idx.ext13.i.i
  store i8 %196, i8* %add.ptr14.i.i, align 1
  %199 = load i8* %tmp.i.i, align 1
  %200 = load i8** %str.addr.i107.i, align 8
  %201 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %201 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %200, i64 %idx.ext15.i.i
  store i8 %199, i8* %add.ptr16.i.i, align 1
  %202 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %202, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %203 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %203, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %204 = load i8** %str.addr.i94.i, align 8
  %205 = load i8* %204, align 1
  %conv.i97.i = sext i8 %205 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %206 = load i32* %len.i96.i, align 4
  %207 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %206, %207
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %208 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %208, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %209 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %209, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %210 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %210, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %211 = load i32* %len.i96.i, align 4
  store i32 %211, i32* %linenolen.i, align 4
  %212 = load i8** %errmsg.addr.i, align 8
  store i8* %212, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %213 = load i8** %str.addr.i81.i, align 8
  %214 = load i8* %213, align 1
  %conv.i84.i = sext i8 %214 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %215 = load i32* %len.i83.i, align 4
  %216 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %215, %216
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %217 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %217, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %218 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %218, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %219 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %219, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %220 = load i32* %len.i83.i, align 4
  store i32 %220, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %221 = load i32* %i.i, align 4
  %222 = load i32* %fnamelen.i, align 4
  %cmp.i48 = icmp ult i32 %221, %222
  br i1 %cmp.i48, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %223 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %223 to i64
  %224 = load i8** %__filename.addr.i33, align 8
  %arrayidx.i = getelementptr inbounds i8* %224, i64 %idxprom.i
  %225 = load i8* %arrayidx.i, align 1
  %226 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %226 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %225, i8* %arrayidx6.i, align 1
  %227 = load i32* %i.i, align 4
  %inc.i = add i32 %227, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %228 = load i32* %curr.i, align 4
  %229 = load i32* %i.i, align 4
  %add.i = add i32 %228, %229
  store i32 %add.i, i32* %curr.i, align 4
  %230 = load i32* %curr.i, align 4
  %inc7.i = add i32 %230, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %230 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %231 = load i32* %i.i, align 4
  %232 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %231, %232
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %233 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %233 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %234 = load i8* %arrayidx14.i, align 1
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add15.i = add i32 %235, %236
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %234, i8* %arrayidx17.i, align 1
  %237 = load i32* %i.i, align 4
  %inc19.i = add i32 %237, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %238 = load i32* %curr.i, align 4
  %239 = load i32* %i.i, align 4
  %add21.i = add i32 %238, %239
  store i32 %add21.i, i32* %curr.i, align 4
  %240 = load i32* %curr.i, align 4
  %inc22.i = add i32 %240, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %240 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %241 = load i32* %curr.i, align 4
  %inc25.i = add i32 %241, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %241 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %242 = load i32* %curr.i, align 4
  %inc28.i = add i32 %242, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %242 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %243 = load i32* %i.i, align 4
  %244 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %243, %244
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %245 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %245 to i64
  %246 = load i8** %__function.addr.i35, align 8
  %arrayidx35.i = getelementptr inbounds i8* %246, i64 %idxprom34.i
  %247 = load i8* %arrayidx35.i, align 1
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add36.i = add i32 %248, %249
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %247, i8* %arrayidx38.i, align 1
  %250 = load i32* %i.i, align 4
  %inc40.i = add i32 %250, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %251 = load i32* %curr.i, align 4
  %252 = load i32* %i.i, align 4
  %add42.i = add i32 %251, %252
  store i32 %add42.i, i32* %curr.i, align 4
  %253 = load i32* %curr.i, align 4
  %inc43.i = add i32 %253, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %253 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %254 = load i32* %curr.i, align 4
  %inc46.i = add i32 %254, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %254 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %255 = load i32* %i.i, align 4
  %256 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %255, %256
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %257 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %257 to i64
  %258 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %258, i64 %idxprom52.i
  %259 = load i8* %arrayidx53.i, align 1
  %260 = load i32* %curr.i, align 4
  %261 = load i32* %i.i, align 4
  %add54.i = add i32 %260, %261
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %259, i8* %arrayidx56.i, align 1
  %262 = load i32* %i.i, align 4
  %inc58.i = add i32 %262, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %263 = load i32* %curr.i, align 4
  %264 = load i32* %i.i, align 4
  %add60.i = add i32 %263, %264
  store i32 %add60.i, i32* %curr.i, align 4
  %265 = load i32* %curr.i, align 4
  %inc61.i = add i32 %265, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %265 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %266 = load i32* %curr.i, align 4
  %inc64.i = add i32 %266, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %266 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i37
  br label %if.end31

if.end31:                                         ; preds = %__pgi_error_msg.exit, %if.end28
  %267 = load i32* %conformable, align 4
  store i32 %267, i32* %retval
  br label %return

return:                                           ; preds = %if.end31, %if.then
  %268 = load i32* %retval
  ret i32 %268
}

define  i32 @pgf90_conformable_dd_i8(i8* %db, i8* %dd, i8* %sd, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i21 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i22 = alloca i8*, align 8
  %__lineno.addr.i23 = alloca i32, align 4
  %__function.addr.i24 = alloca i8*, align 8
  %__abort.addr.i25 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %ndim = alloca i64, align 8
  %i = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  %dstdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load i8** %dd.addr, align 8
  %3 = bitcast i8* %2 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %3, %struct.F90_Desc_la** %dstdesc, align 8
  %4 = load i8** %db.addr, align 8
  store i8* %4, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %5 = load i8** %pb, align 8
  %6 = load i8** %__filename.addr, align 8
  %7 = load i32* %__lineno.addr, align 4
  %8 = load i8** %__function.addr, align 8
  %9 = load i32* %__abort.addr, align 4
  store i8* %5, i8** %p.addr.i, align 8
  store i8* %6, i8** %__filename.addr.i, align 8
  store i32 %7, i32* %__lineno.addr.i, align 4
  store i8* %8, i8** %__function.addr.i, align 8
  store i32 %9, i32* %__abort.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %10, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %11 = load i8** %__filename.addr.i, align 8
  %12 = load i32* %__lineno.addr.i, align 4
  %13 = load i8** %__function.addr.i, align 8
  %14 = load i32* %__abort.addr.i, align 4
  store i8* %11, i8** %__filename.addr.i.i, align 8
  store i32 %12, i32* %__lineno.addr.i.i, align 4
  store i8* %13, i8** %__function.addr.i.i, align 8
  store i32 %14, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %15 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %15, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %16 = load i8** %__filename.addr.i.i, align 8
  store i8* %16, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %17 = load i8** %str.addr.i.i.i, align 8
  %18 = load i8* %17, align 1
  %conv.i.i.i = sext i8 %18 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %19 = load i32* %len.i.i.i, align 4
  %20 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %19, %20
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %21 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %21, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %22, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %23 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %23, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %24 = load i32* %len.i.i.i, align 4
  store i32 %24, i32* %fnamelen.i.i, align 4
  %25 = load i8** %__function.addr.i.i, align 8
  store i8* %25, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %26 = load i8** %str.addr.i68.i.i, align 8
  %27 = load i8* %26, align 1
  %conv.i71.i.i = sext i8 %27 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %28 = load i32* %len.i70.i.i, align 4
  %29 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %28, %29
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %30 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %30, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %31, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %32 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %32, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %33 = load i32* %len.i70.i.i, align 4
  store i32 %33, i32* %funclen.i.i, align 4
  %34 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %34, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %35 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %35, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %36 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %36, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %36 to i64
  %37 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %37, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %38 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %38, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %39 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %39, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %40 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %40, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %41 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %41, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %41 to i64
  %42 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %42, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %43 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %43, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %44 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %44 to i64
  %45 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %45, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %46 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %46, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %47 = load i32* %start.i.i.i, align 4
  %48 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %47, %48
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %49 = load i8** %str.addr.i107.i.i, align 8
  %50 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %50 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %49, i64 %idx.ext.i.i.i
  %51 = load i8* %add.ptr.i.i.i, align 1
  store i8 %51, i8* %tmp.i.i.i, align 1
  %52 = load i8** %str.addr.i107.i.i, align 8
  %53 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %53 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %52, i64 %idx.ext11.i.i.i
  %54 = load i8* %add.ptr12.i.i.i, align 1
  %55 = load i8** %str.addr.i107.i.i, align 8
  %56 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %56 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %55, i64 %idx.ext13.i.i.i
  store i8 %54, i8* %add.ptr14.i.i.i, align 1
  %57 = load i8* %tmp.i.i.i, align 1
  %58 = load i8** %str.addr.i107.i.i, align 8
  %59 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %59 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %58, i64 %idx.ext15.i.i.i
  store i8 %57, i8* %add.ptr16.i.i.i, align 1
  %60 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %60, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %61 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %61, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %62 = load i8** %str.addr.i94.i.i, align 8
  %63 = load i8* %62, align 1
  %conv.i97.i.i = sext i8 %63 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %64 = load i32* %len.i96.i.i, align 4
  %65 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %64, %65
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %66 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %66, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %67, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %68 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %68, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %69 = load i32* %len.i96.i.i, align 4
  store i32 %69, i32* %linenolen.i.i, align 4
  %70 = load i8** %errmsg.addr.i.i, align 8
  store i8* %70, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %71 = load i8** %str.addr.i81.i.i, align 8
  %72 = load i8* %71, align 1
  %conv.i84.i.i = sext i8 %72 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %73 = load i32* %len.i83.i.i, align 4
  %74 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %73, %74
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %75 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %75, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %76, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %77 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %77, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %78 = load i32* %len.i83.i.i, align 4
  store i32 %78, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %79 = load i32* %i.i.i, align 4
  %80 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %79, %80
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %81 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %81 to i64
  %82 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %82, i64 %idxprom.i.i
  %83 = load i8* %arrayidx.i.i, align 1
  %84 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %84 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %83, i8* %arrayidx6.i.i, align 1
  %85 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %85, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %86 = load i32* %curr.i.i, align 4
  %87 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %86, %87
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %88 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %88, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %88 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %89 = load i32* %i.i.i, align 4
  %90 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %89, %90
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %91 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %91 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %92 = load i8* %arrayidx14.i.i, align 1
  %93 = load i32* %curr.i.i, align 4
  %94 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %93, %94
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %92, i8* %arrayidx17.i.i, align 1
  %95 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %95, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %96 = load i32* %curr.i.i, align 4
  %97 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %96, %97
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %98 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %98, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %98 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %99 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %99, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %99 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %100 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %100, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %100 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %101 = load i32* %i.i.i, align 4
  %102 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %101, %102
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %103 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %103 to i64
  %104 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %104, i64 %idxprom34.i.i
  %105 = load i8* %arrayidx35.i.i, align 1
  %106 = load i32* %curr.i.i, align 4
  %107 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %106, %107
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %105, i8* %arrayidx38.i.i, align 1
  %108 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %108, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %109 = load i32* %curr.i.i, align 4
  %110 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %109, %110
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %111 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %111, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %111 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %112 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %112, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %112 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %113 = load i32* %i.i.i, align 4
  %114 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %113, %114
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %115 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %115 to i64
  %116 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %116, i64 %idxprom52.i.i
  %117 = load i8* %arrayidx53.i.i, align 1
  %118 = load i32* %curr.i.i, align 4
  %119 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %118, %119
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %117, i8* %arrayidx56.i.i, align 1
  %120 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %120, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %121 = load i32* %curr.i.i, align 4
  %122 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %121, %122
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %123 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %123, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %123 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %124 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %124, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %124 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %125 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %125, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %126 = load %struct.F90_Desc_la** %srcdesc, align 8
  %rank = getelementptr inbounds %struct.F90_Desc_la* %126, i32 0, i32 1
  %127 = load i64* %rank, align 8
  store i64 %127, i64* %ndim, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %128 = load i32* %i, align 4
  %conv = sext i32 %128 to i64
  %129 = load i64* %ndim, align 8
  %cmp = icmp slt i64 %conv, %129
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %130 = load i32* %i, align 4
  %idxprom = sext i32 %130 to i64
  %131 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %131, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 %idxprom
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %132 = load i64* %extent, align 8
  %133 = load i32* %i, align 4
  %idxprom2 = sext i32 %133 to i64
  %134 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim3 = getelementptr inbounds %struct.F90_Desc_la* %134, i32 0, i32 10
  %arrayidx4 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim3, i32 0, i64 %idxprom2
  %extent5 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx4, i32 0, i32 1
  %135 = load i64* %extent5, align 8
  %cmp6 = icmp ne i64 %132, %135
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end9:                                          ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %136 = load i32* %i, align 4
  %inc = add nsw i32 %136, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then8, %for.cond
  %137 = load i32* %conformable, align 4
  %cmp10 = icmp ne i32 %137, 1
  br i1 %cmp10, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %for.end
  %138 = load %struct.F90_Desc_la** %dstdesc, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc_la* %138, i32 0, i32 6
  %139 = load i64* %gsize, align 8
  %140 = load %struct.F90_Desc_la** %srcdesc, align 8
  %gsize12 = getelementptr inbounds %struct.F90_Desc_la* %140, i32 0, i32 6
  %141 = load i64* %gsize12, align 8
  %cmp13 = icmp sge i64 %139, %141
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %land.lhs.true, %for.end
  %142 = load i32* %conformable, align 4
  %cmp17 = icmp slt i32 %142, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end16
  %143 = load i8** %__filename.addr, align 8
  %144 = load i32* %__lineno.addr, align 4
  %145 = load i8** %__function.addr, align 8
  %146 = load i32* %__abort.addr, align 4
  store i8* %143, i8** %__filename.addr.i22, align 8
  store i32 %144, i32* %__lineno.addr.i23, align 4
  store i8* %145, i8** %__function.addr.i24, align 8
  store i32 %146, i32* %__abort.addr.i25, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %147 = load i32* %__abort.addr.i25, align 4
  %tobool.i = icmp ne i32 %147, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i26

if.then.i26:                                      ; preds = %if.then19
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then19
  %148 = load i8** %__filename.addr.i22, align 8
  store i8* %148, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %149 = load i8** %str.addr.i.i, align 8
  %150 = load i8* %149, align 1
  %conv.i.i = sext i8 %150 to i32
  %tobool.i.i27 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i27, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %151 = load i32* %len.i.i, align 4
  %152 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i28 = icmp ult i32 %151, %152
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %153 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i28, %land.rhs.i.i ]
  br i1 %153, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %154 = load i32* %len.i.i, align 4
  %inc.i.i29 = add i32 %154, 1
  store i32 %inc.i.i29, i32* %len.i.i, align 4
  %155 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %155, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %156 = load i32* %len.i.i, align 4
  store i32 %156, i32* %fnamelen.i, align 4
  %157 = load i8** %__function.addr.i24, align 8
  store i8* %157, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %158 = load i8** %str.addr.i68.i, align 8
  %159 = load i8* %158, align 1
  %conv.i71.i = sext i8 %159 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %160 = load i32* %len.i70.i, align 4
  %161 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %160, %161
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %162 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %162, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %163 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %163, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %164 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %164, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %165 = load i32* %len.i70.i, align 4
  store i32 %165, i32* %funclen.i, align 4
  %166 = load i32* %__lineno.addr.i23, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %166, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i21, align 4
  %167 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %167, 0
  br i1 %cmp.i108.i, label %if.then.i.i32, label %if.end.i.i33

if.then.i.i32:                                    ; preds = %__pgi_strlen.exit80.i
  %168 = load i32* %i.i.i21, align 4
  %inc.i109.i = add nsw i32 %168, 1
  store i32 %inc.i109.i, i32* %i.i.i21, align 4
  %idxprom.i.i30 = sext i32 %168 to i64
  %169 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i31 = getelementptr inbounds i8* %169, i64 %idxprom.i.i30
  store i8 48, i8* %arrayidx.i.i31, align 1
  br label %if.end.i.i33

if.end.i.i33:                                     ; preds = %if.then.i.i32, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i33
  %170 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %170, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %171 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %171, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %172 = load i32* %remain.i.i, align 4
  %add.i.i34 = add i32 %172, 48
  %conv.i112.i = trunc i32 %add.i.i34 to i8
  %173 = load i32* %i.i.i21, align 4
  %inc2.i.i = add nsw i32 %173, 1
  store i32 %inc2.i.i, i32* %i.i.i21, align 4
  %idxprom3.i.i = sext i32 %173 to i64
  %174 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %174, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %175 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %175, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %176 = load i32* %i.i.i21, align 4
  %idxprom5.i.i35 = sext i32 %176 to i64
  %177 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i36 = getelementptr inbounds i8* %177, i64 %idxprom5.i.i35
  store i8 0, i8* %arrayidx6.i.i36, align 1
  store i32 0, i32* %start.i.i, align 4
  %178 = load i32* %i.i.i21, align 4
  %sub.i.i = sub nsw i32 %178, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %179 = load i32* %start.i.i, align 4
  %180 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %179, %180
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %182 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %181, i64 %idx.ext.i.i
  %183 = load i8* %add.ptr.i.i, align 1
  store i8 %183, i8* %tmp.i.i, align 1
  %184 = load i8** %str.addr.i107.i, align 8
  %185 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %185 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %184, i64 %idx.ext11.i.i
  %186 = load i8* %add.ptr12.i.i, align 1
  %187 = load i8** %str.addr.i107.i, align 8
  %188 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %188 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %187, i64 %idx.ext13.i.i
  store i8 %186, i8* %add.ptr14.i.i, align 1
  %189 = load i8* %tmp.i.i, align 1
  %190 = load i8** %str.addr.i107.i, align 8
  %191 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %191 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %190, i64 %idx.ext15.i.i
  store i8 %189, i8* %add.ptr16.i.i, align 1
  %192 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %192, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %193 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %193, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %194 = load i8** %str.addr.i94.i, align 8
  %195 = load i8* %194, align 1
  %conv.i97.i = sext i8 %195 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %196 = load i32* %len.i96.i, align 4
  %197 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %196, %197
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %198 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %198, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %199 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %199, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %200 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %200, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %201 = load i32* %len.i96.i, align 4
  store i32 %201, i32* %linenolen.i, align 4
  %202 = load i8** %errmsg.addr.i, align 8
  store i8* %202, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %203 = load i8** %str.addr.i81.i, align 8
  %204 = load i8* %203, align 1
  %conv.i84.i = sext i8 %204 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %205 = load i32* %len.i83.i, align 4
  %206 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %205, %206
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %207 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %207, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %208 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %208, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %209 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %209, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %210 = load i32* %len.i83.i, align 4
  store i32 %210, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %211 = load i32* %i.i, align 4
  %212 = load i32* %fnamelen.i, align 4
  %cmp.i37 = icmp ult i32 %211, %212
  br i1 %cmp.i37, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %213 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %213 to i64
  %214 = load i8** %__filename.addr.i22, align 8
  %arrayidx.i = getelementptr inbounds i8* %214, i64 %idxprom.i
  %215 = load i8* %arrayidx.i, align 1
  %216 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %216 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %215, i8* %arrayidx6.i, align 1
  %217 = load i32* %i.i, align 4
  %inc.i = add i32 %217, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %218 = load i32* %curr.i, align 4
  %219 = load i32* %i.i, align 4
  %add.i = add i32 %218, %219
  store i32 %add.i, i32* %curr.i, align 4
  %220 = load i32* %curr.i, align 4
  %inc7.i = add i32 %220, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %220 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %221 = load i32* %i.i, align 4
  %222 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %221, %222
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %223 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %223 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %224 = load i8* %arrayidx14.i, align 1
  %225 = load i32* %curr.i, align 4
  %226 = load i32* %i.i, align 4
  %add15.i = add i32 %225, %226
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %224, i8* %arrayidx17.i, align 1
  %227 = load i32* %i.i, align 4
  %inc19.i = add i32 %227, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %228 = load i32* %curr.i, align 4
  %229 = load i32* %i.i, align 4
  %add21.i = add i32 %228, %229
  store i32 %add21.i, i32* %curr.i, align 4
  %230 = load i32* %curr.i, align 4
  %inc22.i = add i32 %230, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %230 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %231 = load i32* %curr.i, align 4
  %inc25.i = add i32 %231, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %231 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %232 = load i32* %curr.i, align 4
  %inc28.i = add i32 %232, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %232 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %233 = load i32* %i.i, align 4
  %234 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %233, %234
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %235 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %235 to i64
  %236 = load i8** %__function.addr.i24, align 8
  %arrayidx35.i = getelementptr inbounds i8* %236, i64 %idxprom34.i
  %237 = load i8* %arrayidx35.i, align 1
  %238 = load i32* %curr.i, align 4
  %239 = load i32* %i.i, align 4
  %add36.i = add i32 %238, %239
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %237, i8* %arrayidx38.i, align 1
  %240 = load i32* %i.i, align 4
  %inc40.i = add i32 %240, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %241 = load i32* %curr.i, align 4
  %242 = load i32* %i.i, align 4
  %add42.i = add i32 %241, %242
  store i32 %add42.i, i32* %curr.i, align 4
  %243 = load i32* %curr.i, align 4
  %inc43.i = add i32 %243, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %243 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %244 = load i32* %curr.i, align 4
  %inc46.i = add i32 %244, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %244 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %245 = load i32* %i.i, align 4
  %246 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %245, %246
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %247 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %247 to i64
  %248 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %248, i64 %idxprom52.i
  %249 = load i8* %arrayidx53.i, align 1
  %250 = load i32* %curr.i, align 4
  %251 = load i32* %i.i, align 4
  %add54.i = add i32 %250, %251
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %249, i8* %arrayidx56.i, align 1
  %252 = load i32* %i.i, align 4
  %inc58.i = add i32 %252, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %253 = load i32* %curr.i, align 4
  %254 = load i32* %i.i, align 4
  %add60.i = add i32 %253, %254
  store i32 %add60.i, i32* %curr.i, align 4
  %255 = load i32* %curr.i, align 4
  %inc61.i = add i32 %255, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %255 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %256 = load i32* %curr.i, align 4
  %inc64.i = add i32 %256, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %256 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i26
  br label %if.end20

if.end20:                                         ; preds = %__pgi_error_msg.exit, %if.end16
  %257 = load i32* %conformable, align 4
  store i32 %257, i32* %retval
  br label %return

return:                                           ; preds = %if.end20, %if.then
  %258 = load i32* %retval
  ret i32 %258
}

define  i32 @pgf90_conformable_d1v_i8(i8* %db, i8* %dd, i64 %ext0, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i10 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i11 = alloca i8*, align 8
  %__lineno.addr.i12 = alloca i32, align 4
  %__function.addr.i13 = alloca i8*, align 8
  %__abort.addr.i14 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ext0.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %124, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %125 = load i64* %extent, align 8
  %126 = load i64* %ext0.addr, align 8
  %cmp = icmp ne i64 %125, %126
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %127 = load i32* %conformable, align 4
  %cmp3 = icmp ne i32 %127, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end2
  %128 = load %struct.F90_Desc_la** %dstdesc, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc_la* %128, i32 0, i32 6
  %129 = load i64* %gsize, align 8
  %130 = load i64* %ext0.addr, align 8
  %cmp4 = icmp sge i64 %129, %130
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %if.end2
  %131 = load i32* %conformable, align 4
  %cmp7 = icmp slt i32 %131, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %132 = load i8** %__filename.addr, align 8
  %133 = load i32* %__lineno.addr, align 4
  %134 = load i8** %__function.addr, align 8
  %135 = load i32* %__abort.addr, align 4
  store i8* %132, i8** %__filename.addr.i11, align 8
  store i32 %133, i32* %__lineno.addr.i12, align 4
  store i8* %134, i8** %__function.addr.i13, align 8
  store i32 %135, i32* %__abort.addr.i14, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %136 = load i32* %__abort.addr.i14, align 4
  %tobool.i = icmp ne i32 %136, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i15

if.then.i15:                                      ; preds = %if.then8
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then8
  %137 = load i8** %__filename.addr.i11, align 8
  store i8* %137, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %138 = load i8** %str.addr.i.i, align 8
  %139 = load i8* %138, align 1
  %conv.i.i = sext i8 %139 to i32
  %tobool.i.i16 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i16, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %140 = load i32* %len.i.i, align 4
  %141 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i17 = icmp ult i32 %140, %141
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %142 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i17, %land.rhs.i.i ]
  br i1 %142, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %143 = load i32* %len.i.i, align 4
  %inc.i.i18 = add i32 %143, 1
  store i32 %inc.i.i18, i32* %len.i.i, align 4
  %144 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %144, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %145 = load i32* %len.i.i, align 4
  store i32 %145, i32* %fnamelen.i, align 4
  %146 = load i8** %__function.addr.i13, align 8
  store i8* %146, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %147 = load i8** %str.addr.i68.i, align 8
  %148 = load i8* %147, align 1
  %conv.i71.i = sext i8 %148 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %149 = load i32* %len.i70.i, align 4
  %150 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %149, %150
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %151 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %151, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %152 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %152, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %153 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %154 = load i32* %len.i70.i, align 4
  store i32 %154, i32* %funclen.i, align 4
  %155 = load i32* %__lineno.addr.i12, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %155, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i10, align 4
  %156 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %156, 0
  br i1 %cmp.i108.i, label %if.then.i.i21, label %if.end.i.i22

if.then.i.i21:                                    ; preds = %__pgi_strlen.exit80.i
  %157 = load i32* %i.i.i10, align 4
  %inc.i109.i = add nsw i32 %157, 1
  store i32 %inc.i109.i, i32* %i.i.i10, align 4
  %idxprom.i.i19 = sext i32 %157 to i64
  %158 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i20 = getelementptr inbounds i8* %158, i64 %idxprom.i.i19
  store i8 48, i8* %arrayidx.i.i20, align 1
  br label %if.end.i.i22

if.end.i.i22:                                     ; preds = %if.then.i.i21, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i22
  %159 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %159, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %160 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %160, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %161 = load i32* %remain.i.i, align 4
  %add.i.i23 = add i32 %161, 48
  %conv.i112.i = trunc i32 %add.i.i23 to i8
  %162 = load i32* %i.i.i10, align 4
  %inc2.i.i = add nsw i32 %162, 1
  store i32 %inc2.i.i, i32* %i.i.i10, align 4
  %idxprom3.i.i = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %163, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %164 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %164, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %165 = load i32* %i.i.i10, align 4
  %idxprom5.i.i24 = sext i32 %165 to i64
  %166 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i25 = getelementptr inbounds i8* %166, i64 %idxprom5.i.i24
  store i8 0, i8* %arrayidx6.i.i25, align 1
  store i32 0, i32* %start.i.i, align 4
  %167 = load i32* %i.i.i10, align 4
  %sub.i.i = sub nsw i32 %167, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %168 = load i32* %start.i.i, align 4
  %169 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %168, %169
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %170 = load i8** %str.addr.i107.i, align 8
  %171 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %171 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %170, i64 %idx.ext.i.i
  %172 = load i8* %add.ptr.i.i, align 1
  store i8 %172, i8* %tmp.i.i, align 1
  %173 = load i8** %str.addr.i107.i, align 8
  %174 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %174 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %173, i64 %idx.ext11.i.i
  %175 = load i8* %add.ptr12.i.i, align 1
  %176 = load i8** %str.addr.i107.i, align 8
  %177 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %177 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %176, i64 %idx.ext13.i.i
  store i8 %175, i8* %add.ptr14.i.i, align 1
  %178 = load i8* %tmp.i.i, align 1
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %180 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %179, i64 %idx.ext15.i.i
  store i8 %178, i8* %add.ptr16.i.i, align 1
  %181 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %181, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %182 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %182, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %183 = load i8** %str.addr.i94.i, align 8
  %184 = load i8* %183, align 1
  %conv.i97.i = sext i8 %184 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %185 = load i32* %len.i96.i, align 4
  %186 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %185, %186
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %187 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %187, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %188 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %188, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %189 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %189, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %190 = load i32* %len.i96.i, align 4
  store i32 %190, i32* %linenolen.i, align 4
  %191 = load i8** %errmsg.addr.i, align 8
  store i8* %191, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %192 = load i8** %str.addr.i81.i, align 8
  %193 = load i8* %192, align 1
  %conv.i84.i = sext i8 %193 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %194 = load i32* %len.i83.i, align 4
  %195 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %194, %195
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %196 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %196, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %197 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %197, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %198 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %199 = load i32* %len.i83.i, align 4
  store i32 %199, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %200 = load i32* %i.i, align 4
  %201 = load i32* %fnamelen.i, align 4
  %cmp.i26 = icmp ult i32 %200, %201
  br i1 %cmp.i26, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %202 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %202 to i64
  %203 = load i8** %__filename.addr.i11, align 8
  %arrayidx.i = getelementptr inbounds i8* %203, i64 %idxprom.i
  %204 = load i8* %arrayidx.i, align 1
  %205 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %205 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %204, i8* %arrayidx6.i, align 1
  %206 = load i32* %i.i, align 4
  %inc.i = add i32 %206, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %207 = load i32* %curr.i, align 4
  %208 = load i32* %i.i, align 4
  %add.i = add i32 %207, %208
  store i32 %add.i, i32* %curr.i, align 4
  %209 = load i32* %curr.i, align 4
  %inc7.i = add i32 %209, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %209 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %210 = load i32* %i.i, align 4
  %211 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %210, %211
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %212 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %212 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %213 = load i8* %arrayidx14.i, align 1
  %214 = load i32* %curr.i, align 4
  %215 = load i32* %i.i, align 4
  %add15.i = add i32 %214, %215
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %213, i8* %arrayidx17.i, align 1
  %216 = load i32* %i.i, align 4
  %inc19.i = add i32 %216, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %217 = load i32* %curr.i, align 4
  %218 = load i32* %i.i, align 4
  %add21.i = add i32 %217, %218
  store i32 %add21.i, i32* %curr.i, align 4
  %219 = load i32* %curr.i, align 4
  %inc22.i = add i32 %219, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %219 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %220 = load i32* %curr.i, align 4
  %inc25.i = add i32 %220, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %220 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %221 = load i32* %curr.i, align 4
  %inc28.i = add i32 %221, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %221 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %222 = load i32* %i.i, align 4
  %223 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %222, %223
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %224 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %224 to i64
  %225 = load i8** %__function.addr.i13, align 8
  %arrayidx35.i = getelementptr inbounds i8* %225, i64 %idxprom34.i
  %226 = load i8* %arrayidx35.i, align 1
  %227 = load i32* %curr.i, align 4
  %228 = load i32* %i.i, align 4
  %add36.i = add i32 %227, %228
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %226, i8* %arrayidx38.i, align 1
  %229 = load i32* %i.i, align 4
  %inc40.i = add i32 %229, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %230 = load i32* %curr.i, align 4
  %231 = load i32* %i.i, align 4
  %add42.i = add i32 %230, %231
  store i32 %add42.i, i32* %curr.i, align 4
  %232 = load i32* %curr.i, align 4
  %inc43.i = add i32 %232, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %232 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %233 = load i32* %curr.i, align 4
  %inc46.i = add i32 %233, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %233 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %234 = load i32* %i.i, align 4
  %235 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %234, %235
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %236 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %236 to i64
  %237 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %237, i64 %idxprom52.i
  %238 = load i8* %arrayidx53.i, align 1
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add54.i = add i32 %239, %240
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %238, i8* %arrayidx56.i, align 1
  %241 = load i32* %i.i, align 4
  %inc58.i = add i32 %241, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add60.i = add i32 %242, %243
  store i32 %add60.i, i32* %curr.i, align 4
  %244 = load i32* %curr.i, align 4
  %inc61.i = add i32 %244, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %244 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %245 = load i32* %curr.i, align 4
  %inc64.i = add i32 %245, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %245 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i15
  br label %if.end9

if.end9:                                          ; preds = %__pgi_error_msg.exit, %if.end6
  %246 = load i32* %conformable, align 4
  store i32 %246, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %247 = load i32* %retval
  ret i32 %247
}

define  i32 @pgf90_conformable_d2v_i8(i8* %db, i8* %dd, i64 %ext0, i64 %ext1, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i15 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i16 = alloca i8*, align 8
  %__lineno.addr.i17 = alloca i32, align 4
  %__function.addr.i18 = alloca i8*, align 8
  %__abort.addr.i19 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ext0.addr = alloca i64, align 8
  %ext1.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i64 %ext1, i64* %ext1.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i64 1, i64* %gsize, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i64* %ext0.addr, align 8
  %125 = load i64* %ext1.addr, align 8
  %mul = mul nsw i64 %124, %125
  store i64 %mul, i64* %gsize, align 8
  %126 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %126, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %127 = load i64* %extent, align 8
  %128 = load i64* %ext0.addr, align 8
  %cmp = icmp ne i64 %127, %128
  br i1 %cmp, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %129 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim1 = getelementptr inbounds %struct.F90_Desc_la* %129, i32 0, i32 10
  %arrayidx2 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim1, i32 0, i64 1
  %extent3 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx2, i32 0, i32 1
  %130 = load i64* %extent3, align 8
  %131 = load i64* %ext1.addr, align 8
  %cmp4 = icmp ne i64 %130, %131
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %lor.lhs.false
  %132 = load i32* %conformable, align 4
  %cmp7 = icmp ne i32 %132, 1
  br i1 %cmp7, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end6
  %133 = load %struct.F90_Desc_la** %dstdesc, align 8
  %gsize8 = getelementptr inbounds %struct.F90_Desc_la* %133, i32 0, i32 6
  %134 = load i64* %gsize8, align 8
  %135 = load i64* %gsize, align 8
  %cmp9 = icmp sge i64 %134, %135
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %if.end6
  %136 = load i32* %conformable, align 4
  %cmp12 = icmp slt i32 %136, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %137 = load i8** %__filename.addr, align 8
  %138 = load i32* %__lineno.addr, align 4
  %139 = load i8** %__function.addr, align 8
  %140 = load i32* %__abort.addr, align 4
  store i8* %137, i8** %__filename.addr.i16, align 8
  store i32 %138, i32* %__lineno.addr.i17, align 4
  store i8* %139, i8** %__function.addr.i18, align 8
  store i32 %140, i32* %__abort.addr.i19, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %141 = load i32* %__abort.addr.i19, align 4
  %tobool.i = icmp ne i32 %141, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i20

if.then.i20:                                      ; preds = %if.then13
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then13
  %142 = load i8** %__filename.addr.i16, align 8
  store i8* %142, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %143 = load i8** %str.addr.i.i, align 8
  %144 = load i8* %143, align 1
  %conv.i.i = sext i8 %144 to i32
  %tobool.i.i21 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i21, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %145 = load i32* %len.i.i, align 4
  %146 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i22 = icmp ult i32 %145, %146
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %147 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i22, %land.rhs.i.i ]
  br i1 %147, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %148 = load i32* %len.i.i, align 4
  %inc.i.i23 = add i32 %148, 1
  store i32 %inc.i.i23, i32* %len.i.i, align 4
  %149 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %149, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %150 = load i32* %len.i.i, align 4
  store i32 %150, i32* %fnamelen.i, align 4
  %151 = load i8** %__function.addr.i18, align 8
  store i8* %151, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %152 = load i8** %str.addr.i68.i, align 8
  %153 = load i8* %152, align 1
  %conv.i71.i = sext i8 %153 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %154 = load i32* %len.i70.i, align 4
  %155 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %154, %155
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %156 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %156, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %157 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %157, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %158 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %158, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %159 = load i32* %len.i70.i, align 4
  store i32 %159, i32* %funclen.i, align 4
  %160 = load i32* %__lineno.addr.i17, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %160, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i15, align 4
  %161 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %161, 0
  br i1 %cmp.i108.i, label %if.then.i.i26, label %if.end.i.i27

if.then.i.i26:                                    ; preds = %__pgi_strlen.exit80.i
  %162 = load i32* %i.i.i15, align 4
  %inc.i109.i = add nsw i32 %162, 1
  store i32 %inc.i109.i, i32* %i.i.i15, align 4
  %idxprom.i.i24 = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i25 = getelementptr inbounds i8* %163, i64 %idxprom.i.i24
  store i8 48, i8* %arrayidx.i.i25, align 1
  br label %if.end.i.i27

if.end.i.i27:                                     ; preds = %if.then.i.i26, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i27
  %164 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %164, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %165 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %165, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %166 = load i32* %remain.i.i, align 4
  %add.i.i28 = add i32 %166, 48
  %conv.i112.i = trunc i32 %add.i.i28 to i8
  %167 = load i32* %i.i.i15, align 4
  %inc2.i.i = add nsw i32 %167, 1
  store i32 %inc2.i.i, i32* %i.i.i15, align 4
  %idxprom3.i.i = sext i32 %167 to i64
  %168 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %168, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %169 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %169, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %170 = load i32* %i.i.i15, align 4
  %idxprom5.i.i29 = sext i32 %170 to i64
  %171 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i30 = getelementptr inbounds i8* %171, i64 %idxprom5.i.i29
  store i8 0, i8* %arrayidx6.i.i30, align 1
  store i32 0, i32* %start.i.i, align 4
  %172 = load i32* %i.i.i15, align 4
  %sub.i.i = sub nsw i32 %172, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %173 = load i32* %start.i.i, align 4
  %174 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %173, %174
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %176 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %175, i64 %idx.ext.i.i
  %177 = load i8* %add.ptr.i.i, align 1
  store i8 %177, i8* %tmp.i.i, align 1
  %178 = load i8** %str.addr.i107.i, align 8
  %179 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %179 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %178, i64 %idx.ext11.i.i
  %180 = load i8* %add.ptr12.i.i, align 1
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %182 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %181, i64 %idx.ext13.i.i
  store i8 %180, i8* %add.ptr14.i.i, align 1
  %183 = load i8* %tmp.i.i, align 1
  %184 = load i8** %str.addr.i107.i, align 8
  %185 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %185 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %184, i64 %idx.ext15.i.i
  store i8 %183, i8* %add.ptr16.i.i, align 1
  %186 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %186, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %187 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %187, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %188 = load i8** %str.addr.i94.i, align 8
  %189 = load i8* %188, align 1
  %conv.i97.i = sext i8 %189 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %190 = load i32* %len.i96.i, align 4
  %191 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %190, %191
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %192 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %192, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %193 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %193, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %194 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %195 = load i32* %len.i96.i, align 4
  store i32 %195, i32* %linenolen.i, align 4
  %196 = load i8** %errmsg.addr.i, align 8
  store i8* %196, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %197 = load i8** %str.addr.i81.i, align 8
  %198 = load i8* %197, align 1
  %conv.i84.i = sext i8 %198 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %199 = load i32* %len.i83.i, align 4
  %200 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %199, %200
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %201 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %201, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %202 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %202, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %203 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %203, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %204 = load i32* %len.i83.i, align 4
  store i32 %204, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %205 = load i32* %i.i, align 4
  %206 = load i32* %fnamelen.i, align 4
  %cmp.i31 = icmp ult i32 %205, %206
  br i1 %cmp.i31, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %207 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %207 to i64
  %208 = load i8** %__filename.addr.i16, align 8
  %arrayidx.i = getelementptr inbounds i8* %208, i64 %idxprom.i
  %209 = load i8* %arrayidx.i, align 1
  %210 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %210 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %209, i8* %arrayidx6.i, align 1
  %211 = load i32* %i.i, align 4
  %inc.i = add i32 %211, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %212 = load i32* %curr.i, align 4
  %213 = load i32* %i.i, align 4
  %add.i = add i32 %212, %213
  store i32 %add.i, i32* %curr.i, align 4
  %214 = load i32* %curr.i, align 4
  %inc7.i = add i32 %214, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %214 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %215, %216
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %217 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %217 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %218 = load i8* %arrayidx14.i, align 1
  %219 = load i32* %curr.i, align 4
  %220 = load i32* %i.i, align 4
  %add15.i = add i32 %219, %220
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %218, i8* %arrayidx17.i, align 1
  %221 = load i32* %i.i, align 4
  %inc19.i = add i32 %221, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add21.i = add i32 %222, %223
  store i32 %add21.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc22.i = add i32 %224, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %224 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %225 = load i32* %curr.i, align 4
  %inc25.i = add i32 %225, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %225 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %226 = load i32* %curr.i, align 4
  %inc28.i = add i32 %226, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %226 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %227 = load i32* %i.i, align 4
  %228 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %227, %228
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %229 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %229 to i64
  %230 = load i8** %__function.addr.i18, align 8
  %arrayidx35.i = getelementptr inbounds i8* %230, i64 %idxprom34.i
  %231 = load i8* %arrayidx35.i, align 1
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add36.i = add i32 %232, %233
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %231, i8* %arrayidx38.i, align 1
  %234 = load i32* %i.i, align 4
  %inc40.i = add i32 %234, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add42.i = add i32 %235, %236
  store i32 %add42.i, i32* %curr.i, align 4
  %237 = load i32* %curr.i, align 4
  %inc43.i = add i32 %237, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %237 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %238 = load i32* %curr.i, align 4
  %inc46.i = add i32 %238, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %238 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %239 = load i32* %i.i, align 4
  %240 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %239, %240
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %241 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %241 to i64
  %242 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %242, i64 %idxprom52.i
  %243 = load i8* %arrayidx53.i, align 1
  %244 = load i32* %curr.i, align 4
  %245 = load i32* %i.i, align 4
  %add54.i = add i32 %244, %245
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %243, i8* %arrayidx56.i, align 1
  %246 = load i32* %i.i, align 4
  %inc58.i = add i32 %246, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %247 = load i32* %curr.i, align 4
  %248 = load i32* %i.i, align 4
  %add60.i = add i32 %247, %248
  store i32 %add60.i, i32* %curr.i, align 4
  %249 = load i32* %curr.i, align 4
  %inc61.i = add i32 %249, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %249 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %250 = load i32* %curr.i, align 4
  %inc64.i = add i32 %250, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %250 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i20
  br label %if.end14

if.end14:                                         ; preds = %__pgi_error_msg.exit, %if.end11
  %251 = load i32* %conformable, align 4
  store i32 %251, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then
  %252 = load i32* %retval
  ret i32 %252
}

define  i32 @pgf90_conformable_d3v_i8(i8* %db, i8* %dd, i64 %ext0, i64 %ext1, i64 %ext2, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i21 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i22 = alloca i8*, align 8
  %__lineno.addr.i23 = alloca i32, align 4
  %__function.addr.i24 = alloca i8*, align 8
  %__abort.addr.i25 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ext0.addr = alloca i64, align 8
  %ext1.addr = alloca i64, align 8
  %ext2.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i64 %ext1, i64* %ext1.addr, align 8
  store i64 %ext2, i64* %ext2.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i64 1, i64* %gsize, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i64* %ext0.addr, align 8
  %125 = load i64* %ext1.addr, align 8
  %mul = mul nsw i64 %124, %125
  %126 = load i64* %ext2.addr, align 8
  %mul1 = mul nsw i64 %mul, %126
  store i64 %mul1, i64* %gsize, align 8
  %127 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %127, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %128 = load i64* %extent, align 8
  %129 = load i64* %ext0.addr, align 8
  %cmp = icmp ne i64 %128, %129
  br i1 %cmp, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %130 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim2 = getelementptr inbounds %struct.F90_Desc_la* %130, i32 0, i32 10
  %arrayidx3 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim2, i32 0, i64 1
  %extent4 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx3, i32 0, i32 1
  %131 = load i64* %extent4, align 8
  %132 = load i64* %ext1.addr, align 8
  %cmp5 = icmp ne i64 %131, %132
  br i1 %cmp5, label %if.then11, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %133 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim7 = getelementptr inbounds %struct.F90_Desc_la* %133, i32 0, i32 10
  %arrayidx8 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim7, i32 0, i64 2
  %extent9 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx8, i32 0, i32 1
  %134 = load i64* %extent9, align 8
  %135 = load i64* %ext2.addr, align 8
  %cmp10 = icmp ne i64 %134, %135
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %lor.lhs.false6
  %136 = load i32* %conformable, align 4
  %cmp13 = icmp ne i32 %136, 1
  br i1 %cmp13, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end12
  %137 = load %struct.F90_Desc_la** %dstdesc, align 8
  %gsize14 = getelementptr inbounds %struct.F90_Desc_la* %137, i32 0, i32 6
  %138 = load i64* %gsize14, align 8
  %139 = load i64* %gsize, align 8
  %cmp15 = icmp sge i64 %138, %139
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %if.end12
  %140 = load i32* %conformable, align 4
  %cmp18 = icmp slt i32 %140, 0
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %141 = load i8** %__filename.addr, align 8
  %142 = load i32* %__lineno.addr, align 4
  %143 = load i8** %__function.addr, align 8
  %144 = load i32* %__abort.addr, align 4
  store i8* %141, i8** %__filename.addr.i22, align 8
  store i32 %142, i32* %__lineno.addr.i23, align 4
  store i8* %143, i8** %__function.addr.i24, align 8
  store i32 %144, i32* %__abort.addr.i25, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %145 = load i32* %__abort.addr.i25, align 4
  %tobool.i = icmp ne i32 %145, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i26

if.then.i26:                                      ; preds = %if.then19
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then19
  %146 = load i8** %__filename.addr.i22, align 8
  store i8* %146, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %147 = load i8** %str.addr.i.i, align 8
  %148 = load i8* %147, align 1
  %conv.i.i = sext i8 %148 to i32
  %tobool.i.i27 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i27, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %149 = load i32* %len.i.i, align 4
  %150 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i28 = icmp ult i32 %149, %150
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %151 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i28, %land.rhs.i.i ]
  br i1 %151, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %152 = load i32* %len.i.i, align 4
  %inc.i.i29 = add i32 %152, 1
  store i32 %inc.i.i29, i32* %len.i.i, align 4
  %153 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %154 = load i32* %len.i.i, align 4
  store i32 %154, i32* %fnamelen.i, align 4
  %155 = load i8** %__function.addr.i24, align 8
  store i8* %155, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %156 = load i8** %str.addr.i68.i, align 8
  %157 = load i8* %156, align 1
  %conv.i71.i = sext i8 %157 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %158 = load i32* %len.i70.i, align 4
  %159 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %158, %159
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %160 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %160, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %161 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %161, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %162 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %162, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %163 = load i32* %len.i70.i, align 4
  store i32 %163, i32* %funclen.i, align 4
  %164 = load i32* %__lineno.addr.i23, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %164, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i21, align 4
  %165 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %165, 0
  br i1 %cmp.i108.i, label %if.then.i.i32, label %if.end.i.i33

if.then.i.i32:                                    ; preds = %__pgi_strlen.exit80.i
  %166 = load i32* %i.i.i21, align 4
  %inc.i109.i = add nsw i32 %166, 1
  store i32 %inc.i109.i, i32* %i.i.i21, align 4
  %idxprom.i.i30 = sext i32 %166 to i64
  %167 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i31 = getelementptr inbounds i8* %167, i64 %idxprom.i.i30
  store i8 48, i8* %arrayidx.i.i31, align 1
  br label %if.end.i.i33

if.end.i.i33:                                     ; preds = %if.then.i.i32, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i33
  %168 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %168, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %169 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %169, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %170 = load i32* %remain.i.i, align 4
  %add.i.i34 = add i32 %170, 48
  %conv.i112.i = trunc i32 %add.i.i34 to i8
  %171 = load i32* %i.i.i21, align 4
  %inc2.i.i = add nsw i32 %171, 1
  store i32 %inc2.i.i, i32* %i.i.i21, align 4
  %idxprom3.i.i = sext i32 %171 to i64
  %172 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %172, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %173 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %173, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %174 = load i32* %i.i.i21, align 4
  %idxprom5.i.i35 = sext i32 %174 to i64
  %175 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i36 = getelementptr inbounds i8* %175, i64 %idxprom5.i.i35
  store i8 0, i8* %arrayidx6.i.i36, align 1
  store i32 0, i32* %start.i.i, align 4
  %176 = load i32* %i.i.i21, align 4
  %sub.i.i = sub nsw i32 %176, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %177 = load i32* %start.i.i, align 4
  %178 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %177, %178
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %180 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %179, i64 %idx.ext.i.i
  %181 = load i8* %add.ptr.i.i, align 1
  store i8 %181, i8* %tmp.i.i, align 1
  %182 = load i8** %str.addr.i107.i, align 8
  %183 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %183 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %182, i64 %idx.ext11.i.i
  %184 = load i8* %add.ptr12.i.i, align 1
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %186 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %185, i64 %idx.ext13.i.i
  store i8 %184, i8* %add.ptr14.i.i, align 1
  %187 = load i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %189 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %188, i64 %idx.ext15.i.i
  store i8 %187, i8* %add.ptr16.i.i, align 1
  %190 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %190, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %191 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %191, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %192 = load i8** %str.addr.i94.i, align 8
  %193 = load i8* %192, align 1
  %conv.i97.i = sext i8 %193 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %194 = load i32* %len.i96.i, align 4
  %195 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %194, %195
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %196 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %196, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %197 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %197, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %198 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %199 = load i32* %len.i96.i, align 4
  store i32 %199, i32* %linenolen.i, align 4
  %200 = load i8** %errmsg.addr.i, align 8
  store i8* %200, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %201 = load i8** %str.addr.i81.i, align 8
  %202 = load i8* %201, align 1
  %conv.i84.i = sext i8 %202 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %203 = load i32* %len.i83.i, align 4
  %204 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %203, %204
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %205 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %205, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %206 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %206, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %207 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %207, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %208 = load i32* %len.i83.i, align 4
  store i32 %208, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %209 = load i32* %i.i, align 4
  %210 = load i32* %fnamelen.i, align 4
  %cmp.i37 = icmp ult i32 %209, %210
  br i1 %cmp.i37, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %211 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %211 to i64
  %212 = load i8** %__filename.addr.i22, align 8
  %arrayidx.i = getelementptr inbounds i8* %212, i64 %idxprom.i
  %213 = load i8* %arrayidx.i, align 1
  %214 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %214 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %213, i8* %arrayidx6.i, align 1
  %215 = load i32* %i.i, align 4
  %inc.i = add i32 %215, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %216 = load i32* %curr.i, align 4
  %217 = load i32* %i.i, align 4
  %add.i = add i32 %216, %217
  store i32 %add.i, i32* %curr.i, align 4
  %218 = load i32* %curr.i, align 4
  %inc7.i = add i32 %218, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %218 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %219 = load i32* %i.i, align 4
  %220 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %219, %220
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %221 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %221 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %222 = load i8* %arrayidx14.i, align 1
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add15.i = add i32 %223, %224
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %222, i8* %arrayidx17.i, align 1
  %225 = load i32* %i.i, align 4
  %inc19.i = add i32 %225, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %226 = load i32* %curr.i, align 4
  %227 = load i32* %i.i, align 4
  %add21.i = add i32 %226, %227
  store i32 %add21.i, i32* %curr.i, align 4
  %228 = load i32* %curr.i, align 4
  %inc22.i = add i32 %228, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %228 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %229 = load i32* %curr.i, align 4
  %inc25.i = add i32 %229, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %229 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %230 = load i32* %curr.i, align 4
  %inc28.i = add i32 %230, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %230 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %231 = load i32* %i.i, align 4
  %232 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %231, %232
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %233 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %233 to i64
  %234 = load i8** %__function.addr.i24, align 8
  %arrayidx35.i = getelementptr inbounds i8* %234, i64 %idxprom34.i
  %235 = load i8* %arrayidx35.i, align 1
  %236 = load i32* %curr.i, align 4
  %237 = load i32* %i.i, align 4
  %add36.i = add i32 %236, %237
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %235, i8* %arrayidx38.i, align 1
  %238 = load i32* %i.i, align 4
  %inc40.i = add i32 %238, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add42.i = add i32 %239, %240
  store i32 %add42.i, i32* %curr.i, align 4
  %241 = load i32* %curr.i, align 4
  %inc43.i = add i32 %241, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %241 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %242 = load i32* %curr.i, align 4
  %inc46.i = add i32 %242, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %242 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %243 = load i32* %i.i, align 4
  %244 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %243, %244
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %245 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %245 to i64
  %246 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %246, i64 %idxprom52.i
  %247 = load i8* %arrayidx53.i, align 1
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add54.i = add i32 %248, %249
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %247, i8* %arrayidx56.i, align 1
  %250 = load i32* %i.i, align 4
  %inc58.i = add i32 %250, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %251 = load i32* %curr.i, align 4
  %252 = load i32* %i.i, align 4
  %add60.i = add i32 %251, %252
  store i32 %add60.i, i32* %curr.i, align 4
  %253 = load i32* %curr.i, align 4
  %inc61.i = add i32 %253, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %253 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %254 = load i32* %curr.i, align 4
  %inc64.i = add i32 %254, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %254 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i26
  br label %if.end20

if.end20:                                         ; preds = %__pgi_error_msg.exit, %if.end17
  %255 = load i32* %conformable, align 4
  store i32 %255, i32* %retval
  br label %return

return:                                           ; preds = %if.end20, %if.then
  %256 = load i32* %retval
  ret i32 %256
}

define  i32 @pgf90_conformable_dnv_i8(i8* %db, i8* %dd, i64 %ndim, i64 %ext0, i64 %ext1, i64 %ext2, i64 %ext3, i64 %ext4, i64 %ext5, i64 %ext6, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i29 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i30 = alloca i8*, align 8
  %__lineno.addr.i31 = alloca i32, align 4
  %__function.addr.i32 = alloca i8*, align 8
  %__abort.addr.i33 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dd.addr = alloca i8*, align 8
  %ndim.addr = alloca i64, align 8
  %ext0.addr = alloca i64, align 8
  %ext1.addr = alloca i64, align 8
  %ext2.addr = alloca i64, align 8
  %ext3.addr = alloca i64, align 8
  %ext4.addr = alloca i64, align 8
  %ext5.addr = alloca i64, align 8
  %ext6.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %dstdesc = alloca %struct.F90_Desc_la*, align 8
  %extent = alloca [7 x i64], align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %dd, i8** %dd.addr, align 8
  store i64 %ndim, i64* %ndim.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i64 %ext1, i64* %ext1.addr, align 8
  store i64 %ext2, i64* %ext2.addr, align 8
  store i64 %ext3, i64* %ext3.addr, align 8
  store i64 %ext4, i64* %ext4.addr, align 8
  store i64 %ext5, i64* %ext5.addr, align 8
  store i64 %ext6, i64* %ext6.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %dd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %dstdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i64 1, i64* %gsize, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i64* %ext0.addr, align 8
  %arrayidx = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 0
  store i64 %3, i64* %arrayidx, align 8
  %4 = load i64* %ext1.addr, align 8
  %arrayidx1 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 1
  store i64 %4, i64* %arrayidx1, align 8
  %5 = load i64* %ext2.addr, align 8
  %arrayidx2 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 2
  store i64 %5, i64* %arrayidx2, align 8
  %6 = load i64* %ext3.addr, align 8
  %arrayidx3 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 3
  store i64 %6, i64* %arrayidx3, align 8
  %7 = load i64* %ext4.addr, align 8
  %arrayidx4 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 4
  store i64 %7, i64* %arrayidx4, align 8
  %8 = load i64* %ext5.addr, align 8
  %arrayidx5 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 5
  store i64 %8, i64* %arrayidx5, align 8
  %9 = load i64* %ext6.addr, align 8
  %arrayidx6 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 6
  store i64 %9, i64* %arrayidx6, align 8
  %10 = load i8** %pb, align 8
  %11 = load i8** %__filename.addr, align 8
  %12 = load i32* %__lineno.addr, align 4
  %13 = load i8** %__function.addr, align 8
  %14 = load i32* %__abort.addr, align 4
  store i8* %10, i8** %p.addr.i, align 8
  store i8* %11, i8** %__filename.addr.i, align 8
  store i32 %12, i32* %__lineno.addr.i, align 4
  store i8* %13, i8** %__function.addr.i, align 8
  store i32 %14, i32* %__abort.addr.i, align 4
  %15 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %15, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %16 = load i8** %__filename.addr.i, align 8
  %17 = load i32* %__lineno.addr.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  %19 = load i32* %__abort.addr.i, align 4
  store i8* %16, i8** %__filename.addr.i.i, align 8
  store i32 %17, i32* %__lineno.addr.i.i, align 4
  store i8* %18, i8** %__function.addr.i.i, align 8
  store i32 %19, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %20 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %20, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %21 = load i8** %__filename.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %22 = load i8** %str.addr.i.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i.i.i = sext i8 %23 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %24 = load i32* %len.i.i.i, align 4
  %25 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %24, %25
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %26 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %26, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %27 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %27, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %28 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %29 = load i32* %len.i.i.i, align 4
  store i32 %29, i32* %fnamelen.i.i, align 4
  %30 = load i8** %__function.addr.i.i, align 8
  store i8* %30, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %31 = load i8** %str.addr.i68.i.i, align 8
  %32 = load i8* %31, align 1
  %conv.i71.i.i = sext i8 %32 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %33 = load i32* %len.i70.i.i, align 4
  %34 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %33, %34
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %35 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %35, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %36 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %36, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %37 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %37, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %38 = load i32* %len.i70.i.i, align 4
  store i32 %38, i32* %funclen.i.i, align 4
  %39 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %39, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %40 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %40, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %41 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %41, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %41 to i64
  %42 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %42, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %43 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %43, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %44 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %44, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %45 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %45, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %46 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %46, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %46 to i64
  %47 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %47, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %48 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %48, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %49 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %49 to i64
  %50 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %50, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %51 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %51, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %52 = load i32* %start.i.i.i, align 4
  %53 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %52, %53
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %55 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext.i.i.i
  %56 = load i8* %add.ptr.i.i.i, align 1
  store i8 %56, i8* %tmp.i.i.i, align 1
  %57 = load i8** %str.addr.i107.i.i, align 8
  %58 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %58 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %57, i64 %idx.ext11.i.i.i
  %59 = load i8* %add.ptr12.i.i.i, align 1
  %60 = load i8** %str.addr.i107.i.i, align 8
  %61 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %61 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %60, i64 %idx.ext13.i.i.i
  store i8 %59, i8* %add.ptr14.i.i.i, align 1
  %62 = load i8* %tmp.i.i.i, align 1
  %63 = load i8** %str.addr.i107.i.i, align 8
  %64 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %64 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %63, i64 %idx.ext15.i.i.i
  store i8 %62, i8* %add.ptr16.i.i.i, align 1
  %65 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %65, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %66 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %66, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %67 = load i8** %str.addr.i94.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i97.i.i = sext i8 %68 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %69 = load i32* %len.i96.i.i, align 4
  %70 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %69, %70
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %71 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %71, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %72 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %72, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %73 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %74 = load i32* %len.i96.i.i, align 4
  store i32 %74, i32* %linenolen.i.i, align 4
  %75 = load i8** %errmsg.addr.i.i, align 8
  store i8* %75, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %76 = load i8** %str.addr.i81.i.i, align 8
  %77 = load i8* %76, align 1
  %conv.i84.i.i = sext i8 %77 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %78 = load i32* %len.i83.i.i, align 4
  %79 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %78, %79
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %80 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %80, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %81 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %81, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %82 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %82, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %83 = load i32* %len.i83.i.i, align 4
  store i32 %83, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %84 = load i32* %i.i.i, align 4
  %85 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %84, %85
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %86 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %86 to i64
  %87 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %87, i64 %idxprom.i.i
  %88 = load i8* %arrayidx.i.i, align 1
  %89 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %89 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %88, i8* %arrayidx6.i.i, align 1
  %90 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %90, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %91, %92
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %93 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %93, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %93 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %94 = load i32* %i.i.i, align 4
  %95 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %94, %95
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %96 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %96 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %97 = load i8* %arrayidx14.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %99 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %98, %99
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %97, i8* %arrayidx17.i.i, align 1
  %100 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %100, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %101 = load i32* %curr.i.i, align 4
  %102 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %101, %102
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %103 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %103, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %103 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %104, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %104 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %105 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %105, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %105 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %106 = load i32* %i.i.i, align 4
  %107 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %106, %107
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %108 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %108 to i64
  %109 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %109, i64 %idxprom34.i.i
  %110 = load i8* %arrayidx35.i.i, align 1
  %111 = load i32* %curr.i.i, align 4
  %112 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %111, %112
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %110, i8* %arrayidx38.i.i, align 1
  %113 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %113, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %114, %115
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %116 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %116, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %116 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %117 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %117, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %117 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %118 = load i32* %i.i.i, align 4
  %119 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %118, %119
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %120 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %120 to i64
  %121 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %121, i64 %idxprom52.i.i
  %122 = load i8* %arrayidx53.i.i, align 1
  %123 = load i32* %curr.i.i, align 4
  %124 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %123, %124
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %122, i8* %arrayidx56.i.i, align 1
  %125 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %125, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %126 = load i32* %curr.i.i, align 4
  %127 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %126, %127
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %128 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %128, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %128 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %129 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %129, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %129 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %130 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %130, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %131 = load i32* %i, align 4
  %conv = sext i32 %131 to i64
  %132 = load i64* %ndim.addr, align 8
  %cmp = icmp slt i64 %conv, %132
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %133 = load i32* %i, align 4
  %idxprom = sext i32 %133 to i64
  %arrayidx8 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 %idxprom
  %134 = load i64* %arrayidx8, align 8
  %135 = load i64* %gsize, align 8
  %mul = mul nsw i64 %135, %134
  store i64 %mul, i64* %gsize, align 8
  %136 = load i32* %i, align 4
  %idxprom9 = sext i32 %136 to i64
  %137 = load %struct.F90_Desc_la** %dstdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %137, i32 0, i32 10
  %arrayidx10 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 %idxprom9
  %extent11 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx10, i32 0, i32 1
  %138 = load i64* %extent11, align 8
  %139 = load i32* %i, align 4
  %idxprom12 = sext i32 %139 to i64
  %arrayidx13 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 %idxprom12
  %140 = load i64* %arrayidx13, align 8
  %cmp14 = icmp ne i64 %138, %140
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end17:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %141 = load i32* %i, align 4
  %inc = add nsw i32 %141, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then16, %for.cond
  %142 = load i32* %conformable, align 4
  %cmp18 = icmp ne i32 %142, 1
  br i1 %cmp18, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %for.end
  %143 = load %struct.F90_Desc_la** %dstdesc, align 8
  %gsize20 = getelementptr inbounds %struct.F90_Desc_la* %143, i32 0, i32 6
  %144 = load i64* %gsize20, align 8
  %145 = load i64* %gsize, align 8
  %cmp21 = icmp sge i64 %144, %145
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %land.lhs.true, %for.end
  %146 = load i32* %conformable, align 4
  %cmp25 = icmp slt i32 %146, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  %147 = load i8** %__filename.addr, align 8
  %148 = load i32* %__lineno.addr, align 4
  %149 = load i8** %__function.addr, align 8
  %150 = load i32* %__abort.addr, align 4
  store i8* %147, i8** %__filename.addr.i30, align 8
  store i32 %148, i32* %__lineno.addr.i31, align 4
  store i8* %149, i8** %__function.addr.i32, align 8
  store i32 %150, i32* %__abort.addr.i33, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %151 = load i32* %__abort.addr.i33, align 4
  %tobool.i = icmp ne i32 %151, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i34

if.then.i34:                                      ; preds = %if.then27
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then27
  %152 = load i8** %__filename.addr.i30, align 8
  store i8* %152, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %153 = load i8** %str.addr.i.i, align 8
  %154 = load i8* %153, align 1
  %conv.i.i = sext i8 %154 to i32
  %tobool.i.i35 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i35, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %155 = load i32* %len.i.i, align 4
  %156 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i36 = icmp ult i32 %155, %156
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %157 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i36, %land.rhs.i.i ]
  br i1 %157, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %158 = load i32* %len.i.i, align 4
  %inc.i.i37 = add i32 %158, 1
  store i32 %inc.i.i37, i32* %len.i.i, align 4
  %159 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %160 = load i32* %len.i.i, align 4
  store i32 %160, i32* %fnamelen.i, align 4
  %161 = load i8** %__function.addr.i32, align 8
  store i8* %161, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %162 = load i8** %str.addr.i68.i, align 8
  %163 = load i8* %162, align 1
  %conv.i71.i = sext i8 %163 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %164 = load i32* %len.i70.i, align 4
  %165 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %164, %165
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %166 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %166, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %167 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %167, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %168 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %168, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %169 = load i32* %len.i70.i, align 4
  store i32 %169, i32* %funclen.i, align 4
  %170 = load i32* %__lineno.addr.i31, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %170, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i29, align 4
  %171 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %171, 0
  br i1 %cmp.i108.i, label %if.then.i.i40, label %if.end.i.i41

if.then.i.i40:                                    ; preds = %__pgi_strlen.exit80.i
  %172 = load i32* %i.i.i29, align 4
  %inc.i109.i = add nsw i32 %172, 1
  store i32 %inc.i109.i, i32* %i.i.i29, align 4
  %idxprom.i.i38 = sext i32 %172 to i64
  %173 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i39 = getelementptr inbounds i8* %173, i64 %idxprom.i.i38
  store i8 48, i8* %arrayidx.i.i39, align 1
  br label %if.end.i.i41

if.end.i.i41:                                     ; preds = %if.then.i.i40, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i41
  %174 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %174, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %175 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %175, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %176 = load i32* %remain.i.i, align 4
  %add.i.i42 = add i32 %176, 48
  %conv.i112.i = trunc i32 %add.i.i42 to i8
  %177 = load i32* %i.i.i29, align 4
  %inc2.i.i = add nsw i32 %177, 1
  store i32 %inc2.i.i, i32* %i.i.i29, align 4
  %idxprom3.i.i = sext i32 %177 to i64
  %178 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %178, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %179 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %179, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %180 = load i32* %i.i.i29, align 4
  %idxprom5.i.i43 = sext i32 %180 to i64
  %181 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i44 = getelementptr inbounds i8* %181, i64 %idxprom5.i.i43
  store i8 0, i8* %arrayidx6.i.i44, align 1
  store i32 0, i32* %start.i.i, align 4
  %182 = load i32* %i.i.i29, align 4
  %sub.i.i = sub nsw i32 %182, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %183 = load i32* %start.i.i, align 4
  %184 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %183, %184
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %186 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %185, i64 %idx.ext.i.i
  %187 = load i8* %add.ptr.i.i, align 1
  store i8 %187, i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %189 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %188, i64 %idx.ext11.i.i
  %190 = load i8* %add.ptr12.i.i, align 1
  %191 = load i8** %str.addr.i107.i, align 8
  %192 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %192 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %191, i64 %idx.ext13.i.i
  store i8 %190, i8* %add.ptr14.i.i, align 1
  %193 = load i8* %tmp.i.i, align 1
  %194 = load i8** %str.addr.i107.i, align 8
  %195 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %195 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %194, i64 %idx.ext15.i.i
  store i8 %193, i8* %add.ptr16.i.i, align 1
  %196 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %196, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %197 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %197, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %198 = load i8** %str.addr.i94.i, align 8
  %199 = load i8* %198, align 1
  %conv.i97.i = sext i8 %199 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %200 = load i32* %len.i96.i, align 4
  %201 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %200, %201
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %202 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %202, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %203 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %203, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %204 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %205 = load i32* %len.i96.i, align 4
  store i32 %205, i32* %linenolen.i, align 4
  %206 = load i8** %errmsg.addr.i, align 8
  store i8* %206, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %207 = load i8** %str.addr.i81.i, align 8
  %208 = load i8* %207, align 1
  %conv.i84.i = sext i8 %208 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %209 = load i32* %len.i83.i, align 4
  %210 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %209, %210
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %211 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %211, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %212 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %212, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %213 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %213, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %214 = load i32* %len.i83.i, align 4
  store i32 %214, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %fnamelen.i, align 4
  %cmp.i45 = icmp ult i32 %215, %216
  br i1 %cmp.i45, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %217 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %217 to i64
  %218 = load i8** %__filename.addr.i30, align 8
  %arrayidx.i = getelementptr inbounds i8* %218, i64 %idxprom.i
  %219 = load i8* %arrayidx.i, align 1
  %220 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %220 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %219, i8* %arrayidx6.i, align 1
  %221 = load i32* %i.i, align 4
  %inc.i = add i32 %221, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add.i = add i32 %222, %223
  store i32 %add.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc7.i = add i32 %224, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %224 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %225 = load i32* %i.i, align 4
  %226 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %225, %226
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %227 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %227 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %228 = load i8* %arrayidx14.i, align 1
  %229 = load i32* %curr.i, align 4
  %230 = load i32* %i.i, align 4
  %add15.i = add i32 %229, %230
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %228, i8* %arrayidx17.i, align 1
  %231 = load i32* %i.i, align 4
  %inc19.i = add i32 %231, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add21.i = add i32 %232, %233
  store i32 %add21.i, i32* %curr.i, align 4
  %234 = load i32* %curr.i, align 4
  %inc22.i = add i32 %234, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %234 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %235 = load i32* %curr.i, align 4
  %inc25.i = add i32 %235, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %235 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %236 = load i32* %curr.i, align 4
  %inc28.i = add i32 %236, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %236 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %237 = load i32* %i.i, align 4
  %238 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %237, %238
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %239 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %239 to i64
  %240 = load i8** %__function.addr.i32, align 8
  %arrayidx35.i = getelementptr inbounds i8* %240, i64 %idxprom34.i
  %241 = load i8* %arrayidx35.i, align 1
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add36.i = add i32 %242, %243
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %241, i8* %arrayidx38.i, align 1
  %244 = load i32* %i.i, align 4
  %inc40.i = add i32 %244, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %245 = load i32* %curr.i, align 4
  %246 = load i32* %i.i, align 4
  %add42.i = add i32 %245, %246
  store i32 %add42.i, i32* %curr.i, align 4
  %247 = load i32* %curr.i, align 4
  %inc43.i = add i32 %247, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %247 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %248 = load i32* %curr.i, align 4
  %inc46.i = add i32 %248, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %248 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %249 = load i32* %i.i, align 4
  %250 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %249, %250
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %251 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %251 to i64
  %252 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %252, i64 %idxprom52.i
  %253 = load i8* %arrayidx53.i, align 1
  %254 = load i32* %curr.i, align 4
  %255 = load i32* %i.i, align 4
  %add54.i = add i32 %254, %255
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %253, i8* %arrayidx56.i, align 1
  %256 = load i32* %i.i, align 4
  %inc58.i = add i32 %256, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %257 = load i32* %curr.i, align 4
  %258 = load i32* %i.i, align 4
  %add60.i = add i32 %257, %258
  store i32 %add60.i, i32* %curr.i, align 4
  %259 = load i32* %curr.i, align 4
  %inc61.i = add i32 %259, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %259 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %260 = load i32* %curr.i, align 4
  %inc64.i = add i32 %260, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %260 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i34
  br label %if.end28

if.end28:                                         ; preds = %__pgi_error_msg.exit, %if.end24
  %261 = load i32* %conformable, align 4
  store i32 %261, i32* %retval
  br label %return

return:                                           ; preds = %if.end28, %if.then
  %262 = load i32* %retval
  ret i32 %262
}

define  i32 @pgf90_conformable_1dv_i8(i8* %db, i8* %sd, i64 %ext0, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i10 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i11 = alloca i8*, align 8
  %__lineno.addr.i12 = alloca i32, align 4
  %__function.addr.i13 = alloca i8*, align 8
  %__abort.addr.i14 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ext0.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %124, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %125 = load i64* %extent, align 8
  %126 = load i64* %ext0.addr, align 8
  %cmp = icmp ne i64 %125, %126
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %127 = load i32* %conformable, align 4
  %cmp3 = icmp ne i32 %127, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end2
  %128 = load i64* %ext0.addr, align 8
  %129 = load %struct.F90_Desc_la** %srcdesc, align 8
  %gsize = getelementptr inbounds %struct.F90_Desc_la* %129, i32 0, i32 6
  %130 = load i64* %gsize, align 8
  %cmp4 = icmp sge i64 %128, %130
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %if.end2
  %131 = load i32* %conformable, align 4
  %cmp7 = icmp slt i32 %131, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %132 = load i8** %__filename.addr, align 8
  %133 = load i32* %__lineno.addr, align 4
  %134 = load i8** %__function.addr, align 8
  %135 = load i32* %__abort.addr, align 4
  store i8* %132, i8** %__filename.addr.i11, align 8
  store i32 %133, i32* %__lineno.addr.i12, align 4
  store i8* %134, i8** %__function.addr.i13, align 8
  store i32 %135, i32* %__abort.addr.i14, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %136 = load i32* %__abort.addr.i14, align 4
  %tobool.i = icmp ne i32 %136, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i15

if.then.i15:                                      ; preds = %if.then8
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then8
  %137 = load i8** %__filename.addr.i11, align 8
  store i8* %137, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %138 = load i8** %str.addr.i.i, align 8
  %139 = load i8* %138, align 1
  %conv.i.i = sext i8 %139 to i32
  %tobool.i.i16 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i16, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %140 = load i32* %len.i.i, align 4
  %141 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i17 = icmp ult i32 %140, %141
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %142 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i17, %land.rhs.i.i ]
  br i1 %142, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %143 = load i32* %len.i.i, align 4
  %inc.i.i18 = add i32 %143, 1
  store i32 %inc.i.i18, i32* %len.i.i, align 4
  %144 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %144, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %145 = load i32* %len.i.i, align 4
  store i32 %145, i32* %fnamelen.i, align 4
  %146 = load i8** %__function.addr.i13, align 8
  store i8* %146, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %147 = load i8** %str.addr.i68.i, align 8
  %148 = load i8* %147, align 1
  %conv.i71.i = sext i8 %148 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %149 = load i32* %len.i70.i, align 4
  %150 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %149, %150
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %151 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %151, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %152 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %152, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %153 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %154 = load i32* %len.i70.i, align 4
  store i32 %154, i32* %funclen.i, align 4
  %155 = load i32* %__lineno.addr.i12, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %155, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i10, align 4
  %156 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %156, 0
  br i1 %cmp.i108.i, label %if.then.i.i21, label %if.end.i.i22

if.then.i.i21:                                    ; preds = %__pgi_strlen.exit80.i
  %157 = load i32* %i.i.i10, align 4
  %inc.i109.i = add nsw i32 %157, 1
  store i32 %inc.i109.i, i32* %i.i.i10, align 4
  %idxprom.i.i19 = sext i32 %157 to i64
  %158 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i20 = getelementptr inbounds i8* %158, i64 %idxprom.i.i19
  store i8 48, i8* %arrayidx.i.i20, align 1
  br label %if.end.i.i22

if.end.i.i22:                                     ; preds = %if.then.i.i21, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i22
  %159 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %159, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %160 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %160, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %161 = load i32* %remain.i.i, align 4
  %add.i.i23 = add i32 %161, 48
  %conv.i112.i = trunc i32 %add.i.i23 to i8
  %162 = load i32* %i.i.i10, align 4
  %inc2.i.i = add nsw i32 %162, 1
  store i32 %inc2.i.i, i32* %i.i.i10, align 4
  %idxprom3.i.i = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %163, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %164 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %164, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %165 = load i32* %i.i.i10, align 4
  %idxprom5.i.i24 = sext i32 %165 to i64
  %166 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i25 = getelementptr inbounds i8* %166, i64 %idxprom5.i.i24
  store i8 0, i8* %arrayidx6.i.i25, align 1
  store i32 0, i32* %start.i.i, align 4
  %167 = load i32* %i.i.i10, align 4
  %sub.i.i = sub nsw i32 %167, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %168 = load i32* %start.i.i, align 4
  %169 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %168, %169
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %170 = load i8** %str.addr.i107.i, align 8
  %171 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %171 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %170, i64 %idx.ext.i.i
  %172 = load i8* %add.ptr.i.i, align 1
  store i8 %172, i8* %tmp.i.i, align 1
  %173 = load i8** %str.addr.i107.i, align 8
  %174 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %174 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %173, i64 %idx.ext11.i.i
  %175 = load i8* %add.ptr12.i.i, align 1
  %176 = load i8** %str.addr.i107.i, align 8
  %177 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %177 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %176, i64 %idx.ext13.i.i
  store i8 %175, i8* %add.ptr14.i.i, align 1
  %178 = load i8* %tmp.i.i, align 1
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %180 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %179, i64 %idx.ext15.i.i
  store i8 %178, i8* %add.ptr16.i.i, align 1
  %181 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %181, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %182 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %182, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %183 = load i8** %str.addr.i94.i, align 8
  %184 = load i8* %183, align 1
  %conv.i97.i = sext i8 %184 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %185 = load i32* %len.i96.i, align 4
  %186 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %185, %186
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %187 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %187, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %188 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %188, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %189 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %189, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %190 = load i32* %len.i96.i, align 4
  store i32 %190, i32* %linenolen.i, align 4
  %191 = load i8** %errmsg.addr.i, align 8
  store i8* %191, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %192 = load i8** %str.addr.i81.i, align 8
  %193 = load i8* %192, align 1
  %conv.i84.i = sext i8 %193 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %194 = load i32* %len.i83.i, align 4
  %195 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %194, %195
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %196 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %196, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %197 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %197, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %198 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %199 = load i32* %len.i83.i, align 4
  store i32 %199, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %200 = load i32* %i.i, align 4
  %201 = load i32* %fnamelen.i, align 4
  %cmp.i26 = icmp ult i32 %200, %201
  br i1 %cmp.i26, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %202 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %202 to i64
  %203 = load i8** %__filename.addr.i11, align 8
  %arrayidx.i = getelementptr inbounds i8* %203, i64 %idxprom.i
  %204 = load i8* %arrayidx.i, align 1
  %205 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %205 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %204, i8* %arrayidx6.i, align 1
  %206 = load i32* %i.i, align 4
  %inc.i = add i32 %206, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %207 = load i32* %curr.i, align 4
  %208 = load i32* %i.i, align 4
  %add.i = add i32 %207, %208
  store i32 %add.i, i32* %curr.i, align 4
  %209 = load i32* %curr.i, align 4
  %inc7.i = add i32 %209, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %209 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %210 = load i32* %i.i, align 4
  %211 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %210, %211
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %212 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %212 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %213 = load i8* %arrayidx14.i, align 1
  %214 = load i32* %curr.i, align 4
  %215 = load i32* %i.i, align 4
  %add15.i = add i32 %214, %215
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %213, i8* %arrayidx17.i, align 1
  %216 = load i32* %i.i, align 4
  %inc19.i = add i32 %216, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %217 = load i32* %curr.i, align 4
  %218 = load i32* %i.i, align 4
  %add21.i = add i32 %217, %218
  store i32 %add21.i, i32* %curr.i, align 4
  %219 = load i32* %curr.i, align 4
  %inc22.i = add i32 %219, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %219 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %220 = load i32* %curr.i, align 4
  %inc25.i = add i32 %220, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %220 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %221 = load i32* %curr.i, align 4
  %inc28.i = add i32 %221, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %221 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %222 = load i32* %i.i, align 4
  %223 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %222, %223
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %224 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %224 to i64
  %225 = load i8** %__function.addr.i13, align 8
  %arrayidx35.i = getelementptr inbounds i8* %225, i64 %idxprom34.i
  %226 = load i8* %arrayidx35.i, align 1
  %227 = load i32* %curr.i, align 4
  %228 = load i32* %i.i, align 4
  %add36.i = add i32 %227, %228
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %226, i8* %arrayidx38.i, align 1
  %229 = load i32* %i.i, align 4
  %inc40.i = add i32 %229, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %230 = load i32* %curr.i, align 4
  %231 = load i32* %i.i, align 4
  %add42.i = add i32 %230, %231
  store i32 %add42.i, i32* %curr.i, align 4
  %232 = load i32* %curr.i, align 4
  %inc43.i = add i32 %232, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %232 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %233 = load i32* %curr.i, align 4
  %inc46.i = add i32 %233, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %233 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %234 = load i32* %i.i, align 4
  %235 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %234, %235
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %236 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %236 to i64
  %237 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %237, i64 %idxprom52.i
  %238 = load i8* %arrayidx53.i, align 1
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add54.i = add i32 %239, %240
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %238, i8* %arrayidx56.i, align 1
  %241 = load i32* %i.i, align 4
  %inc58.i = add i32 %241, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add60.i = add i32 %242, %243
  store i32 %add60.i, i32* %curr.i, align 4
  %244 = load i32* %curr.i, align 4
  %inc61.i = add i32 %244, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %244 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %245 = load i32* %curr.i, align 4
  %inc64.i = add i32 %245, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %245 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i15
  br label %if.end9

if.end9:                                          ; preds = %__pgi_error_msg.exit, %if.end6
  %246 = load i32* %conformable, align 4
  store i32 %246, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %247 = load i32* %retval
  ret i32 %247
}

define  i32 @pgf90_conformable_2dv_i8(i8* %db, i8* %sd, i64 %ext0, i64 %ext1, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i15 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i16 = alloca i8*, align 8
  %__lineno.addr.i17 = alloca i32, align 4
  %__function.addr.i18 = alloca i8*, align 8
  %__abort.addr.i19 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ext0.addr = alloca i64, align 8
  %ext1.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i64 %ext1, i64* %ext1.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i64 1, i64* %gsize, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i64* %ext0.addr, align 8
  %125 = load i64* %ext1.addr, align 8
  %mul = mul nsw i64 %124, %125
  store i64 %mul, i64* %gsize, align 8
  %126 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %126, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %127 = load i64* %extent, align 8
  %128 = load i64* %ext0.addr, align 8
  %cmp = icmp ne i64 %127, %128
  br i1 %cmp, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %129 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim1 = getelementptr inbounds %struct.F90_Desc_la* %129, i32 0, i32 10
  %arrayidx2 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim1, i32 0, i64 1
  %extent3 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx2, i32 0, i32 1
  %130 = load i64* %extent3, align 8
  %131 = load i64* %ext1.addr, align 8
  %cmp4 = icmp ne i64 %130, %131
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %lor.lhs.false
  %132 = load i32* %conformable, align 4
  %cmp7 = icmp ne i32 %132, 1
  br i1 %cmp7, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end6
  %133 = load i64* %gsize, align 8
  %134 = load %struct.F90_Desc_la** %srcdesc, align 8
  %gsize8 = getelementptr inbounds %struct.F90_Desc_la* %134, i32 0, i32 6
  %135 = load i64* %gsize8, align 8
  %cmp9 = icmp sge i64 %133, %135
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %if.end6
  %136 = load i32* %conformable, align 4
  %cmp12 = icmp slt i32 %136, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %137 = load i8** %__filename.addr, align 8
  %138 = load i32* %__lineno.addr, align 4
  %139 = load i8** %__function.addr, align 8
  %140 = load i32* %__abort.addr, align 4
  store i8* %137, i8** %__filename.addr.i16, align 8
  store i32 %138, i32* %__lineno.addr.i17, align 4
  store i8* %139, i8** %__function.addr.i18, align 8
  store i32 %140, i32* %__abort.addr.i19, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %141 = load i32* %__abort.addr.i19, align 4
  %tobool.i = icmp ne i32 %141, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i20

if.then.i20:                                      ; preds = %if.then13
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then13
  %142 = load i8** %__filename.addr.i16, align 8
  store i8* %142, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %143 = load i8** %str.addr.i.i, align 8
  %144 = load i8* %143, align 1
  %conv.i.i = sext i8 %144 to i32
  %tobool.i.i21 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i21, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %145 = load i32* %len.i.i, align 4
  %146 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i22 = icmp ult i32 %145, %146
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %147 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i22, %land.rhs.i.i ]
  br i1 %147, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %148 = load i32* %len.i.i, align 4
  %inc.i.i23 = add i32 %148, 1
  store i32 %inc.i.i23, i32* %len.i.i, align 4
  %149 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %149, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %150 = load i32* %len.i.i, align 4
  store i32 %150, i32* %fnamelen.i, align 4
  %151 = load i8** %__function.addr.i18, align 8
  store i8* %151, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %152 = load i8** %str.addr.i68.i, align 8
  %153 = load i8* %152, align 1
  %conv.i71.i = sext i8 %153 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %154 = load i32* %len.i70.i, align 4
  %155 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %154, %155
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %156 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %156, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %157 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %157, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %158 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %158, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %159 = load i32* %len.i70.i, align 4
  store i32 %159, i32* %funclen.i, align 4
  %160 = load i32* %__lineno.addr.i17, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %160, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i15, align 4
  %161 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %161, 0
  br i1 %cmp.i108.i, label %if.then.i.i26, label %if.end.i.i27

if.then.i.i26:                                    ; preds = %__pgi_strlen.exit80.i
  %162 = load i32* %i.i.i15, align 4
  %inc.i109.i = add nsw i32 %162, 1
  store i32 %inc.i109.i, i32* %i.i.i15, align 4
  %idxprom.i.i24 = sext i32 %162 to i64
  %163 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i25 = getelementptr inbounds i8* %163, i64 %idxprom.i.i24
  store i8 48, i8* %arrayidx.i.i25, align 1
  br label %if.end.i.i27

if.end.i.i27:                                     ; preds = %if.then.i.i26, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i27
  %164 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %164, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %165 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %165, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %166 = load i32* %remain.i.i, align 4
  %add.i.i28 = add i32 %166, 48
  %conv.i112.i = trunc i32 %add.i.i28 to i8
  %167 = load i32* %i.i.i15, align 4
  %inc2.i.i = add nsw i32 %167, 1
  store i32 %inc2.i.i, i32* %i.i.i15, align 4
  %idxprom3.i.i = sext i32 %167 to i64
  %168 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %168, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %169 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %169, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %170 = load i32* %i.i.i15, align 4
  %idxprom5.i.i29 = sext i32 %170 to i64
  %171 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i30 = getelementptr inbounds i8* %171, i64 %idxprom5.i.i29
  store i8 0, i8* %arrayidx6.i.i30, align 1
  store i32 0, i32* %start.i.i, align 4
  %172 = load i32* %i.i.i15, align 4
  %sub.i.i = sub nsw i32 %172, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %173 = load i32* %start.i.i, align 4
  %174 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %173, %174
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %176 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %175, i64 %idx.ext.i.i
  %177 = load i8* %add.ptr.i.i, align 1
  store i8 %177, i8* %tmp.i.i, align 1
  %178 = load i8** %str.addr.i107.i, align 8
  %179 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %179 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %178, i64 %idx.ext11.i.i
  %180 = load i8* %add.ptr12.i.i, align 1
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %182 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %181, i64 %idx.ext13.i.i
  store i8 %180, i8* %add.ptr14.i.i, align 1
  %183 = load i8* %tmp.i.i, align 1
  %184 = load i8** %str.addr.i107.i, align 8
  %185 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %185 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %184, i64 %idx.ext15.i.i
  store i8 %183, i8* %add.ptr16.i.i, align 1
  %186 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %186, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %187 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %187, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %188 = load i8** %str.addr.i94.i, align 8
  %189 = load i8* %188, align 1
  %conv.i97.i = sext i8 %189 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %190 = load i32* %len.i96.i, align 4
  %191 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %190, %191
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %192 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %192, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %193 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %193, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %194 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %195 = load i32* %len.i96.i, align 4
  store i32 %195, i32* %linenolen.i, align 4
  %196 = load i8** %errmsg.addr.i, align 8
  store i8* %196, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %197 = load i8** %str.addr.i81.i, align 8
  %198 = load i8* %197, align 1
  %conv.i84.i = sext i8 %198 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %199 = load i32* %len.i83.i, align 4
  %200 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %199, %200
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %201 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %201, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %202 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %202, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %203 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %203, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %204 = load i32* %len.i83.i, align 4
  store i32 %204, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %205 = load i32* %i.i, align 4
  %206 = load i32* %fnamelen.i, align 4
  %cmp.i31 = icmp ult i32 %205, %206
  br i1 %cmp.i31, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %207 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %207 to i64
  %208 = load i8** %__filename.addr.i16, align 8
  %arrayidx.i = getelementptr inbounds i8* %208, i64 %idxprom.i
  %209 = load i8* %arrayidx.i, align 1
  %210 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %210 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %209, i8* %arrayidx6.i, align 1
  %211 = load i32* %i.i, align 4
  %inc.i = add i32 %211, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %212 = load i32* %curr.i, align 4
  %213 = load i32* %i.i, align 4
  %add.i = add i32 %212, %213
  store i32 %add.i, i32* %curr.i, align 4
  %214 = load i32* %curr.i, align 4
  %inc7.i = add i32 %214, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %214 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %215, %216
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %217 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %217 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %218 = load i8* %arrayidx14.i, align 1
  %219 = load i32* %curr.i, align 4
  %220 = load i32* %i.i, align 4
  %add15.i = add i32 %219, %220
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %218, i8* %arrayidx17.i, align 1
  %221 = load i32* %i.i, align 4
  %inc19.i = add i32 %221, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add21.i = add i32 %222, %223
  store i32 %add21.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc22.i = add i32 %224, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %224 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %225 = load i32* %curr.i, align 4
  %inc25.i = add i32 %225, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %225 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %226 = load i32* %curr.i, align 4
  %inc28.i = add i32 %226, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %226 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %227 = load i32* %i.i, align 4
  %228 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %227, %228
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %229 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %229 to i64
  %230 = load i8** %__function.addr.i18, align 8
  %arrayidx35.i = getelementptr inbounds i8* %230, i64 %idxprom34.i
  %231 = load i8* %arrayidx35.i, align 1
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add36.i = add i32 %232, %233
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %231, i8* %arrayidx38.i, align 1
  %234 = load i32* %i.i, align 4
  %inc40.i = add i32 %234, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add42.i = add i32 %235, %236
  store i32 %add42.i, i32* %curr.i, align 4
  %237 = load i32* %curr.i, align 4
  %inc43.i = add i32 %237, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %237 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %238 = load i32* %curr.i, align 4
  %inc46.i = add i32 %238, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %238 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %239 = load i32* %i.i, align 4
  %240 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %239, %240
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %241 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %241 to i64
  %242 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %242, i64 %idxprom52.i
  %243 = load i8* %arrayidx53.i, align 1
  %244 = load i32* %curr.i, align 4
  %245 = load i32* %i.i, align 4
  %add54.i = add i32 %244, %245
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %243, i8* %arrayidx56.i, align 1
  %246 = load i32* %i.i, align 4
  %inc58.i = add i32 %246, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %247 = load i32* %curr.i, align 4
  %248 = load i32* %i.i, align 4
  %add60.i = add i32 %247, %248
  store i32 %add60.i, i32* %curr.i, align 4
  %249 = load i32* %curr.i, align 4
  %inc61.i = add i32 %249, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %249 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %250 = load i32* %curr.i, align 4
  %inc64.i = add i32 %250, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %250 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i20
  br label %if.end14

if.end14:                                         ; preds = %__pgi_error_msg.exit, %if.end11
  %251 = load i32* %conformable, align 4
  store i32 %251, i32* %retval
  br label %return

return:                                           ; preds = %if.end14, %if.then
  %252 = load i32* %retval
  ret i32 %252
}

define  i32 @pgf90_conformable_3dv_i8(i8* %db, i8* %sd, i64 %ext0, i64 %ext1, i64 %ext2, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i21 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i22 = alloca i8*, align 8
  %__lineno.addr.i23 = alloca i32, align 4
  %__function.addr.i24 = alloca i8*, align 8
  %__abort.addr.i25 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ext0.addr = alloca i64, align 8
  %ext1.addr = alloca i64, align 8
  %ext2.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  %pb = alloca i8*, align 8
  %gsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i64 %ext1, i64* %ext1.addr, align 8
  store i64 %ext2, i64* %ext2.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i64 1, i64* %gsize, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i8** %pb, align 8
  %4 = load i8** %__filename.addr, align 8
  %5 = load i32* %__lineno.addr, align 4
  %6 = load i8** %__function.addr, align 8
  %7 = load i32* %__abort.addr, align 4
  store i8* %3, i8** %p.addr.i, align 8
  store i8* %4, i8** %__filename.addr.i, align 8
  store i32 %5, i32* %__lineno.addr.i, align 4
  store i8* %6, i8** %__function.addr.i, align 8
  store i32 %7, i32* %__abort.addr.i, align 4
  %8 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %8, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %9 = load i8** %__filename.addr.i, align 8
  %10 = load i32* %__lineno.addr.i, align 4
  %11 = load i8** %__function.addr.i, align 8
  %12 = load i32* %__abort.addr.i, align 4
  store i8* %9, i8** %__filename.addr.i.i, align 8
  store i32 %10, i32* %__lineno.addr.i.i, align 4
  store i8* %11, i8** %__function.addr.i.i, align 8
  store i32 %12, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %13 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %13, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %14 = load i8** %__filename.addr.i.i, align 8
  store i8* %14, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %15 = load i8** %str.addr.i.i.i, align 8
  %16 = load i8* %15, align 1
  %conv.i.i.i = sext i8 %16 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %17 = load i32* %len.i.i.i, align 4
  %18 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %17, %18
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %19 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %19, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %20, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %21 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %21, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %22 = load i32* %len.i.i.i, align 4
  store i32 %22, i32* %fnamelen.i.i, align 4
  %23 = load i8** %__function.addr.i.i, align 8
  store i8* %23, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %24 = load i8** %str.addr.i68.i.i, align 8
  %25 = load i8* %24, align 1
  %conv.i71.i.i = sext i8 %25 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %26 = load i32* %len.i70.i.i, align 4
  %27 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %26, %27
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %28 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %28, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %29, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %30 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %30, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %31 = load i32* %len.i70.i.i, align 4
  store i32 %31, i32* %funclen.i.i, align 4
  %32 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %32, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %33 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %33, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %34 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %34, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %34 to i64
  %35 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %35, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %36 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %36, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %37 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %37, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %38 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %38, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %39 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %39, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %39 to i64
  %40 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %40, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %41 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %41, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %42 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %42 to i64
  %43 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %43, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %44 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %44, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %45 = load i32* %start.i.i.i, align 4
  %46 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %45, %46
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %47 = load i8** %str.addr.i107.i.i, align 8
  %48 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %48 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %47, i64 %idx.ext.i.i.i
  %49 = load i8* %add.ptr.i.i.i, align 1
  store i8 %49, i8* %tmp.i.i.i, align 1
  %50 = load i8** %str.addr.i107.i.i, align 8
  %51 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %51 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %50, i64 %idx.ext11.i.i.i
  %52 = load i8* %add.ptr12.i.i.i, align 1
  %53 = load i8** %str.addr.i107.i.i, align 8
  %54 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %54 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %53, i64 %idx.ext13.i.i.i
  store i8 %52, i8* %add.ptr14.i.i.i, align 1
  %55 = load i8* %tmp.i.i.i, align 1
  %56 = load i8** %str.addr.i107.i.i, align 8
  %57 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %57 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %56, i64 %idx.ext15.i.i.i
  store i8 %55, i8* %add.ptr16.i.i.i, align 1
  %58 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %58, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %59 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %59, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %60 = load i8** %str.addr.i94.i.i, align 8
  %61 = load i8* %60, align 1
  %conv.i97.i.i = sext i8 %61 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %62 = load i32* %len.i96.i.i, align 4
  %63 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %62, %63
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %64 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %64, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %65, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %66 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %66, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %67 = load i32* %len.i96.i.i, align 4
  store i32 %67, i32* %linenolen.i.i, align 4
  %68 = load i8** %errmsg.addr.i.i, align 8
  store i8* %68, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %69 = load i8** %str.addr.i81.i.i, align 8
  %70 = load i8* %69, align 1
  %conv.i84.i.i = sext i8 %70 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %71 = load i32* %len.i83.i.i, align 4
  %72 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %71, %72
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %73 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %73, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %74, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %75 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %75, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %76 = load i32* %len.i83.i.i, align 4
  store i32 %76, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %77 = load i32* %i.i.i, align 4
  %78 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %77, %78
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %79 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %79 to i64
  %80 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %80, i64 %idxprom.i.i
  %81 = load i8* %arrayidx.i.i, align 1
  %82 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %82 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %81, i8* %arrayidx6.i.i, align 1
  %83 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %83, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %84 = load i32* %curr.i.i, align 4
  %85 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %84, %85
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %86 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %86, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %86 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %87 = load i32* %i.i.i, align 4
  %88 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %87, %88
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %89 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %89 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %90 = load i8* %arrayidx14.i.i, align 1
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %91, %92
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %90, i8* %arrayidx17.i.i, align 1
  %93 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %93, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %94 = load i32* %curr.i.i, align 4
  %95 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %94, %95
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %96 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %96, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %96 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %97 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %97, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %97 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %98, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %98 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %99, %100
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %101 to i64
  %102 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %102, i64 %idxprom34.i.i
  %103 = load i8* %arrayidx35.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %105 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %104, %105
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %103, i8* %arrayidx38.i.i, align 1
  %106 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %106, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %107 = load i32* %curr.i.i, align 4
  %108 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %107, %108
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %109 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %109, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %109 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %110, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %110 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %111, %112
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %113 to i64
  %114 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %114, i64 %idxprom52.i.i
  %115 = load i8* %arrayidx53.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %116, %117
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %115, i8* %arrayidx56.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %118, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %119, %120
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %121, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %121 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %122, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %122 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %123 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %123, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %124 = load i64* %ext0.addr, align 8
  %125 = load i64* %ext1.addr, align 8
  %mul = mul nsw i64 %124, %125
  %126 = load i64* %ext2.addr, align 8
  %mul1 = mul nsw i64 %mul, %126
  store i64 %mul1, i64* %gsize, align 8
  %127 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %127, i32 0, i32 10
  %arrayidx = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 0
  %extent = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx, i32 0, i32 1
  %128 = load i64* %extent, align 8
  %129 = load i64* %ext0.addr, align 8
  %cmp = icmp ne i64 %128, %129
  br i1 %cmp, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %130 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim2 = getelementptr inbounds %struct.F90_Desc_la* %130, i32 0, i32 10
  %arrayidx3 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim2, i32 0, i64 1
  %extent4 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx3, i32 0, i32 1
  %131 = load i64* %extent4, align 8
  %132 = load i64* %ext1.addr, align 8
  %cmp5 = icmp ne i64 %131, %132
  br i1 %cmp5, label %if.then11, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %133 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim7 = getelementptr inbounds %struct.F90_Desc_la* %133, i32 0, i32 10
  %arrayidx8 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim7, i32 0, i64 2
  %extent9 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx8, i32 0, i32 1
  %134 = load i64* %extent9, align 8
  %135 = load i64* %ext2.addr, align 8
  %cmp10 = icmp ne i64 %134, %135
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %lor.lhs.false6
  %136 = load i32* %conformable, align 4
  %cmp13 = icmp ne i32 %136, 1
  br i1 %cmp13, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end12
  %137 = load %struct.F90_Desc_la** %srcdesc, align 8
  %gsize14 = getelementptr inbounds %struct.F90_Desc_la* %137, i32 0, i32 6
  %138 = load i64* %gsize14, align 8
  %139 = load i64* %gsize, align 8
  %cmp15 = icmp sge i64 %138, %139
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %if.end12
  %140 = load i32* %conformable, align 4
  %cmp18 = icmp slt i32 %140, 0
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %141 = load i8** %__filename.addr, align 8
  %142 = load i32* %__lineno.addr, align 4
  %143 = load i8** %__function.addr, align 8
  %144 = load i32* %__abort.addr, align 4
  store i8* %141, i8** %__filename.addr.i22, align 8
  store i32 %142, i32* %__lineno.addr.i23, align 4
  store i8* %143, i8** %__function.addr.i24, align 8
  store i32 %144, i32* %__abort.addr.i25, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %145 = load i32* %__abort.addr.i25, align 4
  %tobool.i = icmp ne i32 %145, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i26

if.then.i26:                                      ; preds = %if.then19
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then19
  %146 = load i8** %__filename.addr.i22, align 8
  store i8* %146, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %147 = load i8** %str.addr.i.i, align 8
  %148 = load i8* %147, align 1
  %conv.i.i = sext i8 %148 to i32
  %tobool.i.i27 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i27, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %149 = load i32* %len.i.i, align 4
  %150 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i28 = icmp ult i32 %149, %150
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %151 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i28, %land.rhs.i.i ]
  br i1 %151, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %152 = load i32* %len.i.i, align 4
  %inc.i.i29 = add i32 %152, 1
  store i32 %inc.i.i29, i32* %len.i.i, align 4
  %153 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %153, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %154 = load i32* %len.i.i, align 4
  store i32 %154, i32* %fnamelen.i, align 4
  %155 = load i8** %__function.addr.i24, align 8
  store i8* %155, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %156 = load i8** %str.addr.i68.i, align 8
  %157 = load i8* %156, align 1
  %conv.i71.i = sext i8 %157 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %158 = load i32* %len.i70.i, align 4
  %159 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %158, %159
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %160 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %160, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %161 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %161, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %162 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %162, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %163 = load i32* %len.i70.i, align 4
  store i32 %163, i32* %funclen.i, align 4
  %164 = load i32* %__lineno.addr.i23, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %164, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i21, align 4
  %165 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %165, 0
  br i1 %cmp.i108.i, label %if.then.i.i32, label %if.end.i.i33

if.then.i.i32:                                    ; preds = %__pgi_strlen.exit80.i
  %166 = load i32* %i.i.i21, align 4
  %inc.i109.i = add nsw i32 %166, 1
  store i32 %inc.i109.i, i32* %i.i.i21, align 4
  %idxprom.i.i30 = sext i32 %166 to i64
  %167 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i31 = getelementptr inbounds i8* %167, i64 %idxprom.i.i30
  store i8 48, i8* %arrayidx.i.i31, align 1
  br label %if.end.i.i33

if.end.i.i33:                                     ; preds = %if.then.i.i32, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i33
  %168 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %168, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %169 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %169, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %170 = load i32* %remain.i.i, align 4
  %add.i.i34 = add i32 %170, 48
  %conv.i112.i = trunc i32 %add.i.i34 to i8
  %171 = load i32* %i.i.i21, align 4
  %inc2.i.i = add nsw i32 %171, 1
  store i32 %inc2.i.i, i32* %i.i.i21, align 4
  %idxprom3.i.i = sext i32 %171 to i64
  %172 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %172, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %173 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %173, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %174 = load i32* %i.i.i21, align 4
  %idxprom5.i.i35 = sext i32 %174 to i64
  %175 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i36 = getelementptr inbounds i8* %175, i64 %idxprom5.i.i35
  store i8 0, i8* %arrayidx6.i.i36, align 1
  store i32 0, i32* %start.i.i, align 4
  %176 = load i32* %i.i.i21, align 4
  %sub.i.i = sub nsw i32 %176, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %177 = load i32* %start.i.i, align 4
  %178 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %177, %178
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %180 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %179, i64 %idx.ext.i.i
  %181 = load i8* %add.ptr.i.i, align 1
  store i8 %181, i8* %tmp.i.i, align 1
  %182 = load i8** %str.addr.i107.i, align 8
  %183 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %183 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %182, i64 %idx.ext11.i.i
  %184 = load i8* %add.ptr12.i.i, align 1
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %186 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %185, i64 %idx.ext13.i.i
  store i8 %184, i8* %add.ptr14.i.i, align 1
  %187 = load i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %189 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %188, i64 %idx.ext15.i.i
  store i8 %187, i8* %add.ptr16.i.i, align 1
  %190 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %190, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %191 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %191, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %192 = load i8** %str.addr.i94.i, align 8
  %193 = load i8* %192, align 1
  %conv.i97.i = sext i8 %193 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %194 = load i32* %len.i96.i, align 4
  %195 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %194, %195
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %196 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %196, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %197 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %197, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %198 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %198, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %199 = load i32* %len.i96.i, align 4
  store i32 %199, i32* %linenolen.i, align 4
  %200 = load i8** %errmsg.addr.i, align 8
  store i8* %200, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %201 = load i8** %str.addr.i81.i, align 8
  %202 = load i8* %201, align 1
  %conv.i84.i = sext i8 %202 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %203 = load i32* %len.i83.i, align 4
  %204 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %203, %204
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %205 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %205, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %206 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %206, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %207 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %207, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %208 = load i32* %len.i83.i, align 4
  store i32 %208, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %209 = load i32* %i.i, align 4
  %210 = load i32* %fnamelen.i, align 4
  %cmp.i37 = icmp ult i32 %209, %210
  br i1 %cmp.i37, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %211 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %211 to i64
  %212 = load i8** %__filename.addr.i22, align 8
  %arrayidx.i = getelementptr inbounds i8* %212, i64 %idxprom.i
  %213 = load i8* %arrayidx.i, align 1
  %214 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %214 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %213, i8* %arrayidx6.i, align 1
  %215 = load i32* %i.i, align 4
  %inc.i = add i32 %215, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %216 = load i32* %curr.i, align 4
  %217 = load i32* %i.i, align 4
  %add.i = add i32 %216, %217
  store i32 %add.i, i32* %curr.i, align 4
  %218 = load i32* %curr.i, align 4
  %inc7.i = add i32 %218, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %218 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %219 = load i32* %i.i, align 4
  %220 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %219, %220
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %221 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %221 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %222 = load i8* %arrayidx14.i, align 1
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add15.i = add i32 %223, %224
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %222, i8* %arrayidx17.i, align 1
  %225 = load i32* %i.i, align 4
  %inc19.i = add i32 %225, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %226 = load i32* %curr.i, align 4
  %227 = load i32* %i.i, align 4
  %add21.i = add i32 %226, %227
  store i32 %add21.i, i32* %curr.i, align 4
  %228 = load i32* %curr.i, align 4
  %inc22.i = add i32 %228, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %228 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %229 = load i32* %curr.i, align 4
  %inc25.i = add i32 %229, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %229 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %230 = load i32* %curr.i, align 4
  %inc28.i = add i32 %230, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %230 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %231 = load i32* %i.i, align 4
  %232 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %231, %232
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %233 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %233 to i64
  %234 = load i8** %__function.addr.i24, align 8
  %arrayidx35.i = getelementptr inbounds i8* %234, i64 %idxprom34.i
  %235 = load i8* %arrayidx35.i, align 1
  %236 = load i32* %curr.i, align 4
  %237 = load i32* %i.i, align 4
  %add36.i = add i32 %236, %237
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %235, i8* %arrayidx38.i, align 1
  %238 = load i32* %i.i, align 4
  %inc40.i = add i32 %238, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %239 = load i32* %curr.i, align 4
  %240 = load i32* %i.i, align 4
  %add42.i = add i32 %239, %240
  store i32 %add42.i, i32* %curr.i, align 4
  %241 = load i32* %curr.i, align 4
  %inc43.i = add i32 %241, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %241 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %242 = load i32* %curr.i, align 4
  %inc46.i = add i32 %242, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %242 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %243 = load i32* %i.i, align 4
  %244 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %243, %244
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %245 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %245 to i64
  %246 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %246, i64 %idxprom52.i
  %247 = load i8* %arrayidx53.i, align 1
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add54.i = add i32 %248, %249
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %247, i8* %arrayidx56.i, align 1
  %250 = load i32* %i.i, align 4
  %inc58.i = add i32 %250, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %251 = load i32* %curr.i, align 4
  %252 = load i32* %i.i, align 4
  %add60.i = add i32 %251, %252
  store i32 %add60.i, i32* %curr.i, align 4
  %253 = load i32* %curr.i, align 4
  %inc61.i = add i32 %253, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %253 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %254 = load i32* %curr.i, align 4
  %inc64.i = add i32 %254, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %254 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i26
  br label %if.end20

if.end20:                                         ; preds = %__pgi_error_msg.exit, %if.end17
  %255 = load i32* %conformable, align 4
  store i32 %255, i32* %retval
  br label %return

return:                                           ; preds = %if.end20, %if.then
  %256 = load i32* %retval
  ret i32 %256
}

define  i32 @pgf90_conformable_ndv_i8(i8* %db, i8* %sd, i64 %ndim, i64 %ext0, i64 %ext1, i64 %ext2, i64 %ext3, i64 %ext4, i64 %ext5, i64 %ext6, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i29 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i30 = alloca i8*, align 8
  %__lineno.addr.i31 = alloca i32, align 4
  %__function.addr.i32 = alloca i8*, align 8
  %__abort.addr.i33 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %sd.addr = alloca i8*, align 8
  %ndim.addr = alloca i64, align 8
  %ext0.addr = alloca i64, align 8
  %ext1.addr = alloca i64, align 8
  %ext2.addr = alloca i64, align 8
  %ext3.addr = alloca i64, align 8
  %ext4.addr = alloca i64, align 8
  %ext5.addr = alloca i64, align 8
  %ext6.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %srcdesc = alloca %struct.F90_Desc_la*, align 8
  %extent = alloca [7 x i64], align 8
  %pb = alloca i8*, align 8
  %i = alloca i32, align 4
  %gsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i8* %sd, i8** %sd.addr, align 8
  store i64 %ndim, i64* %ndim.addr, align 8
  store i64 %ext0, i64* %ext0.addr, align 8
  store i64 %ext1, i64* %ext1.addr, align 8
  store i64 %ext2, i64* %ext2.addr, align 8
  store i64 %ext3, i64* %ext3.addr, align 8
  store i64 %ext4, i64* %ext4.addr, align 8
  store i64 %ext5, i64* %ext5.addr, align 8
  store i64 %ext6, i64* %ext6.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %sd.addr, align 8
  %1 = bitcast i8* %0 to %struct.F90_Desc_la*
  store %struct.F90_Desc_la* %1, %struct.F90_Desc_la** %srcdesc, align 8
  %2 = load i8** %db.addr, align 8
  store i8* %2, i8** %pb, align 8
  store i64 1, i64* %gsize, align 8
  store i32 1, i32* %conformable, align 4
  %3 = load i64* %ext0.addr, align 8
  %arrayidx = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 0
  store i64 %3, i64* %arrayidx, align 8
  %4 = load i64* %ext1.addr, align 8
  %arrayidx1 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 1
  store i64 %4, i64* %arrayidx1, align 8
  %5 = load i64* %ext2.addr, align 8
  %arrayidx2 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 2
  store i64 %5, i64* %arrayidx2, align 8
  %6 = load i64* %ext3.addr, align 8
  %arrayidx3 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 3
  store i64 %6, i64* %arrayidx3, align 8
  %7 = load i64* %ext4.addr, align 8
  %arrayidx4 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 4
  store i64 %7, i64* %arrayidx4, align 8
  %8 = load i64* %ext5.addr, align 8
  %arrayidx5 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 5
  store i64 %8, i64* %arrayidx5, align 8
  %9 = load i64* %ext6.addr, align 8
  %arrayidx6 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 6
  store i64 %9, i64* %arrayidx6, align 8
  %10 = load i8** %pb, align 8
  %11 = load i8** %__filename.addr, align 8
  %12 = load i32* %__lineno.addr, align 4
  %13 = load i8** %__function.addr, align 8
  %14 = load i32* %__abort.addr, align 4
  store i8* %10, i8** %p.addr.i, align 8
  store i8* %11, i8** %__filename.addr.i, align 8
  store i32 %12, i32* %__lineno.addr.i, align 4
  store i8* %13, i8** %__function.addr.i, align 8
  store i32 %14, i32* %__abort.addr.i, align 4
  %15 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %15, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %16 = load i8** %__filename.addr.i, align 8
  %17 = load i32* %__lineno.addr.i, align 4
  %18 = load i8** %__function.addr.i, align 8
  %19 = load i32* %__abort.addr.i, align 4
  store i8* %16, i8** %__filename.addr.i.i, align 8
  store i32 %17, i32* %__lineno.addr.i.i, align 4
  store i8* %18, i8** %__function.addr.i.i, align 8
  store i32 %19, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %20 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %20, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %21 = load i8** %__filename.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %22 = load i8** %str.addr.i.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i.i.i = sext i8 %23 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %24 = load i32* %len.i.i.i, align 4
  %25 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %24, %25
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %26 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %26, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %27 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %27, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %28 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %29 = load i32* %len.i.i.i, align 4
  store i32 %29, i32* %fnamelen.i.i, align 4
  %30 = load i8** %__function.addr.i.i, align 8
  store i8* %30, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %31 = load i8** %str.addr.i68.i.i, align 8
  %32 = load i8* %31, align 1
  %conv.i71.i.i = sext i8 %32 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %33 = load i32* %len.i70.i.i, align 4
  %34 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %33, %34
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %35 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %35, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %36 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %36, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %37 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %37, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %38 = load i32* %len.i70.i.i, align 4
  store i32 %38, i32* %funclen.i.i, align 4
  %39 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %39, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %40 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %40, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %41 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %41, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %41 to i64
  %42 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %42, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %43 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %43, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %44 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %44, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %45 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %45, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %46 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %46, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %46 to i64
  %47 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %47, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %48 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %48, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %49 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %49 to i64
  %50 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %50, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %51 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %51, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %52 = load i32* %start.i.i.i, align 4
  %53 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %52, %53
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %55 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext.i.i.i
  %56 = load i8* %add.ptr.i.i.i, align 1
  store i8 %56, i8* %tmp.i.i.i, align 1
  %57 = load i8** %str.addr.i107.i.i, align 8
  %58 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %58 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %57, i64 %idx.ext11.i.i.i
  %59 = load i8* %add.ptr12.i.i.i, align 1
  %60 = load i8** %str.addr.i107.i.i, align 8
  %61 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %61 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %60, i64 %idx.ext13.i.i.i
  store i8 %59, i8* %add.ptr14.i.i.i, align 1
  %62 = load i8* %tmp.i.i.i, align 1
  %63 = load i8** %str.addr.i107.i.i, align 8
  %64 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %64 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %63, i64 %idx.ext15.i.i.i
  store i8 %62, i8* %add.ptr16.i.i.i, align 1
  %65 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %65, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %66 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %66, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %67 = load i8** %str.addr.i94.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i97.i.i = sext i8 %68 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %69 = load i32* %len.i96.i.i, align 4
  %70 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %69, %70
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %71 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %71, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %72 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %72, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %73 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %74 = load i32* %len.i96.i.i, align 4
  store i32 %74, i32* %linenolen.i.i, align 4
  %75 = load i8** %errmsg.addr.i.i, align 8
  store i8* %75, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %76 = load i8** %str.addr.i81.i.i, align 8
  %77 = load i8* %76, align 1
  %conv.i84.i.i = sext i8 %77 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %78 = load i32* %len.i83.i.i, align 4
  %79 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %78, %79
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %80 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %80, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %81 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %81, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %82 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %82, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %83 = load i32* %len.i83.i.i, align 4
  store i32 %83, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %84 = load i32* %i.i.i, align 4
  %85 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %84, %85
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %86 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %86 to i64
  %87 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %87, i64 %idxprom.i.i
  %88 = load i8* %arrayidx.i.i, align 1
  %89 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %89 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %88, i8* %arrayidx6.i.i, align 1
  %90 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %90, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %91 = load i32* %curr.i.i, align 4
  %92 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %91, %92
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %93 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %93, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %93 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %94 = load i32* %i.i.i, align 4
  %95 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %94, %95
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %96 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %96 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %97 = load i8* %arrayidx14.i.i, align 1
  %98 = load i32* %curr.i.i, align 4
  %99 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %98, %99
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %97, i8* %arrayidx17.i.i, align 1
  %100 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %100, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %101 = load i32* %curr.i.i, align 4
  %102 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %101, %102
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %103 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %103, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %103 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %104 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %104, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %104 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %105 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %105, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %105 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %106 = load i32* %i.i.i, align 4
  %107 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %106, %107
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %108 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %108 to i64
  %109 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %109, i64 %idxprom34.i.i
  %110 = load i8* %arrayidx35.i.i, align 1
  %111 = load i32* %curr.i.i, align 4
  %112 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %111, %112
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %110, i8* %arrayidx38.i.i, align 1
  %113 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %113, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %114, %115
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %116 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %116, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %116 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %117 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %117, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %117 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %118 = load i32* %i.i.i, align 4
  %119 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %118, %119
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %120 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %120 to i64
  %121 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %121, i64 %idxprom52.i.i
  %122 = load i8* %arrayidx53.i.i, align 1
  %123 = load i32* %curr.i.i, align 4
  %124 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %123, %124
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %122, i8* %arrayidx56.i.i, align 1
  %125 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %125, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %126 = load i32* %curr.i.i, align 4
  %127 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %126, %127
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %128 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %128, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %128 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %129 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %129, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %129 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %130 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %130, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %131 = load i32* %i, align 4
  %conv = sext i32 %131 to i64
  %132 = load i64* %ndim.addr, align 8
  %cmp = icmp slt i64 %conv, %132
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %133 = load i32* %i, align 4
  %idxprom = sext i32 %133 to i64
  %arrayidx8 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 %idxprom
  %134 = load i64* %arrayidx8, align 8
  %135 = load i64* %gsize, align 8
  %mul = mul nsw i64 %135, %134
  store i64 %mul, i64* %gsize, align 8
  %136 = load i32* %i, align 4
  %idxprom9 = sext i32 %136 to i64
  %137 = load %struct.F90_Desc_la** %srcdesc, align 8
  %dim = getelementptr inbounds %struct.F90_Desc_la* %137, i32 0, i32 10
  %arrayidx10 = getelementptr inbounds [7 x %struct.F90_DescDim_la]* %dim, i32 0, i64 %idxprom9
  %extent11 = getelementptr inbounds %struct.F90_DescDim_la* %arrayidx10, i32 0, i32 1
  %138 = load i64* %extent11, align 8
  %139 = load i32* %i, align 4
  %idxprom12 = sext i32 %139 to i64
  %arrayidx13 = getelementptr inbounds [7 x i64]* %extent, i32 0, i64 %idxprom12
  %140 = load i64* %arrayidx13, align 8
  %cmp14 = icmp ne i64 %138, %140
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end17:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %141 = load i32* %i, align 4
  %inc = add nsw i32 %141, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then16, %for.cond
  %142 = load i32* %conformable, align 4
  %cmp18 = icmp ne i32 %142, 1
  br i1 %cmp18, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %for.end
  %143 = load %struct.F90_Desc_la** %srcdesc, align 8
  %gsize20 = getelementptr inbounds %struct.F90_Desc_la* %143, i32 0, i32 6
  %144 = load i64* %gsize20, align 8
  %145 = load i64* %gsize, align 8
  %cmp21 = icmp sge i64 %144, %145
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %land.lhs.true, %for.end
  %146 = load i32* %conformable, align 4
  %cmp25 = icmp slt i32 %146, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  %147 = load i8** %__filename.addr, align 8
  %148 = load i32* %__lineno.addr, align 4
  %149 = load i8** %__function.addr, align 8
  %150 = load i32* %__abort.addr, align 4
  store i8* %147, i8** %__filename.addr.i30, align 8
  store i32 %148, i32* %__lineno.addr.i31, align 4
  store i8* %149, i8** %__function.addr.i32, align 8
  store i32 %150, i32* %__abort.addr.i33, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %151 = load i32* %__abort.addr.i33, align 4
  %tobool.i = icmp ne i32 %151, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i34

if.then.i34:                                      ; preds = %if.then27
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then27
  %152 = load i8** %__filename.addr.i30, align 8
  store i8* %152, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %153 = load i8** %str.addr.i.i, align 8
  %154 = load i8* %153, align 1
  %conv.i.i = sext i8 %154 to i32
  %tobool.i.i35 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i35, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %155 = load i32* %len.i.i, align 4
  %156 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i36 = icmp ult i32 %155, %156
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %157 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i36, %land.rhs.i.i ]
  br i1 %157, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %158 = load i32* %len.i.i, align 4
  %inc.i.i37 = add i32 %158, 1
  store i32 %inc.i.i37, i32* %len.i.i, align 4
  %159 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %160 = load i32* %len.i.i, align 4
  store i32 %160, i32* %fnamelen.i, align 4
  %161 = load i8** %__function.addr.i32, align 8
  store i8* %161, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %162 = load i8** %str.addr.i68.i, align 8
  %163 = load i8* %162, align 1
  %conv.i71.i = sext i8 %163 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %164 = load i32* %len.i70.i, align 4
  %165 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %164, %165
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %166 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %166, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %167 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %167, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %168 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %168, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %169 = load i32* %len.i70.i, align 4
  store i32 %169, i32* %funclen.i, align 4
  %170 = load i32* %__lineno.addr.i31, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %170, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i29, align 4
  %171 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %171, 0
  br i1 %cmp.i108.i, label %if.then.i.i40, label %if.end.i.i41

if.then.i.i40:                                    ; preds = %__pgi_strlen.exit80.i
  %172 = load i32* %i.i.i29, align 4
  %inc.i109.i = add nsw i32 %172, 1
  store i32 %inc.i109.i, i32* %i.i.i29, align 4
  %idxprom.i.i38 = sext i32 %172 to i64
  %173 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i39 = getelementptr inbounds i8* %173, i64 %idxprom.i.i38
  store i8 48, i8* %arrayidx.i.i39, align 1
  br label %if.end.i.i41

if.end.i.i41:                                     ; preds = %if.then.i.i40, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i41
  %174 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %174, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %175 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %175, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %176 = load i32* %remain.i.i, align 4
  %add.i.i42 = add i32 %176, 48
  %conv.i112.i = trunc i32 %add.i.i42 to i8
  %177 = load i32* %i.i.i29, align 4
  %inc2.i.i = add nsw i32 %177, 1
  store i32 %inc2.i.i, i32* %i.i.i29, align 4
  %idxprom3.i.i = sext i32 %177 to i64
  %178 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %178, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %179 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %179, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %180 = load i32* %i.i.i29, align 4
  %idxprom5.i.i43 = sext i32 %180 to i64
  %181 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i44 = getelementptr inbounds i8* %181, i64 %idxprom5.i.i43
  store i8 0, i8* %arrayidx6.i.i44, align 1
  store i32 0, i32* %start.i.i, align 4
  %182 = load i32* %i.i.i29, align 4
  %sub.i.i = sub nsw i32 %182, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %183 = load i32* %start.i.i, align 4
  %184 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %183, %184
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %186 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %185, i64 %idx.ext.i.i
  %187 = load i8* %add.ptr.i.i, align 1
  store i8 %187, i8* %tmp.i.i, align 1
  %188 = load i8** %str.addr.i107.i, align 8
  %189 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %189 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %188, i64 %idx.ext11.i.i
  %190 = load i8* %add.ptr12.i.i, align 1
  %191 = load i8** %str.addr.i107.i, align 8
  %192 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %192 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %191, i64 %idx.ext13.i.i
  store i8 %190, i8* %add.ptr14.i.i, align 1
  %193 = load i8* %tmp.i.i, align 1
  %194 = load i8** %str.addr.i107.i, align 8
  %195 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %195 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %194, i64 %idx.ext15.i.i
  store i8 %193, i8* %add.ptr16.i.i, align 1
  %196 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %196, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %197 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %197, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %198 = load i8** %str.addr.i94.i, align 8
  %199 = load i8* %198, align 1
  %conv.i97.i = sext i8 %199 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %200 = load i32* %len.i96.i, align 4
  %201 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %200, %201
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %202 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %202, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %203 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %203, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %204 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %205 = load i32* %len.i96.i, align 4
  store i32 %205, i32* %linenolen.i, align 4
  %206 = load i8** %errmsg.addr.i, align 8
  store i8* %206, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %207 = load i8** %str.addr.i81.i, align 8
  %208 = load i8* %207, align 1
  %conv.i84.i = sext i8 %208 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %209 = load i32* %len.i83.i, align 4
  %210 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %209, %210
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %211 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %211, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %212 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %212, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %213 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %213, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %214 = load i32* %len.i83.i, align 4
  store i32 %214, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %215 = load i32* %i.i, align 4
  %216 = load i32* %fnamelen.i, align 4
  %cmp.i45 = icmp ult i32 %215, %216
  br i1 %cmp.i45, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %217 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %217 to i64
  %218 = load i8** %__filename.addr.i30, align 8
  %arrayidx.i = getelementptr inbounds i8* %218, i64 %idxprom.i
  %219 = load i8* %arrayidx.i, align 1
  %220 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %220 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %219, i8* %arrayidx6.i, align 1
  %221 = load i32* %i.i, align 4
  %inc.i = add i32 %221, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %222 = load i32* %curr.i, align 4
  %223 = load i32* %i.i, align 4
  %add.i = add i32 %222, %223
  store i32 %add.i, i32* %curr.i, align 4
  %224 = load i32* %curr.i, align 4
  %inc7.i = add i32 %224, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %224 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %225 = load i32* %i.i, align 4
  %226 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %225, %226
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %227 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %227 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %228 = load i8* %arrayidx14.i, align 1
  %229 = load i32* %curr.i, align 4
  %230 = load i32* %i.i, align 4
  %add15.i = add i32 %229, %230
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %228, i8* %arrayidx17.i, align 1
  %231 = load i32* %i.i, align 4
  %inc19.i = add i32 %231, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add21.i = add i32 %232, %233
  store i32 %add21.i, i32* %curr.i, align 4
  %234 = load i32* %curr.i, align 4
  %inc22.i = add i32 %234, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %234 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %235 = load i32* %curr.i, align 4
  %inc25.i = add i32 %235, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %235 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %236 = load i32* %curr.i, align 4
  %inc28.i = add i32 %236, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %236 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %237 = load i32* %i.i, align 4
  %238 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %237, %238
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %239 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %239 to i64
  %240 = load i8** %__function.addr.i32, align 8
  %arrayidx35.i = getelementptr inbounds i8* %240, i64 %idxprom34.i
  %241 = load i8* %arrayidx35.i, align 1
  %242 = load i32* %curr.i, align 4
  %243 = load i32* %i.i, align 4
  %add36.i = add i32 %242, %243
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %241, i8* %arrayidx38.i, align 1
  %244 = load i32* %i.i, align 4
  %inc40.i = add i32 %244, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %245 = load i32* %curr.i, align 4
  %246 = load i32* %i.i, align 4
  %add42.i = add i32 %245, %246
  store i32 %add42.i, i32* %curr.i, align 4
  %247 = load i32* %curr.i, align 4
  %inc43.i = add i32 %247, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %247 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %248 = load i32* %curr.i, align 4
  %inc46.i = add i32 %248, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %248 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %249 = load i32* %i.i, align 4
  %250 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %249, %250
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %251 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %251 to i64
  %252 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %252, i64 %idxprom52.i
  %253 = load i8* %arrayidx53.i, align 1
  %254 = load i32* %curr.i, align 4
  %255 = load i32* %i.i, align 4
  %add54.i = add i32 %254, %255
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %253, i8* %arrayidx56.i, align 1
  %256 = load i32* %i.i, align 4
  %inc58.i = add i32 %256, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %257 = load i32* %curr.i, align 4
  %258 = load i32* %i.i, align 4
  %add60.i = add i32 %257, %258
  store i32 %add60.i, i32* %curr.i, align 4
  %259 = load i32* %curr.i, align 4
  %inc61.i = add i32 %259, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %259 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %260 = load i32* %curr.i, align 4
  %inc64.i = add i32 %260, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %260 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i34
  br label %if.end28

if.end28:                                         ; preds = %__pgi_error_msg.exit, %if.end24
  %261 = load i32* %conformable, align 4
  store i32 %261, i32* %retval
  br label %return

return:                                           ; preds = %if.end28, %if.then
  %262 = load i32* %retval
  ret i32 %262
}

define  i32 @pgf90_conformable_11v_i8(i8* %db, i64 %dext0, i64 %sext0, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i10 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i11 = alloca i8*, align 8
  %__lineno.addr.i12 = alloca i32, align 4
  %__function.addr.i13 = alloca i8*, align 8
  %__abort.addr.i14 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dext0.addr = alloca i64, align 8
  %sext0.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %pb = alloca i8*, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i64 %dext0, i64* %dext0.addr, align 8
  store i64 %sext0, i64* %sext0.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i32 1, i32* %conformable, align 4
  %1 = load i8** %pb, align 8
  %2 = load i8** %__filename.addr, align 8
  %3 = load i32* %__lineno.addr, align 4
  %4 = load i8** %__function.addr, align 8
  %5 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %2, i8** %__filename.addr.i, align 8
  store i32 %3, i32* %__lineno.addr.i, align 4
  store i8* %4, i8** %__function.addr.i, align 8
  store i32 %5, i32* %__abort.addr.i, align 4
  %6 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %7 = load i8** %__filename.addr.i, align 8
  %8 = load i32* %__lineno.addr.i, align 4
  %9 = load i8** %__function.addr.i, align 8
  %10 = load i32* %__abort.addr.i, align 4
  store i8* %7, i8** %__filename.addr.i.i, align 8
  store i32 %8, i32* %__lineno.addr.i.i, align 4
  store i8* %9, i8** %__function.addr.i.i, align 8
  store i32 %10, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %11 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %11, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %12 = load i8** %__filename.addr.i.i, align 8
  store i8* %12, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %13 = load i8** %str.addr.i.i.i, align 8
  %14 = load i8* %13, align 1
  %conv.i.i.i = sext i8 %14 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %15 = load i32* %len.i.i.i, align 4
  %16 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %15, %16
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %17 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %17, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %18 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %18, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %19 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  store i32 %20, i32* %fnamelen.i.i, align 4
  %21 = load i8** %__function.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %22 = load i8** %str.addr.i68.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i71.i.i = sext i8 %23 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %24 = load i32* %len.i70.i.i, align 4
  %25 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %24, %25
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %26 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %26, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %27 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %27, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %28 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  store i32 %29, i32* %funclen.i.i, align 4
  %30 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %30, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %31 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %31, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %32 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %32, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %32 to i64
  %33 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %33, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %34 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %34, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %35 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %35, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %36 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %36, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %37 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %37, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %38, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %39 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %39, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %40 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %40 to i64
  %41 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %41, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %42 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %42, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %43 = load i32* %start.i.i.i, align 4
  %44 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %43, %44
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %45 = load i8** %str.addr.i107.i.i, align 8
  %46 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %46 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %45, i64 %idx.ext.i.i.i
  %47 = load i8* %add.ptr.i.i.i, align 1
  store i8 %47, i8* %tmp.i.i.i, align 1
  %48 = load i8** %str.addr.i107.i.i, align 8
  %49 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %49 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %48, i64 %idx.ext11.i.i.i
  %50 = load i8* %add.ptr12.i.i.i, align 1
  %51 = load i8** %str.addr.i107.i.i, align 8
  %52 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %52 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %51, i64 %idx.ext13.i.i.i
  store i8 %50, i8* %add.ptr14.i.i.i, align 1
  %53 = load i8* %tmp.i.i.i, align 1
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %55 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext15.i.i.i
  store i8 %53, i8* %add.ptr16.i.i.i, align 1
  %56 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %56, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %57 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %57, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %58 = load i8** %str.addr.i94.i.i, align 8
  %59 = load i8* %58, align 1
  %conv.i97.i.i = sext i8 %59 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %60 = load i32* %len.i96.i.i, align 4
  %61 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %60, %61
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %62 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %62, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %63 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %63, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %64 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  store i32 %65, i32* %linenolen.i.i, align 4
  %66 = load i8** %errmsg.addr.i.i, align 8
  store i8* %66, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %67 = load i8** %str.addr.i81.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i84.i.i = sext i8 %68 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %69 = load i32* %len.i83.i.i, align 4
  %70 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %69, %70
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %71 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %71, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %72 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %72, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %73 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  store i32 %74, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %75 = load i32* %i.i.i, align 4
  %76 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %75, %76
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %77 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %77 to i64
  %78 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %78, i64 %idxprom.i.i
  %79 = load i8* %arrayidx.i.i, align 1
  %80 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %80 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %79, i8* %arrayidx6.i.i, align 1
  %81 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %81, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %82 = load i32* %curr.i.i, align 4
  %83 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %82, %83
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %84 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %84, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %84 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %85 = load i32* %i.i.i, align 4
  %86 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %85, %86
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %87 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %87 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %88 = load i8* %arrayidx14.i.i, align 1
  %89 = load i32* %curr.i.i, align 4
  %90 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %89, %90
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %88, i8* %arrayidx17.i.i, align 1
  %91 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %91, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %92 = load i32* %curr.i.i, align 4
  %93 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %92, %93
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %94 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %94, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %94 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %95 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %95, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %95 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %96 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %96, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %96 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %97 = load i32* %i.i.i, align 4
  %98 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %97, %98
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %99 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %99 to i64
  %100 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %100, i64 %idxprom34.i.i
  %101 = load i8* %arrayidx35.i.i, align 1
  %102 = load i32* %curr.i.i, align 4
  %103 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %102, %103
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %101, i8* %arrayidx38.i.i, align 1
  %104 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %104, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %105 = load i32* %curr.i.i, align 4
  %106 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %105, %106
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %107 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %107, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %107 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %108 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %108, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %108 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %109 = load i32* %i.i.i, align 4
  %110 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %109, %110
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %111 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %111 to i64
  %112 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %112, i64 %idxprom52.i.i
  %113 = load i8* %arrayidx53.i.i, align 1
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %114, %115
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %113, i8* %arrayidx56.i.i, align 1
  %116 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %116, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %117 = load i32* %curr.i.i, align 4
  %118 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %117, %118
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %119 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %119, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %119 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %120 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %120, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %120 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %121 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %121, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %122 = load i64* %sext0.addr, align 8
  %123 = load i64* %dext0.addr, align 8
  %cmp = icmp ne i64 %122, %123
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %124 = load i32* %conformable, align 4
  %cmp3 = icmp ne i32 %124, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end2
  %125 = load i64* %dext0.addr, align 8
  %126 = load i64* %sext0.addr, align 8
  %cmp4 = icmp sge i64 %125, %126
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %land.lhs.true, %if.end2
  %127 = load i32* %conformable, align 4
  %cmp7 = icmp slt i32 %127, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %128 = load i8** %__filename.addr, align 8
  %129 = load i32* %__lineno.addr, align 4
  %130 = load i8** %__function.addr, align 8
  %131 = load i32* %__abort.addr, align 4
  store i8* %128, i8** %__filename.addr.i11, align 8
  store i32 %129, i32* %__lineno.addr.i12, align 4
  store i8* %130, i8** %__function.addr.i13, align 8
  store i32 %131, i32* %__abort.addr.i14, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %132 = load i32* %__abort.addr.i14, align 4
  %tobool.i = icmp ne i32 %132, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i15

if.then.i15:                                      ; preds = %if.then8
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then8
  %133 = load i8** %__filename.addr.i11, align 8
  store i8* %133, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %134 = load i8** %str.addr.i.i, align 8
  %135 = load i8* %134, align 1
  %conv.i.i = sext i8 %135 to i32
  %tobool.i.i16 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i16, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %136 = load i32* %len.i.i, align 4
  %137 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i17 = icmp ult i32 %136, %137
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %138 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i17, %land.rhs.i.i ]
  br i1 %138, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %139 = load i32* %len.i.i, align 4
  %inc.i.i18 = add i32 %139, 1
  store i32 %inc.i.i18, i32* %len.i.i, align 4
  %140 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %140, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %141 = load i32* %len.i.i, align 4
  store i32 %141, i32* %fnamelen.i, align 4
  %142 = load i8** %__function.addr.i13, align 8
  store i8* %142, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %143 = load i8** %str.addr.i68.i, align 8
  %144 = load i8* %143, align 1
  %conv.i71.i = sext i8 %144 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %145 = load i32* %len.i70.i, align 4
  %146 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %145, %146
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %147 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %147, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %148 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %148, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %149 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %149, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %150 = load i32* %len.i70.i, align 4
  store i32 %150, i32* %funclen.i, align 4
  %151 = load i32* %__lineno.addr.i12, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %151, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i10, align 4
  %152 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %152, 0
  br i1 %cmp.i108.i, label %if.then.i.i21, label %if.end.i.i22

if.then.i.i21:                                    ; preds = %__pgi_strlen.exit80.i
  %153 = load i32* %i.i.i10, align 4
  %inc.i109.i = add nsw i32 %153, 1
  store i32 %inc.i109.i, i32* %i.i.i10, align 4
  %idxprom.i.i19 = sext i32 %153 to i64
  %154 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i20 = getelementptr inbounds i8* %154, i64 %idxprom.i.i19
  store i8 48, i8* %arrayidx.i.i20, align 1
  br label %if.end.i.i22

if.end.i.i22:                                     ; preds = %if.then.i.i21, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i22
  %155 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %155, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %156 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %156, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %157 = load i32* %remain.i.i, align 4
  %add.i.i23 = add i32 %157, 48
  %conv.i112.i = trunc i32 %add.i.i23 to i8
  %158 = load i32* %i.i.i10, align 4
  %inc2.i.i = add nsw i32 %158, 1
  store i32 %inc2.i.i, i32* %i.i.i10, align 4
  %idxprom3.i.i = sext i32 %158 to i64
  %159 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %159, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %160 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %160, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %161 = load i32* %i.i.i10, align 4
  %idxprom5.i.i24 = sext i32 %161 to i64
  %162 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i25 = getelementptr inbounds i8* %162, i64 %idxprom5.i.i24
  store i8 0, i8* %arrayidx6.i.i25, align 1
  store i32 0, i32* %start.i.i, align 4
  %163 = load i32* %i.i.i10, align 4
  %sub.i.i = sub nsw i32 %163, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %164 = load i32* %start.i.i, align 4
  %165 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %164, %165
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %166 = load i8** %str.addr.i107.i, align 8
  %167 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %167 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %166, i64 %idx.ext.i.i
  %168 = load i8* %add.ptr.i.i, align 1
  store i8 %168, i8* %tmp.i.i, align 1
  %169 = load i8** %str.addr.i107.i, align 8
  %170 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %170 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %169, i64 %idx.ext11.i.i
  %171 = load i8* %add.ptr12.i.i, align 1
  %172 = load i8** %str.addr.i107.i, align 8
  %173 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %173 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %172, i64 %idx.ext13.i.i
  store i8 %171, i8* %add.ptr14.i.i, align 1
  %174 = load i8* %tmp.i.i, align 1
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %176 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %175, i64 %idx.ext15.i.i
  store i8 %174, i8* %add.ptr16.i.i, align 1
  %177 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %177, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %178 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %178, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %179 = load i8** %str.addr.i94.i, align 8
  %180 = load i8* %179, align 1
  %conv.i97.i = sext i8 %180 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %181 = load i32* %len.i96.i, align 4
  %182 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %181, %182
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %183 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %183, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %184 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %184, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %185 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %185, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %186 = load i32* %len.i96.i, align 4
  store i32 %186, i32* %linenolen.i, align 4
  %187 = load i8** %errmsg.addr.i, align 8
  store i8* %187, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %188 = load i8** %str.addr.i81.i, align 8
  %189 = load i8* %188, align 1
  %conv.i84.i = sext i8 %189 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %190 = load i32* %len.i83.i, align 4
  %191 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %190, %191
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %192 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %192, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %193 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %193, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %194 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %194, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %195 = load i32* %len.i83.i, align 4
  store i32 %195, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %196 = load i32* %i.i, align 4
  %197 = load i32* %fnamelen.i, align 4
  %cmp.i26 = icmp ult i32 %196, %197
  br i1 %cmp.i26, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %198 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %198 to i64
  %199 = load i8** %__filename.addr.i11, align 8
  %arrayidx.i = getelementptr inbounds i8* %199, i64 %idxprom.i
  %200 = load i8* %arrayidx.i, align 1
  %201 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %201 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %200, i8* %arrayidx6.i, align 1
  %202 = load i32* %i.i, align 4
  %inc.i = add i32 %202, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %203 = load i32* %curr.i, align 4
  %204 = load i32* %i.i, align 4
  %add.i = add i32 %203, %204
  store i32 %add.i, i32* %curr.i, align 4
  %205 = load i32* %curr.i, align 4
  %inc7.i = add i32 %205, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %205 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %206 = load i32* %i.i, align 4
  %207 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %206, %207
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %208 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %208 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %209 = load i8* %arrayidx14.i, align 1
  %210 = load i32* %curr.i, align 4
  %211 = load i32* %i.i, align 4
  %add15.i = add i32 %210, %211
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %209, i8* %arrayidx17.i, align 1
  %212 = load i32* %i.i, align 4
  %inc19.i = add i32 %212, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %213 = load i32* %curr.i, align 4
  %214 = load i32* %i.i, align 4
  %add21.i = add i32 %213, %214
  store i32 %add21.i, i32* %curr.i, align 4
  %215 = load i32* %curr.i, align 4
  %inc22.i = add i32 %215, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %215 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %216 = load i32* %curr.i, align 4
  %inc25.i = add i32 %216, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %216 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %217 = load i32* %curr.i, align 4
  %inc28.i = add i32 %217, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %217 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %218 = load i32* %i.i, align 4
  %219 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %218, %219
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %220 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %220 to i64
  %221 = load i8** %__function.addr.i13, align 8
  %arrayidx35.i = getelementptr inbounds i8* %221, i64 %idxprom34.i
  %222 = load i8* %arrayidx35.i, align 1
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add36.i = add i32 %223, %224
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %222, i8* %arrayidx38.i, align 1
  %225 = load i32* %i.i, align 4
  %inc40.i = add i32 %225, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %226 = load i32* %curr.i, align 4
  %227 = load i32* %i.i, align 4
  %add42.i = add i32 %226, %227
  store i32 %add42.i, i32* %curr.i, align 4
  %228 = load i32* %curr.i, align 4
  %inc43.i = add i32 %228, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %228 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %229 = load i32* %curr.i, align 4
  %inc46.i = add i32 %229, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %229 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %230 = load i32* %i.i, align 4
  %231 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %230, %231
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %232 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %232 to i64
  %233 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %233, i64 %idxprom52.i
  %234 = load i8* %arrayidx53.i, align 1
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add54.i = add i32 %235, %236
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %234, i8* %arrayidx56.i, align 1
  %237 = load i32* %i.i, align 4
  %inc58.i = add i32 %237, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %238 = load i32* %curr.i, align 4
  %239 = load i32* %i.i, align 4
  %add60.i = add i32 %238, %239
  store i32 %add60.i, i32* %curr.i, align 4
  %240 = load i32* %curr.i, align 4
  %inc61.i = add i32 %240, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %240 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %241 = load i32* %curr.i, align 4
  %inc64.i = add i32 %241, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %241 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i15
  br label %if.end9

if.end9:                                          ; preds = %__pgi_error_msg.exit, %if.end6
  %242 = load i32* %conformable, align 4
  store i32 %242, i32* %retval
  br label %return

return:                                           ; preds = %if.end9, %if.then
  %243 = load i32* %retval
  ret i32 %243
}

define  i32 @pgf90_conformable_22v_i8(i8* %db, i64 %dext0, i64 %sext0, i64 %dext1, i64 %sext1, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i12 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i13 = alloca i8*, align 8
  %__lineno.addr.i14 = alloca i32, align 4
  %__function.addr.i15 = alloca i8*, align 8
  %__abort.addr.i16 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dext0.addr = alloca i64, align 8
  %sext0.addr = alloca i64, align 8
  %dext1.addr = alloca i64, align 8
  %sext1.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %pb = alloca i8*, align 8
  %sgsize = alloca i64, align 8
  %dgsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i64 %dext0, i64* %dext0.addr, align 8
  store i64 %sext0, i64* %sext0.addr, align 8
  store i64 %dext1, i64* %dext1.addr, align 8
  store i64 %sext1, i64* %sext1.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i64 1, i64* %sgsize, align 8
  store i64 1, i64* %dgsize, align 8
  store i32 1, i32* %conformable, align 4
  %1 = load i8** %pb, align 8
  %2 = load i8** %__filename.addr, align 8
  %3 = load i32* %__lineno.addr, align 4
  %4 = load i8** %__function.addr, align 8
  %5 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %2, i8** %__filename.addr.i, align 8
  store i32 %3, i32* %__lineno.addr.i, align 4
  store i8* %4, i8** %__function.addr.i, align 8
  store i32 %5, i32* %__abort.addr.i, align 4
  %6 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %7 = load i8** %__filename.addr.i, align 8
  %8 = load i32* %__lineno.addr.i, align 4
  %9 = load i8** %__function.addr.i, align 8
  %10 = load i32* %__abort.addr.i, align 4
  store i8* %7, i8** %__filename.addr.i.i, align 8
  store i32 %8, i32* %__lineno.addr.i.i, align 4
  store i8* %9, i8** %__function.addr.i.i, align 8
  store i32 %10, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %11 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %11, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %12 = load i8** %__filename.addr.i.i, align 8
  store i8* %12, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %13 = load i8** %str.addr.i.i.i, align 8
  %14 = load i8* %13, align 1
  %conv.i.i.i = sext i8 %14 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %15 = load i32* %len.i.i.i, align 4
  %16 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %15, %16
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %17 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %17, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %18 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %18, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %19 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  store i32 %20, i32* %fnamelen.i.i, align 4
  %21 = load i8** %__function.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %22 = load i8** %str.addr.i68.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i71.i.i = sext i8 %23 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %24 = load i32* %len.i70.i.i, align 4
  %25 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %24, %25
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %26 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %26, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %27 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %27, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %28 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  store i32 %29, i32* %funclen.i.i, align 4
  %30 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %30, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %31 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %31, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %32 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %32, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %32 to i64
  %33 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %33, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %34 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %34, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %35 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %35, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %36 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %36, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %37 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %37, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %38, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %39 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %39, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %40 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %40 to i64
  %41 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %41, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %42 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %42, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %43 = load i32* %start.i.i.i, align 4
  %44 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %43, %44
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %45 = load i8** %str.addr.i107.i.i, align 8
  %46 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %46 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %45, i64 %idx.ext.i.i.i
  %47 = load i8* %add.ptr.i.i.i, align 1
  store i8 %47, i8* %tmp.i.i.i, align 1
  %48 = load i8** %str.addr.i107.i.i, align 8
  %49 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %49 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %48, i64 %idx.ext11.i.i.i
  %50 = load i8* %add.ptr12.i.i.i, align 1
  %51 = load i8** %str.addr.i107.i.i, align 8
  %52 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %52 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %51, i64 %idx.ext13.i.i.i
  store i8 %50, i8* %add.ptr14.i.i.i, align 1
  %53 = load i8* %tmp.i.i.i, align 1
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %55 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext15.i.i.i
  store i8 %53, i8* %add.ptr16.i.i.i, align 1
  %56 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %56, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %57 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %57, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %58 = load i8** %str.addr.i94.i.i, align 8
  %59 = load i8* %58, align 1
  %conv.i97.i.i = sext i8 %59 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %60 = load i32* %len.i96.i.i, align 4
  %61 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %60, %61
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %62 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %62, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %63 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %63, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %64 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  store i32 %65, i32* %linenolen.i.i, align 4
  %66 = load i8** %errmsg.addr.i.i, align 8
  store i8* %66, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %67 = load i8** %str.addr.i81.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i84.i.i = sext i8 %68 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %69 = load i32* %len.i83.i.i, align 4
  %70 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %69, %70
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %71 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %71, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %72 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %72, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %73 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  store i32 %74, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %75 = load i32* %i.i.i, align 4
  %76 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %75, %76
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %77 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %77 to i64
  %78 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %78, i64 %idxprom.i.i
  %79 = load i8* %arrayidx.i.i, align 1
  %80 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %80 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %79, i8* %arrayidx6.i.i, align 1
  %81 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %81, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %82 = load i32* %curr.i.i, align 4
  %83 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %82, %83
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %84 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %84, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %84 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %85 = load i32* %i.i.i, align 4
  %86 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %85, %86
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %87 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %87 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %88 = load i8* %arrayidx14.i.i, align 1
  %89 = load i32* %curr.i.i, align 4
  %90 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %89, %90
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %88, i8* %arrayidx17.i.i, align 1
  %91 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %91, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %92 = load i32* %curr.i.i, align 4
  %93 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %92, %93
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %94 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %94, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %94 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %95 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %95, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %95 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %96 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %96, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %96 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %97 = load i32* %i.i.i, align 4
  %98 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %97, %98
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %99 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %99 to i64
  %100 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %100, i64 %idxprom34.i.i
  %101 = load i8* %arrayidx35.i.i, align 1
  %102 = load i32* %curr.i.i, align 4
  %103 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %102, %103
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %101, i8* %arrayidx38.i.i, align 1
  %104 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %104, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %105 = load i32* %curr.i.i, align 4
  %106 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %105, %106
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %107 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %107, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %107 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %108 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %108, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %108 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %109 = load i32* %i.i.i, align 4
  %110 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %109, %110
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %111 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %111 to i64
  %112 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %112, i64 %idxprom52.i.i
  %113 = load i8* %arrayidx53.i.i, align 1
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %114, %115
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %113, i8* %arrayidx56.i.i, align 1
  %116 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %116, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %117 = load i32* %curr.i.i, align 4
  %118 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %117, %118
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %119 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %119, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %119 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %120 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %120, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %120 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %121 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %121, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %122 = load i64* %sext0.addr, align 8
  %123 = load i64* %sext1.addr, align 8
  %mul = mul nsw i64 %122, %123
  store i64 %mul, i64* %sgsize, align 8
  %124 = load i64* %dext0.addr, align 8
  %125 = load i64* %dext1.addr, align 8
  %mul1 = mul nsw i64 %124, %125
  store i64 %mul1, i64* %dgsize, align 8
  %126 = load i64* %dext0.addr, align 8
  %127 = load i64* %sext0.addr, align 8
  %cmp = icmp ne i64 %126, %127
  br i1 %cmp, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %128 = load i64* %dext1.addr, align 8
  %129 = load i64* %sext1.addr, align 8
  %cmp2 = icmp ne i64 %128, %129
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %lor.lhs.false
  %130 = load i32* %conformable, align 4
  %cmp5 = icmp ne i32 %130, 1
  br i1 %cmp5, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %if.end4
  %131 = load i64* %dgsize, align 8
  %132 = load i64* %sgsize, align 8
  %cmp6 = icmp sge i64 %131, %132
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %land.lhs.true, %if.end4
  %133 = load i32* %conformable, align 4
  %cmp9 = icmp slt i32 %133, 0
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  %134 = load i8** %__filename.addr, align 8
  %135 = load i32* %__lineno.addr, align 4
  %136 = load i8** %__function.addr, align 8
  %137 = load i32* %__abort.addr, align 4
  store i8* %134, i8** %__filename.addr.i13, align 8
  store i32 %135, i32* %__lineno.addr.i14, align 4
  store i8* %136, i8** %__function.addr.i15, align 8
  store i32 %137, i32* %__abort.addr.i16, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %138 = load i32* %__abort.addr.i16, align 4
  %tobool.i = icmp ne i32 %138, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i17

if.then.i17:                                      ; preds = %if.then10
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then10
  %139 = load i8** %__filename.addr.i13, align 8
  store i8* %139, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %140 = load i8** %str.addr.i.i, align 8
  %141 = load i8* %140, align 1
  %conv.i.i = sext i8 %141 to i32
  %tobool.i.i18 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i18, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %142 = load i32* %len.i.i, align 4
  %143 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i19 = icmp ult i32 %142, %143
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %144 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i19, %land.rhs.i.i ]
  br i1 %144, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %145 = load i32* %len.i.i, align 4
  %inc.i.i20 = add i32 %145, 1
  store i32 %inc.i.i20, i32* %len.i.i, align 4
  %146 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %146, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %147 = load i32* %len.i.i, align 4
  store i32 %147, i32* %fnamelen.i, align 4
  %148 = load i8** %__function.addr.i15, align 8
  store i8* %148, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %149 = load i8** %str.addr.i68.i, align 8
  %150 = load i8* %149, align 1
  %conv.i71.i = sext i8 %150 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %151 = load i32* %len.i70.i, align 4
  %152 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %151, %152
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %153 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %153, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %154 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %154, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %155 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %155, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %156 = load i32* %len.i70.i, align 4
  store i32 %156, i32* %funclen.i, align 4
  %157 = load i32* %__lineno.addr.i14, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %157, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i12, align 4
  %158 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %158, 0
  br i1 %cmp.i108.i, label %if.then.i.i23, label %if.end.i.i24

if.then.i.i23:                                    ; preds = %__pgi_strlen.exit80.i
  %159 = load i32* %i.i.i12, align 4
  %inc.i109.i = add nsw i32 %159, 1
  store i32 %inc.i109.i, i32* %i.i.i12, align 4
  %idxprom.i.i21 = sext i32 %159 to i64
  %160 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i22 = getelementptr inbounds i8* %160, i64 %idxprom.i.i21
  store i8 48, i8* %arrayidx.i.i22, align 1
  br label %if.end.i.i24

if.end.i.i24:                                     ; preds = %if.then.i.i23, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i24
  %161 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %161, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %162 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %162, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %163 = load i32* %remain.i.i, align 4
  %add.i.i25 = add i32 %163, 48
  %conv.i112.i = trunc i32 %add.i.i25 to i8
  %164 = load i32* %i.i.i12, align 4
  %inc2.i.i = add nsw i32 %164, 1
  store i32 %inc2.i.i, i32* %i.i.i12, align 4
  %idxprom3.i.i = sext i32 %164 to i64
  %165 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %165, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %166 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %166, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %167 = load i32* %i.i.i12, align 4
  %idxprom5.i.i26 = sext i32 %167 to i64
  %168 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i27 = getelementptr inbounds i8* %168, i64 %idxprom5.i.i26
  store i8 0, i8* %arrayidx6.i.i27, align 1
  store i32 0, i32* %start.i.i, align 4
  %169 = load i32* %i.i.i12, align 4
  %sub.i.i = sub nsw i32 %169, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %170 = load i32* %start.i.i, align 4
  %171 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %170, %171
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %172 = load i8** %str.addr.i107.i, align 8
  %173 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %173 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %172, i64 %idx.ext.i.i
  %174 = load i8* %add.ptr.i.i, align 1
  store i8 %174, i8* %tmp.i.i, align 1
  %175 = load i8** %str.addr.i107.i, align 8
  %176 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %176 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %175, i64 %idx.ext11.i.i
  %177 = load i8* %add.ptr12.i.i, align 1
  %178 = load i8** %str.addr.i107.i, align 8
  %179 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %179 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %178, i64 %idx.ext13.i.i
  store i8 %177, i8* %add.ptr14.i.i, align 1
  %180 = load i8* %tmp.i.i, align 1
  %181 = load i8** %str.addr.i107.i, align 8
  %182 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %182 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %181, i64 %idx.ext15.i.i
  store i8 %180, i8* %add.ptr16.i.i, align 1
  %183 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %183, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %184 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %184, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %185 = load i8** %str.addr.i94.i, align 8
  %186 = load i8* %185, align 1
  %conv.i97.i = sext i8 %186 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %187 = load i32* %len.i96.i, align 4
  %188 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %187, %188
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %189 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %189, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %190 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %190, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %191 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %191, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %192 = load i32* %len.i96.i, align 4
  store i32 %192, i32* %linenolen.i, align 4
  %193 = load i8** %errmsg.addr.i, align 8
  store i8* %193, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %194 = load i8** %str.addr.i81.i, align 8
  %195 = load i8* %194, align 1
  %conv.i84.i = sext i8 %195 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %196 = load i32* %len.i83.i, align 4
  %197 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %196, %197
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %198 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %198, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %199 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %199, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %200 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %200, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %201 = load i32* %len.i83.i, align 4
  store i32 %201, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %202 = load i32* %i.i, align 4
  %203 = load i32* %fnamelen.i, align 4
  %cmp.i28 = icmp ult i32 %202, %203
  br i1 %cmp.i28, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %204 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %204 to i64
  %205 = load i8** %__filename.addr.i13, align 8
  %arrayidx.i = getelementptr inbounds i8* %205, i64 %idxprom.i
  %206 = load i8* %arrayidx.i, align 1
  %207 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %207 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %206, i8* %arrayidx6.i, align 1
  %208 = load i32* %i.i, align 4
  %inc.i = add i32 %208, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %209 = load i32* %curr.i, align 4
  %210 = load i32* %i.i, align 4
  %add.i = add i32 %209, %210
  store i32 %add.i, i32* %curr.i, align 4
  %211 = load i32* %curr.i, align 4
  %inc7.i = add i32 %211, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %211 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %212 = load i32* %i.i, align 4
  %213 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %212, %213
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %214 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %214 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %215 = load i8* %arrayidx14.i, align 1
  %216 = load i32* %curr.i, align 4
  %217 = load i32* %i.i, align 4
  %add15.i = add i32 %216, %217
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %215, i8* %arrayidx17.i, align 1
  %218 = load i32* %i.i, align 4
  %inc19.i = add i32 %218, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %219 = load i32* %curr.i, align 4
  %220 = load i32* %i.i, align 4
  %add21.i = add i32 %219, %220
  store i32 %add21.i, i32* %curr.i, align 4
  %221 = load i32* %curr.i, align 4
  %inc22.i = add i32 %221, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %221 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %222 = load i32* %curr.i, align 4
  %inc25.i = add i32 %222, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %222 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %223 = load i32* %curr.i, align 4
  %inc28.i = add i32 %223, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %223 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %224 = load i32* %i.i, align 4
  %225 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %224, %225
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %226 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %226 to i64
  %227 = load i8** %__function.addr.i15, align 8
  %arrayidx35.i = getelementptr inbounds i8* %227, i64 %idxprom34.i
  %228 = load i8* %arrayidx35.i, align 1
  %229 = load i32* %curr.i, align 4
  %230 = load i32* %i.i, align 4
  %add36.i = add i32 %229, %230
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %228, i8* %arrayidx38.i, align 1
  %231 = load i32* %i.i, align 4
  %inc40.i = add i32 %231, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %232 = load i32* %curr.i, align 4
  %233 = load i32* %i.i, align 4
  %add42.i = add i32 %232, %233
  store i32 %add42.i, i32* %curr.i, align 4
  %234 = load i32* %curr.i, align 4
  %inc43.i = add i32 %234, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %234 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %235 = load i32* %curr.i, align 4
  %inc46.i = add i32 %235, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %235 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %236 = load i32* %i.i, align 4
  %237 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %236, %237
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %238 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %238 to i64
  %239 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %239, i64 %idxprom52.i
  %240 = load i8* %arrayidx53.i, align 1
  %241 = load i32* %curr.i, align 4
  %242 = load i32* %i.i, align 4
  %add54.i = add i32 %241, %242
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %240, i8* %arrayidx56.i, align 1
  %243 = load i32* %i.i, align 4
  %inc58.i = add i32 %243, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %244 = load i32* %curr.i, align 4
  %245 = load i32* %i.i, align 4
  %add60.i = add i32 %244, %245
  store i32 %add60.i, i32* %curr.i, align 4
  %246 = load i32* %curr.i, align 4
  %inc61.i = add i32 %246, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %246 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %247 = load i32* %curr.i, align 4
  %inc64.i = add i32 %247, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %247 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i17
  br label %if.end11

if.end11:                                         ; preds = %__pgi_error_msg.exit, %if.end8
  %248 = load i32* %conformable, align 4
  store i32 %248, i32* %retval
  br label %return

return:                                           ; preds = %if.end11, %if.then
  %249 = load i32* %retval
  ret i32 %249
}

define  i32 @pgf90_conformable_33v_i8(i8* %db, i64 %dext0, i64 %sext0, i64 %dext1, i64 %sext1, i64 %dext2, i64 %sext2, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i16 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i17 = alloca i8*, align 8
  %__lineno.addr.i18 = alloca i32, align 4
  %__function.addr.i19 = alloca i8*, align 8
  %__abort.addr.i20 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %dext0.addr = alloca i64, align 8
  %sext0.addr = alloca i64, align 8
  %dext1.addr = alloca i64, align 8
  %sext1.addr = alloca i64, align 8
  %dext2.addr = alloca i64, align 8
  %sext2.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %pb = alloca i8*, align 8
  %sgsize = alloca i64, align 8
  %dgsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i64 %dext0, i64* %dext0.addr, align 8
  store i64 %sext0, i64* %sext0.addr, align 8
  store i64 %dext1, i64* %dext1.addr, align 8
  store i64 %sext1, i64* %sext1.addr, align 8
  store i64 %dext2, i64* %dext2.addr, align 8
  store i64 %sext2, i64* %sext2.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i64 1, i64* %sgsize, align 8
  store i64 1, i64* %dgsize, align 8
  store i32 1, i32* %conformable, align 4
  %1 = load i8** %pb, align 8
  %2 = load i8** %__filename.addr, align 8
  %3 = load i32* %__lineno.addr, align 4
  %4 = load i8** %__function.addr, align 8
  %5 = load i32* %__abort.addr, align 4
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %2, i8** %__filename.addr.i, align 8
  store i32 %3, i32* %__lineno.addr.i, align 4
  store i8* %4, i8** %__function.addr.i, align 8
  store i32 %5, i32* %__abort.addr.i, align 4
  %6 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %7 = load i8** %__filename.addr.i, align 8
  %8 = load i32* %__lineno.addr.i, align 4
  %9 = load i8** %__function.addr.i, align 8
  %10 = load i32* %__abort.addr.i, align 4
  store i8* %7, i8** %__filename.addr.i.i, align 8
  store i32 %8, i32* %__lineno.addr.i.i, align 4
  store i8* %9, i8** %__function.addr.i.i, align 8
  store i32 %10, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %11 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %11, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %12 = load i8** %__filename.addr.i.i, align 8
  store i8* %12, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %13 = load i8** %str.addr.i.i.i, align 8
  %14 = load i8* %13, align 1
  %conv.i.i.i = sext i8 %14 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %15 = load i32* %len.i.i.i, align 4
  %16 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %15, %16
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %17 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %17, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %18 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %18, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %19 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %19, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %20 = load i32* %len.i.i.i, align 4
  store i32 %20, i32* %fnamelen.i.i, align 4
  %21 = load i8** %__function.addr.i.i, align 8
  store i8* %21, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %22 = load i8** %str.addr.i68.i.i, align 8
  %23 = load i8* %22, align 1
  %conv.i71.i.i = sext i8 %23 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %24 = load i32* %len.i70.i.i, align 4
  %25 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %24, %25
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %26 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %26, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %27 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %27, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %28 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %28, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %29 = load i32* %len.i70.i.i, align 4
  store i32 %29, i32* %funclen.i.i, align 4
  %30 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %30, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %31 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %31, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %32 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %32, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %32 to i64
  %33 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %33, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %34 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %34, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %35 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %35, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %36 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %36, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %37 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %37, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %37 to i64
  %38 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %38, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %39 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %39, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %40 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %40 to i64
  %41 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %41, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %42 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %42, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %43 = load i32* %start.i.i.i, align 4
  %44 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %43, %44
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %45 = load i8** %str.addr.i107.i.i, align 8
  %46 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %46 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %45, i64 %idx.ext.i.i.i
  %47 = load i8* %add.ptr.i.i.i, align 1
  store i8 %47, i8* %tmp.i.i.i, align 1
  %48 = load i8** %str.addr.i107.i.i, align 8
  %49 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %49 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %48, i64 %idx.ext11.i.i.i
  %50 = load i8* %add.ptr12.i.i.i, align 1
  %51 = load i8** %str.addr.i107.i.i, align 8
  %52 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %52 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %51, i64 %idx.ext13.i.i.i
  store i8 %50, i8* %add.ptr14.i.i.i, align 1
  %53 = load i8* %tmp.i.i.i, align 1
  %54 = load i8** %str.addr.i107.i.i, align 8
  %55 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %55 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %54, i64 %idx.ext15.i.i.i
  store i8 %53, i8* %add.ptr16.i.i.i, align 1
  %56 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %56, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %57 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %57, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %58 = load i8** %str.addr.i94.i.i, align 8
  %59 = load i8* %58, align 1
  %conv.i97.i.i = sext i8 %59 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %60 = load i32* %len.i96.i.i, align 4
  %61 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %60, %61
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %62 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %62, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %63 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %63, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %64 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %64, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %65 = load i32* %len.i96.i.i, align 4
  store i32 %65, i32* %linenolen.i.i, align 4
  %66 = load i8** %errmsg.addr.i.i, align 8
  store i8* %66, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %67 = load i8** %str.addr.i81.i.i, align 8
  %68 = load i8* %67, align 1
  %conv.i84.i.i = sext i8 %68 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %69 = load i32* %len.i83.i.i, align 4
  %70 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %69, %70
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %71 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %71, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %72 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %72, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %73 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %73, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %74 = load i32* %len.i83.i.i, align 4
  store i32 %74, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %75 = load i32* %i.i.i, align 4
  %76 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %75, %76
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %77 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %77 to i64
  %78 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %78, i64 %idxprom.i.i
  %79 = load i8* %arrayidx.i.i, align 1
  %80 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %80 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %79, i8* %arrayidx6.i.i, align 1
  %81 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %81, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %82 = load i32* %curr.i.i, align 4
  %83 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %82, %83
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %84 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %84, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %84 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %85 = load i32* %i.i.i, align 4
  %86 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %85, %86
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %87 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %87 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %88 = load i8* %arrayidx14.i.i, align 1
  %89 = load i32* %curr.i.i, align 4
  %90 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %89, %90
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %88, i8* %arrayidx17.i.i, align 1
  %91 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %91, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %92 = load i32* %curr.i.i, align 4
  %93 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %92, %93
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %94 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %94, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %94 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %95 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %95, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %95 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %96 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %96, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %96 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %97 = load i32* %i.i.i, align 4
  %98 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %97, %98
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %99 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %99 to i64
  %100 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %100, i64 %idxprom34.i.i
  %101 = load i8* %arrayidx35.i.i, align 1
  %102 = load i32* %curr.i.i, align 4
  %103 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %102, %103
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %101, i8* %arrayidx38.i.i, align 1
  %104 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %104, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %105 = load i32* %curr.i.i, align 4
  %106 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %105, %106
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %107 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %107, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %107 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %108 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %108, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %108 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %109 = load i32* %i.i.i, align 4
  %110 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %109, %110
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %111 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %111 to i64
  %112 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %112, i64 %idxprom52.i.i
  %113 = load i8* %arrayidx53.i.i, align 1
  %114 = load i32* %curr.i.i, align 4
  %115 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %114, %115
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %113, i8* %arrayidx56.i.i, align 1
  %116 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %116, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %117 = load i32* %curr.i.i, align 4
  %118 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %117, %118
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %119 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %119, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %119 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %120 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %120, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %120 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %121 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %121, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  %122 = load i64* %sext0.addr, align 8
  %123 = load i64* %sext1.addr, align 8
  %mul = mul nsw i64 %122, %123
  %124 = load i64* %sext2.addr, align 8
  %mul1 = mul nsw i64 %mul, %124
  store i64 %mul1, i64* %sgsize, align 8
  %125 = load i64* %dext0.addr, align 8
  %126 = load i64* %dext1.addr, align 8
  %mul2 = mul nsw i64 %125, %126
  %127 = load i64* %dext2.addr, align 8
  %mul3 = mul nsw i64 %mul2, %127
  store i64 %mul3, i64* %dgsize, align 8
  %128 = load i64* %dext0.addr, align 8
  %129 = load i64* %sext0.addr, align 8
  %cmp = icmp ne i64 %128, %129
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %130 = load i64* %dext1.addr, align 8
  %131 = load i64* %sext1.addr, align 8
  %cmp4 = icmp ne i64 %130, %131
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %132 = load i64* %dext2.addr, align 8
  %133 = load i64* %sext2.addr, align 8
  %cmp6 = icmp ne i64 %132, %133
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %lor.lhs.false, %if.end
  store i32 -1, i32* %conformable, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %lor.lhs.false5
  %134 = load i32* %conformable, align 4
  %cmp9 = icmp ne i32 %134, 1
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end8
  %135 = load i64* %dgsize, align 8
  %136 = load i64* %sgsize, align 8
  %cmp10 = icmp sge i64 %135, %136
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %137 = load i32* %conformable, align 4
  %cmp13 = icmp slt i32 %137, 0
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end12
  %138 = load i8** %__filename.addr, align 8
  %139 = load i32* %__lineno.addr, align 4
  %140 = load i8** %__function.addr, align 8
  %141 = load i32* %__abort.addr, align 4
  store i8* %138, i8** %__filename.addr.i17, align 8
  store i32 %139, i32* %__lineno.addr.i18, align 4
  store i8* %140, i8** %__function.addr.i19, align 8
  store i32 %141, i32* %__abort.addr.i20, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %142 = load i32* %__abort.addr.i20, align 4
  %tobool.i = icmp ne i32 %142, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i21

if.then.i21:                                      ; preds = %if.then14
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then14
  %143 = load i8** %__filename.addr.i17, align 8
  store i8* %143, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %144 = load i8** %str.addr.i.i, align 8
  %145 = load i8* %144, align 1
  %conv.i.i = sext i8 %145 to i32
  %tobool.i.i22 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i22, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %146 = load i32* %len.i.i, align 4
  %147 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i23 = icmp ult i32 %146, %147
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %148 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i23, %land.rhs.i.i ]
  br i1 %148, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %149 = load i32* %len.i.i, align 4
  %inc.i.i24 = add i32 %149, 1
  store i32 %inc.i.i24, i32* %len.i.i, align 4
  %150 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %150, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %151 = load i32* %len.i.i, align 4
  store i32 %151, i32* %fnamelen.i, align 4
  %152 = load i8** %__function.addr.i19, align 8
  store i8* %152, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %153 = load i8** %str.addr.i68.i, align 8
  %154 = load i8* %153, align 1
  %conv.i71.i = sext i8 %154 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %155 = load i32* %len.i70.i, align 4
  %156 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %155, %156
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %157 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %157, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %158 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %158, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %159 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %159, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %160 = load i32* %len.i70.i, align 4
  store i32 %160, i32* %funclen.i, align 4
  %161 = load i32* %__lineno.addr.i18, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %161, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i16, align 4
  %162 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %162, 0
  br i1 %cmp.i108.i, label %if.then.i.i27, label %if.end.i.i28

if.then.i.i27:                                    ; preds = %__pgi_strlen.exit80.i
  %163 = load i32* %i.i.i16, align 4
  %inc.i109.i = add nsw i32 %163, 1
  store i32 %inc.i109.i, i32* %i.i.i16, align 4
  %idxprom.i.i25 = sext i32 %163 to i64
  %164 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i26 = getelementptr inbounds i8* %164, i64 %idxprom.i.i25
  store i8 48, i8* %arrayidx.i.i26, align 1
  br label %if.end.i.i28

if.end.i.i28:                                     ; preds = %if.then.i.i27, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i28
  %165 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %165, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %166 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %166, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %167 = load i32* %remain.i.i, align 4
  %add.i.i29 = add i32 %167, 48
  %conv.i112.i = trunc i32 %add.i.i29 to i8
  %168 = load i32* %i.i.i16, align 4
  %inc2.i.i = add nsw i32 %168, 1
  store i32 %inc2.i.i, i32* %i.i.i16, align 4
  %idxprom3.i.i = sext i32 %168 to i64
  %169 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %169, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %170 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %170, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %171 = load i32* %i.i.i16, align 4
  %idxprom5.i.i30 = sext i32 %171 to i64
  %172 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i31 = getelementptr inbounds i8* %172, i64 %idxprom5.i.i30
  store i8 0, i8* %arrayidx6.i.i31, align 1
  store i32 0, i32* %start.i.i, align 4
  %173 = load i32* %i.i.i16, align 4
  %sub.i.i = sub nsw i32 %173, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %174 = load i32* %start.i.i, align 4
  %175 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %174, %175
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %176 = load i8** %str.addr.i107.i, align 8
  %177 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %177 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %176, i64 %idx.ext.i.i
  %178 = load i8* %add.ptr.i.i, align 1
  store i8 %178, i8* %tmp.i.i, align 1
  %179 = load i8** %str.addr.i107.i, align 8
  %180 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %180 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %179, i64 %idx.ext11.i.i
  %181 = load i8* %add.ptr12.i.i, align 1
  %182 = load i8** %str.addr.i107.i, align 8
  %183 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %183 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %182, i64 %idx.ext13.i.i
  store i8 %181, i8* %add.ptr14.i.i, align 1
  %184 = load i8* %tmp.i.i, align 1
  %185 = load i8** %str.addr.i107.i, align 8
  %186 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %186 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %185, i64 %idx.ext15.i.i
  store i8 %184, i8* %add.ptr16.i.i, align 1
  %187 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %187, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %188 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %188, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %189 = load i8** %str.addr.i94.i, align 8
  %190 = load i8* %189, align 1
  %conv.i97.i = sext i8 %190 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %191 = load i32* %len.i96.i, align 4
  %192 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %191, %192
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %193 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %193, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %194 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %194, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %195 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %195, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %196 = load i32* %len.i96.i, align 4
  store i32 %196, i32* %linenolen.i, align 4
  %197 = load i8** %errmsg.addr.i, align 8
  store i8* %197, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %198 = load i8** %str.addr.i81.i, align 8
  %199 = load i8* %198, align 1
  %conv.i84.i = sext i8 %199 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %200 = load i32* %len.i83.i, align 4
  %201 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %200, %201
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %202 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %202, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %203 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %203, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %204 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %204, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %205 = load i32* %len.i83.i, align 4
  store i32 %205, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %206 = load i32* %i.i, align 4
  %207 = load i32* %fnamelen.i, align 4
  %cmp.i32 = icmp ult i32 %206, %207
  br i1 %cmp.i32, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %208 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %208 to i64
  %209 = load i8** %__filename.addr.i17, align 8
  %arrayidx.i = getelementptr inbounds i8* %209, i64 %idxprom.i
  %210 = load i8* %arrayidx.i, align 1
  %211 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %211 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %210, i8* %arrayidx6.i, align 1
  %212 = load i32* %i.i, align 4
  %inc.i = add i32 %212, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %213 = load i32* %curr.i, align 4
  %214 = load i32* %i.i, align 4
  %add.i = add i32 %213, %214
  store i32 %add.i, i32* %curr.i, align 4
  %215 = load i32* %curr.i, align 4
  %inc7.i = add i32 %215, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %215 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %216 = load i32* %i.i, align 4
  %217 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %216, %217
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %218 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %218 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %219 = load i8* %arrayidx14.i, align 1
  %220 = load i32* %curr.i, align 4
  %221 = load i32* %i.i, align 4
  %add15.i = add i32 %220, %221
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %219, i8* %arrayidx17.i, align 1
  %222 = load i32* %i.i, align 4
  %inc19.i = add i32 %222, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %223 = load i32* %curr.i, align 4
  %224 = load i32* %i.i, align 4
  %add21.i = add i32 %223, %224
  store i32 %add21.i, i32* %curr.i, align 4
  %225 = load i32* %curr.i, align 4
  %inc22.i = add i32 %225, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %225 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %226 = load i32* %curr.i, align 4
  %inc25.i = add i32 %226, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %226 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %227 = load i32* %curr.i, align 4
  %inc28.i = add i32 %227, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %227 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %228 = load i32* %i.i, align 4
  %229 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %228, %229
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %230 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %230 to i64
  %231 = load i8** %__function.addr.i19, align 8
  %arrayidx35.i = getelementptr inbounds i8* %231, i64 %idxprom34.i
  %232 = load i8* %arrayidx35.i, align 1
  %233 = load i32* %curr.i, align 4
  %234 = load i32* %i.i, align 4
  %add36.i = add i32 %233, %234
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %232, i8* %arrayidx38.i, align 1
  %235 = load i32* %i.i, align 4
  %inc40.i = add i32 %235, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %236 = load i32* %curr.i, align 4
  %237 = load i32* %i.i, align 4
  %add42.i = add i32 %236, %237
  store i32 %add42.i, i32* %curr.i, align 4
  %238 = load i32* %curr.i, align 4
  %inc43.i = add i32 %238, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %238 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %239 = load i32* %curr.i, align 4
  %inc46.i = add i32 %239, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %239 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %240 = load i32* %i.i, align 4
  %241 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %240, %241
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %242 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %242 to i64
  %243 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %243, i64 %idxprom52.i
  %244 = load i8* %arrayidx53.i, align 1
  %245 = load i32* %curr.i, align 4
  %246 = load i32* %i.i, align 4
  %add54.i = add i32 %245, %246
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %244, i8* %arrayidx56.i, align 1
  %247 = load i32* %i.i, align 4
  %inc58.i = add i32 %247, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add60.i = add i32 %248, %249
  store i32 %add60.i, i32* %curr.i, align 4
  %250 = load i32* %curr.i, align 4
  %inc61.i = add i32 %250, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %250 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %251 = load i32* %curr.i, align 4
  %inc64.i = add i32 %251, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %251 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i21
  br label %if.end15

if.end15:                                         ; preds = %__pgi_error_msg.exit, %if.end12
  %252 = load i32* %conformable, align 4
  store i32 %252, i32* %retval
  br label %return

return:                                           ; preds = %if.end15, %if.then
  %253 = load i32* %retval
  ret i32 %253
}

define  i32 @pgf90_conformable_nnv_i8(i8* %db, i64 %ndim, i64 %dext0, i64 %sext0, i64 %dext1, i64 %sext1, i64 %dext2, i64 %sext2, i64 %dext3, i64 %sext3, i64 %dext4, i64 %sext4, i64 %dext5, i64 %sext5, i64 %dext6, i64 %sext6, i8* %__filename, i32 %__lineno, i8* %__function, i32 %__abort) nounwind alwaysinline {
entry:
  %inum.addr.i.i = alloca i32, align 4
  %str.addr.i107.i = alloca i8*, align 8
  %i.i.i37 = alloca i32, align 4
  %start.i.i = alloca i32, align 4
  %end.i.i = alloca i32, align 4
  %tmp.i.i = alloca i8, align 1
  %remain.i.i = alloca i32, align 4
  %str.addr.i94.i = alloca i8*, align 8
  %maxlen.addr.i95.i = alloca i32, align 4
  %len.i96.i = alloca i32, align 4
  %str.addr.i81.i = alloca i8*, align 8
  %maxlen.addr.i82.i = alloca i32, align 4
  %len.i83.i = alloca i32, align 4
  %str.addr.i68.i = alloca i8*, align 8
  %maxlen.addr.i69.i = alloca i32, align 4
  %len.i70.i = alloca i32, align 4
  %str.addr.i.i = alloca i8*, align 8
  %maxlen.addr.i.i = alloca i32, align 4
  %len.i.i = alloca i32, align 4
  %__filename.addr.i38 = alloca i8*, align 8
  %__lineno.addr.i39 = alloca i32, align 4
  %__function.addr.i40 = alloca i8*, align 8
  %__abort.addr.i41 = alloca i32, align 4
  %errmsg.addr.i = alloca i8*, align 8
  %i.i = alloca i32, align 4
  %curr.i = alloca i32, align 4
  %fnamelen.i = alloca i32, align 4
  %funclen.i = alloca i32, align 4
  %linenolen.i = alloca i32, align 4
  %errmsglen.i = alloca i32, align 4
  %inum.addr.i.i.i = alloca i32, align 4
  %str.addr.i107.i.i = alloca i8*, align 8
  %i.i.i.i = alloca i32, align 4
  %start.i.i.i = alloca i32, align 4
  %end.i.i.i = alloca i32, align 4
  %tmp.i.i.i = alloca i8, align 1
  %remain.i.i.i = alloca i32, align 4
  %str.addr.i94.i.i = alloca i8*, align 8
  %maxlen.addr.i95.i.i = alloca i32, align 4
  %len.i96.i.i = alloca i32, align 4
  %str.addr.i81.i.i = alloca i8*, align 8
  %maxlen.addr.i82.i.i = alloca i32, align 4
  %len.i83.i.i = alloca i32, align 4
  %str.addr.i68.i.i = alloca i8*, align 8
  %maxlen.addr.i69.i.i = alloca i32, align 4
  %len.i70.i.i = alloca i32, align 4
  %str.addr.i.i.i = alloca i8*, align 8
  %maxlen.addr.i.i.i = alloca i32, align 4
  %len.i.i.i = alloca i32, align 4
  %__filename.addr.i.i = alloca i8*, align 8
  %__lineno.addr.i.i = alloca i32, align 4
  %__function.addr.i.i = alloca i8*, align 8
  %__abort.addr.i.i = alloca i32, align 4
  %errmsg.addr.i.i = alloca i8*, align 8
  %buf.i.i = alloca [1024 x i8], align 1
  %linenobuf.i.i = alloca [16 x i8], align 1
  %i.i.i = alloca i32, align 4
  %curr.i.i = alloca i32, align 4
  %fnamelen.i.i = alloca i32, align 4
  %funclen.i.i = alloca i32, align 4
  %linenolen.i.i = alloca i32, align 4
  %errmsglen.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %__filename.addr.i = alloca i8*, align 8
  %__lineno.addr.i = alloca i32, align 4
  %__function.addr.i = alloca i8*, align 8
  %__abort.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %db.addr = alloca i8*, align 8
  %ndim.addr = alloca i64, align 8
  %dext0.addr = alloca i64, align 8
  %sext0.addr = alloca i64, align 8
  %dext1.addr = alloca i64, align 8
  %sext1.addr = alloca i64, align 8
  %dext2.addr = alloca i64, align 8
  %sext2.addr = alloca i64, align 8
  %dext3.addr = alloca i64, align 8
  %sext3.addr = alloca i64, align 8
  %dext4.addr = alloca i64, align 8
  %sext4.addr = alloca i64, align 8
  %dext5.addr = alloca i64, align 8
  %sext5.addr = alloca i64, align 8
  %dext6.addr = alloca i64, align 8
  %sext6.addr = alloca i64, align 8
  %__filename.addr = alloca i8*, align 8
  %__lineno.addr = alloca i32, align 4
  %__function.addr = alloca i8*, align 8
  %__abort.addr = alloca i32, align 4
  %sextent = alloca [7 x i64], align 8
  %dextent = alloca [7 x i64], align 8
  %pb = alloca i8*, align 8
  %i = alloca i32, align 4
  %sgsize = alloca i64, align 8
  %dgsize = alloca i64, align 8
  %conformable = alloca i32, align 4
  store i8* %db, i8** %db.addr, align 8
  store i64 %ndim, i64* %ndim.addr, align 8
  store i64 %dext0, i64* %dext0.addr, align 8
  store i64 %sext0, i64* %sext0.addr, align 8
  store i64 %dext1, i64* %dext1.addr, align 8
  store i64 %sext1, i64* %sext1.addr, align 8
  store i64 %dext2, i64* %dext2.addr, align 8
  store i64 %sext2, i64* %sext2.addr, align 8
  store i64 %dext3, i64* %dext3.addr, align 8
  store i64 %sext3, i64* %sext3.addr, align 8
  store i64 %dext4, i64* %dext4.addr, align 8
  store i64 %sext4, i64* %sext4.addr, align 8
  store i64 %dext5, i64* %dext5.addr, align 8
  store i64 %sext5, i64* %sext5.addr, align 8
  store i64 %dext6, i64* %dext6.addr, align 8
  store i64 %sext6, i64* %sext6.addr, align 8
  store i8* %__filename, i8** %__filename.addr, align 8
  store i32 %__lineno, i32* %__lineno.addr, align 4
  store i8* %__function, i8** %__function.addr, align 8
  store i32 %__abort, i32* %__abort.addr, align 4
  %0 = load i8** %db.addr, align 8
  store i8* %0, i8** %pb, align 8
  store i64 1, i64* %sgsize, align 8
  store i64 1, i64* %dgsize, align 8
  store i32 1, i32* %conformable, align 4
  %1 = load i64* %sext0.addr, align 8
  %arrayidx = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 0
  store i64 %1, i64* %arrayidx, align 8
  %2 = load i64* %sext1.addr, align 8
  %arrayidx1 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 1
  store i64 %2, i64* %arrayidx1, align 8
  %3 = load i64* %sext2.addr, align 8
  %arrayidx2 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 2
  store i64 %3, i64* %arrayidx2, align 8
  %4 = load i64* %sext3.addr, align 8
  %arrayidx3 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 3
  store i64 %4, i64* %arrayidx3, align 8
  %5 = load i64* %sext4.addr, align 8
  %arrayidx4 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 4
  store i64 %5, i64* %arrayidx4, align 8
  %6 = load i64* %sext5.addr, align 8
  %arrayidx5 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 5
  store i64 %6, i64* %arrayidx5, align 8
  %7 = load i64* %sext6.addr, align 8
  %arrayidx6 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 6
  store i64 %7, i64* %arrayidx6, align 8
  %8 = load i64* %dext0.addr, align 8
  %arrayidx7 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 0
  store i64 %8, i64* %arrayidx7, align 8
  %9 = load i64* %dext1.addr, align 8
  %arrayidx8 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 1
  store i64 %9, i64* %arrayidx8, align 8
  %10 = load i64* %dext2.addr, align 8
  %arrayidx9 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 2
  store i64 %10, i64* %arrayidx9, align 8
  %11 = load i64* %dext3.addr, align 8
  %arrayidx10 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 3
  store i64 %11, i64* %arrayidx10, align 8
  %12 = load i64* %dext4.addr, align 8
  %arrayidx11 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 4
  store i64 %12, i64* %arrayidx11, align 8
  %13 = load i64* %dext5.addr, align 8
  %arrayidx12 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 5
  store i64 %13, i64* %arrayidx12, align 8
  %14 = load i64* %dext6.addr, align 8
  %arrayidx13 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 6
  store i64 %14, i64* %arrayidx13, align 8
  %15 = load i8** %pb, align 8
  %16 = load i8** %__filename.addr, align 8
  %17 = load i32* %__lineno.addr, align 4
  %18 = load i8** %__function.addr, align 8
  %19 = load i32* %__abort.addr, align 4
  store i8* %15, i8** %p.addr.i, align 8
  store i8* %16, i8** %__filename.addr.i, align 8
  store i32 %17, i32* %__lineno.addr.i, align 4
  store i8* %18, i8** %__function.addr.i, align 8
  store i32 %19, i32* %__abort.addr.i, align 4
  %20 = load i8** %p.addr.i, align 8
  %cmp.i = icmp eq i8* %20, null
  br i1 %cmp.i, label %if.then.i, label %pgf90_allocated.exit

if.then.i:                                        ; preds = %entry
  %21 = load i8** %__filename.addr.i, align 8
  %22 = load i32* %__lineno.addr.i, align 4
  %23 = load i8** %__function.addr.i, align 8
  %24 = load i32* %__abort.addr.i, align 4
  store i8* %21, i8** %__filename.addr.i.i, align 8
  store i32 %22, i32* %__lineno.addr.i.i, align 4
  store i8* %23, i8** %__function.addr.i.i, align 8
  store i32 %24, i32* %__abort.addr.i.i, align 4
  store i8* getelementptr inbounds ([36 x i8]* @.str2, i32 0, i32 0), i8** %errmsg.addr.i.i, align 8
  store i32 0, i32* %curr.i.i, align 4
  %25 = load i32* %__abort.addr.i.i, align 4
  %tobool.i.i = icmp ne i32 %25, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  br label %__pgi_error_msg.exit.i

if.end.i.i:                                       ; preds = %if.then.i
  %26 = load i8** %__filename.addr.i.i, align 8
  store i8* %26, i8** %str.addr.i.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i.i, align 4
  store i32 0, i32* %len.i.i.i, align 4
  br label %while.cond.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i, %if.end.i.i
  %27 = load i8** %str.addr.i.i.i, align 8
  %28 = load i8* %27, align 1
  %conv.i.i.i = sext i8 %28 to i32
  %tobool.i.i.i = icmp ne i32 %conv.i.i.i, 0
  br i1 %tobool.i.i.i, label %land.rhs.i.i.i, label %land.end.i.i.i

land.rhs.i.i.i:                                   ; preds = %while.cond.i.i.i
  %29 = load i32* %len.i.i.i, align 4
  %30 = load i32* %maxlen.addr.i.i.i, align 4
  %cmp.i.i.i = icmp ult i32 %29, %30
  br label %land.end.i.i.i

land.end.i.i.i:                                   ; preds = %land.rhs.i.i.i, %while.cond.i.i.i
  %31 = phi i1 [ false, %while.cond.i.i.i ], [ %cmp.i.i.i, %land.rhs.i.i.i ]
  br i1 %31, label %while.body.i.i.i, label %__pgi_strlen.exit.i.i

while.body.i.i.i:                                 ; preds = %land.end.i.i.i
  %32 = load i32* %len.i.i.i, align 4
  %inc.i.i.i = add i32 %32, 1
  store i32 %inc.i.i.i, i32* %len.i.i.i, align 4
  %33 = load i8** %str.addr.i.i.i, align 8
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %33, i32 1
  store i8* %incdec.ptr.i.i.i, i8** %str.addr.i.i.i, align 8
  br label %while.cond.i.i.i

__pgi_strlen.exit.i.i:                            ; preds = %land.end.i.i.i
  %34 = load i32* %len.i.i.i, align 4
  store i32 %34, i32* %fnamelen.i.i, align 4
  %35 = load i8** %__function.addr.i.i, align 8
  store i8* %35, i8** %str.addr.i68.i.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i.i, align 4
  store i32 0, i32* %len.i70.i.i, align 4
  br label %while.cond.i73.i.i

while.cond.i73.i.i:                               ; preds = %while.body.i79.i.i, %__pgi_strlen.exit.i.i
  %36 = load i8** %str.addr.i68.i.i, align 8
  %37 = load i8* %36, align 1
  %conv.i71.i.i = sext i8 %37 to i32
  %tobool.i72.i.i = icmp ne i32 %conv.i71.i.i, 0
  br i1 %tobool.i72.i.i, label %land.rhs.i75.i.i, label %land.end.i76.i.i

land.rhs.i75.i.i:                                 ; preds = %while.cond.i73.i.i
  %38 = load i32* %len.i70.i.i, align 4
  %39 = load i32* %maxlen.addr.i69.i.i, align 4
  %cmp.i74.i.i = icmp ult i32 %38, %39
  br label %land.end.i76.i.i

land.end.i76.i.i:                                 ; preds = %land.rhs.i75.i.i, %while.cond.i73.i.i
  %40 = phi i1 [ false, %while.cond.i73.i.i ], [ %cmp.i74.i.i, %land.rhs.i75.i.i ]
  br i1 %40, label %while.body.i79.i.i, label %__pgi_strlen.exit80.i.i

while.body.i79.i.i:                               ; preds = %land.end.i76.i.i
  %41 = load i32* %len.i70.i.i, align 4
  %inc.i77.i.i = add i32 %41, 1
  store i32 %inc.i77.i.i, i32* %len.i70.i.i, align 4
  %42 = load i8** %str.addr.i68.i.i, align 8
  %incdec.ptr.i78.i.i = getelementptr inbounds i8* %42, i32 1
  store i8* %incdec.ptr.i78.i.i, i8** %str.addr.i68.i.i, align 8
  br label %while.cond.i73.i.i

__pgi_strlen.exit80.i.i:                          ; preds = %land.end.i76.i.i
  %43 = load i32* %len.i70.i.i, align 4
  store i32 %43, i32* %funclen.i.i, align 4
  %44 = load i32* %__lineno.addr.i.i, align 4
  %arraydecay.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %44, i32* %inum.addr.i.i.i, align 4
  store i8* %arraydecay.i.i, i8** %str.addr.i107.i.i, align 8
  store i32 0, i32* %i.i.i.i, align 4
  %45 = load i32* %inum.addr.i.i.i, align 4
  %cmp.i108.i.i = icmp eq i32 %45, 0
  br i1 %cmp.i108.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %__pgi_strlen.exit80.i.i
  %46 = load i32* %i.i.i.i, align 4
  %inc.i109.i.i = add nsw i32 %46, 1
  store i32 %inc.i109.i.i, i32* %i.i.i.i, align 4
  %idxprom.i.i.i = sext i32 %46 to i64
  %47 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx.i.i.i = getelementptr inbounds i8* %47, i64 %idxprom.i.i.i
  store i8 48, i8* %arrayidx.i.i.i, align 1
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %__pgi_strlen.exit80.i.i
  br label %while.cond.i111.i.i

while.cond.i111.i.i:                              ; preds = %while.body.i113.i.i, %if.end.i.i.i
  %48 = load i32* %inum.addr.i.i.i, align 4
  %tobool.i110.i.i = icmp ne i32 %48, 0
  br i1 %tobool.i110.i.i, label %while.body.i113.i.i, label %while.end.i.i.i

while.body.i113.i.i:                              ; preds = %while.cond.i111.i.i
  %49 = load i32* %inum.addr.i.i.i, align 4
  %rem.i.i.i = urem i32 %49, 10
  store i32 %rem.i.i.i, i32* %remain.i.i.i, align 4
  %50 = load i32* %remain.i.i.i, align 4
  %add.i.i.i = add i32 %50, 48
  %conv.i112.i.i = trunc i32 %add.i.i.i to i8
  %51 = load i32* %i.i.i.i, align 4
  %inc2.i.i.i = add nsw i32 %51, 1
  store i32 %inc2.i.i.i, i32* %i.i.i.i, align 4
  %idxprom3.i.i.i = sext i32 %51 to i64
  %52 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx4.i.i.i = getelementptr inbounds i8* %52, i64 %idxprom3.i.i.i
  store i8 %conv.i112.i.i, i8* %arrayidx4.i.i.i, align 1
  %53 = load i32* %inum.addr.i.i.i, align 4
  %div.i.i.i = udiv i32 %53, 10
  store i32 %div.i.i.i, i32* %inum.addr.i.i.i, align 4
  br label %while.cond.i111.i.i

while.end.i.i.i:                                  ; preds = %while.cond.i111.i.i
  %54 = load i32* %i.i.i.i, align 4
  %idxprom5.i.i.i = sext i32 %54 to i64
  %55 = load i8** %str.addr.i107.i.i, align 8
  %arrayidx6.i.i.i = getelementptr inbounds i8* %55, i64 %idxprom5.i.i.i
  store i8 0, i8* %arrayidx6.i.i.i, align 1
  store i32 0, i32* %start.i.i.i, align 4
  %56 = load i32* %i.i.i.i, align 4
  %sub.i.i.i = sub nsw i32 %56, 1
  store i32 %sub.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

while.cond7.i.i.i:                                ; preds = %while.body10.i.i.i, %while.end.i.i.i
  %57 = load i32* %start.i.i.i, align 4
  %58 = load i32* %end.i.i.i, align 4
  %cmp8.i.i.i = icmp slt i32 %57, %58
  br i1 %cmp8.i.i.i, label %while.body10.i.i.i, label %__pgi_itoa.exit.i.i

while.body10.i.i.i:                               ; preds = %while.cond7.i.i.i
  %59 = load i8** %str.addr.i107.i.i, align 8
  %60 = load i32* %start.i.i.i, align 4
  %idx.ext.i.i.i = sext i32 %60 to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %59, i64 %idx.ext.i.i.i
  %61 = load i8* %add.ptr.i.i.i, align 1
  store i8 %61, i8* %tmp.i.i.i, align 1
  %62 = load i8** %str.addr.i107.i.i, align 8
  %63 = load i32* %end.i.i.i, align 4
  %idx.ext11.i.i.i = sext i32 %63 to i64
  %add.ptr12.i.i.i = getelementptr inbounds i8* %62, i64 %idx.ext11.i.i.i
  %64 = load i8* %add.ptr12.i.i.i, align 1
  %65 = load i8** %str.addr.i107.i.i, align 8
  %66 = load i32* %start.i.i.i, align 4
  %idx.ext13.i.i.i = sext i32 %66 to i64
  %add.ptr14.i.i.i = getelementptr inbounds i8* %65, i64 %idx.ext13.i.i.i
  store i8 %64, i8* %add.ptr14.i.i.i, align 1
  %67 = load i8* %tmp.i.i.i, align 1
  %68 = load i8** %str.addr.i107.i.i, align 8
  %69 = load i32* %end.i.i.i, align 4
  %idx.ext15.i.i.i = sext i32 %69 to i64
  %add.ptr16.i.i.i = getelementptr inbounds i8* %68, i64 %idx.ext15.i.i.i
  store i8 %67, i8* %add.ptr16.i.i.i, align 1
  %70 = load i32* %start.i.i.i, align 4
  %inc17.i.i.i = add nsw i32 %70, 1
  store i32 %inc17.i.i.i, i32* %start.i.i.i, align 4
  %71 = load i32* %end.i.i.i, align 4
  %dec.i.i.i = add nsw i32 %71, -1
  store i32 %dec.i.i.i, i32* %end.i.i.i, align 4
  br label %while.cond7.i.i.i

__pgi_itoa.exit.i.i:                              ; preds = %while.cond7.i.i.i
  %arraydecay2.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i.i, i8** %str.addr.i94.i.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i.i, align 4
  store i32 0, i32* %len.i96.i.i, align 4
  br label %while.cond.i99.i.i

while.cond.i99.i.i:                               ; preds = %while.body.i105.i.i, %__pgi_itoa.exit.i.i
  %72 = load i8** %str.addr.i94.i.i, align 8
  %73 = load i8* %72, align 1
  %conv.i97.i.i = sext i8 %73 to i32
  %tobool.i98.i.i = icmp ne i32 %conv.i97.i.i, 0
  br i1 %tobool.i98.i.i, label %land.rhs.i101.i.i, label %land.end.i102.i.i

land.rhs.i101.i.i:                                ; preds = %while.cond.i99.i.i
  %74 = load i32* %len.i96.i.i, align 4
  %75 = load i32* %maxlen.addr.i95.i.i, align 4
  %cmp.i100.i.i = icmp ult i32 %74, %75
  br label %land.end.i102.i.i

land.end.i102.i.i:                                ; preds = %land.rhs.i101.i.i, %while.cond.i99.i.i
  %76 = phi i1 [ false, %while.cond.i99.i.i ], [ %cmp.i100.i.i, %land.rhs.i101.i.i ]
  br i1 %76, label %while.body.i105.i.i, label %__pgi_strlen.exit106.i.i

while.body.i105.i.i:                              ; preds = %land.end.i102.i.i
  %77 = load i32* %len.i96.i.i, align 4
  %inc.i103.i.i = add i32 %77, 1
  store i32 %inc.i103.i.i, i32* %len.i96.i.i, align 4
  %78 = load i8** %str.addr.i94.i.i, align 8
  %incdec.ptr.i104.i.i = getelementptr inbounds i8* %78, i32 1
  store i8* %incdec.ptr.i104.i.i, i8** %str.addr.i94.i.i, align 8
  br label %while.cond.i99.i.i

__pgi_strlen.exit106.i.i:                         ; preds = %land.end.i102.i.i
  %79 = load i32* %len.i96.i.i, align 4
  store i32 %79, i32* %linenolen.i.i, align 4
  %80 = load i8** %errmsg.addr.i.i, align 8
  store i8* %80, i8** %str.addr.i81.i.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i.i, align 4
  store i32 0, i32* %len.i83.i.i, align 4
  br label %while.cond.i86.i.i

while.cond.i86.i.i:                               ; preds = %while.body.i92.i.i, %__pgi_strlen.exit106.i.i
  %81 = load i8** %str.addr.i81.i.i, align 8
  %82 = load i8* %81, align 1
  %conv.i84.i.i = sext i8 %82 to i32
  %tobool.i85.i.i = icmp ne i32 %conv.i84.i.i, 0
  br i1 %tobool.i85.i.i, label %land.rhs.i88.i.i, label %land.end.i89.i.i

land.rhs.i88.i.i:                                 ; preds = %while.cond.i86.i.i
  %83 = load i32* %len.i83.i.i, align 4
  %84 = load i32* %maxlen.addr.i82.i.i, align 4
  %cmp.i87.i.i = icmp ult i32 %83, %84
  br label %land.end.i89.i.i

land.end.i89.i.i:                                 ; preds = %land.rhs.i88.i.i, %while.cond.i86.i.i
  %85 = phi i1 [ false, %while.cond.i86.i.i ], [ %cmp.i87.i.i, %land.rhs.i88.i.i ]
  br i1 %85, label %while.body.i92.i.i, label %__pgi_strlen.exit93.i.i

while.body.i92.i.i:                               ; preds = %land.end.i89.i.i
  %86 = load i32* %len.i83.i.i, align 4
  %inc.i90.i.i = add i32 %86, 1
  store i32 %inc.i90.i.i, i32* %len.i83.i.i, align 4
  %87 = load i8** %str.addr.i81.i.i, align 8
  %incdec.ptr.i91.i.i = getelementptr inbounds i8* %87, i32 1
  store i8* %incdec.ptr.i91.i.i, i8** %str.addr.i81.i.i, align 8
  br label %while.cond.i86.i.i

__pgi_strlen.exit93.i.i:                          ; preds = %land.end.i89.i.i
  %88 = load i32* %len.i83.i.i, align 4
  store i32 %88, i32* %errmsglen.i.i, align 4
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.cond.i.i:                                     ; preds = %for.body.i.i, %__pgi_strlen.exit93.i.i
  %89 = load i32* %i.i.i, align 4
  %90 = load i32* %fnamelen.i.i, align 4
  %cmp.i.i = icmp ult i32 %89, %90
  br i1 %cmp.i.i, label %for.body.i.i, label %for.end.i.i

for.body.i.i:                                     ; preds = %for.cond.i.i
  %91 = load i32* %i.i.i, align 4
  %idxprom.i.i = zext i32 %91 to i64
  %92 = load i8** %__filename.addr.i.i, align 8
  %arrayidx.i.i = getelementptr inbounds i8* %92, i64 %idxprom.i.i
  %93 = load i8* %arrayidx.i.i, align 1
  %94 = load i32* %i.i.i, align 4
  %idxprom5.i.i = zext i32 %94 to i64
  %arrayidx6.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i.i
  store i8 %93, i8* %arrayidx6.i.i, align 1
  %95 = load i32* %i.i.i, align 4
  %inc.i.i = add i32 %95, 1
  store i32 %inc.i.i, i32* %i.i.i, align 4
  br label %for.cond.i.i

for.end.i.i:                                      ; preds = %for.cond.i.i
  %96 = load i32* %curr.i.i, align 4
  %97 = load i32* %i.i.i, align 4
  %add.i.i = add i32 %96, %97
  store i32 %add.i.i, i32* %curr.i.i, align 4
  %98 = load i32* %curr.i.i, align 4
  %inc7.i.i = add i32 %98, 1
  store i32 %inc7.i.i, i32* %curr.i.i, align 4
  %idxprom8.i.i = zext i32 %98 to i64
  %arrayidx9.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i.i
  store i8 58, i8* %arrayidx9.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.cond10.i.i:                                   ; preds = %for.body12.i.i, %for.end.i.i
  %99 = load i32* %i.i.i, align 4
  %100 = load i32* %linenolen.i.i, align 4
  %cmp11.i.i = icmp ult i32 %99, %100
  br i1 %cmp11.i.i, label %for.body12.i.i, label %for.end20.i.i

for.body12.i.i:                                   ; preds = %for.cond10.i.i
  %101 = load i32* %i.i.i, align 4
  %idxprom13.i.i = zext i32 %101 to i64
  %arrayidx14.i.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i.i
  %102 = load i8* %arrayidx14.i.i, align 1
  %103 = load i32* %curr.i.i, align 4
  %104 = load i32* %i.i.i, align 4
  %add15.i.i = add i32 %103, %104
  %idxprom16.i.i = zext i32 %add15.i.i to i64
  %arrayidx17.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i.i
  store i8 %102, i8* %arrayidx17.i.i, align 1
  %105 = load i32* %i.i.i, align 4
  %inc19.i.i = add i32 %105, 1
  store i32 %inc19.i.i, i32* %i.i.i, align 4
  br label %for.cond10.i.i

for.end20.i.i:                                    ; preds = %for.cond10.i.i
  %106 = load i32* %curr.i.i, align 4
  %107 = load i32* %i.i.i, align 4
  %add21.i.i = add i32 %106, %107
  store i32 %add21.i.i, i32* %curr.i.i, align 4
  %108 = load i32* %curr.i.i, align 4
  %inc22.i.i = add i32 %108, 1
  store i32 %inc22.i.i, i32* %curr.i.i, align 4
  %idxprom23.i.i = zext i32 %108 to i64
  %arrayidx24.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i.i
  store i8 32, i8* %arrayidx24.i.i, align 1
  %109 = load i32* %curr.i.i, align 4
  %inc25.i.i = add i32 %109, 1
  store i32 %inc25.i.i, i32* %curr.i.i, align 4
  %idxprom26.i.i = zext i32 %109 to i64
  %arrayidx27.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i.i
  store i8 45, i8* %arrayidx27.i.i, align 1
  %110 = load i32* %curr.i.i, align 4
  %inc28.i.i = add i32 %110, 1
  store i32 %inc28.i.i, i32* %curr.i.i, align 4
  %idxprom29.i.i = zext i32 %110 to i64
  %arrayidx30.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i.i
  store i8 32, i8* %arrayidx30.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.cond31.i.i:                                   ; preds = %for.body33.i.i, %for.end20.i.i
  %111 = load i32* %i.i.i, align 4
  %112 = load i32* %funclen.i.i, align 4
  %cmp32.i.i = icmp ult i32 %111, %112
  br i1 %cmp32.i.i, label %for.body33.i.i, label %for.end41.i.i

for.body33.i.i:                                   ; preds = %for.cond31.i.i
  %113 = load i32* %i.i.i, align 4
  %idxprom34.i.i = zext i32 %113 to i64
  %114 = load i8** %__function.addr.i.i, align 8
  %arrayidx35.i.i = getelementptr inbounds i8* %114, i64 %idxprom34.i.i
  %115 = load i8* %arrayidx35.i.i, align 1
  %116 = load i32* %curr.i.i, align 4
  %117 = load i32* %i.i.i, align 4
  %add36.i.i = add i32 %116, %117
  %idxprom37.i.i = zext i32 %add36.i.i to i64
  %arrayidx38.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i.i
  store i8 %115, i8* %arrayidx38.i.i, align 1
  %118 = load i32* %i.i.i, align 4
  %inc40.i.i = add i32 %118, 1
  store i32 %inc40.i.i, i32* %i.i.i, align 4
  br label %for.cond31.i.i

for.end41.i.i:                                    ; preds = %for.cond31.i.i
  %119 = load i32* %curr.i.i, align 4
  %120 = load i32* %i.i.i, align 4
  %add42.i.i = add i32 %119, %120
  store i32 %add42.i.i, i32* %curr.i.i, align 4
  %121 = load i32* %curr.i.i, align 4
  %inc43.i.i = add i32 %121, 1
  store i32 %inc43.i.i, i32* %curr.i.i, align 4
  %idxprom44.i.i = zext i32 %121 to i64
  %arrayidx45.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i.i
  store i8 58, i8* %arrayidx45.i.i, align 1
  %122 = load i32* %curr.i.i, align 4
  %inc46.i.i = add i32 %122, 1
  store i32 %inc46.i.i, i32* %curr.i.i, align 4
  %idxprom47.i.i = zext i32 %122 to i64
  %arrayidx48.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i.i
  store i8 32, i8* %arrayidx48.i.i, align 1
  store i32 0, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.cond49.i.i:                                   ; preds = %for.body51.i.i, %for.end41.i.i
  %123 = load i32* %i.i.i, align 4
  %124 = load i32* %errmsglen.i.i, align 4
  %cmp50.i.i = icmp ult i32 %123, %124
  br i1 %cmp50.i.i, label %for.body51.i.i, label %for.end59.i.i

for.body51.i.i:                                   ; preds = %for.cond49.i.i
  %125 = load i32* %i.i.i, align 4
  %idxprom52.i.i = zext i32 %125 to i64
  %126 = load i8** %errmsg.addr.i.i, align 8
  %arrayidx53.i.i = getelementptr inbounds i8* %126, i64 %idxprom52.i.i
  %127 = load i8* %arrayidx53.i.i, align 1
  %128 = load i32* %curr.i.i, align 4
  %129 = load i32* %i.i.i, align 4
  %add54.i.i = add i32 %128, %129
  %idxprom55.i.i = zext i32 %add54.i.i to i64
  %arrayidx56.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i.i
  store i8 %127, i8* %arrayidx56.i.i, align 1
  %130 = load i32* %i.i.i, align 4
  %inc58.i.i = add i32 %130, 1
  store i32 %inc58.i.i, i32* %i.i.i, align 4
  br label %for.cond49.i.i

for.end59.i.i:                                    ; preds = %for.cond49.i.i
  %131 = load i32* %curr.i.i, align 4
  %132 = load i32* %i.i.i, align 4
  %add60.i.i = add i32 %131, %132
  store i32 %add60.i.i, i32* %curr.i.i, align 4
  %133 = load i32* %curr.i.i, align 4
  %inc61.i.i = add i32 %133, 1
  store i32 %inc61.i.i, i32* %curr.i.i, align 4
  %idxprom62.i.i = zext i32 %133 to i64
  %arrayidx63.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i.i
  store i8 10, i8* %arrayidx63.i.i, align 1
  %134 = load i32* %curr.i.i, align 4
  %inc64.i.i = add i32 %134, 1
  store i32 %inc64.i.i, i32* %curr.i.i, align 4
  %idxprom65.i.i = zext i32 %134 to i64
  %arrayidx66.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i.i
  store i8 0, i8* %arrayidx66.i.i, align 1
  %arraydecay67.i.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit.i

__pgi_error_msg.exit.i:                           ; preds = %for.end59.i.i, %if.then.i.i
  br label %pgf90_allocated.exit

pgf90_allocated.exit:                             ; preds = %__pgi_error_msg.exit.i, %entry
  %135 = load i8** %p.addr.i, align 8
  %cmp1.i = icmp ne i8* %135, null
  %conv.i = zext i1 %cmp1.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %pgf90_allocated.exit
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %pgf90_allocated.exit
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %136 = load i32* %i, align 4
  %conv = sext i32 %136 to i64
  %137 = load i64* %ndim.addr, align 8
  %cmp = icmp slt i64 %conv, %137
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %138 = load i32* %i, align 4
  %idxprom = sext i32 %138 to i64
  %arrayidx15 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 %idxprom
  %139 = load i64* %arrayidx15, align 8
  %140 = load i64* %sgsize, align 8
  %mul = mul nsw i64 %140, %139
  store i64 %mul, i64* %sgsize, align 8
  %141 = load i32* %i, align 4
  %idxprom16 = sext i32 %141 to i64
  %arrayidx17 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 %idxprom16
  %142 = load i64* %arrayidx17, align 8
  %143 = load i64* %dgsize, align 8
  %mul18 = mul nsw i64 %143, %142
  store i64 %mul18, i64* %dgsize, align 8
  %144 = load i32* %i, align 4
  %idxprom19 = sext i32 %144 to i64
  %arrayidx20 = getelementptr inbounds [7 x i64]* %sextent, i32 0, i64 %idxprom19
  %145 = load i64* %arrayidx20, align 8
  %146 = load i32* %i, align 4
  %idxprom21 = sext i32 %146 to i64
  %arrayidx22 = getelementptr inbounds [7 x i64]* %dextent, i32 0, i64 %idxprom21
  %147 = load i64* %arrayidx22, align 8
  %cmp23 = icmp ne i64 %145, %147
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %for.body
  store i32 -1, i32* %conformable, align 4
  br label %for.end

if.end26:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end26
  %148 = load i32* %i, align 4
  %inc = add nsw i32 %148, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then25, %for.cond
  %149 = load i32* %conformable, align 4
  %cmp27 = icmp ne i32 %149, 1
  br i1 %cmp27, label %land.lhs.true, label %if.end32

land.lhs.true:                                    ; preds = %for.end
  %150 = load i64* %dgsize, align 8
  %151 = load i64* %sgsize, align 8
  %cmp29 = icmp sge i64 %150, %151
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %land.lhs.true
  store i32 0, i32* %conformable, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %land.lhs.true, %for.end
  %152 = load i32* %conformable, align 4
  %cmp33 = icmp slt i32 %152, 0
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end32
  %153 = load i8** %__filename.addr, align 8
  %154 = load i32* %__lineno.addr, align 4
  %155 = load i8** %__function.addr, align 8
  %156 = load i32* %__abort.addr, align 4
  store i8* %153, i8** %__filename.addr.i38, align 8
  store i32 %154, i32* %__lineno.addr.i39, align 4
  store i8* %155, i8** %__function.addr.i40, align 8
  store i32 %156, i32* %__abort.addr.i41, align 4
  store i8* getelementptr inbounds ([38 x i8]* @.str6, i32 0, i32 0), i8** %errmsg.addr.i, align 8
  store i32 0, i32* %curr.i, align 4
  %157 = load i32* %__abort.addr.i41, align 4
  %tobool.i = icmp ne i32 %157, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i42

if.then.i42:                                      ; preds = %if.then35
  br label %__pgi_error_msg.exit

if.end.i:                                         ; preds = %if.then35
  %158 = load i8** %__filename.addr.i38, align 8
  store i8* %158, i8** %str.addr.i.i, align 8
  store i32 256, i32* %maxlen.addr.i.i, align 4
  store i32 0, i32* %len.i.i, align 4
  br label %while.cond.i.i

while.cond.i.i:                                   ; preds = %while.body.i.i, %if.end.i
  %159 = load i8** %str.addr.i.i, align 8
  %160 = load i8* %159, align 1
  %conv.i.i = sext i8 %160 to i32
  %tobool.i.i43 = icmp ne i32 %conv.i.i, 0
  br i1 %tobool.i.i43, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %while.cond.i.i
  %161 = load i32* %len.i.i, align 4
  %162 = load i32* %maxlen.addr.i.i, align 4
  %cmp.i.i44 = icmp ult i32 %161, %162
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %while.cond.i.i
  %163 = phi i1 [ false, %while.cond.i.i ], [ %cmp.i.i44, %land.rhs.i.i ]
  br i1 %163, label %while.body.i.i, label %__pgi_strlen.exit.i

while.body.i.i:                                   ; preds = %land.end.i.i
  %164 = load i32* %len.i.i, align 4
  %inc.i.i45 = add i32 %164, 1
  store i32 %inc.i.i45, i32* %len.i.i, align 4
  %165 = load i8** %str.addr.i.i, align 8
  %incdec.ptr.i.i = getelementptr inbounds i8* %165, i32 1
  store i8* %incdec.ptr.i.i, i8** %str.addr.i.i, align 8
  br label %while.cond.i.i

__pgi_strlen.exit.i:                              ; preds = %land.end.i.i
  %166 = load i32* %len.i.i, align 4
  store i32 %166, i32* %fnamelen.i, align 4
  %167 = load i8** %__function.addr.i40, align 8
  store i8* %167, i8** %str.addr.i68.i, align 8
  store i32 256, i32* %maxlen.addr.i69.i, align 4
  store i32 0, i32* %len.i70.i, align 4
  br label %while.cond.i73.i

while.cond.i73.i:                                 ; preds = %while.body.i79.i, %__pgi_strlen.exit.i
  %168 = load i8** %str.addr.i68.i, align 8
  %169 = load i8* %168, align 1
  %conv.i71.i = sext i8 %169 to i32
  %tobool.i72.i = icmp ne i32 %conv.i71.i, 0
  br i1 %tobool.i72.i, label %land.rhs.i75.i, label %land.end.i76.i

land.rhs.i75.i:                                   ; preds = %while.cond.i73.i
  %170 = load i32* %len.i70.i, align 4
  %171 = load i32* %maxlen.addr.i69.i, align 4
  %cmp.i74.i = icmp ult i32 %170, %171
  br label %land.end.i76.i

land.end.i76.i:                                   ; preds = %land.rhs.i75.i, %while.cond.i73.i
  %172 = phi i1 [ false, %while.cond.i73.i ], [ %cmp.i74.i, %land.rhs.i75.i ]
  br i1 %172, label %while.body.i79.i, label %__pgi_strlen.exit80.i

while.body.i79.i:                                 ; preds = %land.end.i76.i
  %173 = load i32* %len.i70.i, align 4
  %inc.i77.i = add i32 %173, 1
  store i32 %inc.i77.i, i32* %len.i70.i, align 4
  %174 = load i8** %str.addr.i68.i, align 8
  %incdec.ptr.i78.i = getelementptr inbounds i8* %174, i32 1
  store i8* %incdec.ptr.i78.i, i8** %str.addr.i68.i, align 8
  br label %while.cond.i73.i

__pgi_strlen.exit80.i:                            ; preds = %land.end.i76.i
  %175 = load i32* %len.i70.i, align 4
  store i32 %175, i32* %funclen.i, align 4
  %176 = load i32* %__lineno.addr.i39, align 4
  %arraydecay.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i32 %176, i32* %inum.addr.i.i, align 4
  store i8* %arraydecay.i, i8** %str.addr.i107.i, align 8
  store i32 0, i32* %i.i.i37, align 4
  %177 = load i32* %inum.addr.i.i, align 4
  %cmp.i108.i = icmp eq i32 %177, 0
  br i1 %cmp.i108.i, label %if.then.i.i48, label %if.end.i.i49

if.then.i.i48:                                    ; preds = %__pgi_strlen.exit80.i
  %178 = load i32* %i.i.i37, align 4
  %inc.i109.i = add nsw i32 %178, 1
  store i32 %inc.i109.i, i32* %i.i.i37, align 4
  %idxprom.i.i46 = sext i32 %178 to i64
  %179 = load i8** %str.addr.i107.i, align 8
  %arrayidx.i.i47 = getelementptr inbounds i8* %179, i64 %idxprom.i.i46
  store i8 48, i8* %arrayidx.i.i47, align 1
  br label %if.end.i.i49

if.end.i.i49:                                     ; preds = %if.then.i.i48, %__pgi_strlen.exit80.i
  br label %while.cond.i111.i

while.cond.i111.i:                                ; preds = %while.body.i113.i, %if.end.i.i49
  %180 = load i32* %inum.addr.i.i, align 4
  %tobool.i110.i = icmp ne i32 %180, 0
  br i1 %tobool.i110.i, label %while.body.i113.i, label %while.end.i.i

while.body.i113.i:                                ; preds = %while.cond.i111.i
  %181 = load i32* %inum.addr.i.i, align 4
  %rem.i.i = urem i32 %181, 10
  store i32 %rem.i.i, i32* %remain.i.i, align 4
  %182 = load i32* %remain.i.i, align 4
  %add.i.i50 = add i32 %182, 48
  %conv.i112.i = trunc i32 %add.i.i50 to i8
  %183 = load i32* %i.i.i37, align 4
  %inc2.i.i = add nsw i32 %183, 1
  store i32 %inc2.i.i, i32* %i.i.i37, align 4
  %idxprom3.i.i = sext i32 %183 to i64
  %184 = load i8** %str.addr.i107.i, align 8
  %arrayidx4.i.i = getelementptr inbounds i8* %184, i64 %idxprom3.i.i
  store i8 %conv.i112.i, i8* %arrayidx4.i.i, align 1
  %185 = load i32* %inum.addr.i.i, align 4
  %div.i.i = udiv i32 %185, 10
  store i32 %div.i.i, i32* %inum.addr.i.i, align 4
  br label %while.cond.i111.i

while.end.i.i:                                    ; preds = %while.cond.i111.i
  %186 = load i32* %i.i.i37, align 4
  %idxprom5.i.i51 = sext i32 %186 to i64
  %187 = load i8** %str.addr.i107.i, align 8
  %arrayidx6.i.i52 = getelementptr inbounds i8* %187, i64 %idxprom5.i.i51
  store i8 0, i8* %arrayidx6.i.i52, align 1
  store i32 0, i32* %start.i.i, align 4
  %188 = load i32* %i.i.i37, align 4
  %sub.i.i = sub nsw i32 %188, 1
  store i32 %sub.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

while.cond7.i.i:                                  ; preds = %while.body10.i.i, %while.end.i.i
  %189 = load i32* %start.i.i, align 4
  %190 = load i32* %end.i.i, align 4
  %cmp8.i.i = icmp slt i32 %189, %190
  br i1 %cmp8.i.i, label %while.body10.i.i, label %__pgi_itoa.exit.i

while.body10.i.i:                                 ; preds = %while.cond7.i.i
  %191 = load i8** %str.addr.i107.i, align 8
  %192 = load i32* %start.i.i, align 4
  %idx.ext.i.i = sext i32 %192 to i64
  %add.ptr.i.i = getelementptr inbounds i8* %191, i64 %idx.ext.i.i
  %193 = load i8* %add.ptr.i.i, align 1
  store i8 %193, i8* %tmp.i.i, align 1
  %194 = load i8** %str.addr.i107.i, align 8
  %195 = load i32* %end.i.i, align 4
  %idx.ext11.i.i = sext i32 %195 to i64
  %add.ptr12.i.i = getelementptr inbounds i8* %194, i64 %idx.ext11.i.i
  %196 = load i8* %add.ptr12.i.i, align 1
  %197 = load i8** %str.addr.i107.i, align 8
  %198 = load i32* %start.i.i, align 4
  %idx.ext13.i.i = sext i32 %198 to i64
  %add.ptr14.i.i = getelementptr inbounds i8* %197, i64 %idx.ext13.i.i
  store i8 %196, i8* %add.ptr14.i.i, align 1
  %199 = load i8* %tmp.i.i, align 1
  %200 = load i8** %str.addr.i107.i, align 8
  %201 = load i32* %end.i.i, align 4
  %idx.ext15.i.i = sext i32 %201 to i64
  %add.ptr16.i.i = getelementptr inbounds i8* %200, i64 %idx.ext15.i.i
  store i8 %199, i8* %add.ptr16.i.i, align 1
  %202 = load i32* %start.i.i, align 4
  %inc17.i.i = add nsw i32 %202, 1
  store i32 %inc17.i.i, i32* %start.i.i, align 4
  %203 = load i32* %end.i.i, align 4
  %dec.i.i = add nsw i32 %203, -1
  store i32 %dec.i.i, i32* %end.i.i, align 4
  br label %while.cond7.i.i

__pgi_itoa.exit.i:                                ; preds = %while.cond7.i.i
  %arraydecay2.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i32 0
  store i8* %arraydecay2.i, i8** %str.addr.i94.i, align 8
  store i32 16, i32* %maxlen.addr.i95.i, align 4
  store i32 0, i32* %len.i96.i, align 4
  br label %while.cond.i99.i

while.cond.i99.i:                                 ; preds = %while.body.i105.i, %__pgi_itoa.exit.i
  %204 = load i8** %str.addr.i94.i, align 8
  %205 = load i8* %204, align 1
  %conv.i97.i = sext i8 %205 to i32
  %tobool.i98.i = icmp ne i32 %conv.i97.i, 0
  br i1 %tobool.i98.i, label %land.rhs.i101.i, label %land.end.i102.i

land.rhs.i101.i:                                  ; preds = %while.cond.i99.i
  %206 = load i32* %len.i96.i, align 4
  %207 = load i32* %maxlen.addr.i95.i, align 4
  %cmp.i100.i = icmp ult i32 %206, %207
  br label %land.end.i102.i

land.end.i102.i:                                  ; preds = %land.rhs.i101.i, %while.cond.i99.i
  %208 = phi i1 [ false, %while.cond.i99.i ], [ %cmp.i100.i, %land.rhs.i101.i ]
  br i1 %208, label %while.body.i105.i, label %__pgi_strlen.exit106.i

while.body.i105.i:                                ; preds = %land.end.i102.i
  %209 = load i32* %len.i96.i, align 4
  %inc.i103.i = add i32 %209, 1
  store i32 %inc.i103.i, i32* %len.i96.i, align 4
  %210 = load i8** %str.addr.i94.i, align 8
  %incdec.ptr.i104.i = getelementptr inbounds i8* %210, i32 1
  store i8* %incdec.ptr.i104.i, i8** %str.addr.i94.i, align 8
  br label %while.cond.i99.i

__pgi_strlen.exit106.i:                           ; preds = %land.end.i102.i
  %211 = load i32* %len.i96.i, align 4
  store i32 %211, i32* %linenolen.i, align 4
  %212 = load i8** %errmsg.addr.i, align 8
  store i8* %212, i8** %str.addr.i81.i, align 8
  store i32 256, i32* %maxlen.addr.i82.i, align 4
  store i32 0, i32* %len.i83.i, align 4
  br label %while.cond.i86.i

while.cond.i86.i:                                 ; preds = %while.body.i92.i, %__pgi_strlen.exit106.i
  %213 = load i8** %str.addr.i81.i, align 8
  %214 = load i8* %213, align 1
  %conv.i84.i = sext i8 %214 to i32
  %tobool.i85.i = icmp ne i32 %conv.i84.i, 0
  br i1 %tobool.i85.i, label %land.rhs.i88.i, label %land.end.i89.i

land.rhs.i88.i:                                   ; preds = %while.cond.i86.i
  %215 = load i32* %len.i83.i, align 4
  %216 = load i32* %maxlen.addr.i82.i, align 4
  %cmp.i87.i = icmp ult i32 %215, %216
  br label %land.end.i89.i

land.end.i89.i:                                   ; preds = %land.rhs.i88.i, %while.cond.i86.i
  %217 = phi i1 [ false, %while.cond.i86.i ], [ %cmp.i87.i, %land.rhs.i88.i ]
  br i1 %217, label %while.body.i92.i, label %__pgi_strlen.exit93.i

while.body.i92.i:                                 ; preds = %land.end.i89.i
  %218 = load i32* %len.i83.i, align 4
  %inc.i90.i = add i32 %218, 1
  store i32 %inc.i90.i, i32* %len.i83.i, align 4
  %219 = load i8** %str.addr.i81.i, align 8
  %incdec.ptr.i91.i = getelementptr inbounds i8* %219, i32 1
  store i8* %incdec.ptr.i91.i, i8** %str.addr.i81.i, align 8
  br label %while.cond.i86.i

__pgi_strlen.exit93.i:                            ; preds = %land.end.i89.i
  %220 = load i32* %len.i83.i, align 4
  store i32 %220, i32* %errmsglen.i, align 4
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %__pgi_strlen.exit93.i
  %221 = load i32* %i.i, align 4
  %222 = load i32* %fnamelen.i, align 4
  %cmp.i53 = icmp ult i32 %221, %222
  br i1 %cmp.i53, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %223 = load i32* %i.i, align 4
  %idxprom.i = zext i32 %223 to i64
  %224 = load i8** %__filename.addr.i38, align 8
  %arrayidx.i = getelementptr inbounds i8* %224, i64 %idxprom.i
  %225 = load i8* %arrayidx.i, align 1
  %226 = load i32* %i.i, align 4
  %idxprom5.i = zext i32 %226 to i64
  %arrayidx6.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom5.i
  store i8 %225, i8* %arrayidx6.i, align 1
  %227 = load i32* %i.i, align 4
  %inc.i = add i32 %227, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %228 = load i32* %curr.i, align 4
  %229 = load i32* %i.i, align 4
  %add.i = add i32 %228, %229
  store i32 %add.i, i32* %curr.i, align 4
  %230 = load i32* %curr.i, align 4
  %inc7.i = add i32 %230, 1
  store i32 %inc7.i, i32* %curr.i, align 4
  %idxprom8.i = zext i32 %230 to i64
  %arrayidx9.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom8.i
  store i8 58, i8* %arrayidx9.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %for.body12.i, %for.end.i
  %231 = load i32* %i.i, align 4
  %232 = load i32* %linenolen.i, align 4
  %cmp11.i = icmp ult i32 %231, %232
  br i1 %cmp11.i, label %for.body12.i, label %for.end20.i

for.body12.i:                                     ; preds = %for.cond10.i
  %233 = load i32* %i.i, align 4
  %idxprom13.i = zext i32 %233 to i64
  %arrayidx14.i = getelementptr inbounds [16 x i8]* %linenobuf.i.i, i32 0, i64 %idxprom13.i
  %234 = load i8* %arrayidx14.i, align 1
  %235 = load i32* %curr.i, align 4
  %236 = load i32* %i.i, align 4
  %add15.i = add i32 %235, %236
  %idxprom16.i = zext i32 %add15.i to i64
  %arrayidx17.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom16.i
  store i8 %234, i8* %arrayidx17.i, align 1
  %237 = load i32* %i.i, align 4
  %inc19.i = add i32 %237, 1
  store i32 %inc19.i, i32* %i.i, align 4
  br label %for.cond10.i

for.end20.i:                                      ; preds = %for.cond10.i
  %238 = load i32* %curr.i, align 4
  %239 = load i32* %i.i, align 4
  %add21.i = add i32 %238, %239
  store i32 %add21.i, i32* %curr.i, align 4
  %240 = load i32* %curr.i, align 4
  %inc22.i = add i32 %240, 1
  store i32 %inc22.i, i32* %curr.i, align 4
  %idxprom23.i = zext i32 %240 to i64
  %arrayidx24.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom23.i
  store i8 32, i8* %arrayidx24.i, align 1
  %241 = load i32* %curr.i, align 4
  %inc25.i = add i32 %241, 1
  store i32 %inc25.i, i32* %curr.i, align 4
  %idxprom26.i = zext i32 %241 to i64
  %arrayidx27.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom26.i
  store i8 45, i8* %arrayidx27.i, align 1
  %242 = load i32* %curr.i, align 4
  %inc28.i = add i32 %242, 1
  store i32 %inc28.i, i32* %curr.i, align 4
  %idxprom29.i = zext i32 %242 to i64
  %arrayidx30.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom29.i
  store i8 32, i8* %arrayidx30.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond31.i

for.cond31.i:                                     ; preds = %for.body33.i, %for.end20.i
  %243 = load i32* %i.i, align 4
  %244 = load i32* %funclen.i, align 4
  %cmp32.i = icmp ult i32 %243, %244
  br i1 %cmp32.i, label %for.body33.i, label %for.end41.i

for.body33.i:                                     ; preds = %for.cond31.i
  %245 = load i32* %i.i, align 4
  %idxprom34.i = zext i32 %245 to i64
  %246 = load i8** %__function.addr.i40, align 8
  %arrayidx35.i = getelementptr inbounds i8* %246, i64 %idxprom34.i
  %247 = load i8* %arrayidx35.i, align 1
  %248 = load i32* %curr.i, align 4
  %249 = load i32* %i.i, align 4
  %add36.i = add i32 %248, %249
  %idxprom37.i = zext i32 %add36.i to i64
  %arrayidx38.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom37.i
  store i8 %247, i8* %arrayidx38.i, align 1
  %250 = load i32* %i.i, align 4
  %inc40.i = add i32 %250, 1
  store i32 %inc40.i, i32* %i.i, align 4
  br label %for.cond31.i

for.end41.i:                                      ; preds = %for.cond31.i
  %251 = load i32* %curr.i, align 4
  %252 = load i32* %i.i, align 4
  %add42.i = add i32 %251, %252
  store i32 %add42.i, i32* %curr.i, align 4
  %253 = load i32* %curr.i, align 4
  %inc43.i = add i32 %253, 1
  store i32 %inc43.i, i32* %curr.i, align 4
  %idxprom44.i = zext i32 %253 to i64
  %arrayidx45.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom44.i
  store i8 58, i8* %arrayidx45.i, align 1
  %254 = load i32* %curr.i, align 4
  %inc46.i = add i32 %254, 1
  store i32 %inc46.i, i32* %curr.i, align 4
  %idxprom47.i = zext i32 %254 to i64
  %arrayidx48.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom47.i
  store i8 32, i8* %arrayidx48.i, align 1
  store i32 0, i32* %i.i, align 4
  br label %for.cond49.i

for.cond49.i:                                     ; preds = %for.body51.i, %for.end41.i
  %255 = load i32* %i.i, align 4
  %256 = load i32* %errmsglen.i, align 4
  %cmp50.i = icmp ult i32 %255, %256
  br i1 %cmp50.i, label %for.body51.i, label %for.end59.i

for.body51.i:                                     ; preds = %for.cond49.i
  %257 = load i32* %i.i, align 4
  %idxprom52.i = zext i32 %257 to i64
  %258 = load i8** %errmsg.addr.i, align 8
  %arrayidx53.i = getelementptr inbounds i8* %258, i64 %idxprom52.i
  %259 = load i8* %arrayidx53.i, align 1
  %260 = load i32* %curr.i, align 4
  %261 = load i32* %i.i, align 4
  %add54.i = add i32 %260, %261
  %idxprom55.i = zext i32 %add54.i to i64
  %arrayidx56.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom55.i
  store i8 %259, i8* %arrayidx56.i, align 1
  %262 = load i32* %i.i, align 4
  %inc58.i = add i32 %262, 1
  store i32 %inc58.i, i32* %i.i, align 4
  br label %for.cond49.i

for.end59.i:                                      ; preds = %for.cond49.i
  %263 = load i32* %curr.i, align 4
  %264 = load i32* %i.i, align 4
  %add60.i = add i32 %263, %264
  store i32 %add60.i, i32* %curr.i, align 4
  %265 = load i32* %curr.i, align 4
  %inc61.i = add i32 %265, 1
  store i32 %inc61.i, i32* %curr.i, align 4
  %idxprom62.i = zext i32 %265 to i64
  %arrayidx63.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom62.i
  store i8 10, i8* %arrayidx63.i, align 1
  %266 = load i32* %curr.i, align 4
  %inc64.i = add i32 %266, 1
  store i32 %inc64.i, i32* %curr.i, align 4
  %idxprom65.i = zext i32 %266 to i64
  %arrayidx66.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i64 %idxprom65.i
  store i8 0, i8* %arrayidx66.i, align 1
  %arraydecay67.i = getelementptr inbounds [1024 x i8]* %buf.i.i, i32 0, i32 0
  call  void @__pgi_print_string(i8* %arraydecay67.i) nounwind
  call void asm sideeffect "trap;", ""() nounwind, !srcloc !0
  br label %__pgi_error_msg.exit

__pgi_error_msg.exit:                             ; preds = %for.end59.i, %if.then.i42
  br label %if.end36

if.end36:                                         ; preds = %__pgi_error_msg.exit, %if.end32
  %267 = load i32* %conformable, align 4
  store i32 %267, i32* %retval
  br label %return

return:                                           ; preds = %if.end36, %if.then
  %268 = load i32* %retval
  ret i32 %268
}

define  i32 @__kmpc_global_thread_num(i8* %loc) nounwind alwaysinline {
entry:
  %loc.addr = alloca i8*, align 8
  store i8* %loc, i8** %loc.addr, align 8
  ret i32 0
}

define  void @__pgi_cdiv_llvm(%struct.__fcomplex* %res, float %a1, float %b1, float %a2, float %b2) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %real2.addr.i = alloca float, align 4
  %imag2.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %r.i = alloca float, align 4
  %d.i = alloca float, align 4
  %r_mag.i = alloca float, align 4
  %i_mag.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a1.addr = alloca float, align 4
  %b1.addr = alloca float, align 4
  %a2.addr = alloca float, align 4
  %b2.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a1, float* %a1.addr, align 4
  store float %b1, float* %b1.addr, align 4
  store float %a2, float* %a2.addr, align 4
  store float %b2, float* %b2.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a1.addr, align 4
  %3 = load float* %b1.addr, align 4
  %4 = load float* %a2.addr, align 4
  %5 = load float* %b2.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  store float %4, float* %real2.addr.i, align 4
  store float %5, float* %imag2.addr.i, align 4
  %6 = load float* %real2.addr.i, align 4
  store float %6, float* %r_mag.i, align 4
  %7 = load float* %r_mag.i, align 4
  %cmp.i = fcmp olt float %7, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %8 = load float* %r_mag.i, align 4
  %sub.i = fsub float -0.000000e+00, %8
  store float %sub.i, float* %r_mag.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %9 = load float* %imag2.addr.i, align 4
  store float %9, float* %i_mag.i, align 4
  %10 = load float* %i_mag.i, align 4
  %cmp1.i = fcmp olt float %10, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %11 = load float* %i_mag.i, align 4
  %sub3.i = fsub float -0.000000e+00, %11
  store float %sub3.i, float* %i_mag.i, align 4
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %12 = load float* %r_mag.i, align 4
  %13 = load float* %i_mag.i, align 4
  %cmp5.i = fcmp ole float %12, %13
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %14 = load float* %real2.addr.i, align 4
  %15 = load float* %imag2.addr.i, align 4
  %div.i = fdiv float %14, %15
  store float %div.i, float* %r.i, align 4
  %16 = load float* %imag2.addr.i, align 4
  %17 = load float* %r.i, align 4
  %18 = load float* %r.i, align 4
  %mul.i = fmul float %17, %18
  %add.i = fadd float 1.000000e+00, %mul.i
  %mul7.i = fmul float %16, %add.i
  %div8.i = fdiv float 1.000000e+00, %mul7.i
  store float %div8.i, float* %d.i, align 4
  %19 = load float* %real1.addr.i, align 4
  %20 = load float* %r.i, align 4
  %mul9.i = fmul float %19, %20
  %21 = load float* %imag1.addr.i, align 4
  %add10.i = fadd float %mul9.i, %21
  %22 = load float* %d.i, align 4
  %mul11.i = fmul float %add10.i, %22
  store float %mul11.i, float* %x.i, align 4
  %23 = load float* %imag1.addr.i, align 4
  %24 = load float* %r.i, align 4
  %mul12.i = fmul float %23, %24
  %25 = load float* %real1.addr.i, align 4
  %sub13.i = fsub float %mul12.i, %25
  %26 = load float* %d.i, align 4
  %mul14.i = fmul float %sub13.i, %26
  store float %mul14.i, float* %y.i, align 4
  br label %__pgi_cdiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %27 = load float* %imag2.addr.i, align 4
  %28 = load float* %real2.addr.i, align 4
  %div15.i = fdiv float %27, %28
  store float %div15.i, float* %r.i, align 4
  %29 = load float* %real2.addr.i, align 4
  %30 = load float* %r.i, align 4
  %31 = load float* %r.i, align 4
  %mul16.i = fmul float %30, %31
  %add17.i = fadd float 1.000000e+00, %mul16.i
  %mul18.i = fmul float %29, %add17.i
  %div19.i = fdiv float 1.000000e+00, %mul18.i
  store float %div19.i, float* %d.i, align 4
  %32 = load float* %real1.addr.i, align 4
  %33 = load float* %imag1.addr.i, align 4
  %34 = load float* %r.i, align 4
  %mul20.i = fmul float %33, %34
  %add21.i = fadd float %32, %mul20.i
  %35 = load float* %d.i, align 4
  %mul22.i = fmul float %add21.i, %35
  store float %mul22.i, float* %x.i, align 4
  %36 = load float* %imag1.addr.i, align 4
  %37 = load float* %real1.addr.i, align 4
  %38 = load float* %r.i, align 4
  %mul23.i = fmul float %37, %38
  %sub24.i = fsub float %36, %mul23.i
  %39 = load float* %d.i, align 4
  %mul25.i = fmul float %sub24.i, %39
  store float %mul25.i, float* %y.i, align 4
  br label %__pgi_cdiv.exit

__pgi_cdiv.exit:                                  ; preds = %if.else.i, %if.then6.i
  %40 = load float* %x.i, align 4
  %41 = load i8** %res.addr.i, align 8
  %42 = bitcast i8* %41 to float*
  store float %40, float* %42, align 4
  %43 = load float* %y.i, align 4
  %44 = load i8** %res.addr.i, align 8
  %45 = bitcast i8* %44 to float*
  %arrayidx27.i = getelementptr inbounds float* %45, i64 1
  store float %43, float* %arrayidx27.i, align 4
  ret void
}

define  void @__pgi_cexp_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %z.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_expf(float %4) nounwind
  store float %call.i, float* %x.i, align 4
  %5 = load float* %imag1.addr.i, align 4
  call  void @__nv_sincosf(float %5, float* %z.i, float* %y.i) nounwind
  %6 = load float* %x.i, align 4
  %7 = load float* %y.i, align 4
  %mul.i = fmul float %7, %6
  store float %mul.i, float* %y.i, align 4
  %8 = load float* %x.i, align 4
  %9 = load float* %z.i, align 4
  %mul1.i = fmul float %9, %8
  store float %mul1.i, float* %z.i, align 4
  %10 = load float* %y.i, align 4
  %11 = load i8** %res.addr.i, align 8
  %12 = bitcast i8* %11 to float*
  store float %10, float* %12, align 4
  %13 = load float* %z.i, align 4
  %14 = load i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to float*
  %arrayidx2.i = getelementptr inbounds float* %15, i64 1
  store float %13, float* %arrayidx2.i, align 4
  ret void
}

define  void @__pgi_cacos_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i13.i = alloca i8*, align 8
  %real1.addr.i14.i = alloca float, align 4
  %imag1.addr.i15.i = alloca float, align 4
  %x.i16.i = alloca float, align 4
  %y.i17.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %a.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %5 = load float* %real1.addr.i, align 4
  %mul.i = fmul float %4, %5
  %6 = load float* %imag1.addr.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %mul1.i = fmul float %6, %7
  %sub.i = fsub float %mul.i, %mul1.i
  store float %sub.i, float* %x.i, align 4
  %8 = load float* %real1.addr.i, align 4
  %9 = load float* %imag1.addr.i, align 4
  %mul2.i = fmul float %8, %9
  %10 = load float* %imag1.addr.i, align 4
  %11 = load float* %real1.addr.i, align 4
  %mul3.i = fmul float %10, %11
  %add.i = fadd float %mul2.i, %mul3.i
  store float %add.i, float* %y.i, align 4
  %12 = load float* %x.i, align 4
  %sub4.i = fsub float 1.000000e+00, %12
  store float %sub4.i, float* %x.i, align 4
  %13 = load float* %y.i, align 4
  %sub5.i = fsub float -0.000000e+00, %13
  store float %sub5.i, float* %y.i, align 4
  %14 = bitcast %struct.cmplx2* %tmp.i to i8*
  %15 = load float* %x.i, align 4
  %16 = load float* %y.i, align 4
  store i8* %14, i8** %res.addr.i.i, align 8
  store float %15, float* %real1.addr.i.i, align 4
  store float %16, float* %imag1.addr.i.i, align 4
  %17 = load float* %real1.addr.i.i, align 4
  %18 = load float* %imag1.addr.i.i, align 4
  %call.i.i = call  float @__nv_hypotf(float %17, float %18) nounwind
  store float %call.i.i, float* %a.i.i, align 4
  %19 = load float* %a.i.i, align 4
  %cmp.i.i = fcmp oeq float %19, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %entry
  store float 0.000000e+00, float* %x.i.i, align 4
  store float 0.000000e+00, float* %y.i.i, align 4
  br label %__pgi_cacos.exit

if.else.i.i:                                      ; preds = %entry
  %20 = load float* %real1.addr.i.i, align 4
  %cmp1.i.i = fcmp ogt float %20, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else5.i.i

if.then2.i.i:                                     ; preds = %if.else.i.i
  %21 = load float* %a.i.i, align 4
  %22 = load float* %real1.addr.i.i, align 4
  %add.i.i = fadd float %21, %22
  %mul.i.i = fmul float 5.000000e-01, %add.i.i
  %call3.i.i = call  float @__nv_sqrtf(float %mul.i.i) nounwind
  store float %call3.i.i, float* %x.i.i, align 4
  %23 = load float* %imag1.addr.i.i, align 4
  %24 = load float* %x.i.i, align 4
  %div.i.i = fdiv float %23, %24
  %mul4.i.i = fmul float 5.000000e-01, %div.i.i
  store float %mul4.i.i, float* %y.i.i, align 4
  br label %if.end13.i.i

if.else5.i.i:                                     ; preds = %if.else.i.i
  %25 = load float* %a.i.i, align 4
  %26 = load float* %real1.addr.i.i, align 4
  %sub.i.i = fsub float %25, %26
  %mul6.i.i = fmul float 5.000000e-01, %sub.i.i
  %call7.i.i = call  float @__nv_sqrtf(float %mul6.i.i) nounwind
  store float %call7.i.i, float* %y.i.i, align 4
  %27 = load float* %imag1.addr.i.i, align 4
  %cmp8.i.i = fcmp olt float %27, 0.000000e+00
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.end.i.i

if.then9.i.i:                                     ; preds = %if.else5.i.i
  %28 = load float* %y.i.i, align 4
  %sub10.i.i = fsub float -0.000000e+00, %28
  store float %sub10.i.i, float* %y.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then9.i.i, %if.else5.i.i
  %29 = load float* %imag1.addr.i.i, align 4
  %30 = load float* %y.i.i, align 4
  %div11.i.i = fdiv float %29, %30
  %mul12.i.i = fmul float 5.000000e-01, %div11.i.i
  store float %mul12.i.i, float* %x.i.i, align 4
  br label %if.end13.i.i

if.end13.i.i:                                     ; preds = %if.end.i.i, %if.then2.i.i
  br label %__pgi_cacos.exit

__pgi_cacos.exit:                                 ; preds = %if.end13.i.i, %if.then.i.i
  %31 = load float* %x.i.i, align 4
  %32 = load i8** %res.addr.i.i, align 8
  %33 = bitcast i8* %32 to float*
  store float %31, float* %33, align 4
  %34 = load float* %y.i.i, align 4
  %35 = load i8** %res.addr.i.i, align 8
  %36 = bitcast i8* %35 to float*
  %arrayidx15.i.i = getelementptr inbounds float* %36, i64 1
  store float %34, float* %arrayidx15.i.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %37 = load float* %i.i, align 4
  %sub6.i = fsub float -0.000000e+00, %37
  store float %sub6.i, float* %x.i, align 4
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %38 = load float* %r.i, align 4
  store float %38, float* %y.i, align 4
  %39 = load float* %real1.addr.i, align 4
  %40 = load float* %x.i, align 4
  %add7.i = fadd float %39, %40
  store float %add7.i, float* %x.i, align 4
  %41 = load float* %imag1.addr.i, align 4
  %42 = load float* %y.i, align 4
  %add8.i = fadd float %41, %42
  store float %add8.i, float* %y.i, align 4
  %43 = bitcast %struct.cmplx2* %tmp.i to i8*
  %44 = load float* %x.i, align 4
  %45 = load float* %y.i, align 4
  store i8* %43, i8** %res.addr.i13.i, align 8
  store float %44, float* %real1.addr.i14.i, align 4
  store float %45, float* %imag1.addr.i15.i, align 4
  %46 = load float* %imag1.addr.i15.i, align 4
  %47 = load float* %real1.addr.i14.i, align 4
  %call.i18.i = call  float @__nv_atan2f(float %46, float %47) nounwind
  store float %call.i18.i, float* %x.i16.i, align 4
  %48 = load float* %real1.addr.i14.i, align 4
  %49 = load float* %imag1.addr.i15.i, align 4
  %call1.i.i = call  float @__nv_hypotf(float %48, float %49) nounwind
  %call2.i.i = call  float @__nv_logf(float %call1.i.i) nounwind
  store float %call2.i.i, float* %y.i17.i, align 4
  %50 = load float* %y.i17.i, align 4
  %51 = load i8** %res.addr.i13.i, align 8
  %52 = bitcast i8* %51 to float*
  store float %50, float* %52, align 4
  %53 = load float* %x.i16.i, align 4
  %54 = load i8** %res.addr.i13.i, align 8
  %55 = bitcast i8* %54 to float*
  %arrayidx3.i.i = getelementptr inbounds float* %55, i64 1
  store float %53, float* %arrayidx3.i.i, align 4
  %i9.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %56 = load float* %i9.i, align 4
  store float %56, float* %x.i, align 4
  %r10.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %57 = load float* %r10.i, align 4
  %sub11.i = fsub float -0.000000e+00, %57
  store float %sub11.i, float* %y.i, align 4
  %58 = load float* %x.i, align 4
  %59 = load i8** %res.addr.i, align 8
  %60 = bitcast i8* %59 to float*
  store float %58, float* %60, align 4
  %61 = load float* %y.i, align 4
  %62 = load i8** %res.addr.i, align 8
  %63 = bitcast i8* %62 to float*
  %arrayidx12.i = getelementptr inbounds float* %63, i64 1
  store float %61, float* %arrayidx12.i, align 4
  ret void
}

define  void @__pgi_cdacos_llvm(%struct.__fcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i13.i = alloca i8*, align 8
  %real1.addr.i14.i = alloca double, align 8
  %imag1.addr.i15.i = alloca double, align 8
  %x.i16.i = alloca double, align 8
  %y.i17.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %a.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %5 = load double* %real1.addr.i, align 8
  %mul.i = fmul double %4, %5
  %6 = load double* %imag1.addr.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %mul1.i = fmul double %6, %7
  %sub.i = fsub double %mul.i, %mul1.i
  store double %sub.i, double* %x.i, align 8
  %8 = load double* %real1.addr.i, align 8
  %9 = load double* %imag1.addr.i, align 8
  %mul2.i = fmul double %8, %9
  %10 = load double* %imag1.addr.i, align 8
  %11 = load double* %real1.addr.i, align 8
  %mul3.i = fmul double %10, %11
  %add.i = fadd double %mul2.i, %mul3.i
  store double %add.i, double* %y.i, align 8
  %12 = load double* %x.i, align 8
  %sub4.i = fsub double 1.000000e+00, %12
  store double %sub4.i, double* %x.i, align 8
  %13 = load double* %y.i, align 8
  %sub5.i = fsub double -0.000000e+00, %13
  store double %sub5.i, double* %y.i, align 8
  %14 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %15 = load double* %x.i, align 8
  %16 = load double* %y.i, align 8
  store i8* %14, i8** %res.addr.i.i, align 8
  store double %15, double* %real1.addr.i.i, align 8
  store double %16, double* %imag1.addr.i.i, align 8
  %17 = load double* %real1.addr.i.i, align 8
  %18 = load double* %imag1.addr.i.i, align 8
  %call.i.i = call  double @__nv_hypot(double %17, double %18) nounwind
  store double %call.i.i, double* %a.i.i, align 8
  %19 = load double* %a.i.i, align 8
  %cmp.i.i = fcmp oeq double %19, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %entry
  store double 0.000000e+00, double* %x.i.i, align 8
  store double 0.000000e+00, double* %y.i.i, align 8
  br label %__pgi_cdacos.exit

if.else.i.i:                                      ; preds = %entry
  %20 = load double* %real1.addr.i.i, align 8
  %cmp1.i.i = fcmp ogt double %20, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else5.i.i

if.then2.i.i:                                     ; preds = %if.else.i.i
  %21 = load double* %a.i.i, align 8
  %22 = load double* %real1.addr.i.i, align 8
  %add.i.i = fadd double %21, %22
  %mul.i.i = fmul double 5.000000e-01, %add.i.i
  %call3.i.i = call  double @__nv_sqrt(double %mul.i.i) nounwind
  store double %call3.i.i, double* %x.i.i, align 8
  %23 = load double* %imag1.addr.i.i, align 8
  %24 = load double* %x.i.i, align 8
  %div.i.i = fdiv double %23, %24
  %mul4.i.i = fmul double 5.000000e-01, %div.i.i
  store double %mul4.i.i, double* %y.i.i, align 8
  br label %if.end13.i.i

if.else5.i.i:                                     ; preds = %if.else.i.i
  %25 = load double* %a.i.i, align 8
  %26 = load double* %real1.addr.i.i, align 8
  %sub.i.i = fsub double %25, %26
  %mul6.i.i = fmul double 5.000000e-01, %sub.i.i
  %call7.i.i = call  double @__nv_sqrt(double %mul6.i.i) nounwind
  store double %call7.i.i, double* %y.i.i, align 8
  %27 = load double* %imag1.addr.i.i, align 8
  %cmp8.i.i = fcmp olt double %27, 0.000000e+00
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.end.i.i

if.then9.i.i:                                     ; preds = %if.else5.i.i
  %28 = load double* %y.i.i, align 8
  %sub10.i.i = fsub double -0.000000e+00, %28
  store double %sub10.i.i, double* %y.i.i, align 8
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then9.i.i, %if.else5.i.i
  %29 = load double* %imag1.addr.i.i, align 8
  %30 = load double* %y.i.i, align 8
  %div11.i.i = fdiv double %29, %30
  %mul12.i.i = fmul double 5.000000e-01, %div11.i.i
  store double %mul12.i.i, double* %x.i.i, align 8
  br label %if.end13.i.i

if.end13.i.i:                                     ; preds = %if.end.i.i, %if.then2.i.i
  br label %__pgi_cdacos.exit

__pgi_cdacos.exit:                                ; preds = %if.end13.i.i, %if.then.i.i
  %31 = load double* %x.i.i, align 8
  %32 = load i8** %res.addr.i.i, align 8
  %33 = bitcast i8* %32 to double*
  store double %31, double* %33, align 8
  %34 = load double* %y.i.i, align 8
  %35 = load i8** %res.addr.i.i, align 8
  %36 = bitcast i8* %35 to double*
  %arrayidx15.i.i = getelementptr inbounds double* %36, i64 1
  store double %34, double* %arrayidx15.i.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %37 = load double* %i.i, align 8
  %sub6.i = fsub double -0.000000e+00, %37
  store double %sub6.i, double* %x.i, align 8
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %38 = load double* %r.i, align 8
  store double %38, double* %y.i, align 8
  %39 = load double* %real1.addr.i, align 8
  %40 = load double* %x.i, align 8
  %add7.i = fadd double %39, %40
  store double %add7.i, double* %x.i, align 8
  %41 = load double* %imag1.addr.i, align 8
  %42 = load double* %y.i, align 8
  %add8.i = fadd double %41, %42
  store double %add8.i, double* %y.i, align 8
  %43 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %44 = load double* %x.i, align 8
  %45 = load double* %y.i, align 8
  store i8* %43, i8** %res.addr.i13.i, align 8
  store double %44, double* %real1.addr.i14.i, align 8
  store double %45, double* %imag1.addr.i15.i, align 8
  %46 = load double* %imag1.addr.i15.i, align 8
  %47 = load double* %real1.addr.i14.i, align 8
  %call.i18.i = call  double @__nv_atan2(double %46, double %47) nounwind
  store double %call.i18.i, double* %x.i16.i, align 8
  %48 = load double* %real1.addr.i14.i, align 8
  %49 = load double* %imag1.addr.i15.i, align 8
  %call1.i.i = call  double @__nv_hypot(double %48, double %49) nounwind
  %call2.i.i = call  double @__nv_log(double %call1.i.i) nounwind
  store double %call2.i.i, double* %y.i17.i, align 8
  %50 = load double* %y.i17.i, align 8
  %51 = load i8** %res.addr.i13.i, align 8
  %52 = bitcast i8* %51 to double*
  store double %50, double* %52, align 8
  %53 = load double* %x.i16.i, align 8
  %54 = load i8** %res.addr.i13.i, align 8
  %55 = bitcast i8* %54 to double*
  %arrayidx3.i.i = getelementptr inbounds double* %55, i64 1
  store double %53, double* %arrayidx3.i.i, align 8
  %i9.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %56 = load double* %i9.i, align 8
  store double %56, double* %x.i, align 8
  %r10.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %57 = load double* %r10.i, align 8
  %sub11.i = fsub double -0.000000e+00, %57
  store double %sub11.i, double* %y.i, align 8
  %58 = load double* %x.i, align 8
  %59 = load i8** %res.addr.i, align 8
  %60 = bitcast i8* %59 to double*
  store double %58, double* %60, align 8
  %61 = load double* %y.i, align 8
  %62 = load i8** %res.addr.i, align 8
  %63 = bitcast i8* %62 to double*
  %arrayidx12.i = getelementptr inbounds double* %63, i64 1
  store double %61, double* %arrayidx12.i, align 8
  ret void
}

define  void @__pgi_casin_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i13.i = alloca i8*, align 8
  %real1.addr.i14.i = alloca float, align 4
  %imag1.addr.i15.i = alloca float, align 4
  %x.i16.i = alloca float, align 4
  %y.i17.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %a.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %5 = load float* %real1.addr.i, align 4
  %mul.i = fmul float %4, %5
  %6 = load float* %imag1.addr.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %mul1.i = fmul float %6, %7
  %sub.i = fsub float %mul.i, %mul1.i
  store float %sub.i, float* %x.i, align 4
  %8 = load float* %real1.addr.i, align 4
  %9 = load float* %imag1.addr.i, align 4
  %mul2.i = fmul float %8, %9
  %10 = load float* %imag1.addr.i, align 4
  %11 = load float* %real1.addr.i, align 4
  %mul3.i = fmul float %10, %11
  %add.i = fadd float %mul2.i, %mul3.i
  store float %add.i, float* %y.i, align 4
  %12 = load float* %x.i, align 4
  %sub4.i = fsub float 1.000000e+00, %12
  store float %sub4.i, float* %x.i, align 4
  %13 = load float* %y.i, align 4
  %sub5.i = fsub float -0.000000e+00, %13
  store float %sub5.i, float* %y.i, align 4
  %14 = bitcast %struct.cmplx2* %tmp.i to i8*
  %15 = load float* %x.i, align 4
  %16 = load float* %y.i, align 4
  store i8* %14, i8** %res.addr.i.i, align 8
  store float %15, float* %real1.addr.i.i, align 4
  store float %16, float* %imag1.addr.i.i, align 4
  %17 = load float* %real1.addr.i.i, align 4
  %18 = load float* %imag1.addr.i.i, align 4
  %call.i.i = call  float @__nv_hypotf(float %17, float %18) nounwind
  store float %call.i.i, float* %a.i.i, align 4
  %19 = load float* %a.i.i, align 4
  %cmp.i.i = fcmp oeq float %19, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %entry
  store float 0.000000e+00, float* %x.i.i, align 4
  store float 0.000000e+00, float* %y.i.i, align 4
  br label %__pgi_casin.exit

if.else.i.i:                                      ; preds = %entry
  %20 = load float* %real1.addr.i.i, align 4
  %cmp1.i.i = fcmp ogt float %20, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else5.i.i

if.then2.i.i:                                     ; preds = %if.else.i.i
  %21 = load float* %a.i.i, align 4
  %22 = load float* %real1.addr.i.i, align 4
  %add.i.i = fadd float %21, %22
  %mul.i.i = fmul float 5.000000e-01, %add.i.i
  %call3.i.i = call  float @__nv_sqrtf(float %mul.i.i) nounwind
  store float %call3.i.i, float* %x.i.i, align 4
  %23 = load float* %imag1.addr.i.i, align 4
  %24 = load float* %x.i.i, align 4
  %div.i.i = fdiv float %23, %24
  %mul4.i.i = fmul float 5.000000e-01, %div.i.i
  store float %mul4.i.i, float* %y.i.i, align 4
  br label %if.end13.i.i

if.else5.i.i:                                     ; preds = %if.else.i.i
  %25 = load float* %a.i.i, align 4
  %26 = load float* %real1.addr.i.i, align 4
  %sub.i.i = fsub float %25, %26
  %mul6.i.i = fmul float 5.000000e-01, %sub.i.i
  %call7.i.i = call  float @__nv_sqrtf(float %mul6.i.i) nounwind
  store float %call7.i.i, float* %y.i.i, align 4
  %27 = load float* %imag1.addr.i.i, align 4
  %cmp8.i.i = fcmp olt float %27, 0.000000e+00
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.end.i.i

if.then9.i.i:                                     ; preds = %if.else5.i.i
  %28 = load float* %y.i.i, align 4
  %sub10.i.i = fsub float -0.000000e+00, %28
  store float %sub10.i.i, float* %y.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then9.i.i, %if.else5.i.i
  %29 = load float* %imag1.addr.i.i, align 4
  %30 = load float* %y.i.i, align 4
  %div11.i.i = fdiv float %29, %30
  %mul12.i.i = fmul float 5.000000e-01, %div11.i.i
  store float %mul12.i.i, float* %x.i.i, align 4
  br label %if.end13.i.i

if.end13.i.i:                                     ; preds = %if.end.i.i, %if.then2.i.i
  br label %__pgi_casin.exit

__pgi_casin.exit:                                 ; preds = %if.end13.i.i, %if.then.i.i
  %31 = load float* %x.i.i, align 4
  %32 = load i8** %res.addr.i.i, align 8
  %33 = bitcast i8* %32 to float*
  store float %31, float* %33, align 4
  %34 = load float* %y.i.i, align 4
  %35 = load i8** %res.addr.i.i, align 8
  %36 = bitcast i8* %35 to float*
  %arrayidx15.i.i = getelementptr inbounds float* %36, i64 1
  store float %34, float* %arrayidx15.i.i, align 4
  %37 = load float* %imag1.addr.i, align 4
  %sub6.i = fsub float -0.000000e+00, %37
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %38 = load float* %r.i, align 4
  %add7.i = fadd float %sub6.i, %38
  store float %add7.i, float* %x.i, align 4
  %39 = load float* %real1.addr.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %40 = load float* %i.i, align 4
  %add8.i = fadd float %39, %40
  store float %add8.i, float* %y.i, align 4
  %41 = bitcast %struct.cmplx2* %tmp.i to i8*
  %42 = load float* %x.i, align 4
  %43 = load float* %y.i, align 4
  store i8* %41, i8** %res.addr.i13.i, align 8
  store float %42, float* %real1.addr.i14.i, align 4
  store float %43, float* %imag1.addr.i15.i, align 4
  %44 = load float* %imag1.addr.i15.i, align 4
  %45 = load float* %real1.addr.i14.i, align 4
  %call.i18.i = call  float @__nv_atan2f(float %44, float %45) nounwind
  store float %call.i18.i, float* %x.i16.i, align 4
  %46 = load float* %real1.addr.i14.i, align 4
  %47 = load float* %imag1.addr.i15.i, align 4
  %call1.i.i = call  float @__nv_hypotf(float %46, float %47) nounwind
  %call2.i.i = call  float @__nv_logf(float %call1.i.i) nounwind
  store float %call2.i.i, float* %y.i17.i, align 4
  %48 = load float* %y.i17.i, align 4
  %49 = load i8** %res.addr.i13.i, align 8
  %50 = bitcast i8* %49 to float*
  store float %48, float* %50, align 4
  %51 = load float* %x.i16.i, align 4
  %52 = load i8** %res.addr.i13.i, align 8
  %53 = bitcast i8* %52 to float*
  %arrayidx3.i.i = getelementptr inbounds float* %53, i64 1
  store float %51, float* %arrayidx3.i.i, align 4
  %i9.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %54 = load float* %i9.i, align 4
  store float %54, float* %x.i, align 4
  %r10.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %55 = load float* %r10.i, align 4
  %sub11.i = fsub float -0.000000e+00, %55
  store float %sub11.i, float* %y.i, align 4
  %56 = load float* %x.i, align 4
  %57 = load i8** %res.addr.i, align 8
  %58 = bitcast i8* %57 to float*
  store float %56, float* %58, align 4
  %59 = load float* %y.i, align 4
  %60 = load i8** %res.addr.i, align 8
  %61 = bitcast i8* %60 to float*
  %arrayidx12.i = getelementptr inbounds float* %61, i64 1
  store float %59, float* %arrayidx12.i, align 4
  ret void
}

define  void @__pgi_cdasin_llvm(%struct.__fcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i13.i = alloca i8*, align 8
  %real1.addr.i14.i = alloca double, align 8
  %imag1.addr.i15.i = alloca double, align 8
  %x.i16.i = alloca double, align 8
  %y.i17.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %a.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %5 = load double* %real1.addr.i, align 8
  %mul.i = fmul double %4, %5
  %6 = load double* %imag1.addr.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %mul1.i = fmul double %6, %7
  %sub.i = fsub double %mul.i, %mul1.i
  store double %sub.i, double* %x.i, align 8
  %8 = load double* %real1.addr.i, align 8
  %9 = load double* %imag1.addr.i, align 8
  %mul2.i = fmul double %8, %9
  %10 = load double* %imag1.addr.i, align 8
  %11 = load double* %real1.addr.i, align 8
  %mul3.i = fmul double %10, %11
  %add.i = fadd double %mul2.i, %mul3.i
  store double %add.i, double* %y.i, align 8
  %12 = load double* %x.i, align 8
  %sub4.i = fsub double 1.000000e+00, %12
  store double %sub4.i, double* %x.i, align 8
  %13 = load double* %y.i, align 8
  %sub5.i = fsub double -0.000000e+00, %13
  store double %sub5.i, double* %y.i, align 8
  %14 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %15 = load double* %x.i, align 8
  %16 = load double* %y.i, align 8
  store i8* %14, i8** %res.addr.i.i, align 8
  store double %15, double* %real1.addr.i.i, align 8
  store double %16, double* %imag1.addr.i.i, align 8
  %17 = load double* %real1.addr.i.i, align 8
  %18 = load double* %imag1.addr.i.i, align 8
  %call.i.i = call  double @__nv_hypot(double %17, double %18) nounwind
  store double %call.i.i, double* %a.i.i, align 8
  %19 = load double* %a.i.i, align 8
  %cmp.i.i = fcmp oeq double %19, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %entry
  store double 0.000000e+00, double* %x.i.i, align 8
  store double 0.000000e+00, double* %y.i.i, align 8
  br label %__pgi_cdasin.exit

if.else.i.i:                                      ; preds = %entry
  %20 = load double* %real1.addr.i.i, align 8
  %cmp1.i.i = fcmp ogt double %20, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.else5.i.i

if.then2.i.i:                                     ; preds = %if.else.i.i
  %21 = load double* %a.i.i, align 8
  %22 = load double* %real1.addr.i.i, align 8
  %add.i.i = fadd double %21, %22
  %mul.i.i = fmul double 5.000000e-01, %add.i.i
  %call3.i.i = call  double @__nv_sqrt(double %mul.i.i) nounwind
  store double %call3.i.i, double* %x.i.i, align 8
  %23 = load double* %imag1.addr.i.i, align 8
  %24 = load double* %x.i.i, align 8
  %div.i.i = fdiv double %23, %24
  %mul4.i.i = fmul double 5.000000e-01, %div.i.i
  store double %mul4.i.i, double* %y.i.i, align 8
  br label %if.end13.i.i

if.else5.i.i:                                     ; preds = %if.else.i.i
  %25 = load double* %a.i.i, align 8
  %26 = load double* %real1.addr.i.i, align 8
  %sub.i.i = fsub double %25, %26
  %mul6.i.i = fmul double 5.000000e-01, %sub.i.i
  %call7.i.i = call  double @__nv_sqrt(double %mul6.i.i) nounwind
  store double %call7.i.i, double* %y.i.i, align 8
  %27 = load double* %imag1.addr.i.i, align 8
  %cmp8.i.i = fcmp olt double %27, 0.000000e+00
  br i1 %cmp8.i.i, label %if.then9.i.i, label %if.end.i.i

if.then9.i.i:                                     ; preds = %if.else5.i.i
  %28 = load double* %y.i.i, align 8
  %sub10.i.i = fsub double -0.000000e+00, %28
  store double %sub10.i.i, double* %y.i.i, align 8
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then9.i.i, %if.else5.i.i
  %29 = load double* %imag1.addr.i.i, align 8
  %30 = load double* %y.i.i, align 8
  %div11.i.i = fdiv double %29, %30
  %mul12.i.i = fmul double 5.000000e-01, %div11.i.i
  store double %mul12.i.i, double* %x.i.i, align 8
  br label %if.end13.i.i

if.end13.i.i:                                     ; preds = %if.end.i.i, %if.then2.i.i
  br label %__pgi_cdasin.exit

__pgi_cdasin.exit:                                ; preds = %if.end13.i.i, %if.then.i.i
  %31 = load double* %x.i.i, align 8
  %32 = load i8** %res.addr.i.i, align 8
  %33 = bitcast i8* %32 to double*
  store double %31, double* %33, align 8
  %34 = load double* %y.i.i, align 8
  %35 = load i8** %res.addr.i.i, align 8
  %36 = bitcast i8* %35 to double*
  %arrayidx15.i.i = getelementptr inbounds double* %36, i64 1
  store double %34, double* %arrayidx15.i.i, align 8
  %37 = load double* %imag1.addr.i, align 8
  %sub6.i = fsub double -0.000000e+00, %37
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %38 = load double* %r.i, align 8
  %add7.i = fadd double %sub6.i, %38
  store double %add7.i, double* %x.i, align 8
  %39 = load double* %real1.addr.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %40 = load double* %i.i, align 8
  %add8.i = fadd double %39, %40
  store double %add8.i, double* %y.i, align 8
  %41 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %42 = load double* %x.i, align 8
  %43 = load double* %y.i, align 8
  store i8* %41, i8** %res.addr.i13.i, align 8
  store double %42, double* %real1.addr.i14.i, align 8
  store double %43, double* %imag1.addr.i15.i, align 8
  %44 = load double* %imag1.addr.i15.i, align 8
  %45 = load double* %real1.addr.i14.i, align 8
  %call.i18.i = call  double @__nv_atan2(double %44, double %45) nounwind
  store double %call.i18.i, double* %x.i16.i, align 8
  %46 = load double* %real1.addr.i14.i, align 8
  %47 = load double* %imag1.addr.i15.i, align 8
  %call1.i.i = call  double @__nv_hypot(double %46, double %47) nounwind
  %call2.i.i = call  double @__nv_log(double %call1.i.i) nounwind
  store double %call2.i.i, double* %y.i17.i, align 8
  %48 = load double* %y.i17.i, align 8
  %49 = load i8** %res.addr.i13.i, align 8
  %50 = bitcast i8* %49 to double*
  store double %48, double* %50, align 8
  %51 = load double* %x.i16.i, align 8
  %52 = load i8** %res.addr.i13.i, align 8
  %53 = bitcast i8* %52 to double*
  %arrayidx3.i.i = getelementptr inbounds double* %53, i64 1
  store double %51, double* %arrayidx3.i.i, align 8
  %i9.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %54 = load double* %i9.i, align 8
  store double %54, double* %x.i, align 8
  %r10.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %55 = load double* %r10.i, align 8
  %sub11.i = fsub double -0.000000e+00, %55
  store double %sub11.i, double* %y.i, align 8
  %56 = load double* %x.i, align 8
  %57 = load i8** %res.addr.i, align 8
  %58 = bitcast i8* %57 to double*
  store double %56, double* %58, align 8
  %59 = load double* %y.i, align 8
  %60 = load i8** %res.addr.i, align 8
  %61 = bitcast i8* %60 to double*
  %arrayidx12.i = getelementptr inbounds double* %61, i64 1
  store double %59, double* %arrayidx12.i, align 8
  ret void
}

define  void @__pgi_catan_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i10.i = alloca i8*, align 8
  %real1.addr.i11.i = alloca float, align 4
  %imag1.addr.i12.i = alloca float, align 4
  %x.i13.i = alloca float, align 4
  %y.i14.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %x1.i = alloca float, align 4
  %y1.i = alloca float, align 4
  %x2.i = alloca float, align 4
  %y2.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %imag1.addr.i, align 4
  %sub.i = fsub float -0.000000e+00, %4
  store float %sub.i, float* %x.i, align 4
  %5 = load float* %real1.addr.i, align 4
  store float %5, float* %y.i, align 4
  %6 = load float* %x.i, align 4
  %sub1.i = fsub float 1.000000e+00, %6
  store float %sub1.i, float* %x1.i, align 4
  %7 = load float* %y.i, align 4
  %sub2.i = fsub float -0.000000e+00, %7
  store float %sub2.i, float* %y1.i, align 4
  %8 = bitcast %struct.cmplx2* %tmp.i to i8*
  %9 = load float* %x1.i, align 4
  %10 = load float* %y1.i, align 4
  store i8* %8, i8** %res.addr.i.i, align 8
  store float %9, float* %real1.addr.i.i, align 4
  store float %10, float* %imag1.addr.i.i, align 4
  %11 = load float* %imag1.addr.i.i, align 4
  %12 = load float* %real1.addr.i.i, align 4
  %call.i.i = call  float @__nv_atan2f(float %11, float %12) nounwind
  store float %call.i.i, float* %x.i.i, align 4
  %13 = load float* %real1.addr.i.i, align 4
  %14 = load float* %imag1.addr.i.i, align 4
  %call1.i.i = call  float @__nv_hypotf(float %13, float %14) nounwind
  %call2.i.i = call  float @__nv_logf(float %call1.i.i) nounwind
  store float %call2.i.i, float* %y.i.i, align 4
  %15 = load float* %y.i.i, align 4
  %16 = load i8** %res.addr.i.i, align 8
  %17 = bitcast i8* %16 to float*
  store float %15, float* %17, align 4
  %18 = load float* %x.i.i, align 4
  %19 = load i8** %res.addr.i.i, align 8
  %20 = bitcast i8* %19 to float*
  %arrayidx3.i.i = getelementptr inbounds float* %20, i64 1
  store float %18, float* %arrayidx3.i.i, align 4
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %21 = load float* %r.i, align 4
  store float %21, float* %x1.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %22 = load float* %i.i, align 4
  store float %22, float* %y1.i, align 4
  %23 = load float* %x.i, align 4
  %add.i = fadd float 1.000000e+00, %23
  store float %add.i, float* %x2.i, align 4
  %24 = load float* %y.i, align 4
  store float %24, float* %y2.i, align 4
  %25 = bitcast %struct.cmplx2* %tmp.i to i8*
  %26 = load float* %x2.i, align 4
  %27 = load float* %y2.i, align 4
  store i8* %25, i8** %res.addr.i10.i, align 8
  store float %26, float* %real1.addr.i11.i, align 4
  store float %27, float* %imag1.addr.i12.i, align 4
  %28 = load float* %imag1.addr.i12.i, align 4
  %29 = load float* %real1.addr.i11.i, align 4
  %call.i15.i = call  float @__nv_atan2f(float %28, float %29) nounwind
  store float %call.i15.i, float* %x.i13.i, align 4
  %30 = load float* %real1.addr.i11.i, align 4
  %31 = load float* %imag1.addr.i12.i, align 4
  %call1.i16.i = call  float @__nv_hypotf(float %30, float %31) nounwind
  %call2.i17.i = call  float @__nv_logf(float %call1.i16.i) nounwind
  store float %call2.i17.i, float* %y.i14.i, align 4
  %32 = load float* %y.i14.i, align 4
  %33 = load i8** %res.addr.i10.i, align 8
  %34 = bitcast i8* %33 to float*
  store float %32, float* %34, align 4
  %35 = load float* %x.i13.i, align 4
  %36 = load i8** %res.addr.i10.i, align 8
  %37 = bitcast i8* %36 to float*
  %arrayidx3.i18.i = getelementptr inbounds float* %37, i64 1
  store float %35, float* %arrayidx3.i18.i, align 4
  %r3.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %38 = load float* %r3.i, align 4
  store float %38, float* %x2.i, align 4
  %i4.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %39 = load float* %i4.i, align 4
  store float %39, float* %y2.i, align 4
  %40 = load float* %y1.i, align 4
  %41 = load float* %y2.i, align 4
  %sub5.i = fsub float %40, %41
  %mul.i = fmul float %sub5.i, 5.000000e-01
  %sub6.i = fsub float -0.000000e+00, %mul.i
  store float %sub6.i, float* %x.i, align 4
  %42 = load float* %x1.i, align 4
  %43 = load float* %x2.i, align 4
  %sub7.i = fsub float %42, %43
  %mul8.i = fmul float %sub7.i, 5.000000e-01
  store float %mul8.i, float* %y.i, align 4
  %44 = load float* %x.i, align 4
  %45 = load i8** %res.addr.i, align 8
  %46 = bitcast i8* %45 to float*
  store float %44, float* %46, align 4
  %47 = load float* %y.i, align 4
  %48 = load i8** %res.addr.i, align 8
  %49 = bitcast i8* %48 to float*
  %arrayidx9.i = getelementptr inbounds float* %49, i64 1
  store float %47, float* %arrayidx9.i, align 4
  ret void
}

define  void @__pgi_cdatan_llvm(%struct.__fcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i10.i = alloca i8*, align 8
  %real1.addr.i11.i = alloca double, align 8
  %imag1.addr.i12.i = alloca double, align 8
  %x.i13.i = alloca double, align 8
  %y.i14.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %x1.i = alloca double, align 8
  %y1.i = alloca double, align 8
  %x2.i = alloca double, align 8
  %y2.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %imag1.addr.i, align 8
  %sub.i = fsub double -0.000000e+00, %4
  store double %sub.i, double* %x.i, align 8
  %5 = load double* %real1.addr.i, align 8
  store double %5, double* %y.i, align 8
  %6 = load double* %x.i, align 8
  %sub1.i = fsub double 1.000000e+00, %6
  store double %sub1.i, double* %x1.i, align 8
  %7 = load double* %y.i, align 8
  %sub2.i = fsub double -0.000000e+00, %7
  store double %sub2.i, double* %y1.i, align 8
  %8 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %9 = load double* %x1.i, align 8
  %10 = load double* %y1.i, align 8
  store i8* %8, i8** %res.addr.i.i, align 8
  store double %9, double* %real1.addr.i.i, align 8
  store double %10, double* %imag1.addr.i.i, align 8
  %11 = load double* %imag1.addr.i.i, align 8
  %12 = load double* %real1.addr.i.i, align 8
  %call.i.i = call  double @__nv_atan2(double %11, double %12) nounwind
  store double %call.i.i, double* %x.i.i, align 8
  %13 = load double* %real1.addr.i.i, align 8
  %14 = load double* %imag1.addr.i.i, align 8
  %call1.i.i = call  double @__nv_hypot(double %13, double %14) nounwind
  %call2.i.i = call  double @__nv_log(double %call1.i.i) nounwind
  store double %call2.i.i, double* %y.i.i, align 8
  %15 = load double* %y.i.i, align 8
  %16 = load i8** %res.addr.i.i, align 8
  %17 = bitcast i8* %16 to double*
  store double %15, double* %17, align 8
  %18 = load double* %x.i.i, align 8
  %19 = load i8** %res.addr.i.i, align 8
  %20 = bitcast i8* %19 to double*
  %arrayidx3.i.i = getelementptr inbounds double* %20, i64 1
  store double %18, double* %arrayidx3.i.i, align 8
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %21 = load double* %r.i, align 8
  store double %21, double* %x1.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %22 = load double* %i.i, align 8
  store double %22, double* %y1.i, align 8
  %23 = load double* %x.i, align 8
  %add.i = fadd double 1.000000e+00, %23
  store double %add.i, double* %x2.i, align 8
  %24 = load double* %y.i, align 8
  store double %24, double* %y2.i, align 8
  %25 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %26 = load double* %x2.i, align 8
  %27 = load double* %y2.i, align 8
  store i8* %25, i8** %res.addr.i10.i, align 8
  store double %26, double* %real1.addr.i11.i, align 8
  store double %27, double* %imag1.addr.i12.i, align 8
  %28 = load double* %imag1.addr.i12.i, align 8
  %29 = load double* %real1.addr.i11.i, align 8
  %call.i15.i = call  double @__nv_atan2(double %28, double %29) nounwind
  store double %call.i15.i, double* %x.i13.i, align 8
  %30 = load double* %real1.addr.i11.i, align 8
  %31 = load double* %imag1.addr.i12.i, align 8
  %call1.i16.i = call  double @__nv_hypot(double %30, double %31) nounwind
  %call2.i17.i = call  double @__nv_log(double %call1.i16.i) nounwind
  store double %call2.i17.i, double* %y.i14.i, align 8
  %32 = load double* %y.i14.i, align 8
  %33 = load i8** %res.addr.i10.i, align 8
  %34 = bitcast i8* %33 to double*
  store double %32, double* %34, align 8
  %35 = load double* %x.i13.i, align 8
  %36 = load i8** %res.addr.i10.i, align 8
  %37 = bitcast i8* %36 to double*
  %arrayidx3.i18.i = getelementptr inbounds double* %37, i64 1
  store double %35, double* %arrayidx3.i18.i, align 8
  %r3.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %38 = load double* %r3.i, align 8
  store double %38, double* %x2.i, align 8
  %i4.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %39 = load double* %i4.i, align 8
  store double %39, double* %y2.i, align 8
  %40 = load double* %y1.i, align 8
  %41 = load double* %y2.i, align 8
  %sub5.i = fsub double %40, %41
  %mul.i = fmul double %sub5.i, 5.000000e-01
  %sub6.i = fsub double -0.000000e+00, %mul.i
  store double %sub6.i, double* %x.i, align 8
  %42 = load double* %x1.i, align 8
  %43 = load double* %x2.i, align 8
  %sub7.i = fsub double %42, %43
  %mul8.i = fmul double %sub7.i, 5.000000e-01
  store double %mul8.i, double* %y.i, align 8
  %44 = load double* %x.i, align 8
  %45 = load i8** %res.addr.i, align 8
  %46 = bitcast i8* %45 to double*
  store double %44, double* %46, align 8
  %47 = load double* %y.i, align 8
  %48 = load i8** %res.addr.i, align 8
  %49 = bitcast i8* %48 to double*
  %arrayidx9.i = getelementptr inbounds double* %49, i64 1
  store double %47, double* %arrayidx9.i, align 8
  ret void
}

define  void @__pgi_ccos_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_cosf(float %4) nounwind
  store float %call.i, float* %x.i, align 4
  %5 = load float* %real1.addr.i, align 4
  %call1.i = call  float @__nv_sinf(float %5) nounwind
  store float %call1.i, float* %y.i, align 4
  %6 = load float* %x.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %call2.i = call  float @__nv_coshf(float %7) nounwind
  %mul.i = fmul float %6, %call2.i
  store float %mul.i, float* %x.i, align 4
  %8 = load float* %y.i, align 4
  %sub.i = fsub float -0.000000e+00, %8
  %9 = load float* %imag1.addr.i, align 4
  %call3.i = call  float @__nv_sinhf(float %9) nounwind
  %mul4.i = fmul float %sub.i, %call3.i
  store float %mul4.i, float* %y.i, align 4
  %10 = load float* %x.i, align 4
  %11 = load i8** %res.addr.i, align 8
  %12 = bitcast i8* %11 to float*
  store float %10, float* %12, align 4
  %13 = load float* %y.i, align 4
  %14 = load i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to float*
  %arrayidx5.i = getelementptr inbounds float* %15, i64 1
  store float %13, float* %arrayidx5.i, align 4
  ret void
}

define  void @__pgi_ccosh_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i7.i = alloca i8*, align 8
  %real1.addr.i8.i = alloca float, align 4
  %imag1.addr.i9.i = alloca float, align 4
  %x.i10.i = alloca float, align 4
  %y.i11.i = alloca float, align 4
  %z.i12.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %z.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = bitcast %struct.cmplx2* %tmp.i to i8*
  %5 = load float* %real1.addr.i, align 4
  %6 = load float* %imag1.addr.i, align 4
  store i8* %4, i8** %res.addr.i.i, align 8
  store float %5, float* %real1.addr.i.i, align 4
  store float %6, float* %imag1.addr.i.i, align 4
  %7 = load float* %real1.addr.i.i, align 4
  %call.i.i = call  float @__nv_expf(float %7) nounwind
  store float %call.i.i, float* %x.i.i, align 4
  %8 = load float* %imag1.addr.i.i, align 4
  call  void @__nv_sincosf(float %8, float* %z.i.i, float* %y.i.i) nounwind
  %9 = load float* %x.i.i, align 4
  %10 = load float* %y.i.i, align 4
  %mul.i.i = fmul float %10, %9
  store float %mul.i.i, float* %y.i.i, align 4
  %11 = load float* %x.i.i, align 4
  %12 = load float* %z.i.i, align 4
  %mul1.i.i = fmul float %12, %11
  store float %mul1.i.i, float* %z.i.i, align 4
  %13 = load float* %y.i.i, align 4
  %14 = load i8** %res.addr.i.i, align 8
  %15 = bitcast i8* %14 to float*
  store float %13, float* %15, align 4
  %16 = load float* %z.i.i, align 4
  %17 = load i8** %res.addr.i.i, align 8
  %18 = bitcast i8* %17 to float*
  %arrayidx2.i.i = getelementptr inbounds float* %18, i64 1
  store float %16, float* %arrayidx2.i.i, align 4
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %19 = load float* %r.i, align 4
  store float %19, float* %x.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %20 = load float* %i.i, align 4
  store float %20, float* %y.i, align 4
  %21 = bitcast %struct.cmplx2* %tmp.i to i8*
  %22 = load float* %real1.addr.i, align 4
  %sub.i = fsub float -0.000000e+00, %22
  %23 = load float* %imag1.addr.i, align 4
  %sub1.i = fsub float -0.000000e+00, %23
  store i8* %21, i8** %res.addr.i7.i, align 8
  store float %sub.i, float* %real1.addr.i8.i, align 4
  store float %sub1.i, float* %imag1.addr.i9.i, align 4
  %24 = load float* %real1.addr.i8.i, align 4
  %call.i13.i = call  float @__nv_expf(float %24) nounwind
  store float %call.i13.i, float* %x.i10.i, align 4
  %25 = load float* %imag1.addr.i9.i, align 4
  call  void @__nv_sincosf(float %25, float* %z.i12.i, float* %y.i11.i) nounwind
  %26 = load float* %x.i10.i, align 4
  %27 = load float* %y.i11.i, align 4
  %mul.i14.i = fmul float %27, %26
  store float %mul.i14.i, float* %y.i11.i, align 4
  %28 = load float* %x.i10.i, align 4
  %29 = load float* %z.i12.i, align 4
  %mul1.i15.i = fmul float %29, %28
  store float %mul1.i15.i, float* %z.i12.i, align 4
  %30 = load float* %y.i11.i, align 4
  %31 = load i8** %res.addr.i7.i, align 8
  %32 = bitcast i8* %31 to float*
  store float %30, float* %32, align 4
  %33 = load float* %z.i12.i, align 4
  %34 = load i8** %res.addr.i7.i, align 8
  %35 = bitcast i8* %34 to float*
  %arrayidx2.i16.i = getelementptr inbounds float* %35, i64 1
  store float %33, float* %arrayidx2.i16.i, align 4
  %r2.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %36 = load float* %r2.i, align 4
  %37 = load float* %x.i, align 4
  %add.i = fadd float %37, %36
  store float %add.i, float* %x.i, align 4
  %i3.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %38 = load float* %i3.i, align 4
  %39 = load float* %y.i, align 4
  %add4.i = fadd float %39, %38
  store float %add4.i, float* %y.i, align 4
  %40 = load float* %x.i, align 4
  %mul.i = fmul float %40, 5.000000e-01
  store float %mul.i, float* %x.i, align 4
  %41 = load float* %y.i, align 4
  %mul5.i = fmul float %41, 5.000000e-01
  store float %mul5.i, float* %y.i, align 4
  %42 = load float* %x.i, align 4
  %43 = load i8** %res.addr.i, align 8
  %44 = bitcast i8* %43 to float*
  store float %42, float* %44, align 4
  %45 = load float* %y.i, align 4
  %46 = load i8** %res.addr.i, align 8
  %47 = bitcast i8* %46 to float*
  %arrayidx6.i = getelementptr inbounds float* %47, i64 1
  store float %45, float* %arrayidx6.i, align 4
  ret void
}

define  void @__pgi_csin_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_sinf(float %4) nounwind
  store float %call.i, float* %x.i, align 4
  %5 = load float* %real1.addr.i, align 4
  %call1.i = call  float @__nv_cosf(float %5) nounwind
  store float %call1.i, float* %y.i, align 4
  %6 = load float* %x.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %call2.i = call  float @__nv_coshf(float %7) nounwind
  %mul.i = fmul float %6, %call2.i
  store float %mul.i, float* %x.i, align 4
  %8 = load float* %y.i, align 4
  %9 = load float* %imag1.addr.i, align 4
  %call3.i = call  float @__nv_sinhf(float %9) nounwind
  %mul4.i = fmul float %8, %call3.i
  store float %mul4.i, float* %y.i, align 4
  %10 = load float* %x.i, align 4
  %11 = load i8** %res.addr.i, align 8
  %12 = bitcast i8* %11 to float*
  store float %10, float* %12, align 4
  %13 = load float* %y.i, align 4
  %14 = load i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to float*
  %arrayidx5.i = getelementptr inbounds float* %15, i64 1
  store float %13, float* %arrayidx5.i, align 4
  ret void
}

define  void @__pgi_ctan_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i18.i = alloca i8*, align 8
  %real1.addr.i19.i = alloca float, align 4
  %imag1.addr.i20.i = alloca float, align 4
  %real2.addr.i.i = alloca float, align 4
  %imag2.addr.i.i = alloca float, align 4
  %x.i21.i = alloca float, align 4
  %y.i22.i = alloca float, align 4
  %r.i.i = alloca float, align 4
  %d.i.i = alloca float, align 4
  %r_mag.i.i = alloca float, align 4
  %i_mag.i.i = alloca float, align 4
  %res.addr.i6.i = alloca i8*, align 8
  %real1.addr.i7.i = alloca float, align 4
  %imag1.addr.i8.i = alloca float, align 4
  %x.i9.i = alloca float, align 4
  %y.i10.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %x1.i = alloca float, align 4
  %y1.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = bitcast %struct.cmplx2* %tmp.i to i8*
  %5 = load float* %real1.addr.i, align 4
  %6 = load float* %imag1.addr.i, align 4
  store i8* %4, i8** %res.addr.i.i, align 8
  store float %5, float* %real1.addr.i.i, align 4
  store float %6, float* %imag1.addr.i.i, align 4
  %7 = load float* %real1.addr.i.i, align 4
  %call.i.i = call  float @__nv_sinf(float %7) nounwind
  store float %call.i.i, float* %x.i.i, align 4
  %8 = load float* %real1.addr.i.i, align 4
  %call1.i.i = call  float @__nv_cosf(float %8) nounwind
  store float %call1.i.i, float* %y.i.i, align 4
  %9 = load float* %x.i.i, align 4
  %10 = load float* %imag1.addr.i.i, align 4
  %call2.i.i = call  float @__nv_coshf(float %10) nounwind
  %mul.i.i = fmul float %9, %call2.i.i
  store float %mul.i.i, float* %x.i.i, align 4
  %11 = load float* %y.i.i, align 4
  %12 = load float* %imag1.addr.i.i, align 4
  %call3.i.i = call  float @__nv_sinhf(float %12) nounwind
  %mul4.i.i = fmul float %11, %call3.i.i
  store float %mul4.i.i, float* %y.i.i, align 4
  %13 = load float* %x.i.i, align 4
  %14 = load i8** %res.addr.i.i, align 8
  %15 = bitcast i8* %14 to float*
  store float %13, float* %15, align 4
  %16 = load float* %y.i.i, align 4
  %17 = load i8** %res.addr.i.i, align 8
  %18 = bitcast i8* %17 to float*
  %arrayidx5.i.i = getelementptr inbounds float* %18, i64 1
  store float %16, float* %arrayidx5.i.i, align 4
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %19 = load float* %r.i, align 4
  store float %19, float* %x.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %20 = load float* %i.i, align 4
  store float %20, float* %y.i, align 4
  %21 = bitcast %struct.cmplx2* %tmp.i to i8*
  %22 = load float* %real1.addr.i, align 4
  %23 = load float* %imag1.addr.i, align 4
  store i8* %21, i8** %res.addr.i6.i, align 8
  store float %22, float* %real1.addr.i7.i, align 4
  store float %23, float* %imag1.addr.i8.i, align 4
  %24 = load float* %real1.addr.i7.i, align 4
  %call.i11.i = call  float @__nv_cosf(float %24) nounwind
  store float %call.i11.i, float* %x.i9.i, align 4
  %25 = load float* %real1.addr.i7.i, align 4
  %call1.i12.i = call  float @__nv_sinf(float %25) nounwind
  store float %call1.i12.i, float* %y.i10.i, align 4
  %26 = load float* %x.i9.i, align 4
  %27 = load float* %imag1.addr.i8.i, align 4
  %call2.i13.i = call  float @__nv_coshf(float %27) nounwind
  %mul.i14.i = fmul float %26, %call2.i13.i
  store float %mul.i14.i, float* %x.i9.i, align 4
  %28 = load float* %y.i10.i, align 4
  %sub.i.i = fsub float -0.000000e+00, %28
  %29 = load float* %imag1.addr.i8.i, align 4
  %call3.i15.i = call  float @__nv_sinhf(float %29) nounwind
  %mul4.i16.i = fmul float %sub.i.i, %call3.i15.i
  store float %mul4.i16.i, float* %y.i10.i, align 4
  %30 = load float* %x.i9.i, align 4
  %31 = load i8** %res.addr.i6.i, align 8
  %32 = bitcast i8* %31 to float*
  store float %30, float* %32, align 4
  %33 = load float* %y.i10.i, align 4
  %34 = load i8** %res.addr.i6.i, align 8
  %35 = bitcast i8* %34 to float*
  %arrayidx5.i17.i = getelementptr inbounds float* %35, i64 1
  store float %33, float* %arrayidx5.i17.i, align 4
  %r1.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %36 = load float* %r1.i, align 4
  store float %36, float* %x1.i, align 4
  %i2.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %37 = load float* %i2.i, align 4
  store float %37, float* %y1.i, align 4
  %38 = bitcast %struct.cmplx2* %tmp.i to i8*
  %39 = load float* %x.i, align 4
  %40 = load float* %y.i, align 4
  %41 = load float* %x1.i, align 4
  %42 = load float* %y1.i, align 4
  store i8* %38, i8** %res.addr.i18.i, align 8
  store float %39, float* %real1.addr.i19.i, align 4
  store float %40, float* %imag1.addr.i20.i, align 4
  store float %41, float* %real2.addr.i.i, align 4
  store float %42, float* %imag2.addr.i.i, align 4
  %43 = load float* %real2.addr.i.i, align 4
  store float %43, float* %r_mag.i.i, align 4
  %44 = load float* %r_mag.i.i, align 4
  %cmp.i.i = fcmp olt float %44, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %entry
  %45 = load float* %r_mag.i.i, align 4
  %sub.i23.i = fsub float -0.000000e+00, %45
  store float %sub.i23.i, float* %r_mag.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %entry
  %46 = load float* %imag2.addr.i.i, align 4
  store float %46, float* %i_mag.i.i, align 4
  %47 = load float* %i_mag.i.i, align 4
  %cmp1.i.i = fcmp olt float %47, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %48 = load float* %i_mag.i.i, align 4
  %sub3.i.i = fsub float -0.000000e+00, %48
  store float %sub3.i.i, float* %i_mag.i.i, align 4
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %49 = load float* %r_mag.i.i, align 4
  %50 = load float* %i_mag.i.i, align 4
  %cmp5.i.i = fcmp ole float %49, %50
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %51 = load float* %real2.addr.i.i, align 4
  %52 = load float* %imag2.addr.i.i, align 4
  %div.i.i = fdiv float %51, %52
  store float %div.i.i, float* %r.i.i, align 4
  %53 = load float* %imag2.addr.i.i, align 4
  %54 = load float* %r.i.i, align 4
  %55 = load float* %r.i.i, align 4
  %mul.i24.i = fmul float %54, %55
  %add.i.i = fadd float 1.000000e+00, %mul.i24.i
  %mul7.i.i = fmul float %53, %add.i.i
  %div8.i.i = fdiv float 1.000000e+00, %mul7.i.i
  store float %div8.i.i, float* %d.i.i, align 4
  %56 = load float* %real1.addr.i19.i, align 4
  %57 = load float* %r.i.i, align 4
  %mul9.i.i = fmul float %56, %57
  %58 = load float* %imag1.addr.i20.i, align 4
  %add10.i.i = fadd float %mul9.i.i, %58
  %59 = load float* %d.i.i, align 4
  %mul11.i.i = fmul float %add10.i.i, %59
  store float %mul11.i.i, float* %x.i21.i, align 4
  %60 = load float* %imag1.addr.i20.i, align 4
  %61 = load float* %r.i.i, align 4
  %mul12.i.i = fmul float %60, %61
  %62 = load float* %real1.addr.i19.i, align 4
  %sub13.i.i = fsub float %mul12.i.i, %62
  %63 = load float* %d.i.i, align 4
  %mul14.i.i = fmul float %sub13.i.i, %63
  store float %mul14.i.i, float* %y.i22.i, align 4
  br label %__pgi_ctan.exit

if.else.i.i:                                      ; preds = %if.end4.i.i
  %64 = load float* %imag2.addr.i.i, align 4
  %65 = load float* %real2.addr.i.i, align 4
  %div15.i.i = fdiv float %64, %65
  store float %div15.i.i, float* %r.i.i, align 4
  %66 = load float* %real2.addr.i.i, align 4
  %67 = load float* %r.i.i, align 4
  %68 = load float* %r.i.i, align 4
  %mul16.i.i = fmul float %67, %68
  %add17.i.i = fadd float 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul float %66, %add17.i.i
  %div19.i.i = fdiv float 1.000000e+00, %mul18.i.i
  store float %div19.i.i, float* %d.i.i, align 4
  %69 = load float* %real1.addr.i19.i, align 4
  %70 = load float* %imag1.addr.i20.i, align 4
  %71 = load float* %r.i.i, align 4
  %mul20.i.i = fmul float %70, %71
  %add21.i.i = fadd float %69, %mul20.i.i
  %72 = load float* %d.i.i, align 4
  %mul22.i.i = fmul float %add21.i.i, %72
  store float %mul22.i.i, float* %x.i21.i, align 4
  %73 = load float* %imag1.addr.i20.i, align 4
  %74 = load float* %real1.addr.i19.i, align 4
  %75 = load float* %r.i.i, align 4
  %mul23.i.i = fmul float %74, %75
  %sub24.i.i = fsub float %73, %mul23.i.i
  %76 = load float* %d.i.i, align 4
  %mul25.i.i = fmul float %sub24.i.i, %76
  store float %mul25.i.i, float* %y.i22.i, align 4
  br label %__pgi_ctan.exit

__pgi_ctan.exit:                                  ; preds = %if.else.i.i, %if.then6.i.i
  %77 = load float* %x.i21.i, align 4
  %78 = load i8** %res.addr.i18.i, align 8
  %79 = bitcast i8* %78 to float*
  store float %77, float* %79, align 4
  %80 = load float* %y.i22.i, align 4
  %81 = load i8** %res.addr.i18.i, align 8
  %82 = bitcast i8* %81 to float*
  %arrayidx27.i.i = getelementptr inbounds float* %82, i64 1
  store float %80, float* %arrayidx27.i.i, align 4
  %r3.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %83 = load float* %r3.i, align 4
  store float %83, float* %x.i, align 4
  %i4.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %84 = load float* %i4.i, align 4
  store float %84, float* %y.i, align 4
  %85 = load float* %x.i, align 4
  %86 = load i8** %res.addr.i, align 8
  %87 = bitcast i8* %86 to float*
  store float %85, float* %87, align 4
  %88 = load float* %y.i, align 4
  %89 = load i8** %res.addr.i, align 8
  %90 = bitcast i8* %89 to float*
  %arrayidx5.i = getelementptr inbounds float* %90, i64 1
  store float %88, float* %arrayidx5.i, align 4
  ret void
}

define  void @__pgi_ctanh_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i28.i = alloca i8*, align 8
  %real1.addr.i29.i = alloca float, align 4
  %imag1.addr.i30.i = alloca float, align 4
  %real2.addr.i.i = alloca float, align 4
  %imag2.addr.i.i = alloca float, align 4
  %x.i31.i = alloca float, align 4
  %y.i32.i = alloca float, align 4
  %r.i33.i = alloca float, align 4
  %d.i.i = alloca float, align 4
  %r_mag.i.i = alloca float, align 4
  %i_mag.i.i = alloca float, align 4
  %res.addr.i7.i.i = alloca i8*, align 8
  %real1.addr.i8.i.i = alloca float, align 4
  %imag1.addr.i9.i.i = alloca float, align 4
  %x.i10.i.i = alloca float, align 4
  %y.i11.i.i = alloca float, align 4
  %z.i12.i.i = alloca float, align 4
  %res.addr.i.i6.i = alloca i8*, align 8
  %real1.addr.i.i7.i = alloca float, align 4
  %imag1.addr.i.i8.i = alloca float, align 4
  %x.i.i9.i = alloca float, align 4
  %y.i.i10.i = alloca float, align 4
  %z.i.i11.i = alloca float, align 4
  %res.addr.i12.i = alloca i8*, align 8
  %real1.addr.i13.i = alloca float, align 4
  %imag1.addr.i14.i = alloca float, align 4
  %x.i15.i = alloca float, align 4
  %y.i16.i = alloca float, align 4
  %tmp.i17.i = alloca %struct.cmplx2, align 4
  %res.addr.i8.i.i = alloca i8*, align 8
  %real1.addr.i9.i.i = alloca float, align 4
  %imag1.addr.i10.i.i = alloca float, align 4
  %x.i11.i.i = alloca float, align 4
  %y.i12.i.i = alloca float, align 4
  %z.i13.i.i = alloca float, align 4
  %res.addr.i.i.i = alloca i8*, align 8
  %real1.addr.i.i.i = alloca float, align 4
  %imag1.addr.i.i.i = alloca float, align 4
  %x.i.i.i = alloca float, align 4
  %y.i.i.i = alloca float, align 4
  %z.i.i.i = alloca float, align 4
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %tmp.i.i = alloca %struct.cmplx2, align 4
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %x1.i = alloca float, align 4
  %y1.i = alloca float, align 4
  %tmp.i = alloca %struct.cmplx2, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = bitcast %struct.cmplx2* %tmp.i to i8*
  %5 = load float* %real1.addr.i, align 4
  %6 = load float* %imag1.addr.i, align 4
  store i8* %4, i8** %res.addr.i.i, align 8
  store float %5, float* %real1.addr.i.i, align 4
  store float %6, float* %imag1.addr.i.i, align 4
  %7 = bitcast %struct.cmplx2* %tmp.i.i to i8*
  %8 = load float* %real1.addr.i.i, align 4
  %9 = load float* %imag1.addr.i.i, align 4
  store i8* %7, i8** %res.addr.i.i.i, align 8
  store float %8, float* %real1.addr.i.i.i, align 4
  store float %9, float* %imag1.addr.i.i.i, align 4
  %10 = load float* %real1.addr.i.i.i, align 4
  %call.i.i.i = call  float @__nv_expf(float %10) nounwind
  store float %call.i.i.i, float* %x.i.i.i, align 4
  %11 = load float* %imag1.addr.i.i.i, align 4
  call  void @__nv_sincosf(float %11, float* %z.i.i.i, float* %y.i.i.i) nounwind
  %12 = load float* %x.i.i.i, align 4
  %13 = load float* %y.i.i.i, align 4
  %mul.i.i.i = fmul float %13, %12
  store float %mul.i.i.i, float* %y.i.i.i, align 4
  %14 = load float* %x.i.i.i, align 4
  %15 = load float* %z.i.i.i, align 4
  %mul1.i.i.i = fmul float %15, %14
  store float %mul1.i.i.i, float* %z.i.i.i, align 4
  %16 = load float* %y.i.i.i, align 4
  %17 = load i8** %res.addr.i.i.i, align 8
  %18 = bitcast i8* %17 to float*
  store float %16, float* %18, align 4
  %19 = load float* %z.i.i.i, align 4
  %20 = load i8** %res.addr.i.i.i, align 8
  %21 = bitcast i8* %20 to float*
  %arrayidx2.i.i.i = getelementptr inbounds float* %21, i64 1
  store float %19, float* %arrayidx2.i.i.i, align 4
  %r.i.i = getelementptr inbounds %struct.cmplx2* %tmp.i.i, i32 0, i32 0
  %22 = load float* %r.i.i, align 4
  store float %22, float* %x.i.i, align 4
  %i.i.i = getelementptr inbounds %struct.cmplx2* %tmp.i.i, i32 0, i32 1
  %23 = load float* %i.i.i, align 4
  store float %23, float* %y.i.i, align 4
  %24 = bitcast %struct.cmplx2* %tmp.i.i to i8*
  %25 = load float* %real1.addr.i.i, align 4
  %sub.i.i = fsub float -0.000000e+00, %25
  %26 = load float* %imag1.addr.i.i, align 4
  %sub1.i.i = fsub float -0.000000e+00, %26
  store i8* %24, i8** %res.addr.i8.i.i, align 8
  store float %sub.i.i, float* %real1.addr.i9.i.i, align 4
  store float %sub1.i.i, float* %imag1.addr.i10.i.i, align 4
  %27 = load float* %real1.addr.i9.i.i, align 4
  %call.i14.i.i = call  float @__nv_expf(float %27) nounwind
  store float %call.i14.i.i, float* %x.i11.i.i, align 4
  %28 = load float* %imag1.addr.i10.i.i, align 4
  call  void @__nv_sincosf(float %28, float* %z.i13.i.i, float* %y.i12.i.i) nounwind
  %29 = load float* %x.i11.i.i, align 4
  %30 = load float* %y.i12.i.i, align 4
  %mul.i15.i.i = fmul float %30, %29
  store float %mul.i15.i.i, float* %y.i12.i.i, align 4
  %31 = load float* %x.i11.i.i, align 4
  %32 = load float* %z.i13.i.i, align 4
  %mul1.i16.i.i = fmul float %32, %31
  store float %mul1.i16.i.i, float* %z.i13.i.i, align 4
  %33 = load float* %y.i12.i.i, align 4
  %34 = load i8** %res.addr.i8.i.i, align 8
  %35 = bitcast i8* %34 to float*
  store float %33, float* %35, align 4
  %36 = load float* %z.i13.i.i, align 4
  %37 = load i8** %res.addr.i8.i.i, align 8
  %38 = bitcast i8* %37 to float*
  %arrayidx2.i17.i.i = getelementptr inbounds float* %38, i64 1
  store float %36, float* %arrayidx2.i17.i.i, align 4
  %r2.i.i = getelementptr inbounds %struct.cmplx2* %tmp.i.i, i32 0, i32 0
  %39 = load float* %r2.i.i, align 4
  %40 = load float* %x.i.i, align 4
  %sub3.i.i = fsub float %40, %39
  store float %sub3.i.i, float* %x.i.i, align 4
  %i4.i.i = getelementptr inbounds %struct.cmplx2* %tmp.i.i, i32 0, i32 1
  %41 = load float* %i4.i.i, align 4
  %42 = load float* %y.i.i, align 4
  %sub5.i.i = fsub float %42, %41
  store float %sub5.i.i, float* %y.i.i, align 4
  %43 = load float* %x.i.i, align 4
  %mul.i.i = fmul float %43, 5.000000e-01
  store float %mul.i.i, float* %x.i.i, align 4
  %44 = load float* %y.i.i, align 4
  %mul6.i.i = fmul float %44, 5.000000e-01
  store float %mul6.i.i, float* %y.i.i, align 4
  %45 = load float* %x.i.i, align 4
  %46 = load i8** %res.addr.i.i, align 8
  %47 = bitcast i8* %46 to float*
  store float %45, float* %47, align 4
  %48 = load float* %y.i.i, align 4
  %49 = load i8** %res.addr.i.i, align 8
  %50 = bitcast i8* %49 to float*
  %arrayidx7.i.i = getelementptr inbounds float* %50, i64 1
  store float %48, float* %arrayidx7.i.i, align 4
  %r.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %51 = load float* %r.i, align 4
  store float %51, float* %x.i, align 4
  %i.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %52 = load float* %i.i, align 4
  store float %52, float* %y.i, align 4
  %53 = bitcast %struct.cmplx2* %tmp.i to i8*
  %54 = load float* %real1.addr.i, align 4
  %55 = load float* %imag1.addr.i, align 4
  store i8* %53, i8** %res.addr.i12.i, align 8
  store float %54, float* %real1.addr.i13.i, align 4
  store float %55, float* %imag1.addr.i14.i, align 4
  %56 = bitcast %struct.cmplx2* %tmp.i17.i to i8*
  %57 = load float* %real1.addr.i13.i, align 4
  %58 = load float* %imag1.addr.i14.i, align 4
  store i8* %56, i8** %res.addr.i.i6.i, align 8
  store float %57, float* %real1.addr.i.i7.i, align 4
  store float %58, float* %imag1.addr.i.i8.i, align 4
  %59 = load float* %real1.addr.i.i7.i, align 4
  %call.i.i18.i = call  float @__nv_expf(float %59) nounwind
  store float %call.i.i18.i, float* %x.i.i9.i, align 4
  %60 = load float* %imag1.addr.i.i8.i, align 4
  call  void @__nv_sincosf(float %60, float* %z.i.i11.i, float* %y.i.i10.i) nounwind
  %61 = load float* %x.i.i9.i, align 4
  %62 = load float* %y.i.i10.i, align 4
  %mul.i.i19.i = fmul float %62, %61
  store float %mul.i.i19.i, float* %y.i.i10.i, align 4
  %63 = load float* %x.i.i9.i, align 4
  %64 = load float* %z.i.i11.i, align 4
  %mul1.i.i20.i = fmul float %64, %63
  store float %mul1.i.i20.i, float* %z.i.i11.i, align 4
  %65 = load float* %y.i.i10.i, align 4
  %66 = load i8** %res.addr.i.i6.i, align 8
  %67 = bitcast i8* %66 to float*
  store float %65, float* %67, align 4
  %68 = load float* %z.i.i11.i, align 4
  %69 = load i8** %res.addr.i.i6.i, align 8
  %70 = bitcast i8* %69 to float*
  %arrayidx2.i.i21.i = getelementptr inbounds float* %70, i64 1
  store float %68, float* %arrayidx2.i.i21.i, align 4
  %r.i22.i = getelementptr inbounds %struct.cmplx2* %tmp.i17.i, i32 0, i32 0
  %71 = load float* %r.i22.i, align 4
  store float %71, float* %x.i15.i, align 4
  %i.i23.i = getelementptr inbounds %struct.cmplx2* %tmp.i17.i, i32 0, i32 1
  %72 = load float* %i.i23.i, align 4
  store float %72, float* %y.i16.i, align 4
  %73 = bitcast %struct.cmplx2* %tmp.i17.i to i8*
  %74 = load float* %real1.addr.i13.i, align 4
  %sub.i24.i = fsub float -0.000000e+00, %74
  %75 = load float* %imag1.addr.i14.i, align 4
  %sub1.i25.i = fsub float -0.000000e+00, %75
  store i8* %73, i8** %res.addr.i7.i.i, align 8
  store float %sub.i24.i, float* %real1.addr.i8.i.i, align 4
  store float %sub1.i25.i, float* %imag1.addr.i9.i.i, align 4
  %76 = load float* %real1.addr.i8.i.i, align 4
  %call.i13.i.i = call  float @__nv_expf(float %76) nounwind
  store float %call.i13.i.i, float* %x.i10.i.i, align 4
  %77 = load float* %imag1.addr.i9.i.i, align 4
  call  void @__nv_sincosf(float %77, float* %z.i12.i.i, float* %y.i11.i.i) nounwind
  %78 = load float* %x.i10.i.i, align 4
  %79 = load float* %y.i11.i.i, align 4
  %mul.i14.i.i = fmul float %79, %78
  store float %mul.i14.i.i, float* %y.i11.i.i, align 4
  %80 = load float* %x.i10.i.i, align 4
  %81 = load float* %z.i12.i.i, align 4
  %mul1.i15.i.i = fmul float %81, %80
  store float %mul1.i15.i.i, float* %z.i12.i.i, align 4
  %82 = load float* %y.i11.i.i, align 4
  %83 = load i8** %res.addr.i7.i.i, align 8
  %84 = bitcast i8* %83 to float*
  store float %82, float* %84, align 4
  %85 = load float* %z.i12.i.i, align 4
  %86 = load i8** %res.addr.i7.i.i, align 8
  %87 = bitcast i8* %86 to float*
  %arrayidx2.i16.i.i = getelementptr inbounds float* %87, i64 1
  store float %85, float* %arrayidx2.i16.i.i, align 4
  %r2.i26.i = getelementptr inbounds %struct.cmplx2* %tmp.i17.i, i32 0, i32 0
  %88 = load float* %r2.i26.i, align 4
  %89 = load float* %x.i15.i, align 4
  %add.i.i = fadd float %89, %88
  store float %add.i.i, float* %x.i15.i, align 4
  %i3.i.i = getelementptr inbounds %struct.cmplx2* %tmp.i17.i, i32 0, i32 1
  %90 = load float* %i3.i.i, align 4
  %91 = load float* %y.i16.i, align 4
  %add4.i.i = fadd float %91, %90
  store float %add4.i.i, float* %y.i16.i, align 4
  %92 = load float* %x.i15.i, align 4
  %mul.i27.i = fmul float %92, 5.000000e-01
  store float %mul.i27.i, float* %x.i15.i, align 4
  %93 = load float* %y.i16.i, align 4
  %mul5.i.i = fmul float %93, 5.000000e-01
  store float %mul5.i.i, float* %y.i16.i, align 4
  %94 = load float* %x.i15.i, align 4
  %95 = load i8** %res.addr.i12.i, align 8
  %96 = bitcast i8* %95 to float*
  store float %94, float* %96, align 4
  %97 = load float* %y.i16.i, align 4
  %98 = load i8** %res.addr.i12.i, align 8
  %99 = bitcast i8* %98 to float*
  %arrayidx6.i.i = getelementptr inbounds float* %99, i64 1
  store float %97, float* %arrayidx6.i.i, align 4
  %r1.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %100 = load float* %r1.i, align 4
  store float %100, float* %x1.i, align 4
  %i2.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %101 = load float* %i2.i, align 4
  store float %101, float* %y1.i, align 4
  %102 = bitcast %struct.cmplx2* %tmp.i to i8*
  %103 = load float* %x.i, align 4
  %104 = load float* %y.i, align 4
  %105 = load float* %x1.i, align 4
  %106 = load float* %y1.i, align 4
  store i8* %102, i8** %res.addr.i28.i, align 8
  store float %103, float* %real1.addr.i29.i, align 4
  store float %104, float* %imag1.addr.i30.i, align 4
  store float %105, float* %real2.addr.i.i, align 4
  store float %106, float* %imag2.addr.i.i, align 4
  %107 = load float* %real2.addr.i.i, align 4
  store float %107, float* %r_mag.i.i, align 4
  %108 = load float* %r_mag.i.i, align 4
  %cmp.i.i = fcmp olt float %108, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %entry
  %109 = load float* %r_mag.i.i, align 4
  %sub.i34.i = fsub float -0.000000e+00, %109
  store float %sub.i34.i, float* %r_mag.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %entry
  %110 = load float* %imag2.addr.i.i, align 4
  store float %110, float* %i_mag.i.i, align 4
  %111 = load float* %i_mag.i.i, align 4
  %cmp1.i.i = fcmp olt float %111, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %112 = load float* %i_mag.i.i, align 4
  %sub3.i35.i = fsub float -0.000000e+00, %112
  store float %sub3.i35.i, float* %i_mag.i.i, align 4
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %113 = load float* %r_mag.i.i, align 4
  %114 = load float* %i_mag.i.i, align 4
  %cmp5.i.i = fcmp ole float %113, %114
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %115 = load float* %real2.addr.i.i, align 4
  %116 = load float* %imag2.addr.i.i, align 4
  %div.i.i = fdiv float %115, %116
  store float %div.i.i, float* %r.i33.i, align 4
  %117 = load float* %imag2.addr.i.i, align 4
  %118 = load float* %r.i33.i, align 4
  %119 = load float* %r.i33.i, align 4
  %mul.i36.i = fmul float %118, %119
  %add.i37.i = fadd float 1.000000e+00, %mul.i36.i
  %mul7.i.i = fmul float %117, %add.i37.i
  %div8.i.i = fdiv float 1.000000e+00, %mul7.i.i
  store float %div8.i.i, float* %d.i.i, align 4
  %120 = load float* %real1.addr.i29.i, align 4
  %121 = load float* %r.i33.i, align 4
  %mul9.i.i = fmul float %120, %121
  %122 = load float* %imag1.addr.i30.i, align 4
  %add10.i.i = fadd float %mul9.i.i, %122
  %123 = load float* %d.i.i, align 4
  %mul11.i.i = fmul float %add10.i.i, %123
  store float %mul11.i.i, float* %x.i31.i, align 4
  %124 = load float* %imag1.addr.i30.i, align 4
  %125 = load float* %r.i33.i, align 4
  %mul12.i.i = fmul float %124, %125
  %126 = load float* %real1.addr.i29.i, align 4
  %sub13.i.i = fsub float %mul12.i.i, %126
  %127 = load float* %d.i.i, align 4
  %mul14.i.i = fmul float %sub13.i.i, %127
  store float %mul14.i.i, float* %y.i32.i, align 4
  br label %__pgi_ctanh.exit

if.else.i.i:                                      ; preds = %if.end4.i.i
  %128 = load float* %imag2.addr.i.i, align 4
  %129 = load float* %real2.addr.i.i, align 4
  %div15.i.i = fdiv float %128, %129
  store float %div15.i.i, float* %r.i33.i, align 4
  %130 = load float* %real2.addr.i.i, align 4
  %131 = load float* %r.i33.i, align 4
  %132 = load float* %r.i33.i, align 4
  %mul16.i.i = fmul float %131, %132
  %add17.i.i = fadd float 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul float %130, %add17.i.i
  %div19.i.i = fdiv float 1.000000e+00, %mul18.i.i
  store float %div19.i.i, float* %d.i.i, align 4
  %133 = load float* %real1.addr.i29.i, align 4
  %134 = load float* %imag1.addr.i30.i, align 4
  %135 = load float* %r.i33.i, align 4
  %mul20.i.i = fmul float %134, %135
  %add21.i.i = fadd float %133, %mul20.i.i
  %136 = load float* %d.i.i, align 4
  %mul22.i.i = fmul float %add21.i.i, %136
  store float %mul22.i.i, float* %x.i31.i, align 4
  %137 = load float* %imag1.addr.i30.i, align 4
  %138 = load float* %real1.addr.i29.i, align 4
  %139 = load float* %r.i33.i, align 4
  %mul23.i.i = fmul float %138, %139
  %sub24.i.i = fsub float %137, %mul23.i.i
  %140 = load float* %d.i.i, align 4
  %mul25.i.i = fmul float %sub24.i.i, %140
  store float %mul25.i.i, float* %y.i32.i, align 4
  br label %__pgi_ctanh.exit

__pgi_ctanh.exit:                                 ; preds = %if.else.i.i, %if.then6.i.i
  %141 = load float* %x.i31.i, align 4
  %142 = load i8** %res.addr.i28.i, align 8
  %143 = bitcast i8* %142 to float*
  store float %141, float* %143, align 4
  %144 = load float* %y.i32.i, align 4
  %145 = load i8** %res.addr.i28.i, align 8
  %146 = bitcast i8* %145 to float*
  %arrayidx27.i.i = getelementptr inbounds float* %146, i64 1
  store float %144, float* %arrayidx27.i.i, align 4
  %r3.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 0
  %147 = load float* %r3.i, align 4
  store float %147, float* %x.i, align 4
  %i4.i = getelementptr inbounds %struct.cmplx2* %tmp.i, i32 0, i32 1
  %148 = load float* %i4.i, align 4
  store float %148, float* %y.i, align 4
  %149 = load float* %x.i, align 4
  %150 = load i8** %res.addr.i, align 8
  %151 = bitcast i8* %150 to float*
  store float %149, float* %151, align 4
  %152 = load float* %y.i, align 4
  %153 = load i8** %res.addr.i, align 8
  %154 = bitcast i8* %153 to float*
  %arrayidx5.i = getelementptr inbounds float* %154, i64 1
  store float %152, float* %arrayidx5.i, align 4
  ret void
}

define  void @__pgi_clog_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %imag1.addr.i, align 4
  %5 = load float* %real1.addr.i, align 4
  %call.i = call  float @__nv_atan2f(float %4, float %5) nounwind
  store float %call.i, float* %x.i, align 4
  %6 = load float* %real1.addr.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %call1.i = call  float @__nv_hypotf(float %6, float %7) nounwind
  %call2.i = call  float @__nv_logf(float %call1.i) nounwind
  store float %call2.i, float* %y.i, align 4
  %8 = load float* %y.i, align 4
  %9 = load i8** %res.addr.i, align 8
  %10 = bitcast i8* %9 to float*
  store float %8, float* %10, align 4
  %11 = load float* %x.i, align 4
  %12 = load i8** %res.addr.i, align 8
  %13 = bitcast i8* %12 to float*
  %arrayidx3.i = getelementptr inbounds float* %13, i64 1
  store float %11, float* %arrayidx3.i, align 4
  ret void
}

define  void @__pgi_csqrt_llvm(%struct.__fcomplex* %res, float %a, float %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %a.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  %4 = load float* %real1.addr.i, align 4
  %5 = load float* %imag1.addr.i, align 4
  %call.i = call  float @__nv_hypotf(float %4, float %5) nounwind
  store float %call.i, float* %a.i, align 4
  %6 = load float* %a.i, align 4
  %cmp.i = fcmp oeq float %6, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  store float 0.000000e+00, float* %x.i, align 4
  store float 0.000000e+00, float* %y.i, align 4
  br label %__pgi_csqrt.exit

if.else.i:                                        ; preds = %entry
  %7 = load float* %real1.addr.i, align 4
  %cmp1.i = fcmp ogt float %7, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.else5.i

if.then2.i:                                       ; preds = %if.else.i
  %8 = load float* %a.i, align 4
  %9 = load float* %real1.addr.i, align 4
  %add.i = fadd float %8, %9
  %mul.i = fmul float 5.000000e-01, %add.i
  %call3.i = call  float @__nv_sqrtf(float %mul.i) nounwind
  store float %call3.i, float* %x.i, align 4
  %10 = load float* %imag1.addr.i, align 4
  %11 = load float* %x.i, align 4
  %div.i = fdiv float %10, %11
  %mul4.i = fmul float 5.000000e-01, %div.i
  store float %mul4.i, float* %y.i, align 4
  br label %if.end13.i

if.else5.i:                                       ; preds = %if.else.i
  %12 = load float* %a.i, align 4
  %13 = load float* %real1.addr.i, align 4
  %sub.i = fsub float %12, %13
  %mul6.i = fmul float 5.000000e-01, %sub.i
  %call7.i = call  float @__nv_sqrtf(float %mul6.i) nounwind
  store float %call7.i, float* %y.i, align 4
  %14 = load float* %imag1.addr.i, align 4
  %cmp8.i = fcmp olt float %14, 0.000000e+00
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.else5.i
  %15 = load float* %y.i, align 4
  %sub10.i = fsub float -0.000000e+00, %15
  store float %sub10.i, float* %y.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.else5.i
  %16 = load float* %imag1.addr.i, align 4
  %17 = load float* %y.i, align 4
  %div11.i = fdiv float %16, %17
  %mul12.i = fmul float 5.000000e-01, %div11.i
  store float %mul12.i, float* %x.i, align 4
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.end.i, %if.then2.i
  br label %__pgi_csqrt.exit

__pgi_csqrt.exit:                                 ; preds = %if.end13.i, %if.then.i
  %18 = load float* %x.i, align 4
  %19 = load i8** %res.addr.i, align 8
  %20 = bitcast i8* %19 to float*
  store float %18, float* %20, align 4
  %21 = load float* %y.i, align 4
  %22 = load i8** %res.addr.i, align 8
  %23 = bitcast i8* %22 to float*
  %arrayidx15.i = getelementptr inbounds float* %23, i64 1
  store float %21, float* %arrayidx15.i, align 4
  ret void
}

define  void @__pgi_cpowi_llvm(%struct.__fcomplex* %res, float %a, float %b, i32 %i) nounwind alwaysinline {
entry:
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %real2.addr.i.i = alloca float, align 4
  %imag2.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %r.i.i = alloca float, align 4
  %d.i.i = alloca float, align 4
  %r_mag.i.i = alloca float, align 4
  %i_mag.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real.addr.i = alloca float, align 4
  %imag.addr.i = alloca float, align 4
  %i.addr.i = alloca i32, align 4
  %k.i = alloca i32, align 4
  %fr.i = alloca float, align 4
  %fi.i = alloca float, align 4
  %gr.i = alloca float, align 4
  %gi.i = alloca float, align 4
  %tr.i = alloca float, align 4
  %ti.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  %i.addr = alloca i32, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  %4 = load i32* %i.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real.addr.i, align 4
  store float %3, float* %imag.addr.i, align 4
  store i32 %4, i32* %i.addr.i, align 4
  store float 1.000000e+00, float* %fr.i, align 4
  store float 0.000000e+00, float* %fi.i, align 4
  %5 = load float* %real.addr.i, align 4
  store float %5, float* %gr.i, align 4
  %6 = load float* %imag.addr.i, align 4
  store float %6, float* %gi.i, align 4
  %7 = load i32* %i.addr.i, align 4
  store i32 %7, i32* %k.i, align 4
  %8 = load i32* %i.addr.i, align 4
  %cmp.i = icmp slt i32 %8, 0
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %9 = load i32* %i.addr.i, align 4
  %sub.i = sub nsw i32 0, %9
  store i32 %sub.i, i32* %k.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end7.i, %if.end.i
  %10 = load i32* %k.i, align 4
  %tobool.i = icmp ne i32 %10, 0
  br i1 %tobool.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %11 = load i32* %k.i, align 4
  %and.i = and i32 %11, 1
  %tobool1.i = icmp ne i32 %and.i, 0
  br i1 %tobool1.i, label %if.then2.i, label %if.end7.i

if.then2.i:                                       ; preds = %while.body.i
  %12 = load float* %fr.i, align 4
  %13 = load float* %gr.i, align 4
  %mul.i = fmul float %12, %13
  %14 = load float* %fi.i, align 4
  %15 = load float* %gi.i, align 4
  %mul3.i = fmul float %14, %15
  %sub4.i = fsub float %mul.i, %mul3.i
  store float %sub4.i, float* %tr.i, align 4
  %16 = load float* %fr.i, align 4
  %17 = load float* %gi.i, align 4
  %mul5.i = fmul float %16, %17
  %18 = load float* %fi.i, align 4
  %19 = load float* %gr.i, align 4
  %mul6.i = fmul float %18, %19
  %add.i = fadd float %mul5.i, %mul6.i
  store float %add.i, float* %ti.i, align 4
  %20 = load float* %tr.i, align 4
  store float %20, float* %fr.i, align 4
  %21 = load float* %ti.i, align 4
  store float %21, float* %fi.i, align 4
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then2.i, %while.body.i
  %22 = load i32* %k.i, align 4
  %shr.i = lshr i32 %22, 1
  store i32 %shr.i, i32* %k.i, align 4
  %23 = load float* %gr.i, align 4
  %24 = load float* %gr.i, align 4
  %mul8.i = fmul float %23, %24
  %25 = load float* %gi.i, align 4
  %26 = load float* %gi.i, align 4
  %mul9.i = fmul float %25, %26
  %sub10.i = fsub float %mul8.i, %mul9.i
  store float %sub10.i, float* %tr.i, align 4
  %27 = load float* %gr.i, align 4
  %mul11.i = fmul float 2.000000e+00, %27
  %28 = load float* %gi.i, align 4
  %mul12.i = fmul float %mul11.i, %28
  store float %mul12.i, float* %ti.i, align 4
  %29 = load float* %tr.i, align 4
  store float %29, float* %gr.i, align 4
  %30 = load float* %ti.i, align 4
  store float %30, float* %gi.i, align 4
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %31 = load i32* %i.addr.i, align 4
  %cmp13.i = icmp slt i32 %31, 0
  br i1 %cmp13.i, label %if.then14.i, label %if.else.i

if.then14.i:                                      ; preds = %while.end.i
  %32 = load i8** %res.addr.i, align 8
  %33 = load float* %fr.i, align 4
  %34 = load float* %fi.i, align 4
  store i8* %32, i8** %res.addr.i.i, align 8
  store float 1.000000e+00, float* %real1.addr.i.i, align 4
  store float 0.000000e+00, float* %imag1.addr.i.i, align 4
  store float %33, float* %real2.addr.i.i, align 4
  store float %34, float* %imag2.addr.i.i, align 4
  %35 = load float* %real2.addr.i.i, align 4
  store float %35, float* %r_mag.i.i, align 4
  %36 = load float* %r_mag.i.i, align 4
  %cmp.i.i = fcmp olt float %36, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then14.i
  %37 = load float* %r_mag.i.i, align 4
  %sub.i.i = fsub float -0.000000e+00, %37
  store float %sub.i.i, float* %r_mag.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then14.i
  %38 = load float* %imag2.addr.i.i, align 4
  store float %38, float* %i_mag.i.i, align 4
  %39 = load float* %i_mag.i.i, align 4
  %cmp1.i.i = fcmp olt float %39, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %40 = load float* %i_mag.i.i, align 4
  %sub3.i.i = fsub float -0.000000e+00, %40
  store float %sub3.i.i, float* %i_mag.i.i, align 4
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %41 = load float* %r_mag.i.i, align 4
  %42 = load float* %i_mag.i.i, align 4
  %cmp5.i.i = fcmp ole float %41, %42
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %43 = load float* %real2.addr.i.i, align 4
  %44 = load float* %imag2.addr.i.i, align 4
  %div.i.i = fdiv float %43, %44
  store float %div.i.i, float* %r.i.i, align 4
  %45 = load float* %imag2.addr.i.i, align 4
  %46 = load float* %r.i.i, align 4
  %47 = load float* %r.i.i, align 4
  %mul.i.i = fmul float %46, %47
  %add.i.i = fadd float 1.000000e+00, %mul.i.i
  %mul7.i.i = fmul float %45, %add.i.i
  %div8.i.i = fdiv float 1.000000e+00, %mul7.i.i
  store float %div8.i.i, float* %d.i.i, align 4
  %48 = load float* %real1.addr.i.i, align 4
  %49 = load float* %r.i.i, align 4
  %mul9.i.i = fmul float %48, %49
  %50 = load float* %imag1.addr.i.i, align 4
  %add10.i.i = fadd float %mul9.i.i, %50
  %51 = load float* %d.i.i, align 4
  %mul11.i.i = fmul float %add10.i.i, %51
  store float %mul11.i.i, float* %x.i.i, align 4
  %52 = load float* %imag1.addr.i.i, align 4
  %53 = load float* %r.i.i, align 4
  %mul12.i.i = fmul float %52, %53
  %54 = load float* %real1.addr.i.i, align 4
  %sub13.i.i = fsub float %mul12.i.i, %54
  %55 = load float* %d.i.i, align 4
  %mul14.i.i = fmul float %sub13.i.i, %55
  store float %mul14.i.i, float* %y.i.i, align 4
  br label %__pgi_cdiv.exit.i

if.else.i.i:                                      ; preds = %if.end4.i.i
  %56 = load float* %imag2.addr.i.i, align 4
  %57 = load float* %real2.addr.i.i, align 4
  %div15.i.i = fdiv float %56, %57
  store float %div15.i.i, float* %r.i.i, align 4
  %58 = load float* %real2.addr.i.i, align 4
  %59 = load float* %r.i.i, align 4
  %60 = load float* %r.i.i, align 4
  %mul16.i.i = fmul float %59, %60
  %add17.i.i = fadd float 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul float %58, %add17.i.i
  %div19.i.i = fdiv float 1.000000e+00, %mul18.i.i
  store float %div19.i.i, float* %d.i.i, align 4
  %61 = load float* %real1.addr.i.i, align 4
  %62 = load float* %imag1.addr.i.i, align 4
  %63 = load float* %r.i.i, align 4
  %mul20.i.i = fmul float %62, %63
  %add21.i.i = fadd float %61, %mul20.i.i
  %64 = load float* %d.i.i, align 4
  %mul22.i.i = fmul float %add21.i.i, %64
  store float %mul22.i.i, float* %x.i.i, align 4
  %65 = load float* %imag1.addr.i.i, align 4
  %66 = load float* %real1.addr.i.i, align 4
  %67 = load float* %r.i.i, align 4
  %mul23.i.i = fmul float %66, %67
  %sub24.i.i = fsub float %65, %mul23.i.i
  %68 = load float* %d.i.i, align 4
  %mul25.i.i = fmul float %sub24.i.i, %68
  store float %mul25.i.i, float* %y.i.i, align 4
  br label %__pgi_cdiv.exit.i

__pgi_cdiv.exit.i:                                ; preds = %if.else.i.i, %if.then6.i.i
  %69 = load float* %x.i.i, align 4
  %70 = load i8** %res.addr.i.i, align 8
  %71 = bitcast i8* %70 to float*
  store float %69, float* %71, align 4
  %72 = load float* %y.i.i, align 4
  %73 = load i8** %res.addr.i.i, align 8
  %74 = bitcast i8* %73 to float*
  %arrayidx27.i.i = getelementptr inbounds float* %74, i64 1
  store float %72, float* %arrayidx27.i.i, align 4
  br label %__pgi_cpowi.exit

if.else.i:                                        ; preds = %while.end.i
  %75 = load float* %fr.i, align 4
  %76 = load i8** %res.addr.i, align 8
  %77 = bitcast i8* %76 to float*
  store float %75, float* %77, align 4
  %78 = load float* %fi.i, align 4
  %79 = load i8** %res.addr.i, align 8
  %80 = bitcast i8* %79 to float*
  %arrayidx15.i = getelementptr inbounds float* %80, i64 1
  store float %78, float* %arrayidx15.i, align 4
  br label %__pgi_cpowi.exit

__pgi_cpowi.exit:                                 ; preds = %if.else.i, %__pgi_cdiv.exit.i
  ret void
}

define  void @__pgi_cpowk_llvm(%struct.__fcomplex* %res, float %a, float %b, i64 %i) nounwind alwaysinline {
entry:
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca float, align 4
  %imag1.addr.i.i = alloca float, align 4
  %real2.addr.i.i = alloca float, align 4
  %imag2.addr.i.i = alloca float, align 4
  %x.i.i = alloca float, align 4
  %y.i.i = alloca float, align 4
  %r.i.i = alloca float, align 4
  %d.i.i = alloca float, align 4
  %r_mag.i.i = alloca float, align 4
  %i_mag.i.i = alloca float, align 4
  %res.addr.i = alloca i8*, align 8
  %real.addr.i = alloca float, align 4
  %imag.addr.i = alloca float, align 4
  %i.addr.i = alloca i64, align 8
  %k.i = alloca i64, align 8
  %fr.i = alloca float, align 4
  %fi.i = alloca float, align 4
  %gr.i = alloca float, align 4
  %gi.i = alloca float, align 4
  %tr.i = alloca float, align 4
  %ti.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  %i.addr = alloca i64, align 8
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  %4 = load i64* %i.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real.addr.i, align 4
  store float %3, float* %imag.addr.i, align 4
  store i64 %4, i64* %i.addr.i, align 8
  store float 1.000000e+00, float* %fr.i, align 4
  store float 0.000000e+00, float* %fi.i, align 4
  %5 = load float* %real.addr.i, align 4
  store float %5, float* %gr.i, align 4
  %6 = load float* %imag.addr.i, align 4
  store float %6, float* %gi.i, align 4
  %7 = load i64* %i.addr.i, align 8
  store i64 %7, i64* %k.i, align 8
  %8 = load i64* %i.addr.i, align 8
  %cmp.i = icmp slt i64 %8, 0
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %9 = load i64* %i.addr.i, align 8
  %sub.i = sub nsw i64 0, %9
  store i64 %sub.i, i64* %k.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end7.i, %if.end.i
  %10 = load i64* %k.i, align 8
  %tobool.i = icmp ne i64 %10, 0
  br i1 %tobool.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %11 = load i64* %k.i, align 8
  %and.i = and i64 %11, 1
  %tobool1.i = icmp ne i64 %and.i, 0
  br i1 %tobool1.i, label %if.then2.i, label %if.end7.i

if.then2.i:                                       ; preds = %while.body.i
  %12 = load float* %fr.i, align 4
  %13 = load float* %gr.i, align 4
  %mul.i = fmul float %12, %13
  %14 = load float* %fi.i, align 4
  %15 = load float* %gi.i, align 4
  %mul3.i = fmul float %14, %15
  %sub4.i = fsub float %mul.i, %mul3.i
  store float %sub4.i, float* %tr.i, align 4
  %16 = load float* %fr.i, align 4
  %17 = load float* %gi.i, align 4
  %mul5.i = fmul float %16, %17
  %18 = load float* %fi.i, align 4
  %19 = load float* %gr.i, align 4
  %mul6.i = fmul float %18, %19
  %add.i = fadd float %mul5.i, %mul6.i
  store float %add.i, float* %ti.i, align 4
  %20 = load float* %tr.i, align 4
  store float %20, float* %fr.i, align 4
  %21 = load float* %ti.i, align 4
  store float %21, float* %fi.i, align 4
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then2.i, %while.body.i
  %22 = load i64* %k.i, align 8
  %shr.i = lshr i64 %22, 1
  store i64 %shr.i, i64* %k.i, align 8
  %23 = load float* %gr.i, align 4
  %24 = load float* %gr.i, align 4
  %mul8.i = fmul float %23, %24
  %25 = load float* %gi.i, align 4
  %26 = load float* %gi.i, align 4
  %mul9.i = fmul float %25, %26
  %sub10.i = fsub float %mul8.i, %mul9.i
  store float %sub10.i, float* %tr.i, align 4
  %27 = load float* %gr.i, align 4
  %mul11.i = fmul float 2.000000e+00, %27
  %28 = load float* %gi.i, align 4
  %mul12.i = fmul float %mul11.i, %28
  store float %mul12.i, float* %ti.i, align 4
  %29 = load float* %tr.i, align 4
  store float %29, float* %gr.i, align 4
  %30 = load float* %ti.i, align 4
  store float %30, float* %gi.i, align 4
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %31 = load i64* %i.addr.i, align 8
  %cmp13.i = icmp slt i64 %31, 0
  br i1 %cmp13.i, label %if.then14.i, label %if.else.i

if.then14.i:                                      ; preds = %while.end.i
  %32 = load i8** %res.addr.i, align 8
  %33 = load float* %fr.i, align 4
  %34 = load float* %fi.i, align 4
  store i8* %32, i8** %res.addr.i.i, align 8
  store float 1.000000e+00, float* %real1.addr.i.i, align 4
  store float 0.000000e+00, float* %imag1.addr.i.i, align 4
  store float %33, float* %real2.addr.i.i, align 4
  store float %34, float* %imag2.addr.i.i, align 4
  %35 = load float* %real2.addr.i.i, align 4
  store float %35, float* %r_mag.i.i, align 4
  %36 = load float* %r_mag.i.i, align 4
  %cmp.i.i = fcmp olt float %36, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then14.i
  %37 = load float* %r_mag.i.i, align 4
  %sub.i.i = fsub float -0.000000e+00, %37
  store float %sub.i.i, float* %r_mag.i.i, align 4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then14.i
  %38 = load float* %imag2.addr.i.i, align 4
  store float %38, float* %i_mag.i.i, align 4
  %39 = load float* %i_mag.i.i, align 4
  %cmp1.i.i = fcmp olt float %39, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %40 = load float* %i_mag.i.i, align 4
  %sub3.i.i = fsub float -0.000000e+00, %40
  store float %sub3.i.i, float* %i_mag.i.i, align 4
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %41 = load float* %r_mag.i.i, align 4
  %42 = load float* %i_mag.i.i, align 4
  %cmp5.i.i = fcmp ole float %41, %42
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %43 = load float* %real2.addr.i.i, align 4
  %44 = load float* %imag2.addr.i.i, align 4
  %div.i.i = fdiv float %43, %44
  store float %div.i.i, float* %r.i.i, align 4
  %45 = load float* %imag2.addr.i.i, align 4
  %46 = load float* %r.i.i, align 4
  %47 = load float* %r.i.i, align 4
  %mul.i.i = fmul float %46, %47
  %add.i.i = fadd float 1.000000e+00, %mul.i.i
  %mul7.i.i = fmul float %45, %add.i.i
  %div8.i.i = fdiv float 1.000000e+00, %mul7.i.i
  store float %div8.i.i, float* %d.i.i, align 4
  %48 = load float* %real1.addr.i.i, align 4
  %49 = load float* %r.i.i, align 4
  %mul9.i.i = fmul float %48, %49
  %50 = load float* %imag1.addr.i.i, align 4
  %add10.i.i = fadd float %mul9.i.i, %50
  %51 = load float* %d.i.i, align 4
  %mul11.i.i = fmul float %add10.i.i, %51
  store float %mul11.i.i, float* %x.i.i, align 4
  %52 = load float* %imag1.addr.i.i, align 4
  %53 = load float* %r.i.i, align 4
  %mul12.i.i = fmul float %52, %53
  %54 = load float* %real1.addr.i.i, align 4
  %sub13.i.i = fsub float %mul12.i.i, %54
  %55 = load float* %d.i.i, align 4
  %mul14.i.i = fmul float %sub13.i.i, %55
  store float %mul14.i.i, float* %y.i.i, align 4
  br label %__pgi_cdiv.exit.i

if.else.i.i:                                      ; preds = %if.end4.i.i
  %56 = load float* %imag2.addr.i.i, align 4
  %57 = load float* %real2.addr.i.i, align 4
  %div15.i.i = fdiv float %56, %57
  store float %div15.i.i, float* %r.i.i, align 4
  %58 = load float* %real2.addr.i.i, align 4
  %59 = load float* %r.i.i, align 4
  %60 = load float* %r.i.i, align 4
  %mul16.i.i = fmul float %59, %60
  %add17.i.i = fadd float 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul float %58, %add17.i.i
  %div19.i.i = fdiv float 1.000000e+00, %mul18.i.i
  store float %div19.i.i, float* %d.i.i, align 4
  %61 = load float* %real1.addr.i.i, align 4
  %62 = load float* %imag1.addr.i.i, align 4
  %63 = load float* %r.i.i, align 4
  %mul20.i.i = fmul float %62, %63
  %add21.i.i = fadd float %61, %mul20.i.i
  %64 = load float* %d.i.i, align 4
  %mul22.i.i = fmul float %add21.i.i, %64
  store float %mul22.i.i, float* %x.i.i, align 4
  %65 = load float* %imag1.addr.i.i, align 4
  %66 = load float* %real1.addr.i.i, align 4
  %67 = load float* %r.i.i, align 4
  %mul23.i.i = fmul float %66, %67
  %sub24.i.i = fsub float %65, %mul23.i.i
  %68 = load float* %d.i.i, align 4
  %mul25.i.i = fmul float %sub24.i.i, %68
  store float %mul25.i.i, float* %y.i.i, align 4
  br label %__pgi_cdiv.exit.i

__pgi_cdiv.exit.i:                                ; preds = %if.else.i.i, %if.then6.i.i
  %69 = load float* %x.i.i, align 4
  %70 = load i8** %res.addr.i.i, align 8
  %71 = bitcast i8* %70 to float*
  store float %69, float* %71, align 4
  %72 = load float* %y.i.i, align 4
  %73 = load i8** %res.addr.i.i, align 8
  %74 = bitcast i8* %73 to float*
  %arrayidx27.i.i = getelementptr inbounds float* %74, i64 1
  store float %72, float* %arrayidx27.i.i, align 4
  br label %__pgi_cpowk.exit

if.else.i:                                        ; preds = %while.end.i
  %75 = load float* %fr.i, align 4
  %76 = load i8** %res.addr.i, align 8
  %77 = bitcast i8* %76 to float*
  store float %75, float* %77, align 4
  %78 = load float* %fi.i, align 4
  %79 = load i8** %res.addr.i, align 8
  %80 = bitcast i8* %79 to float*
  %arrayidx15.i = getelementptr inbounds float* %80, i64 1
  store float %78, float* %arrayidx15.i, align 4
  br label %__pgi_cpowk.exit

__pgi_cpowk.exit:                                 ; preds = %if.else.i, %__pgi_cdiv.exit.i
  ret void
}

define  void @__pgi_cpowc_llvm(%struct.__fcomplex* %res, float %a, float %b, float %c, float %d) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca float, align 4
  %imag1.addr.i = alloca float, align 4
  %real2.addr.i = alloca float, align 4
  %imag2.addr.i = alloca float, align 4
  %logr.i = alloca float, align 4
  %logi.i = alloca float, align 4
  %x.i = alloca float, align 4
  %y.i = alloca float, align 4
  %z.i = alloca float, align 4
  %w.i = alloca float, align 4
  %res.addr = alloca %struct.__fcomplex*, align 8
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  %c.addr = alloca float, align 4
  %d.addr = alloca float, align 4
  store %struct.__fcomplex* %res, %struct.__fcomplex** %res.addr, align 8
  store float %a, float* %a.addr, align 4
  store float %b, float* %b.addr, align 4
  store float %c, float* %c.addr, align 4
  store float %d, float* %d.addr, align 4
  %0 = load %struct.__fcomplex** %res.addr, align 8
  %1 = bitcast %struct.__fcomplex* %0 to i8*
  %2 = load float* %a.addr, align 4
  %3 = load float* %b.addr, align 4
  %4 = load float* %c.addr, align 4
  %5 = load float* %d.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store float %2, float* %real1.addr.i, align 4
  store float %3, float* %imag1.addr.i, align 4
  store float %4, float* %real2.addr.i, align 4
  store float %5, float* %imag2.addr.i, align 4
  %6 = load float* %real1.addr.i, align 4
  %7 = load float* %imag1.addr.i, align 4
  %call.i = call  float @__nv_hypotf(float %6, float %7) nounwind
  %call1.i = call  float @__nv_logf(float %call.i) nounwind
  store float %call1.i, float* %logr.i, align 4
  %8 = load float* %imag1.addr.i, align 4
  %9 = load float* %real1.addr.i, align 4
  %call2.i = call  float @__nv_atan2f(float %8, float %9) nounwind
  store float %call2.i, float* %logi.i, align 4
  %10 = load float* %logr.i, align 4
  %11 = load float* %real2.addr.i, align 4
  %mul.i = fmul float %10, %11
  %12 = load float* %logi.i, align 4
  %13 = load float* %imag2.addr.i, align 4
  %mul3.i = fmul float %12, %13
  %sub.i = fsub float %mul.i, %mul3.i
  %call4.i = call  float @__nv_expf(float %sub.i) nounwind
  store float %call4.i, float* %x.i, align 4
  %14 = load float* %logr.i, align 4
  %15 = load float* %imag2.addr.i, align 4
  %mul5.i = fmul float %14, %15
  %16 = load float* %logi.i, align 4
  %17 = load float* %real2.addr.i, align 4
  %mul6.i = fmul float %16, %17
  %add.i = fadd float %mul5.i, %mul6.i
  store float %add.i, float* %y.i, align 4
  %18 = load float* %x.i, align 4
  %19 = load float* %y.i, align 4
  %call7.i = call  float @__nv_cosf(float %19) nounwind
  %mul8.i = fmul float %18, %call7.i
  store float %mul8.i, float* %z.i, align 4
  %20 = load float* %x.i, align 4
  %21 = load float* %y.i, align 4
  %call9.i = call  float @__nv_sinf(float %21) nounwind
  %mul10.i = fmul float %20, %call9.i
  store float %mul10.i, float* %w.i, align 4
  %22 = load float* %z.i, align 4
  %23 = load i8** %res.addr.i, align 8
  %24 = bitcast i8* %23 to float*
  store float %22, float* %24, align 4
  %25 = load float* %w.i, align 4
  %26 = load i8** %res.addr.i, align 8
  %27 = bitcast i8* %26 to float*
  %arrayidx11.i = getelementptr inbounds float* %27, i64 1
  store float %25, float* %arrayidx11.i, align 4
  ret void
}

define  void @__pgi_cddiv_llvm(%struct.__dcomplex* %res, double %a1, double %b1, double %a2, double %b2) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %r.i = alloca double, align 8
  %d.i = alloca double, align 8
  %r_mag.i = alloca double, align 8
  %i_mag.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a1.addr = alloca double, align 8
  %b1.addr = alloca double, align 8
  %a2.addr = alloca double, align 8
  %b2.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a1, double* %a1.addr, align 8
  store double %b1, double* %b1.addr, align 8
  store double %a2, double* %a2.addr, align 8
  store double %b2, double* %b2.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a1.addr, align 8
  %3 = load double* %b1.addr, align 8
  %4 = load double* %a2.addr, align 8
  %5 = load double* %b2.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  store double %4, double* %real2.addr.i, align 8
  store double %5, double* %imag2.addr.i, align 8
  %6 = load double* %real2.addr.i, align 8
  store double %6, double* %r_mag.i, align 8
  %7 = load double* %r_mag.i, align 8
  %cmp.i = fcmp olt double %7, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %8 = load double* %r_mag.i, align 8
  %sub.i = fsub double -0.000000e+00, %8
  store double %sub.i, double* %r_mag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %9 = load double* %imag2.addr.i, align 8
  store double %9, double* %i_mag.i, align 8
  %10 = load double* %i_mag.i, align 8
  %cmp1.i = fcmp olt double %10, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.end4.i

if.then2.i:                                       ; preds = %if.end.i
  %11 = load double* %i_mag.i, align 8
  %sub3.i = fsub double -0.000000e+00, %11
  store double %sub3.i, double* %i_mag.i, align 8
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then2.i, %if.end.i
  %12 = load double* %r_mag.i, align 8
  %13 = load double* %i_mag.i, align 8
  %cmp5.i = fcmp ole double %12, %13
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end4.i
  %14 = load double* %real2.addr.i, align 8
  %15 = load double* %imag2.addr.i, align 8
  %div.i = fdiv double %14, %15
  store double %div.i, double* %r.i, align 8
  %16 = load double* %imag2.addr.i, align 8
  %17 = load double* %r.i, align 8
  %18 = load double* %r.i, align 8
  %mul.i = fmul double %17, %18
  %add.i = fadd double 1.000000e+00, %mul.i
  %mul7.i = fmul double %16, %add.i
  %div8.i = fdiv double 1.000000e+00, %mul7.i
  store double %div8.i, double* %d.i, align 8
  %19 = load double* %real1.addr.i, align 8
  %20 = load double* %r.i, align 8
  %mul9.i = fmul double %19, %20
  %21 = load double* %imag1.addr.i, align 8
  %add10.i = fadd double %mul9.i, %21
  %22 = load double* %d.i, align 8
  %mul11.i = fmul double %add10.i, %22
  store double %mul11.i, double* %x.i, align 8
  %23 = load double* %imag1.addr.i, align 8
  %24 = load double* %r.i, align 8
  %mul12.i = fmul double %23, %24
  %25 = load double* %real1.addr.i, align 8
  %sub13.i = fsub double %mul12.i, %25
  %26 = load double* %d.i, align 8
  %mul14.i = fmul double %sub13.i, %26
  store double %mul14.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

if.else.i:                                        ; preds = %if.end4.i
  %27 = load double* %imag2.addr.i, align 8
  %28 = load double* %real2.addr.i, align 8
  %div15.i = fdiv double %27, %28
  store double %div15.i, double* %r.i, align 8
  %29 = load double* %real2.addr.i, align 8
  %30 = load double* %r.i, align 8
  %31 = load double* %r.i, align 8
  %mul16.i = fmul double %30, %31
  %add17.i = fadd double 1.000000e+00, %mul16.i
  %mul18.i = fmul double %29, %add17.i
  %div19.i = fdiv double 1.000000e+00, %mul18.i
  store double %div19.i, double* %d.i, align 8
  %32 = load double* %real1.addr.i, align 8
  %33 = load double* %imag1.addr.i, align 8
  %34 = load double* %r.i, align 8
  %mul20.i = fmul double %33, %34
  %add21.i = fadd double %32, %mul20.i
  %35 = load double* %d.i, align 8
  %mul22.i = fmul double %add21.i, %35
  store double %mul22.i, double* %x.i, align 8
  %36 = load double* %imag1.addr.i, align 8
  %37 = load double* %real1.addr.i, align 8
  %38 = load double* %r.i, align 8
  %mul23.i = fmul double %37, %38
  %sub24.i = fsub double %36, %mul23.i
  %39 = load double* %d.i, align 8
  %mul25.i = fmul double %sub24.i, %39
  store double %mul25.i, double* %y.i, align 8
  br label %__pgi_cddiv.exit

__pgi_cddiv.exit:                                 ; preds = %if.else.i, %if.then6.i
  %40 = load double* %x.i, align 8
  %41 = load i8** %res.addr.i, align 8
  %42 = bitcast i8* %41 to double*
  store double %40, double* %42, align 8
  %43 = load double* %y.i, align 8
  %44 = load i8** %res.addr.i, align 8
  %45 = bitcast i8* %44 to double*
  %arrayidx27.i = getelementptr inbounds double* %45, i64 1
  store double %43, double* %arrayidx27.i, align 8
  ret void
}

define  void @__pgi_cdexp_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %z.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_exp(double %4) nounwind
  store double %call.i, double* %x.i, align 8
  %5 = load double* %imag1.addr.i, align 8
  call  void @__nv_sincos(double %5, double* %z.i, double* %y.i) nounwind
  %6 = load double* %x.i, align 8
  %7 = load double* %y.i, align 8
  %mul.i = fmul double %7, %6
  store double %mul.i, double* %y.i, align 8
  %8 = load double* %x.i, align 8
  %9 = load double* %z.i, align 8
  %mul1.i = fmul double %9, %8
  store double %mul1.i, double* %z.i, align 8
  %10 = load double* %y.i, align 8
  %11 = load i8** %res.addr.i, align 8
  %12 = bitcast i8* %11 to double*
  store double %10, double* %12, align 8
  %13 = load double* %z.i, align 8
  %14 = load i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to double*
  %arrayidx2.i = getelementptr inbounds double* %15, i64 1
  store double %13, double* %arrayidx2.i, align 8
  ret void
}

define  void @__pgi_cdcos_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_cos(double %4) nounwind
  store double %call.i, double* %x.i, align 8
  %5 = load double* %real1.addr.i, align 8
  %call1.i = call  double @__nv_sin(double %5) nounwind
  store double %call1.i, double* %y.i, align 8
  %6 = load double* %x.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %call2.i = call  double @__nv_cosh(double %7) nounwind
  %mul.i = fmul double %6, %call2.i
  store double %mul.i, double* %x.i, align 8
  %8 = load double* %y.i, align 8
  %sub.i = fsub double -0.000000e+00, %8
  %9 = load double* %imag1.addr.i, align 8
  %call3.i = call  double @__nv_sinh(double %9) nounwind
  %mul4.i = fmul double %sub.i, %call3.i
  store double %mul4.i, double* %y.i, align 8
  %10 = load double* %x.i, align 8
  %11 = load i8** %res.addr.i, align 8
  %12 = bitcast i8* %11 to double*
  store double %10, double* %12, align 8
  %13 = load double* %y.i, align 8
  %14 = load i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to double*
  %arrayidx5.i = getelementptr inbounds double* %15, i64 1
  store double %13, double* %arrayidx5.i, align 8
  ret void
}

define  void @__pgi_cdcosh_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i7.i = alloca i8*, align 8
  %real1.addr.i8.i = alloca double, align 8
  %imag1.addr.i9.i = alloca double, align 8
  %x.i10.i = alloca double, align 8
  %y.i11.i = alloca double, align 8
  %z.i12.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %z.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %5 = load double* %real1.addr.i, align 8
  %6 = load double* %imag1.addr.i, align 8
  store i8* %4, i8** %res.addr.i.i, align 8
  store double %5, double* %real1.addr.i.i, align 8
  store double %6, double* %imag1.addr.i.i, align 8
  %7 = load double* %real1.addr.i.i, align 8
  %call.i.i = call  double @__nv_exp(double %7) nounwind
  store double %call.i.i, double* %x.i.i, align 8
  %8 = load double* %imag1.addr.i.i, align 8
  call  void @__nv_sincos(double %8, double* %z.i.i, double* %y.i.i) nounwind
  %9 = load double* %x.i.i, align 8
  %10 = load double* %y.i.i, align 8
  %mul.i.i = fmul double %10, %9
  store double %mul.i.i, double* %y.i.i, align 8
  %11 = load double* %x.i.i, align 8
  %12 = load double* %z.i.i, align 8
  %mul1.i.i = fmul double %12, %11
  store double %mul1.i.i, double* %z.i.i, align 8
  %13 = load double* %y.i.i, align 8
  %14 = load i8** %res.addr.i.i, align 8
  %15 = bitcast i8* %14 to double*
  store double %13, double* %15, align 8
  %16 = load double* %z.i.i, align 8
  %17 = load i8** %res.addr.i.i, align 8
  %18 = bitcast i8* %17 to double*
  %arrayidx2.i.i = getelementptr inbounds double* %18, i64 1
  store double %16, double* %arrayidx2.i.i, align 8
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %19 = load double* %r.i, align 8
  store double %19, double* %x.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %20 = load double* %i.i, align 8
  store double %20, double* %y.i, align 8
  %21 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %22 = load double* %real1.addr.i, align 8
  %sub.i = fsub double -0.000000e+00, %22
  %23 = load double* %imag1.addr.i, align 8
  %sub1.i = fsub double -0.000000e+00, %23
  store i8* %21, i8** %res.addr.i7.i, align 8
  store double %sub.i, double* %real1.addr.i8.i, align 8
  store double %sub1.i, double* %imag1.addr.i9.i, align 8
  %24 = load double* %real1.addr.i8.i, align 8
  %call.i13.i = call  double @__nv_exp(double %24) nounwind
  store double %call.i13.i, double* %x.i10.i, align 8
  %25 = load double* %imag1.addr.i9.i, align 8
  call  void @__nv_sincos(double %25, double* %z.i12.i, double* %y.i11.i) nounwind
  %26 = load double* %x.i10.i, align 8
  %27 = load double* %y.i11.i, align 8
  %mul.i14.i = fmul double %27, %26
  store double %mul.i14.i, double* %y.i11.i, align 8
  %28 = load double* %x.i10.i, align 8
  %29 = load double* %z.i12.i, align 8
  %mul1.i15.i = fmul double %29, %28
  store double %mul1.i15.i, double* %z.i12.i, align 8
  %30 = load double* %y.i11.i, align 8
  %31 = load i8** %res.addr.i7.i, align 8
  %32 = bitcast i8* %31 to double*
  store double %30, double* %32, align 8
  %33 = load double* %z.i12.i, align 8
  %34 = load i8** %res.addr.i7.i, align 8
  %35 = bitcast i8* %34 to double*
  %arrayidx2.i16.i = getelementptr inbounds double* %35, i64 1
  store double %33, double* %arrayidx2.i16.i, align 8
  %r2.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %36 = load double* %r2.i, align 8
  %37 = load double* %x.i, align 8
  %add.i = fadd double %37, %36
  store double %add.i, double* %x.i, align 8
  %i3.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %38 = load double* %i3.i, align 8
  %39 = load double* %y.i, align 8
  %add4.i = fadd double %39, %38
  store double %add4.i, double* %y.i, align 8
  %40 = load double* %x.i, align 8
  %mul.i = fmul double %40, 5.000000e-01
  store double %mul.i, double* %x.i, align 8
  %41 = load double* %y.i, align 8
  %mul5.i = fmul double %41, 5.000000e-01
  store double %mul5.i, double* %y.i, align 8
  %42 = load double* %x.i, align 8
  %43 = load i8** %res.addr.i, align 8
  %44 = bitcast i8* %43 to double*
  store double %42, double* %44, align 8
  %45 = load double* %y.i, align 8
  %46 = load i8** %res.addr.i, align 8
  %47 = bitcast i8* %46 to double*
  %arrayidx6.i = getelementptr inbounds double* %47, i64 1
  store double %45, double* %arrayidx6.i, align 8
  ret void
}

define  void @__pgi_cdsin_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_sin(double %4) nounwind
  store double %call.i, double* %x.i, align 8
  %5 = load double* %real1.addr.i, align 8
  %call1.i = call  double @__nv_cos(double %5) nounwind
  store double %call1.i, double* %y.i, align 8
  %6 = load double* %x.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %call2.i = call  double @__nv_cosh(double %7) nounwind
  %mul.i = fmul double %6, %call2.i
  store double %mul.i, double* %x.i, align 8
  %8 = load double* %y.i, align 8
  %9 = load double* %imag1.addr.i, align 8
  %call3.i = call  double @__nv_sinh(double %9) nounwind
  %mul4.i = fmul double %8, %call3.i
  store double %mul4.i, double* %y.i, align 8
  %10 = load double* %x.i, align 8
  %11 = load i8** %res.addr.i, align 8
  %12 = bitcast i8* %11 to double*
  store double %10, double* %12, align 8
  %13 = load double* %y.i, align 8
  %14 = load i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to double*
  %arrayidx5.i = getelementptr inbounds double* %15, i64 1
  store double %13, double* %arrayidx5.i, align 8
  ret void
}

define  void @__pgi_cdtan_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i18.i = alloca i8*, align 8
  %real1.addr.i19.i = alloca double, align 8
  %imag1.addr.i20.i = alloca double, align 8
  %real2.addr.i.i = alloca double, align 8
  %imag2.addr.i.i = alloca double, align 8
  %x.i21.i = alloca double, align 8
  %y.i22.i = alloca double, align 8
  %r.i.i = alloca double, align 8
  %d.i.i = alloca double, align 8
  %r_mag.i.i = alloca double, align 8
  %i_mag.i.i = alloca double, align 8
  %res.addr.i6.i = alloca i8*, align 8
  %real1.addr.i7.i = alloca double, align 8
  %imag1.addr.i8.i = alloca double, align 8
  %x.i9.i = alloca double, align 8
  %y.i10.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %x1.i = alloca double, align 8
  %y1.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %5 = load double* %real1.addr.i, align 8
  %6 = load double* %imag1.addr.i, align 8
  store i8* %4, i8** %res.addr.i.i, align 8
  store double %5, double* %real1.addr.i.i, align 8
  store double %6, double* %imag1.addr.i.i, align 8
  %7 = load double* %real1.addr.i.i, align 8
  %call.i.i = call  double @__nv_sin(double %7) nounwind
  store double %call.i.i, double* %x.i.i, align 8
  %8 = load double* %real1.addr.i.i, align 8
  %call1.i.i = call  double @__nv_cos(double %8) nounwind
  store double %call1.i.i, double* %y.i.i, align 8
  %9 = load double* %x.i.i, align 8
  %10 = load double* %imag1.addr.i.i, align 8
  %call2.i.i = call  double @__nv_cosh(double %10) nounwind
  %mul.i.i = fmul double %9, %call2.i.i
  store double %mul.i.i, double* %x.i.i, align 8
  %11 = load double* %y.i.i, align 8
  %12 = load double* %imag1.addr.i.i, align 8
  %call3.i.i = call  double @__nv_sinh(double %12) nounwind
  %mul4.i.i = fmul double %11, %call3.i.i
  store double %mul4.i.i, double* %y.i.i, align 8
  %13 = load double* %x.i.i, align 8
  %14 = load i8** %res.addr.i.i, align 8
  %15 = bitcast i8* %14 to double*
  store double %13, double* %15, align 8
  %16 = load double* %y.i.i, align 8
  %17 = load i8** %res.addr.i.i, align 8
  %18 = bitcast i8* %17 to double*
  %arrayidx5.i.i = getelementptr inbounds double* %18, i64 1
  store double %16, double* %arrayidx5.i.i, align 8
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %19 = load double* %r.i, align 8
  store double %19, double* %x.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %20 = load double* %i.i, align 8
  store double %20, double* %y.i, align 8
  %21 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %22 = load double* %real1.addr.i, align 8
  %23 = load double* %imag1.addr.i, align 8
  store i8* %21, i8** %res.addr.i6.i, align 8
  store double %22, double* %real1.addr.i7.i, align 8
  store double %23, double* %imag1.addr.i8.i, align 8
  %24 = load double* %real1.addr.i7.i, align 8
  %call.i11.i = call  double @__nv_cos(double %24) nounwind
  store double %call.i11.i, double* %x.i9.i, align 8
  %25 = load double* %real1.addr.i7.i, align 8
  %call1.i12.i = call  double @__nv_sin(double %25) nounwind
  store double %call1.i12.i, double* %y.i10.i, align 8
  %26 = load double* %x.i9.i, align 8
  %27 = load double* %imag1.addr.i8.i, align 8
  %call2.i13.i = call  double @__nv_cosh(double %27) nounwind
  %mul.i14.i = fmul double %26, %call2.i13.i
  store double %mul.i14.i, double* %x.i9.i, align 8
  %28 = load double* %y.i10.i, align 8
  %sub.i.i = fsub double -0.000000e+00, %28
  %29 = load double* %imag1.addr.i8.i, align 8
  %call3.i15.i = call  double @__nv_sinh(double %29) nounwind
  %mul4.i16.i = fmul double %sub.i.i, %call3.i15.i
  store double %mul4.i16.i, double* %y.i10.i, align 8
  %30 = load double* %x.i9.i, align 8
  %31 = load i8** %res.addr.i6.i, align 8
  %32 = bitcast i8* %31 to double*
  store double %30, double* %32, align 8
  %33 = load double* %y.i10.i, align 8
  %34 = load i8** %res.addr.i6.i, align 8
  %35 = bitcast i8* %34 to double*
  %arrayidx5.i17.i = getelementptr inbounds double* %35, i64 1
  store double %33, double* %arrayidx5.i17.i, align 8
  %r1.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %36 = load double* %r1.i, align 8
  store double %36, double* %x1.i, align 8
  %i2.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %37 = load double* %i2.i, align 8
  store double %37, double* %y1.i, align 8
  %38 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %39 = load double* %x.i, align 8
  %40 = load double* %y.i, align 8
  %41 = load double* %x1.i, align 8
  %42 = load double* %y1.i, align 8
  store i8* %38, i8** %res.addr.i18.i, align 8
  store double %39, double* %real1.addr.i19.i, align 8
  store double %40, double* %imag1.addr.i20.i, align 8
  store double %41, double* %real2.addr.i.i, align 8
  store double %42, double* %imag2.addr.i.i, align 8
  %43 = load double* %real2.addr.i.i, align 8
  store double %43, double* %r_mag.i.i, align 8
  %44 = load double* %r_mag.i.i, align 8
  %cmp.i.i = fcmp olt double %44, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %entry
  %45 = load double* %r_mag.i.i, align 8
  %sub.i23.i = fsub double -0.000000e+00, %45
  store double %sub.i23.i, double* %r_mag.i.i, align 8
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %entry
  %46 = load double* %imag2.addr.i.i, align 8
  store double %46, double* %i_mag.i.i, align 8
  %47 = load double* %i_mag.i.i, align 8
  %cmp1.i.i = fcmp olt double %47, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %48 = load double* %i_mag.i.i, align 8
  %sub3.i.i = fsub double -0.000000e+00, %48
  store double %sub3.i.i, double* %i_mag.i.i, align 8
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %49 = load double* %r_mag.i.i, align 8
  %50 = load double* %i_mag.i.i, align 8
  %cmp5.i.i = fcmp ole double %49, %50
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %51 = load double* %real2.addr.i.i, align 8
  %52 = load double* %imag2.addr.i.i, align 8
  %div.i.i = fdiv double %51, %52
  store double %div.i.i, double* %r.i.i, align 8
  %53 = load double* %imag2.addr.i.i, align 8
  %54 = load double* %r.i.i, align 8
  %55 = load double* %r.i.i, align 8
  %mul.i24.i = fmul double %54, %55
  %add.i.i = fadd double 1.000000e+00, %mul.i24.i
  %mul7.i.i = fmul double %53, %add.i.i
  %div8.i.i = fdiv double 1.000000e+00, %mul7.i.i
  store double %div8.i.i, double* %d.i.i, align 8
  %56 = load double* %real1.addr.i19.i, align 8
  %57 = load double* %r.i.i, align 8
  %mul9.i.i = fmul double %56, %57
  %58 = load double* %imag1.addr.i20.i, align 8
  %add10.i.i = fadd double %mul9.i.i, %58
  %59 = load double* %d.i.i, align 8
  %mul11.i.i = fmul double %add10.i.i, %59
  store double %mul11.i.i, double* %x.i21.i, align 8
  %60 = load double* %imag1.addr.i20.i, align 8
  %61 = load double* %r.i.i, align 8
  %mul12.i.i = fmul double %60, %61
  %62 = load double* %real1.addr.i19.i, align 8
  %sub13.i.i = fsub double %mul12.i.i, %62
  %63 = load double* %d.i.i, align 8
  %mul14.i.i = fmul double %sub13.i.i, %63
  store double %mul14.i.i, double* %y.i22.i, align 8
  br label %__pgi_cdtan.exit

if.else.i.i:                                      ; preds = %if.end4.i.i
  %64 = load double* %imag2.addr.i.i, align 8
  %65 = load double* %real2.addr.i.i, align 8
  %div15.i.i = fdiv double %64, %65
  store double %div15.i.i, double* %r.i.i, align 8
  %66 = load double* %real2.addr.i.i, align 8
  %67 = load double* %r.i.i, align 8
  %68 = load double* %r.i.i, align 8
  %mul16.i.i = fmul double %67, %68
  %add17.i.i = fadd double 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul double %66, %add17.i.i
  %div19.i.i = fdiv double 1.000000e+00, %mul18.i.i
  store double %div19.i.i, double* %d.i.i, align 8
  %69 = load double* %real1.addr.i19.i, align 8
  %70 = load double* %imag1.addr.i20.i, align 8
  %71 = load double* %r.i.i, align 8
  %mul20.i.i = fmul double %70, %71
  %add21.i.i = fadd double %69, %mul20.i.i
  %72 = load double* %d.i.i, align 8
  %mul22.i.i = fmul double %add21.i.i, %72
  store double %mul22.i.i, double* %x.i21.i, align 8
  %73 = load double* %imag1.addr.i20.i, align 8
  %74 = load double* %real1.addr.i19.i, align 8
  %75 = load double* %r.i.i, align 8
  %mul23.i.i = fmul double %74, %75
  %sub24.i.i = fsub double %73, %mul23.i.i
  %76 = load double* %d.i.i, align 8
  %mul25.i.i = fmul double %sub24.i.i, %76
  store double %mul25.i.i, double* %y.i22.i, align 8
  br label %__pgi_cdtan.exit

__pgi_cdtan.exit:                                 ; preds = %if.else.i.i, %if.then6.i.i
  %77 = load double* %x.i21.i, align 8
  %78 = load i8** %res.addr.i18.i, align 8
  %79 = bitcast i8* %78 to double*
  store double %77, double* %79, align 8
  %80 = load double* %y.i22.i, align 8
  %81 = load i8** %res.addr.i18.i, align 8
  %82 = bitcast i8* %81 to double*
  %arrayidx27.i.i = getelementptr inbounds double* %82, i64 1
  store double %80, double* %arrayidx27.i.i, align 8
  %r3.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %83 = load double* %r3.i, align 8
  store double %83, double* %x.i, align 8
  %i4.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %84 = load double* %i4.i, align 8
  store double %84, double* %y.i, align 8
  %85 = load double* %x.i, align 8
  %86 = load i8** %res.addr.i, align 8
  %87 = bitcast i8* %86 to double*
  store double %85, double* %87, align 8
  %88 = load double* %y.i, align 8
  %89 = load i8** %res.addr.i, align 8
  %90 = bitcast i8* %89 to double*
  %arrayidx5.i = getelementptr inbounds double* %90, i64 1
  store double %88, double* %arrayidx5.i, align 8
  ret void
}

define  void @__pgi_cdtanh_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i28.i = alloca i8*, align 8
  %real1.addr.i29.i = alloca double, align 8
  %imag1.addr.i30.i = alloca double, align 8
  %real2.addr.i.i = alloca double, align 8
  %imag2.addr.i.i = alloca double, align 8
  %x.i31.i = alloca double, align 8
  %y.i32.i = alloca double, align 8
  %r.i33.i = alloca double, align 8
  %d.i.i = alloca double, align 8
  %r_mag.i.i = alloca double, align 8
  %i_mag.i.i = alloca double, align 8
  %res.addr.i7.i.i = alloca i8*, align 8
  %real1.addr.i8.i.i = alloca double, align 8
  %imag1.addr.i9.i.i = alloca double, align 8
  %x.i10.i.i = alloca double, align 8
  %y.i11.i.i = alloca double, align 8
  %z.i12.i.i = alloca double, align 8
  %res.addr.i.i6.i = alloca i8*, align 8
  %real1.addr.i.i7.i = alloca double, align 8
  %imag1.addr.i.i8.i = alloca double, align 8
  %x.i.i9.i = alloca double, align 8
  %y.i.i10.i = alloca double, align 8
  %z.i.i11.i = alloca double, align 8
  %res.addr.i12.i = alloca i8*, align 8
  %real1.addr.i13.i = alloca double, align 8
  %imag1.addr.i14.i = alloca double, align 8
  %x.i15.i = alloca double, align 8
  %y.i16.i = alloca double, align 8
  %tmp.i17.i = alloca %struct.dcmplx2, align 8
  %res.addr.i8.i.i = alloca i8*, align 8
  %real1.addr.i9.i.i = alloca double, align 8
  %imag1.addr.i10.i.i = alloca double, align 8
  %x.i11.i.i = alloca double, align 8
  %y.i12.i.i = alloca double, align 8
  %z.i13.i.i = alloca double, align 8
  %res.addr.i.i.i = alloca i8*, align 8
  %real1.addr.i.i.i = alloca double, align 8
  %imag1.addr.i.i.i = alloca double, align 8
  %x.i.i.i = alloca double, align 8
  %y.i.i.i = alloca double, align 8
  %z.i.i.i = alloca double, align 8
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %tmp.i.i = alloca %struct.dcmplx2, align 8
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %x1.i = alloca double, align 8
  %y1.i = alloca double, align 8
  %tmp.i = alloca %struct.dcmplx2, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %5 = load double* %real1.addr.i, align 8
  %6 = load double* %imag1.addr.i, align 8
  store i8* %4, i8** %res.addr.i.i, align 8
  store double %5, double* %real1.addr.i.i, align 8
  store double %6, double* %imag1.addr.i.i, align 8
  %7 = bitcast %struct.dcmplx2* %tmp.i.i to i8*
  %8 = load double* %real1.addr.i.i, align 8
  %9 = load double* %imag1.addr.i.i, align 8
  store i8* %7, i8** %res.addr.i.i.i, align 8
  store double %8, double* %real1.addr.i.i.i, align 8
  store double %9, double* %imag1.addr.i.i.i, align 8
  %10 = load double* %real1.addr.i.i.i, align 8
  %call.i.i.i = call  double @__nv_exp(double %10) nounwind
  store double %call.i.i.i, double* %x.i.i.i, align 8
  %11 = load double* %imag1.addr.i.i.i, align 8
  call  void @__nv_sincos(double %11, double* %z.i.i.i, double* %y.i.i.i) nounwind
  %12 = load double* %x.i.i.i, align 8
  %13 = load double* %y.i.i.i, align 8
  %mul.i.i.i = fmul double %13, %12
  store double %mul.i.i.i, double* %y.i.i.i, align 8
  %14 = load double* %x.i.i.i, align 8
  %15 = load double* %z.i.i.i, align 8
  %mul1.i.i.i = fmul double %15, %14
  store double %mul1.i.i.i, double* %z.i.i.i, align 8
  %16 = load double* %y.i.i.i, align 8
  %17 = load i8** %res.addr.i.i.i, align 8
  %18 = bitcast i8* %17 to double*
  store double %16, double* %18, align 8
  %19 = load double* %z.i.i.i, align 8
  %20 = load i8** %res.addr.i.i.i, align 8
  %21 = bitcast i8* %20 to double*
  %arrayidx2.i.i.i = getelementptr inbounds double* %21, i64 1
  store double %19, double* %arrayidx2.i.i.i, align 8
  %r.i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i.i, i32 0, i32 0
  %22 = load double* %r.i.i, align 8
  store double %22, double* %x.i.i, align 8
  %i.i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i.i, i32 0, i32 1
  %23 = load double* %i.i.i, align 8
  store double %23, double* %y.i.i, align 8
  %24 = bitcast %struct.dcmplx2* %tmp.i.i to i8*
  %25 = load double* %real1.addr.i.i, align 8
  %sub.i.i = fsub double -0.000000e+00, %25
  %26 = load double* %imag1.addr.i.i, align 8
  %sub1.i.i = fsub double -0.000000e+00, %26
  store i8* %24, i8** %res.addr.i8.i.i, align 8
  store double %sub.i.i, double* %real1.addr.i9.i.i, align 8
  store double %sub1.i.i, double* %imag1.addr.i10.i.i, align 8
  %27 = load double* %real1.addr.i9.i.i, align 8
  %call.i14.i.i = call  double @__nv_exp(double %27) nounwind
  store double %call.i14.i.i, double* %x.i11.i.i, align 8
  %28 = load double* %imag1.addr.i10.i.i, align 8
  call  void @__nv_sincos(double %28, double* %z.i13.i.i, double* %y.i12.i.i) nounwind
  %29 = load double* %x.i11.i.i, align 8
  %30 = load double* %y.i12.i.i, align 8
  %mul.i15.i.i = fmul double %30, %29
  store double %mul.i15.i.i, double* %y.i12.i.i, align 8
  %31 = load double* %x.i11.i.i, align 8
  %32 = load double* %z.i13.i.i, align 8
  %mul1.i16.i.i = fmul double %32, %31
  store double %mul1.i16.i.i, double* %z.i13.i.i, align 8
  %33 = load double* %y.i12.i.i, align 8
  %34 = load i8** %res.addr.i8.i.i, align 8
  %35 = bitcast i8* %34 to double*
  store double %33, double* %35, align 8
  %36 = load double* %z.i13.i.i, align 8
  %37 = load i8** %res.addr.i8.i.i, align 8
  %38 = bitcast i8* %37 to double*
  %arrayidx2.i17.i.i = getelementptr inbounds double* %38, i64 1
  store double %36, double* %arrayidx2.i17.i.i, align 8
  %r2.i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i.i, i32 0, i32 0
  %39 = load double* %r2.i.i, align 8
  %40 = load double* %x.i.i, align 8
  %sub3.i.i = fsub double %40, %39
  store double %sub3.i.i, double* %x.i.i, align 8
  %i4.i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i.i, i32 0, i32 1
  %41 = load double* %i4.i.i, align 8
  %42 = load double* %y.i.i, align 8
  %sub5.i.i = fsub double %42, %41
  store double %sub5.i.i, double* %y.i.i, align 8
  %43 = load double* %x.i.i, align 8
  %mul.i.i = fmul double %43, 5.000000e-01
  store double %mul.i.i, double* %x.i.i, align 8
  %44 = load double* %y.i.i, align 8
  %mul6.i.i = fmul double %44, 5.000000e-01
  store double %mul6.i.i, double* %y.i.i, align 8
  %45 = load double* %x.i.i, align 8
  %46 = load i8** %res.addr.i.i, align 8
  %47 = bitcast i8* %46 to double*
  store double %45, double* %47, align 8
  %48 = load double* %y.i.i, align 8
  %49 = load i8** %res.addr.i.i, align 8
  %50 = bitcast i8* %49 to double*
  %arrayidx7.i.i = getelementptr inbounds double* %50, i64 1
  store double %48, double* %arrayidx7.i.i, align 8
  %r.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %51 = load double* %r.i, align 8
  store double %51, double* %x.i, align 8
  %i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %52 = load double* %i.i, align 8
  store double %52, double* %y.i, align 8
  %53 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %54 = load double* %real1.addr.i, align 8
  %55 = load double* %imag1.addr.i, align 8
  store i8* %53, i8** %res.addr.i12.i, align 8
  store double %54, double* %real1.addr.i13.i, align 8
  store double %55, double* %imag1.addr.i14.i, align 8
  %56 = bitcast %struct.dcmplx2* %tmp.i17.i to i8*
  %57 = load double* %real1.addr.i13.i, align 8
  %58 = load double* %imag1.addr.i14.i, align 8
  store i8* %56, i8** %res.addr.i.i6.i, align 8
  store double %57, double* %real1.addr.i.i7.i, align 8
  store double %58, double* %imag1.addr.i.i8.i, align 8
  %59 = load double* %real1.addr.i.i7.i, align 8
  %call.i.i18.i = call  double @__nv_exp(double %59) nounwind
  store double %call.i.i18.i, double* %x.i.i9.i, align 8
  %60 = load double* %imag1.addr.i.i8.i, align 8
  call  void @__nv_sincos(double %60, double* %z.i.i11.i, double* %y.i.i10.i) nounwind
  %61 = load double* %x.i.i9.i, align 8
  %62 = load double* %y.i.i10.i, align 8
  %mul.i.i19.i = fmul double %62, %61
  store double %mul.i.i19.i, double* %y.i.i10.i, align 8
  %63 = load double* %x.i.i9.i, align 8
  %64 = load double* %z.i.i11.i, align 8
  %mul1.i.i20.i = fmul double %64, %63
  store double %mul1.i.i20.i, double* %z.i.i11.i, align 8
  %65 = load double* %y.i.i10.i, align 8
  %66 = load i8** %res.addr.i.i6.i, align 8
  %67 = bitcast i8* %66 to double*
  store double %65, double* %67, align 8
  %68 = load double* %z.i.i11.i, align 8
  %69 = load i8** %res.addr.i.i6.i, align 8
  %70 = bitcast i8* %69 to double*
  %arrayidx2.i.i21.i = getelementptr inbounds double* %70, i64 1
  store double %68, double* %arrayidx2.i.i21.i, align 8
  %r.i22.i = getelementptr inbounds %struct.dcmplx2* %tmp.i17.i, i32 0, i32 0
  %71 = load double* %r.i22.i, align 8
  store double %71, double* %x.i15.i, align 8
  %i.i23.i = getelementptr inbounds %struct.dcmplx2* %tmp.i17.i, i32 0, i32 1
  %72 = load double* %i.i23.i, align 8
  store double %72, double* %y.i16.i, align 8
  %73 = bitcast %struct.dcmplx2* %tmp.i17.i to i8*
  %74 = load double* %real1.addr.i13.i, align 8
  %sub.i24.i = fsub double -0.000000e+00, %74
  %75 = load double* %imag1.addr.i14.i, align 8
  %sub1.i25.i = fsub double -0.000000e+00, %75
  store i8* %73, i8** %res.addr.i7.i.i, align 8
  store double %sub.i24.i, double* %real1.addr.i8.i.i, align 8
  store double %sub1.i25.i, double* %imag1.addr.i9.i.i, align 8
  %76 = load double* %real1.addr.i8.i.i, align 8
  %call.i13.i.i = call  double @__nv_exp(double %76) nounwind
  store double %call.i13.i.i, double* %x.i10.i.i, align 8
  %77 = load double* %imag1.addr.i9.i.i, align 8
  call  void @__nv_sincos(double %77, double* %z.i12.i.i, double* %y.i11.i.i) nounwind
  %78 = load double* %x.i10.i.i, align 8
  %79 = load double* %y.i11.i.i, align 8
  %mul.i14.i.i = fmul double %79, %78
  store double %mul.i14.i.i, double* %y.i11.i.i, align 8
  %80 = load double* %x.i10.i.i, align 8
  %81 = load double* %z.i12.i.i, align 8
  %mul1.i15.i.i = fmul double %81, %80
  store double %mul1.i15.i.i, double* %z.i12.i.i, align 8
  %82 = load double* %y.i11.i.i, align 8
  %83 = load i8** %res.addr.i7.i.i, align 8
  %84 = bitcast i8* %83 to double*
  store double %82, double* %84, align 8
  %85 = load double* %z.i12.i.i, align 8
  %86 = load i8** %res.addr.i7.i.i, align 8
  %87 = bitcast i8* %86 to double*
  %arrayidx2.i16.i.i = getelementptr inbounds double* %87, i64 1
  store double %85, double* %arrayidx2.i16.i.i, align 8
  %r2.i26.i = getelementptr inbounds %struct.dcmplx2* %tmp.i17.i, i32 0, i32 0
  %88 = load double* %r2.i26.i, align 8
  %89 = load double* %x.i15.i, align 8
  %add.i.i = fadd double %89, %88
  store double %add.i.i, double* %x.i15.i, align 8
  %i3.i.i = getelementptr inbounds %struct.dcmplx2* %tmp.i17.i, i32 0, i32 1
  %90 = load double* %i3.i.i, align 8
  %91 = load double* %y.i16.i, align 8
  %add4.i.i = fadd double %91, %90
  store double %add4.i.i, double* %y.i16.i, align 8
  %92 = load double* %x.i15.i, align 8
  %mul.i27.i = fmul double %92, 5.000000e-01
  store double %mul.i27.i, double* %x.i15.i, align 8
  %93 = load double* %y.i16.i, align 8
  %mul5.i.i = fmul double %93, 5.000000e-01
  store double %mul5.i.i, double* %y.i16.i, align 8
  %94 = load double* %x.i15.i, align 8
  %95 = load i8** %res.addr.i12.i, align 8
  %96 = bitcast i8* %95 to double*
  store double %94, double* %96, align 8
  %97 = load double* %y.i16.i, align 8
  %98 = load i8** %res.addr.i12.i, align 8
  %99 = bitcast i8* %98 to double*
  %arrayidx6.i.i = getelementptr inbounds double* %99, i64 1
  store double %97, double* %arrayidx6.i.i, align 8
  %r1.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %100 = load double* %r1.i, align 8
  store double %100, double* %x1.i, align 8
  %i2.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %101 = load double* %i2.i, align 8
  store double %101, double* %y1.i, align 8
  %102 = bitcast %struct.dcmplx2* %tmp.i to i8*
  %103 = load double* %x.i, align 8
  %104 = load double* %y.i, align 8
  %105 = load double* %x1.i, align 8
  %106 = load double* %y1.i, align 8
  store i8* %102, i8** %res.addr.i28.i, align 8
  store double %103, double* %real1.addr.i29.i, align 8
  store double %104, double* %imag1.addr.i30.i, align 8
  store double %105, double* %real2.addr.i.i, align 8
  store double %106, double* %imag2.addr.i.i, align 8
  %107 = load double* %real2.addr.i.i, align 8
  store double %107, double* %r_mag.i.i, align 8
  %108 = load double* %r_mag.i.i, align 8
  %cmp.i.i = fcmp olt double %108, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %entry
  %109 = load double* %r_mag.i.i, align 8
  %sub.i34.i = fsub double -0.000000e+00, %109
  store double %sub.i34.i, double* %r_mag.i.i, align 8
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %entry
  %110 = load double* %imag2.addr.i.i, align 8
  store double %110, double* %i_mag.i.i, align 8
  %111 = load double* %i_mag.i.i, align 8
  %cmp1.i.i = fcmp olt double %111, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %112 = load double* %i_mag.i.i, align 8
  %sub3.i35.i = fsub double -0.000000e+00, %112
  store double %sub3.i35.i, double* %i_mag.i.i, align 8
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %113 = load double* %r_mag.i.i, align 8
  %114 = load double* %i_mag.i.i, align 8
  %cmp5.i.i = fcmp ole double %113, %114
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %115 = load double* %real2.addr.i.i, align 8
  %116 = load double* %imag2.addr.i.i, align 8
  %div.i.i = fdiv double %115, %116
  store double %div.i.i, double* %r.i33.i, align 8
  %117 = load double* %imag2.addr.i.i, align 8
  %118 = load double* %r.i33.i, align 8
  %119 = load double* %r.i33.i, align 8
  %mul.i36.i = fmul double %118, %119
  %add.i37.i = fadd double 1.000000e+00, %mul.i36.i
  %mul7.i.i = fmul double %117, %add.i37.i
  %div8.i.i = fdiv double 1.000000e+00, %mul7.i.i
  store double %div8.i.i, double* %d.i.i, align 8
  %120 = load double* %real1.addr.i29.i, align 8
  %121 = load double* %r.i33.i, align 8
  %mul9.i.i = fmul double %120, %121
  %122 = load double* %imag1.addr.i30.i, align 8
  %add10.i.i = fadd double %mul9.i.i, %122
  %123 = load double* %d.i.i, align 8
  %mul11.i.i = fmul double %add10.i.i, %123
  store double %mul11.i.i, double* %x.i31.i, align 8
  %124 = load double* %imag1.addr.i30.i, align 8
  %125 = load double* %r.i33.i, align 8
  %mul12.i.i = fmul double %124, %125
  %126 = load double* %real1.addr.i29.i, align 8
  %sub13.i.i = fsub double %mul12.i.i, %126
  %127 = load double* %d.i.i, align 8
  %mul14.i.i = fmul double %sub13.i.i, %127
  store double %mul14.i.i, double* %y.i32.i, align 8
  br label %__pgi_cdtanh.exit

if.else.i.i:                                      ; preds = %if.end4.i.i
  %128 = load double* %imag2.addr.i.i, align 8
  %129 = load double* %real2.addr.i.i, align 8
  %div15.i.i = fdiv double %128, %129
  store double %div15.i.i, double* %r.i33.i, align 8
  %130 = load double* %real2.addr.i.i, align 8
  %131 = load double* %r.i33.i, align 8
  %132 = load double* %r.i33.i, align 8
  %mul16.i.i = fmul double %131, %132
  %add17.i.i = fadd double 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul double %130, %add17.i.i
  %div19.i.i = fdiv double 1.000000e+00, %mul18.i.i
  store double %div19.i.i, double* %d.i.i, align 8
  %133 = load double* %real1.addr.i29.i, align 8
  %134 = load double* %imag1.addr.i30.i, align 8
  %135 = load double* %r.i33.i, align 8
  %mul20.i.i = fmul double %134, %135
  %add21.i.i = fadd double %133, %mul20.i.i
  %136 = load double* %d.i.i, align 8
  %mul22.i.i = fmul double %add21.i.i, %136
  store double %mul22.i.i, double* %x.i31.i, align 8
  %137 = load double* %imag1.addr.i30.i, align 8
  %138 = load double* %real1.addr.i29.i, align 8
  %139 = load double* %r.i33.i, align 8
  %mul23.i.i = fmul double %138, %139
  %sub24.i.i = fsub double %137, %mul23.i.i
  %140 = load double* %d.i.i, align 8
  %mul25.i.i = fmul double %sub24.i.i, %140
  store double %mul25.i.i, double* %y.i32.i, align 8
  br label %__pgi_cdtanh.exit

__pgi_cdtanh.exit:                                ; preds = %if.else.i.i, %if.then6.i.i
  %141 = load double* %x.i31.i, align 8
  %142 = load i8** %res.addr.i28.i, align 8
  %143 = bitcast i8* %142 to double*
  store double %141, double* %143, align 8
  %144 = load double* %y.i32.i, align 8
  %145 = load i8** %res.addr.i28.i, align 8
  %146 = bitcast i8* %145 to double*
  %arrayidx27.i.i = getelementptr inbounds double* %146, i64 1
  store double %144, double* %arrayidx27.i.i, align 8
  %r3.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 0
  %147 = load double* %r3.i, align 8
  store double %147, double* %x.i, align 8
  %i4.i = getelementptr inbounds %struct.dcmplx2* %tmp.i, i32 0, i32 1
  %148 = load double* %i4.i, align 8
  store double %148, double* %y.i, align 8
  %149 = load double* %x.i, align 8
  %150 = load i8** %res.addr.i, align 8
  %151 = bitcast i8* %150 to double*
  store double %149, double* %151, align 8
  %152 = load double* %y.i, align 8
  %153 = load i8** %res.addr.i, align 8
  %154 = bitcast i8* %153 to double*
  %arrayidx5.i = getelementptr inbounds double* %154, i64 1
  store double %152, double* %arrayidx5.i, align 8
  ret void
}

define  void @__pgi_cdlog_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %imag1.addr.i, align 8
  %5 = load double* %real1.addr.i, align 8
  %call.i = call  double @__nv_atan2(double %4, double %5) nounwind
  store double %call.i, double* %x.i, align 8
  %6 = load double* %real1.addr.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %call1.i = call  double @__nv_hypot(double %6, double %7) nounwind
  %call2.i = call  double @__nv_log(double %call1.i) nounwind
  store double %call2.i, double* %y.i, align 8
  %8 = load double* %y.i, align 8
  %9 = load i8** %res.addr.i, align 8
  %10 = bitcast i8* %9 to double*
  store double %8, double* %10, align 8
  %11 = load double* %x.i, align 8
  %12 = load i8** %res.addr.i, align 8
  %13 = bitcast i8* %12 to double*
  %arrayidx3.i = getelementptr inbounds double* %13, i64 1
  store double %11, double* %arrayidx3.i, align 8
  ret void
}

define  void @__pgi_cdsqrt_llvm(%struct.__dcomplex* %res, double %a, double %b) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %a.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  %4 = load double* %real1.addr.i, align 8
  %5 = load double* %imag1.addr.i, align 8
  %call.i = call  double @__nv_hypot(double %4, double %5) nounwind
  store double %call.i, double* %a.i, align 8
  %6 = load double* %a.i, align 8
  %cmp.i = fcmp oeq double %6, 0.000000e+00
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  store double 0.000000e+00, double* %x.i, align 8
  store double 0.000000e+00, double* %y.i, align 8
  br label %__pgi_cdsqrt.exit

if.else.i:                                        ; preds = %entry
  %7 = load double* %real1.addr.i, align 8
  %cmp1.i = fcmp ogt double %7, 0.000000e+00
  br i1 %cmp1.i, label %if.then2.i, label %if.else5.i

if.then2.i:                                       ; preds = %if.else.i
  %8 = load double* %a.i, align 8
  %9 = load double* %real1.addr.i, align 8
  %add.i = fadd double %8, %9
  %mul.i = fmul double 5.000000e-01, %add.i
  %call3.i = call  double @__nv_sqrt(double %mul.i) nounwind
  store double %call3.i, double* %x.i, align 8
  %10 = load double* %imag1.addr.i, align 8
  %11 = load double* %x.i, align 8
  %div.i = fdiv double %10, %11
  %mul4.i = fmul double 5.000000e-01, %div.i
  store double %mul4.i, double* %y.i, align 8
  br label %if.end13.i

if.else5.i:                                       ; preds = %if.else.i
  %12 = load double* %a.i, align 8
  %13 = load double* %real1.addr.i, align 8
  %sub.i = fsub double %12, %13
  %mul6.i = fmul double 5.000000e-01, %sub.i
  %call7.i = call  double @__nv_sqrt(double %mul6.i) nounwind
  store double %call7.i, double* %y.i, align 8
  %14 = load double* %imag1.addr.i, align 8
  %cmp8.i = fcmp olt double %14, 0.000000e+00
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.else5.i
  %15 = load double* %y.i, align 8
  %sub10.i = fsub double -0.000000e+00, %15
  store double %sub10.i, double* %y.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.else5.i
  %16 = load double* %imag1.addr.i, align 8
  %17 = load double* %y.i, align 8
  %div11.i = fdiv double %16, %17
  %mul12.i = fmul double 5.000000e-01, %div11.i
  store double %mul12.i, double* %x.i, align 8
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.end.i, %if.then2.i
  br label %__pgi_cdsqrt.exit

__pgi_cdsqrt.exit:                                ; preds = %if.end13.i, %if.then.i
  %18 = load double* %x.i, align 8
  %19 = load i8** %res.addr.i, align 8
  %20 = bitcast i8* %19 to double*
  store double %18, double* %20, align 8
  %21 = load double* %y.i, align 8
  %22 = load i8** %res.addr.i, align 8
  %23 = bitcast i8* %22 to double*
  %arrayidx15.i = getelementptr inbounds double* %23, i64 1
  store double %21, double* %arrayidx15.i, align 8
  ret void
}

define  void @__pgi_cdpowi_llvm(%struct.__dcomplex* %res, double %a, double %b, i32 %i) nounwind alwaysinline {
entry:
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %real2.addr.i.i = alloca double, align 8
  %imag2.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %r.i.i = alloca double, align 8
  %d.i.i = alloca double, align 8
  %r_mag.i.i = alloca double, align 8
  %i_mag.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real.addr.i = alloca double, align 8
  %imag.addr.i = alloca double, align 8
  %i.addr.i = alloca i32, align 4
  %k.i = alloca i32, align 4
  %fr.i = alloca double, align 8
  %fi.i = alloca double, align 8
  %gr.i = alloca double, align 8
  %gi.i = alloca double, align 8
  %tr.i = alloca double, align 8
  %ti.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %i.addr = alloca i32, align 4
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  %4 = load i32* %i.addr, align 4
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real.addr.i, align 8
  store double %3, double* %imag.addr.i, align 8
  store i32 %4, i32* %i.addr.i, align 4
  store double 1.000000e+00, double* %fr.i, align 8
  store double 0.000000e+00, double* %fi.i, align 8
  %5 = load double* %real.addr.i, align 8
  store double %5, double* %gr.i, align 8
  %6 = load double* %imag.addr.i, align 8
  store double %6, double* %gi.i, align 8
  %7 = load i32* %i.addr.i, align 4
  store i32 %7, i32* %k.i, align 4
  %8 = load i32* %i.addr.i, align 4
  %cmp.i = icmp slt i32 %8, 0
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %9 = load i32* %i.addr.i, align 4
  %sub.i = sub nsw i32 0, %9
  store i32 %sub.i, i32* %k.i, align 4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end7.i, %if.end.i
  %10 = load i32* %k.i, align 4
  %tobool.i = icmp ne i32 %10, 0
  br i1 %tobool.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %11 = load i32* %k.i, align 4
  %and.i = and i32 %11, 1
  %tobool1.i = icmp ne i32 %and.i, 0
  br i1 %tobool1.i, label %if.then2.i, label %if.end7.i

if.then2.i:                                       ; preds = %while.body.i
  %12 = load double* %fr.i, align 8
  %13 = load double* %gr.i, align 8
  %mul.i = fmul double %12, %13
  %14 = load double* %fi.i, align 8
  %15 = load double* %gi.i, align 8
  %mul3.i = fmul double %14, %15
  %sub4.i = fsub double %mul.i, %mul3.i
  store double %sub4.i, double* %tr.i, align 8
  %16 = load double* %fr.i, align 8
  %17 = load double* %gi.i, align 8
  %mul5.i = fmul double %16, %17
  %18 = load double* %fi.i, align 8
  %19 = load double* %gr.i, align 8
  %mul6.i = fmul double %18, %19
  %add.i = fadd double %mul5.i, %mul6.i
  store double %add.i, double* %ti.i, align 8
  %20 = load double* %tr.i, align 8
  store double %20, double* %fr.i, align 8
  %21 = load double* %ti.i, align 8
  store double %21, double* %fi.i, align 8
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then2.i, %while.body.i
  %22 = load i32* %k.i, align 4
  %shr.i = lshr i32 %22, 1
  store i32 %shr.i, i32* %k.i, align 4
  %23 = load double* %gr.i, align 8
  %24 = load double* %gr.i, align 8
  %mul8.i = fmul double %23, %24
  %25 = load double* %gi.i, align 8
  %26 = load double* %gi.i, align 8
  %mul9.i = fmul double %25, %26
  %sub10.i = fsub double %mul8.i, %mul9.i
  store double %sub10.i, double* %tr.i, align 8
  %27 = load double* %gr.i, align 8
  %mul11.i = fmul double 2.000000e+00, %27
  %28 = load double* %gi.i, align 8
  %mul12.i = fmul double %mul11.i, %28
  store double %mul12.i, double* %ti.i, align 8
  %29 = load double* %tr.i, align 8
  store double %29, double* %gr.i, align 8
  %30 = load double* %ti.i, align 8
  store double %30, double* %gi.i, align 8
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %31 = load i32* %i.addr.i, align 4
  %cmp13.i = icmp slt i32 %31, 0
  br i1 %cmp13.i, label %if.then14.i, label %if.else.i

if.then14.i:                                      ; preds = %while.end.i
  %32 = load i8** %res.addr.i, align 8
  %33 = load double* %fr.i, align 8
  %34 = load double* %fi.i, align 8
  store i8* %32, i8** %res.addr.i.i, align 8
  store double 1.000000e+00, double* %real1.addr.i.i, align 8
  store double 0.000000e+00, double* %imag1.addr.i.i, align 8
  store double %33, double* %real2.addr.i.i, align 8
  store double %34, double* %imag2.addr.i.i, align 8
  %35 = load double* %real2.addr.i.i, align 8
  store double %35, double* %r_mag.i.i, align 8
  %36 = load double* %r_mag.i.i, align 8
  %cmp.i.i = fcmp olt double %36, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then14.i
  %37 = load double* %r_mag.i.i, align 8
  %sub.i.i = fsub double -0.000000e+00, %37
  store double %sub.i.i, double* %r_mag.i.i, align 8
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then14.i
  %38 = load double* %imag2.addr.i.i, align 8
  store double %38, double* %i_mag.i.i, align 8
  %39 = load double* %i_mag.i.i, align 8
  %cmp1.i.i = fcmp olt double %39, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %40 = load double* %i_mag.i.i, align 8
  %sub3.i.i = fsub double -0.000000e+00, %40
  store double %sub3.i.i, double* %i_mag.i.i, align 8
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %41 = load double* %r_mag.i.i, align 8
  %42 = load double* %i_mag.i.i, align 8
  %cmp5.i.i = fcmp ole double %41, %42
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %43 = load double* %real2.addr.i.i, align 8
  %44 = load double* %imag2.addr.i.i, align 8
  %div.i.i = fdiv double %43, %44
  store double %div.i.i, double* %r.i.i, align 8
  %45 = load double* %imag2.addr.i.i, align 8
  %46 = load double* %r.i.i, align 8
  %47 = load double* %r.i.i, align 8
  %mul.i.i = fmul double %46, %47
  %add.i.i = fadd double 1.000000e+00, %mul.i.i
  %mul7.i.i = fmul double %45, %add.i.i
  %div8.i.i = fdiv double 1.000000e+00, %mul7.i.i
  store double %div8.i.i, double* %d.i.i, align 8
  %48 = load double* %real1.addr.i.i, align 8
  %49 = load double* %r.i.i, align 8
  %mul9.i.i = fmul double %48, %49
  %50 = load double* %imag1.addr.i.i, align 8
  %add10.i.i = fadd double %mul9.i.i, %50
  %51 = load double* %d.i.i, align 8
  %mul11.i.i = fmul double %add10.i.i, %51
  store double %mul11.i.i, double* %x.i.i, align 8
  %52 = load double* %imag1.addr.i.i, align 8
  %53 = load double* %r.i.i, align 8
  %mul12.i.i = fmul double %52, %53
  %54 = load double* %real1.addr.i.i, align 8
  %sub13.i.i = fsub double %mul12.i.i, %54
  %55 = load double* %d.i.i, align 8
  %mul14.i.i = fmul double %sub13.i.i, %55
  store double %mul14.i.i, double* %y.i.i, align 8
  br label %__pgi_cddiv.exit.i

if.else.i.i:                                      ; preds = %if.end4.i.i
  %56 = load double* %imag2.addr.i.i, align 8
  %57 = load double* %real2.addr.i.i, align 8
  %div15.i.i = fdiv double %56, %57
  store double %div15.i.i, double* %r.i.i, align 8
  %58 = load double* %real2.addr.i.i, align 8
  %59 = load double* %r.i.i, align 8
  %60 = load double* %r.i.i, align 8
  %mul16.i.i = fmul double %59, %60
  %add17.i.i = fadd double 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul double %58, %add17.i.i
  %div19.i.i = fdiv double 1.000000e+00, %mul18.i.i
  store double %div19.i.i, double* %d.i.i, align 8
  %61 = load double* %real1.addr.i.i, align 8
  %62 = load double* %imag1.addr.i.i, align 8
  %63 = load double* %r.i.i, align 8
  %mul20.i.i = fmul double %62, %63
  %add21.i.i = fadd double %61, %mul20.i.i
  %64 = load double* %d.i.i, align 8
  %mul22.i.i = fmul double %add21.i.i, %64
  store double %mul22.i.i, double* %x.i.i, align 8
  %65 = load double* %imag1.addr.i.i, align 8
  %66 = load double* %real1.addr.i.i, align 8
  %67 = load double* %r.i.i, align 8
  %mul23.i.i = fmul double %66, %67
  %sub24.i.i = fsub double %65, %mul23.i.i
  %68 = load double* %d.i.i, align 8
  %mul25.i.i = fmul double %sub24.i.i, %68
  store double %mul25.i.i, double* %y.i.i, align 8
  br label %__pgi_cddiv.exit.i

__pgi_cddiv.exit.i:                               ; preds = %if.else.i.i, %if.then6.i.i
  %69 = load double* %x.i.i, align 8
  %70 = load i8** %res.addr.i.i, align 8
  %71 = bitcast i8* %70 to double*
  store double %69, double* %71, align 8
  %72 = load double* %y.i.i, align 8
  %73 = load i8** %res.addr.i.i, align 8
  %74 = bitcast i8* %73 to double*
  %arrayidx27.i.i = getelementptr inbounds double* %74, i64 1
  store double %72, double* %arrayidx27.i.i, align 8
  br label %__pgi_cdpowi.exit

if.else.i:                                        ; preds = %while.end.i
  %75 = load double* %fr.i, align 8
  %76 = load i8** %res.addr.i, align 8
  %77 = bitcast i8* %76 to double*
  store double %75, double* %77, align 8
  %78 = load double* %fi.i, align 8
  %79 = load i8** %res.addr.i, align 8
  %80 = bitcast i8* %79 to double*
  %arrayidx15.i = getelementptr inbounds double* %80, i64 1
  store double %78, double* %arrayidx15.i, align 8
  br label %__pgi_cdpowi.exit

__pgi_cdpowi.exit:                                ; preds = %if.else.i, %__pgi_cddiv.exit.i
  ret void
}

define  void @__pgi_cdpowk_llvm(%struct.__dcomplex* %res, double %a, double %b, i64 %i) nounwind alwaysinline {
entry:
  %res.addr.i.i = alloca i8*, align 8
  %real1.addr.i.i = alloca double, align 8
  %imag1.addr.i.i = alloca double, align 8
  %real2.addr.i.i = alloca double, align 8
  %imag2.addr.i.i = alloca double, align 8
  %x.i.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %r.i.i = alloca double, align 8
  %d.i.i = alloca double, align 8
  %r_mag.i.i = alloca double, align 8
  %i_mag.i.i = alloca double, align 8
  %res.addr.i = alloca i8*, align 8
  %real.addr.i = alloca double, align 8
  %imag.addr.i = alloca double, align 8
  %i.addr.i = alloca i64, align 8
  %k.i = alloca i64, align 8
  %fr.i = alloca double, align 8
  %fi.i = alloca double, align 8
  %gr.i = alloca double, align 8
  %gi.i = alloca double, align 8
  %tr.i = alloca double, align 8
  %ti.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %i.addr = alloca i64, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  %4 = load i64* %i.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real.addr.i, align 8
  store double %3, double* %imag.addr.i, align 8
  store i64 %4, i64* %i.addr.i, align 8
  store double 1.000000e+00, double* %fr.i, align 8
  store double 0.000000e+00, double* %fi.i, align 8
  %5 = load double* %real.addr.i, align 8
  store double %5, double* %gr.i, align 8
  %6 = load double* %imag.addr.i, align 8
  store double %6, double* %gi.i, align 8
  %7 = load i64* %i.addr.i, align 8
  store i64 %7, i64* %k.i, align 8
  %8 = load i64* %i.addr.i, align 8
  %cmp.i = icmp slt i64 %8, 0
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %9 = load i64* %i.addr.i, align 8
  %sub.i = sub nsw i64 0, %9
  store i64 %sub.i, i64* %k.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end7.i, %if.end.i
  %10 = load i64* %k.i, align 8
  %tobool.i = icmp ne i64 %10, 0
  br i1 %tobool.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %11 = load i64* %k.i, align 8
  %and.i = and i64 %11, 1
  %tobool1.i = icmp ne i64 %and.i, 0
  br i1 %tobool1.i, label %if.then2.i, label %if.end7.i

if.then2.i:                                       ; preds = %while.body.i
  %12 = load double* %fr.i, align 8
  %13 = load double* %gr.i, align 8
  %mul.i = fmul double %12, %13
  %14 = load double* %fi.i, align 8
  %15 = load double* %gi.i, align 8
  %mul3.i = fmul double %14, %15
  %sub4.i = fsub double %mul.i, %mul3.i
  store double %sub4.i, double* %tr.i, align 8
  %16 = load double* %fr.i, align 8
  %17 = load double* %gi.i, align 8
  %mul5.i = fmul double %16, %17
  %18 = load double* %fi.i, align 8
  %19 = load double* %gr.i, align 8
  %mul6.i = fmul double %18, %19
  %add.i = fadd double %mul5.i, %mul6.i
  store double %add.i, double* %ti.i, align 8
  %20 = load double* %tr.i, align 8
  store double %20, double* %fr.i, align 8
  %21 = load double* %ti.i, align 8
  store double %21, double* %fi.i, align 8
  br label %if.end7.i

if.end7.i:                                        ; preds = %if.then2.i, %while.body.i
  %22 = load i64* %k.i, align 8
  %shr.i = lshr i64 %22, 1
  store i64 %shr.i, i64* %k.i, align 8
  %23 = load double* %gr.i, align 8
  %24 = load double* %gr.i, align 8
  %mul8.i = fmul double %23, %24
  %25 = load double* %gi.i, align 8
  %26 = load double* %gi.i, align 8
  %mul9.i = fmul double %25, %26
  %sub10.i = fsub double %mul8.i, %mul9.i
  store double %sub10.i, double* %tr.i, align 8
  %27 = load double* %gr.i, align 8
  %mul11.i = fmul double 2.000000e+00, %27
  %28 = load double* %gi.i, align 8
  %mul12.i = fmul double %mul11.i, %28
  store double %mul12.i, double* %ti.i, align 8
  %29 = load double* %tr.i, align 8
  store double %29, double* %gr.i, align 8
  %30 = load double* %ti.i, align 8
  store double %30, double* %gi.i, align 8
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  %31 = load i64* %i.addr.i, align 8
  %cmp13.i = icmp slt i64 %31, 0
  br i1 %cmp13.i, label %if.then14.i, label %if.else.i

if.then14.i:                                      ; preds = %while.end.i
  %32 = load i8** %res.addr.i, align 8
  %33 = load double* %fr.i, align 8
  %34 = load double* %fi.i, align 8
  store i8* %32, i8** %res.addr.i.i, align 8
  store double 1.000000e+00, double* %real1.addr.i.i, align 8
  store double 0.000000e+00, double* %imag1.addr.i.i, align 8
  store double %33, double* %real2.addr.i.i, align 8
  store double %34, double* %imag2.addr.i.i, align 8
  %35 = load double* %real2.addr.i.i, align 8
  store double %35, double* %r_mag.i.i, align 8
  %36 = load double* %r_mag.i.i, align 8
  %cmp.i.i = fcmp olt double %36, 0.000000e+00
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then14.i
  %37 = load double* %r_mag.i.i, align 8
  %sub.i.i = fsub double -0.000000e+00, %37
  store double %sub.i.i, double* %r_mag.i.i, align 8
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then14.i
  %38 = load double* %imag2.addr.i.i, align 8
  store double %38, double* %i_mag.i.i, align 8
  %39 = load double* %i_mag.i.i, align 8
  %cmp1.i.i = fcmp olt double %39, 0.000000e+00
  br i1 %cmp1.i.i, label %if.then2.i.i, label %if.end4.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i
  %40 = load double* %i_mag.i.i, align 8
  %sub3.i.i = fsub double -0.000000e+00, %40
  store double %sub3.i.i, double* %i_mag.i.i, align 8
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i
  %41 = load double* %r_mag.i.i, align 8
  %42 = load double* %i_mag.i.i, align 8
  %cmp5.i.i = fcmp ole double %41, %42
  br i1 %cmp5.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end4.i.i
  %43 = load double* %real2.addr.i.i, align 8
  %44 = load double* %imag2.addr.i.i, align 8
  %div.i.i = fdiv double %43, %44
  store double %div.i.i, double* %r.i.i, align 8
  %45 = load double* %imag2.addr.i.i, align 8
  %46 = load double* %r.i.i, align 8
  %47 = load double* %r.i.i, align 8
  %mul.i.i = fmul double %46, %47
  %add.i.i = fadd double 1.000000e+00, %mul.i.i
  %mul7.i.i = fmul double %45, %add.i.i
  %div8.i.i = fdiv double 1.000000e+00, %mul7.i.i
  store double %div8.i.i, double* %d.i.i, align 8
  %48 = load double* %real1.addr.i.i, align 8
  %49 = load double* %r.i.i, align 8
  %mul9.i.i = fmul double %48, %49
  %50 = load double* %imag1.addr.i.i, align 8
  %add10.i.i = fadd double %mul9.i.i, %50
  %51 = load double* %d.i.i, align 8
  %mul11.i.i = fmul double %add10.i.i, %51
  store double %mul11.i.i, double* %x.i.i, align 8
  %52 = load double* %imag1.addr.i.i, align 8
  %53 = load double* %r.i.i, align 8
  %mul12.i.i = fmul double %52, %53
  %54 = load double* %real1.addr.i.i, align 8
  %sub13.i.i = fsub double %mul12.i.i, %54
  %55 = load double* %d.i.i, align 8
  %mul14.i.i = fmul double %sub13.i.i, %55
  store double %mul14.i.i, double* %y.i.i, align 8
  br label %__pgi_cddiv.exit.i

if.else.i.i:                                      ; preds = %if.end4.i.i
  %56 = load double* %imag2.addr.i.i, align 8
  %57 = load double* %real2.addr.i.i, align 8
  %div15.i.i = fdiv double %56, %57
  store double %div15.i.i, double* %r.i.i, align 8
  %58 = load double* %real2.addr.i.i, align 8
  %59 = load double* %r.i.i, align 8
  %60 = load double* %r.i.i, align 8
  %mul16.i.i = fmul double %59, %60
  %add17.i.i = fadd double 1.000000e+00, %mul16.i.i
  %mul18.i.i = fmul double %58, %add17.i.i
  %div19.i.i = fdiv double 1.000000e+00, %mul18.i.i
  store double %div19.i.i, double* %d.i.i, align 8
  %61 = load double* %real1.addr.i.i, align 8
  %62 = load double* %imag1.addr.i.i, align 8
  %63 = load double* %r.i.i, align 8
  %mul20.i.i = fmul double %62, %63
  %add21.i.i = fadd double %61, %mul20.i.i
  %64 = load double* %d.i.i, align 8
  %mul22.i.i = fmul double %add21.i.i, %64
  store double %mul22.i.i, double* %x.i.i, align 8
  %65 = load double* %imag1.addr.i.i, align 8
  %66 = load double* %real1.addr.i.i, align 8
  %67 = load double* %r.i.i, align 8
  %mul23.i.i = fmul double %66, %67
  %sub24.i.i = fsub double %65, %mul23.i.i
  %68 = load double* %d.i.i, align 8
  %mul25.i.i = fmul double %sub24.i.i, %68
  store double %mul25.i.i, double* %y.i.i, align 8
  br label %__pgi_cddiv.exit.i

__pgi_cddiv.exit.i:                               ; preds = %if.else.i.i, %if.then6.i.i
  %69 = load double* %x.i.i, align 8
  %70 = load i8** %res.addr.i.i, align 8
  %71 = bitcast i8* %70 to double*
  store double %69, double* %71, align 8
  %72 = load double* %y.i.i, align 8
  %73 = load i8** %res.addr.i.i, align 8
  %74 = bitcast i8* %73 to double*
  %arrayidx27.i.i = getelementptr inbounds double* %74, i64 1
  store double %72, double* %arrayidx27.i.i, align 8
  br label %__pgi_cdpowk.exit

if.else.i:                                        ; preds = %while.end.i
  %75 = load double* %fr.i, align 8
  %76 = load i8** %res.addr.i, align 8
  %77 = bitcast i8* %76 to double*
  store double %75, double* %77, align 8
  %78 = load double* %fi.i, align 8
  %79 = load i8** %res.addr.i, align 8
  %80 = bitcast i8* %79 to double*
  %arrayidx15.i = getelementptr inbounds double* %80, i64 1
  store double %78, double* %arrayidx15.i, align 8
  br label %__pgi_cdpowk.exit

__pgi_cdpowk.exit:                                ; preds = %if.else.i, %__pgi_cddiv.exit.i
  ret void
}

define  void @__pgi_cdpowcd_llvm(%struct.__dcomplex* %res, double %a, double %b, double %c, double %d) nounwind alwaysinline {
entry:
  %res.addr.i = alloca i8*, align 8
  %real1.addr.i = alloca double, align 8
  %imag1.addr.i = alloca double, align 8
  %real2.addr.i = alloca double, align 8
  %imag2.addr.i = alloca double, align 8
  %logr.i = alloca double, align 8
  %logi.i = alloca double, align 8
  %x.i = alloca double, align 8
  %y.i = alloca double, align 8
  %z.i = alloca double, align 8
  %w.i = alloca double, align 8
  %res.addr = alloca %struct.__dcomplex*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %c.addr = alloca double, align 8
  %d.addr = alloca double, align 8
  store %struct.__dcomplex* %res, %struct.__dcomplex** %res.addr, align 8
  store double %a, double* %a.addr, align 8
  store double %b, double* %b.addr, align 8
  store double %c, double* %c.addr, align 8
  store double %d, double* %d.addr, align 8
  %0 = load %struct.__dcomplex** %res.addr, align 8
  %1 = bitcast %struct.__dcomplex* %0 to i8*
  %2 = load double* %a.addr, align 8
  %3 = load double* %b.addr, align 8
  %4 = load double* %c.addr, align 8
  %5 = load double* %d.addr, align 8
  store i8* %1, i8** %res.addr.i, align 8
  store double %2, double* %real1.addr.i, align 8
  store double %3, double* %imag1.addr.i, align 8
  store double %4, double* %real2.addr.i, align 8
  store double %5, double* %imag2.addr.i, align 8
  %6 = load double* %real1.addr.i, align 8
  %7 = load double* %imag1.addr.i, align 8
  %call.i = call  double @__nv_hypot(double %6, double %7) nounwind
  %call1.i = call  double @__nv_log(double %call.i) nounwind
  store double %call1.i, double* %logr.i, align 8
  %8 = load double* %imag1.addr.i, align 8
  %9 = load double* %real1.addr.i, align 8
  %call2.i = call  double @__nv_atan2(double %8, double %9) nounwind
  store double %call2.i, double* %logi.i, align 8
  %10 = load double* %logr.i, align 8
  %11 = load double* %real2.addr.i, align 8
  %mul.i = fmul double %10, %11
  %12 = load double* %logi.i, align 8
  %13 = load double* %imag2.addr.i, align 8
  %mul3.i = fmul double %12, %13
  %sub.i = fsub double %mul.i, %mul3.i
  %call4.i = call  double @__nv_exp(double %sub.i) nounwind
  store double %call4.i, double* %x.i, align 8
  %14 = load double* %logr.i, align 8
  %15 = load double* %imag2.addr.i, align 8
  %mul5.i = fmul double %14, %15
  %16 = load double* %logi.i, align 8
  %17 = load double* %real2.addr.i, align 8
  %mul6.i = fmul double %16, %17
  %add.i = fadd double %mul5.i, %mul6.i
  store double %add.i, double* %y.i, align 8
  %18 = load double* %x.i, align 8
  %19 = load double* %y.i, align 8
  %call7.i = call  double @__nv_cos(double %19) nounwind
  %mul8.i = fmul double %18, %call7.i
  store double %mul8.i, double* %z.i, align 8
  %20 = load double* %x.i, align 8
  %21 = load double* %y.i, align 8
  %call9.i = call  double @__nv_sin(double %21) nounwind
  %mul10.i = fmul double %20, %call9.i
  store double %mul10.i, double* %w.i, align 8
  %22 = load double* %z.i, align 8
  %23 = load i8** %res.addr.i, align 8
  %24 = bitcast i8* %23 to double*
  store double %22, double* %24, align 8
  %25 = load double* %w.i, align 8
  %26 = load i8** %res.addr.i, align 8
  %27 = bitcast i8* %26 to double*
  %arrayidx11.i = getelementptr inbounds double* %27, i64 1
  store double %25, double* %arrayidx11.i, align 8
  ret void
}

define  i32 @__pgi_atomicAddi_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw add i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  void @__pgi_atomicLoadi_llvm(i8* %to_address, i8* %from_address) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %to_address.addr = alloca i8*, align 8
  %from_address.addr = alloca i8*, align 8
  %int_to_address = alloca i32*, align 8
  %r = alloca i32, align 4
  store i8* %to_address, i8** %to_address.addr, align 8
  store i8* %from_address, i8** %from_address.addr, align 8
  %0 = load i8** %to_address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %int_to_address, align 8
  %2 = load i8** %from_address.addr, align 8
  store i8* %2, i8** %p.addr.i, align 8
  store i32 0, i32* %v.addr.i, align 4
  %3 = load i8** %p.addr.i, align 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %v.addr.i, align 4
  %6 = atomicrmw add i32* %4, i32 %5 seq_cst
  store i32 %6, i32* %r, align 4
  %7 = load i32* %r, align 4
  %8 = load i32** %int_to_address, align 8
  store i32 %7, i32* %8, align 4
  ret void
}

define  i32 @__pgi_atomicAddu_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw add i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicAndi_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw and i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicAndu_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw and i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicOri_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw or i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicOru_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw or i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicXori_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw xor i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicXoru_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw xor i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicSubi_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw sub i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicSubu_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw sub i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicMini_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw min i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicMinu_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw umin i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicMaxi_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw max i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicMaxu_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw umax i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicExchi_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw xchg i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  i32 @__pgi_atomicExchu_llvm(i8* %p, i32 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = atomicrmw xchg i32* %1, i32 %2 seq_cst
  ret i32 %3
}

define  float @__pgi_atomicExchf_llvm(i8* %p, float %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca float, align 4
  store i8* %p, i8** %p.addr, align 8
  store float %v, float* %v.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load float* %v.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %2)
  %3 = atomicrmw xchg i32* %1, i32 %call seq_cst
  %call1 = call  float @__nv_int_as_float(i32 %3)
  ret float %call1
}

define  i64 @__pgi_atomicExchul_llvm(i8* %p, i64 %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i64* %v.addr, align 8
  %3 = atomicrmw xchg i64* %1, i64 %2 seq_cst
  ret i64 %3
}

define  double @__pgi_atomicExchd_llvm(i8* %p, double %v) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca double, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %v, double* %v.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load double* %v.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %2)
  %3 = atomicrmw xchg i64* %1, i64 %call seq_cst
  %call1 = call  double @__nv_longlong_as_double(i64 %3)
  ret double %call1
}

define  i32 @__pgi_atomicCASi_llvm(i8* %p, i32 %v, i32 %w) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = load i32* %w.addr, align 4
  %4 = cmpxchg i32* %1, i32 %2, i32 %3 seq_cst
  ret i32 %4
}

define  i32 @__pgi_atomicCASu_llvm(i8* %p, i32 %v, i32 %w) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32* %v.addr, align 4
  %3 = load i32* %w.addr, align 4
  %4 = cmpxchg i32* %1, i32 %2, i32 %3 seq_cst
  ret i32 %4
}

define  float @__pgi_atomicCASf_llvm(i8* %p, float %v, float %w) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca float, align 4
  %w.addr = alloca float, align 4
  store i8* %p, i8** %p.addr, align 8
  store float %v, float* %v.addr, align 4
  store float %w, float* %w.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load float* %v.addr, align 4
  %call = call  i32 @__nv_float_as_int(float %2)
  %3 = load float* %w.addr, align 4
  %call1 = call  i32 @__nv_float_as_int(float %3)
  %4 = cmpxchg i32* %1, i32 %call, i32 %call1 seq_cst
  %call2 = call  float @__nv_int_as_float(i32 %4)
  ret float %call2
}

define  void @__pgi_atomicLoadf_llvm(i8* %to_address, i8* %from_address) nounwind alwaysinline {
entry:
  %to_address.addr = alloca i8*, align 8
  %from_address.addr = alloca i8*, align 8
  %float_to_address = alloca float*, align 8
  %r = alloca float, align 4
  store i8* %to_address, i8** %to_address.addr, align 8
  store i8* %from_address, i8** %from_address.addr, align 8
  %0 = load i8** %to_address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %float_to_address, align 8
  %2 = load i8** %from_address.addr, align 8
  %call = call  float @__pgi_atomicAddf_llvm(i8* %2, float 0.000000e+00)
  store float %call, float* %r, align 4
  %3 = load float* %r, align 4
  %4 = load float** %float_to_address, align 8
  store float %3, float* %4, align 4
  ret void
}

define  i64 @__pgi_atomicCASul_llvm(i8* %p, i64 %v, i64 %w) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  %w.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store i64 %w, i64* %w.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i64* %v.addr, align 8
  %3 = load i64* %w.addr, align 8
  %4 = cmpxchg i64* %1, i64 %2, i64 %3 seq_cst
  ret i64 %4
}

define  i64 @__pgi_atomicCASil_llvm(i8* %p, i64 %v, i64 %w) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  %w.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store i64 %w, i64* %w.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i64* %v.addr, align 8
  %3 = load i64* %w.addr, align 8
  %4 = cmpxchg i64* %1, i64 %2, i64 %3 seq_cst
  ret i64 %4
}

define  double @__pgi_atomicCASd_llvm(i8* %p, double %v, double %w) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca double, align 8
  %w.addr = alloca double, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %v, double* %v.addr, align 8
  store double %w, double* %w.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load double* %v.addr, align 8
  %call = call  i64 @__nv_double_as_longlong(double %2)
  %3 = load double* %w.addr, align 8
  %call1 = call  i64 @__nv_double_as_longlong(double %3)
  %4 = cmpxchg i64* %1, i64 %call, i64 %call1 seq_cst
  %call2 = call  double @__nv_longlong_as_double(i64 %4)
  ret double %call2
}

define  i64 @__pgi_atomicXorul_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %val.addr, align 8
  %xor = xor i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %xor, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  double @__pgi_atomicAddd_llvm(i8* %p, double %val) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to double*
  %2 = bitcast double* %1 to i8*
  %3 = load double* %val.addr, align 8
  %call = call  double @__pgi_atomicAddd_native_llvm(i8* %2, double %3)
  ret double %call
}

define  void @__pgi_atomicLoadd_llvm(i8* %to_address, i8* %from_address) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %val.addr.i = alloca double, align 8
  %to_address.addr = alloca i8*, align 8
  %from_address.addr = alloca i8*, align 8
  %double_to_address = alloca double*, align 8
  %r = alloca double, align 8
  store i8* %to_address, i8** %to_address.addr, align 8
  store i8* %from_address, i8** %from_address.addr, align 8
  %0 = load i8** %to_address.addr, align 8
  %1 = bitcast i8* %0 to double*
  store double* %1, double** %double_to_address, align 8
  %2 = load i8** %from_address.addr, align 8
  store i8* %2, i8** %p.addr.i, align 8
  store double 0.000000e+00, double* %val.addr.i, align 8
  %3 = load i8** %p.addr.i, align 8
  %4 = bitcast i8* %3 to double*
  %5 = bitcast double* %4 to i8*
  %6 = load double* %val.addr.i, align 8
  %call.i = call  double @__pgi_atomicAddd_native_llvm(i8* %5, double %6) nounwind
  store double %call.i, double* %r, align 8
  %7 = load double* %r, align 8
  %8 = load double** %double_to_address, align 8
  store double %7, double* %8, align 8
  ret void
}

define  i64 @__pgi_atomicAddul_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %val.addr, align 8
  %add = add i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %add, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicSubul_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %val.addr, align 8
  %sub = sub i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %sub, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicSubil_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %val.addr, align 8
  %sub = sub nsw i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %sub, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicXoril_llvm(i8* %p, i64 %v) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %v.addr, align 8
  %xor = xor i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %xor, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  void @__pgi_atomicLoadll_llvm(i8* %to_address, i8* %from_address) nounwind alwaysinline {
entry:
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i64, align 8
  %w.addr.i.i = alloca i64, align 8
  %p.addr.i = alloca i8*, align 8
  %val.addr.i = alloca i64, align 8
  %address_as_ull.i = alloca i64*, align 8
  %old.i = alloca i64, align 8
  %assumed.i = alloca i64, align 8
  %to_address.addr = alloca i8*, align 8
  %from_address.addr = alloca i8*, align 8
  %ll_to_address = alloca i64*, align 8
  %r = alloca i32, align 4
  store i8* %to_address, i8** %to_address.addr, align 8
  store i8* %from_address, i8** %from_address.addr, align 8
  %0 = load i8** %to_address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %ll_to_address, align 8
  %2 = load i8** %from_address.addr, align 8
  store i8* %2, i8** %p.addr.i, align 8
  store i64 0, i64* %val.addr.i, align 8
  %3 = load i8** %p.addr.i, align 8
  %4 = bitcast i8* %3 to i64*
  store i64* %4, i64** %address_as_ull.i, align 8
  %5 = load i64** %address_as_ull.i, align 8
  %6 = load i64* %5, align 8
  store i64 %6, i64* %old.i, align 8
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i, %entry
  %7 = load i64* %old.i, align 8
  store i64 %7, i64* %assumed.i, align 8
  %8 = load i64** %address_as_ull.i, align 8
  %9 = bitcast i64* %8 to i8*
  %10 = load i64* %assumed.i, align 8
  %11 = load i64* %assumed.i, align 8
  %12 = load i64* %val.addr.i, align 8
  %add.i = add i64 %11, %12
  store i8* %9, i8** %p.addr.i.i, align 8
  store i64 %10, i64* %v.addr.i.i, align 8
  store i64 %add.i, i64* %w.addr.i.i, align 8
  %13 = load i8** %p.addr.i.i, align 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64* %v.addr.i.i, align 8
  %16 = load i64* %w.addr.i.i, align 8
  %17 = cmpxchg i64* %14, i64 %15, i64 %16 seq_cst
  store i64 %17, i64* %old.i, align 8
  %18 = load i64* %assumed.i, align 8
  %19 = load i64* %old.i, align 8
  %cmp.i = icmp ne i64 %18, %19
  br i1 %cmp.i, label %do.body.i, label %__pgi_atomicAddul_llvm.exit

__pgi_atomicAddul_llvm.exit:                      ; preds = %do.body.i
  %20 = load i64* %old.i, align 8
  %conv = trunc i64 %20 to i32
  store i32 %conv, i32* %r, align 4
  %21 = load i32* %r, align 4
  %conv1 = sext i32 %21 to i64
  %22 = load i64** %ll_to_address, align 8
  store i64 %conv1, i64* %22, align 8
  ret void
}

define  double @__pgi_atomicSubd_llvm(i8* %p, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %val.addr.i = alloca double, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = load double* %val.addr, align 8
  %sub = fsub double -0.000000e+00, %1
  store i8* %0, i8** %p.addr.i, align 8
  store double %sub, double* %val.addr.i, align 8
  %2 = load i8** %p.addr.i, align 8
  %3 = bitcast i8* %2 to double*
  %4 = bitcast double* %3 to i8*
  %5 = load double* %val.addr.i, align 8
  %call.i = call  double @__pgi_atomicAddd_native_llvm(i8* %4, double %5) nounwind
  ret double %call.i
}

define  double @__pgi_atomicSubdr_llvm(i8* %p, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %9 = load i64* %assumed, align 8
  %call = call  double @__nv_longlong_as_double(i64 %9)
  %sub = fsub double %8, %call
  %call1 = call  i64 @__nv_double_as_longlong(double %sub)
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %call1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  %call3 = call  double @__nv_longlong_as_double(i64 %17)
  ret double %call3
}

define  float @__pgi_atomicMinf_llvm(i8* %p, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  %4 = load float* %val.addr, align 4
  %5 = load i32* %old, align 4
  %call = call  float @__nv_int_as_float(i32 %5)
  %cmp = fcmp olt float %4, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i32* %old, align 4
  store i32 %6, i32* %assumed, align 4
  %7 = load i32** %address_as_int, align 8
  %8 = bitcast i32* %7 to i8*
  %9 = load i32* %assumed, align 4
  %10 = load float* %val.addr, align 4
  %call1 = call  i32 @__nv_float_as_int(float %10)
  store i8* %8, i8** %p.addr.i, align 8
  store i32 %9, i32* %v.addr.i, align 4
  store i32 %call1, i32* %w.addr.i, align 4
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %v.addr.i, align 4
  %14 = load i32* %w.addr.i, align 4
  %15 = cmpxchg i32* %12, i32 %13, i32 %14 seq_cst
  store i32 %15, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i32* %assumed, align 4
  %17 = load i32* %old, align 4
  %cmp3 = icmp ne i32 %16, %17
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load float* %val.addr, align 4
  %19 = load i32* %old, align 4
  %call4 = call  float @__nv_int_as_float(i32 %19)
  %cmp5 = fcmp olt float %18, %call4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp5, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i32* %old, align 4
  %call6 = call  float @__nv_int_as_float(i32 %21)
  ret float %call6
}

define  float @__pgi_atomicMaxf_llvm(i8* %p, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  %4 = load float* %val.addr, align 4
  %5 = load i32* %old, align 4
  %call = call  float @__nv_int_as_float(i32 %5)
  %cmp = fcmp ogt float %4, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i32* %old, align 4
  store i32 %6, i32* %assumed, align 4
  %7 = load i32** %address_as_int, align 8
  %8 = bitcast i32* %7 to i8*
  %9 = load i32* %assumed, align 4
  %10 = load float* %val.addr, align 4
  %call1 = call  i32 @__nv_float_as_int(float %10)
  store i8* %8, i8** %p.addr.i, align 8
  store i32 %9, i32* %v.addr.i, align 4
  store i32 %call1, i32* %w.addr.i, align 4
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %v.addr.i, align 4
  %14 = load i32* %w.addr.i, align 4
  %15 = cmpxchg i32* %12, i32 %13, i32 %14 seq_cst
  store i32 %15, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i32* %assumed, align 4
  %17 = load i32* %old, align 4
  %cmp3 = icmp ne i32 %16, %17
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load float* %val.addr, align 4
  %19 = load i32* %old, align 4
  %call4 = call  float @__nv_int_as_float(i32 %19)
  %cmp5 = fcmp ogt float %18, %call4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp5, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i32* %old, align 4
  %call6 = call  float @__nv_int_as_float(i32 %21)
  ret float %call6
}

define  i64 @__pgi_atomicMinul_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  %4 = load i64* %val.addr, align 8
  %5 = load i64* %old, align 8
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i64* %old, align 8
  store i64 %6, i64* %assumed, align 8
  %7 = load i64** %address_as_ull, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64* %assumed, align 8
  %10 = load i64* %val.addr, align 8
  store i8* %8, i8** %p.addr.i, align 8
  store i64 %9, i64* %v.addr.i, align 8
  store i64 %10, i64* %w.addr.i, align 8
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %v.addr.i, align 8
  %14 = load i64* %w.addr.i, align 8
  %15 = cmpxchg i64* %12, i64 %13, i64 %14 seq_cst
  store i64 %15, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i64* %assumed, align 8
  %17 = load i64* %old, align 8
  %cmp1 = icmp ne i64 %16, %17
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load i64* %val.addr, align 8
  %19 = load i64* %old, align 8
  %cmp2 = icmp ult i64 %18, %19
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp2, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i64* %old, align 8
  ret i64 %21
}

define  i64 @__pgi_atomicMinil_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  %4 = load i64* %val.addr, align 8
  %5 = load i64* %old, align 8
  %cmp = icmp slt i64 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i64* %old, align 8
  store i64 %6, i64* %assumed, align 8
  %7 = load i64** %address_as_ll, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64* %assumed, align 8
  %10 = load i64* %val.addr, align 8
  store i8* %8, i8** %p.addr.i, align 8
  store i64 %9, i64* %v.addr.i, align 8
  store i64 %10, i64* %w.addr.i, align 8
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %v.addr.i, align 8
  %14 = load i64* %w.addr.i, align 8
  %15 = cmpxchg i64* %12, i64 %13, i64 %14 seq_cst
  store i64 %15, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i64* %assumed, align 8
  %17 = load i64* %old, align 8
  %cmp1 = icmp ne i64 %16, %17
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load i64* %val.addr, align 8
  %19 = load i64* %old, align 8
  %cmp2 = icmp slt i64 %18, %19
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp2, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i64* %old, align 8
  ret i64 %21
}

define  i64 @__pgi_atomicMaxul_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  %4 = load i64* %val.addr, align 8
  %5 = load i64* %old, align 8
  %cmp = icmp ugt i64 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i64* %old, align 8
  store i64 %6, i64* %assumed, align 8
  %7 = load i64** %address_as_ull, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64* %assumed, align 8
  %10 = load i64* %val.addr, align 8
  store i8* %8, i8** %p.addr.i, align 8
  store i64 %9, i64* %v.addr.i, align 8
  store i64 %10, i64* %w.addr.i, align 8
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %v.addr.i, align 8
  %14 = load i64* %w.addr.i, align 8
  %15 = cmpxchg i64* %12, i64 %13, i64 %14 seq_cst
  store i64 %15, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i64* %assumed, align 8
  %17 = load i64* %old, align 8
  %cmp1 = icmp ne i64 %16, %17
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load i64* %val.addr, align 8
  %19 = load i64* %old, align 8
  %cmp2 = icmp ugt i64 %18, %19
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp2, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i64* %old, align 8
  ret i64 %21
}

define  i64 @__pgi_atomicMaxil_llvm(i8* %p, i64 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca i64, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  %4 = load i64* %val.addr, align 8
  %5 = load i64* %old, align 8
  %cmp = icmp sgt i64 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i64* %old, align 8
  store i64 %6, i64* %assumed, align 8
  %7 = load i64** %address_as_ll, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64* %assumed, align 8
  %10 = load i64* %val.addr, align 8
  store i8* %8, i8** %p.addr.i, align 8
  store i64 %9, i64* %v.addr.i, align 8
  store i64 %10, i64* %w.addr.i, align 8
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %v.addr.i, align 8
  %14 = load i64* %w.addr.i, align 8
  %15 = cmpxchg i64* %12, i64 %13, i64 %14 seq_cst
  store i64 %15, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i64* %assumed, align 8
  %17 = load i64* %old, align 8
  %cmp1 = icmp ne i64 %16, %17
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load i64* %val.addr, align 8
  %19 = load i64* %old, align 8
  %cmp2 = icmp sgt i64 %18, %19
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp2, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i64* %old, align 8
  ret i64 %21
}

define  double @__pgi_atomicMind_llvm(i8* %p, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  %4 = load double* %val.addr, align 8
  %5 = load i64* %old, align 8
  %call = call  double @__nv_longlong_as_double(i64 %5)
  %cmp = fcmp olt double %4, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i64* %old, align 8
  store i64 %6, i64* %assumed, align 8
  %7 = load i64** %address_as_ull, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64* %assumed, align 8
  %10 = load double* %val.addr, align 8
  %call1 = call  i64 @__nv_double_as_longlong(double %10)
  store i8* %8, i8** %p.addr.i, align 8
  store i64 %9, i64* %v.addr.i, align 8
  store i64 %call1, i64* %w.addr.i, align 8
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %v.addr.i, align 8
  %14 = load i64* %w.addr.i, align 8
  %15 = cmpxchg i64* %12, i64 %13, i64 %14 seq_cst
  store i64 %15, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i64* %assumed, align 8
  %17 = load i64* %old, align 8
  %cmp3 = icmp ne i64 %16, %17
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load double* %val.addr, align 8
  %19 = load i64* %old, align 8
  %call4 = call  double @__nv_longlong_as_double(i64 %19)
  %cmp5 = fcmp olt double %18, %call4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp5, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i64* %old, align 8
  %call6 = call  double @__nv_longlong_as_double(i64 %21)
  ret double %call6
}

define  double @__pgi_atomicMaxd_llvm(i8* %p, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  %4 = load double* %val.addr, align 8
  %5 = load i64* %old, align 8
  %call = call  double @__nv_longlong_as_double(i64 %5)
  %cmp = fcmp ogt double %4, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %6 = load i64* %old, align 8
  store i64 %6, i64* %assumed, align 8
  %7 = load i64** %address_as_ull, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64* %assumed, align 8
  %10 = load double* %val.addr, align 8
  %call1 = call  i64 @__nv_double_as_longlong(double %10)
  store i8* %8, i8** %p.addr.i, align 8
  store i64 %9, i64* %v.addr.i, align 8
  store i64 %call1, i64* %w.addr.i, align 8
  %11 = load i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %v.addr.i, align 8
  %14 = load i64* %w.addr.i, align 8
  %15 = cmpxchg i64* %12, i64 %13, i64 %14 seq_cst
  store i64 %15, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %16 = load i64* %assumed, align 8
  %17 = load i64* %old, align 8
  %cmp3 = icmp ne i64 %16, %17
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %18 = load double* %val.addr, align 8
  %19 = load i64* %old, align 8
  %call4 = call  double @__nv_longlong_as_double(i64 %19)
  %cmp5 = fcmp ogt double %18, %call4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %20 = phi i1 [ false, %do.cond ], [ %cmp5, %land.rhs ]
  br i1 %20, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %21 = load i64* %old, align 8
  %call6 = call  double @__nv_longlong_as_double(i64 %21)
  ret double %call6
}

define  i64 @__pgi_atomicOril_llvm(i8* %p, i64 %v) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %v.addr, align 8
  %or = or i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %or, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicAndil_llvm(i8* %p, i64 %v) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  %0 = load i8** %p.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %9 = load i64* %v.addr, align 8
  %and = and i64 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %and, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicRShiftu_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %shr = lshr i32 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %shr, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicLShiftu_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %shl = shl i32 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %shl, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicRShifti_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %shr = ashr i32 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %shr, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicLShifti_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %shl = shl i32 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %shl, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicMuli_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %mul = mul nsw i32 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %mul, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicDivi_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %div = sdiv i32 %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %div, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  float @__pgi_atomicMulf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load float* %assumed, align 4
  %9 = load float* %val.addr, align 4
  %mul = fmul float %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %mul, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  float @__pgi_atomicDivf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load float* %assumed, align 4
  %9 = load float* %val.addr, align 4
  %div = fdiv float %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %div, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  double @__pgi_atomicMuld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca double, align 8
  %w.addr.i = alloca double, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_double = alloca double*, align 8
  %old = alloca double, align 8
  %assumed = alloca double, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to double*
  store double* %1, double** %address_as_double, align 8
  %2 = load double** %address_as_double, align 8
  %3 = load double* %2, align 8
  store double %3, double* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load double* %old, align 8
  store double %4, double* %assumed, align 8
  %5 = load double** %address_as_double, align 8
  %6 = bitcast double* %5 to i8*
  %7 = load double* %assumed, align 8
  %8 = load double* %assumed, align 8
  %9 = load double* %val.addr, align 8
  %mul = fmul double %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store double %7, double* %v.addr.i, align 8
  store double %mul, double* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load double* %v.addr.i, align 8
  %call.i = call  i64 @__nv_double_as_longlong(double %12) nounwind
  %13 = load double* %w.addr.i, align 8
  %call1.i = call  i64 @__nv_double_as_longlong(double %13) nounwind
  %14 = cmpxchg i64* %11, i64 %call.i, i64 %call1.i seq_cst
  %call2.i = call  double @__nv_longlong_as_double(i64 %14) nounwind
  store double %call2.i, double* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load double* %assumed, align 8
  %16 = load double* %old, align 8
  %cmp = fcmp une double %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load double* %old, align 8
  ret double %17
}

define  double @__pgi_atomicDivd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca double, align 8
  %w.addr.i = alloca double, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_double = alloca double*, align 8
  %old = alloca double, align 8
  %assumed = alloca double, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to double*
  store double* %1, double** %address_as_double, align 8
  %2 = load double** %address_as_double, align 8
  %3 = load double* %2, align 8
  store double %3, double* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load double* %old, align 8
  store double %4, double* %assumed, align 8
  %5 = load double** %address_as_double, align 8
  %6 = bitcast double* %5 to i8*
  %7 = load double* %assumed, align 8
  %8 = load double* %assumed, align 8
  %9 = load double* %val.addr, align 8
  %div = fdiv double %8, %9
  store i8* %6, i8** %p.addr.i, align 8
  store double %7, double* %v.addr.i, align 8
  store double %div, double* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load double* %v.addr.i, align 8
  %call.i = call  i64 @__nv_double_as_longlong(double %12) nounwind
  %13 = load double* %w.addr.i, align 8
  %call1.i = call  i64 @__nv_double_as_longlong(double %13) nounwind
  %14 = cmpxchg i64* %11, i64 %call.i, i64 %call1.i seq_cst
  %call2.i = call  double @__nv_longlong_as_double(i64 %14) nounwind
  store double %call2.i, double* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load double* %assumed, align 8
  %16 = load double* %old, align 8
  %cmp = fcmp une double %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load double* %old, align 8
  ret double %17
}

define  i32 @__pgi_atomicLeqvi_llvm(i8* %address, i32 %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %val, i32* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %9 = load i32* %val.addr, align 4
  %xor = xor i32 %8, %9
  %neg = xor i32 %xor, -1
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %neg, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicAddif_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %add = fadd float %conv, %9
  %conv1 = fptosi float %add to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicAddid_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %add = fadd double %conv, %9
  %conv1 = fptosi double %add to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicAddkf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %add = fadd float %conv, %9
  %conv1 = fptosi float %add to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicAddkd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %add = fadd double %conv, %9
  %conv1 = fptosi double %add to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicAdduf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %add = fadd float %conv, %9
  %conv1 = fptoui float %add to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicAddud_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %add = fadd double %conv, %9
  %conv1 = fptoui double %add to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicAddlf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %add = fadd float %conv, %9
  %conv1 = fptoui float %add to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicAddld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %add = fadd double %conv, %9
  %conv1 = fptoui double %add to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  float @__pgi_atomicAddfd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load float* %assumed, align 4
  %conv = fpext float %8 to double
  %9 = load double* %val.addr, align 8
  %add = fadd double %conv, %9
  %conv1 = fptrunc double %add to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv1, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  i32 @__pgi_atomicSubif_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %sub = fsub float %conv, %9
  %conv1 = fptosi float %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicSubid_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %sub = fsub double %conv, %9
  %conv1 = fptosi double %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicSubkf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %sub = fsub float %conv, %9
  %conv1 = fptosi float %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicSubkd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %sub = fsub double %conv, %9
  %conv1 = fptosi double %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicSubuf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %sub = fsub float %conv, %9
  %conv1 = fptoui float %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicSubud_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %sub = fsub double %conv, %9
  %conv1 = fptoui double %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicSublf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %sub = fsub float %conv, %9
  %conv1 = fptoui float %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicSubld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %sub = fsub double %conv, %9
  %conv1 = fptoui double %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  float @__pgi_atomicSubfd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load float* %assumed, align 4
  %conv = fpext float %8 to double
  %9 = load double* %val.addr, align 8
  %sub = fsub double %conv, %9
  %conv1 = fptrunc double %sub to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv1, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  i32 @__pgi_atomicSubifr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %9 = load i32* %assumed, align 4
  %conv = sitofp i32 %9 to float
  %sub = fsub float %8, %conv
  %conv1 = fptosi float %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicSubidr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %9 = load i32* %assumed, align 4
  %conv = sitofp i32 %9 to double
  %sub = fsub double %8, %conv
  %conv1 = fptosi double %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicSubkfr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %9 = load i64* %assumed, align 8
  %conv = sitofp i64 %9 to float
  %sub = fsub float %8, %conv
  %conv1 = fptosi float %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicSubkdr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %9 = load i64* %assumed, align 8
  %conv = sitofp i64 %9 to double
  %sub = fsub double %8, %conv
  %conv1 = fptosi double %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicSubufr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %9 = load i32* %assumed, align 4
  %conv = uitofp i32 %9 to float
  %sub = fsub float %8, %conv
  %conv1 = fptoui float %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicSubudr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %9 = load i32* %assumed, align 4
  %conv = uitofp i32 %9 to double
  %sub = fsub double %8, %conv
  %conv1 = fptoui double %sub to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicSublfr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %9 = load i64* %assumed, align 8
  %conv = uitofp i64 %9 to float
  %sub = fsub float %8, %conv
  %conv1 = fptoui float %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicSubldr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %9 = load i64* %assumed, align 8
  %conv = uitofp i64 %9 to double
  %sub = fsub double %8, %conv
  %conv1 = fptoui double %sub to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  float @__pgi_atomicSubfdr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %9 = load float* %assumed, align 4
  %conv = fpext float %9 to double
  %sub = fsub double %8, %conv
  %conv1 = fptrunc double %sub to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv1, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  i32 @__pgi_atomicMulif_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %mul = fmul float %conv, %9
  %conv1 = fptosi float %mul to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicMulid_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %mul = fmul double %conv, %9
  %conv1 = fptosi double %mul to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicMulkf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %mul = fmul float %conv, %9
  %conv1 = fptosi float %mul to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicMulkd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %mul = fmul double %conv, %9
  %conv1 = fptosi double %mul to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicMuluf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %mul = fmul float %conv, %9
  %conv1 = fptoui float %mul to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicMulud_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %mul = fmul double %conv, %9
  %conv1 = fptoui double %mul to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicMullf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %mul = fmul float %conv, %9
  %conv1 = fptoui float %mul to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicMulld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %mul = fmul double %conv, %9
  %conv1 = fptoui double %mul to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  float @__pgi_atomicMulfd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load float* %assumed, align 4
  %conv = fpext float %8 to double
  %9 = load double* %val.addr, align 8
  %mul = fmul double %conv, %9
  %conv1 = fptrunc double %mul to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv1, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  i32 @__pgi_atomicDivif_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %div = fdiv float %conv, %9
  %conv1 = fptosi float %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicDivid_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = sitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %div = fdiv double %conv, %9
  %conv1 = fptosi double %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicDivkf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %div = fdiv float %conv, %9
  %conv1 = fptosi float %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicDivkd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = sitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %div = fdiv double %conv, %9
  %conv1 = fptosi double %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicDivuf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to float
  %9 = load float* %val.addr, align 4
  %div = fdiv float %conv, %9
  %conv1 = fptoui float %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicDivud_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load i32* %assumed, align 4
  %conv = uitofp i32 %8 to double
  %9 = load double* %val.addr, align 8
  %div = fdiv double %conv, %9
  %conv1 = fptoui double %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicDivlf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to float
  %9 = load float* %val.addr, align 4
  %div = fdiv float %conv, %9
  %conv1 = fptoui float %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicDivld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load i64* %assumed, align 8
  %conv = uitofp i64 %8 to double
  %9 = load double* %val.addr, align 8
  %div = fdiv double %conv, %9
  %conv1 = fptoui double %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  float @__pgi_atomicDivfd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load float* %assumed, align 4
  %conv = fpext float %8 to double
  %9 = load double* %val.addr, align 8
  %div = fdiv double %conv, %9
  %conv1 = fptrunc double %div to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv1, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  i32 @__pgi_atomicDivifr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %9 = load i32* %assumed, align 4
  %conv = sitofp i32 %9 to float
  %div = fdiv float %8, %conv
  %conv1 = fptosi float %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicDividr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %9 = load i32* %assumed, align 4
  %conv = sitofp i32 %9 to double
  %div = fdiv double %8, %conv
  %conv1 = fptosi double %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicDivkfr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %9 = load i64* %assumed, align 8
  %conv = sitofp i64 %9 to float
  %div = fdiv float %8, %conv
  %conv1 = fptosi float %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicDivkdr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %9 = load i64* %assumed, align 8
  %conv = sitofp i64 %9 to double
  %div = fdiv double %8, %conv
  %conv1 = fptosi double %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i32 @__pgi_atomicDivufr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %9 = load i32* %assumed, align 4
  %conv = uitofp i32 %9 to float
  %div = fdiv float %8, %conv
  %conv1 = fptoui float %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i32 @__pgi_atomicDivudr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %9 = load i32* %assumed, align 4
  %conv = uitofp i32 %9 to double
  %div = fdiv double %8, %conv
  %conv1 = fptoui double %div to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv1, i32* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %v.addr.i, align 4
  %13 = load i32* %w.addr.i, align 4
  %14 = cmpxchg i32* %11, i32 %12, i32 %13 seq_cst
  store i32 %14, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32* %assumed, align 4
  %16 = load i32* %old, align 4
  %cmp = icmp ne i32 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i32* %old, align 4
  ret i32 %17
}

define  i64 @__pgi_atomicDivlfr_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %9 = load i64* %assumed, align 8
  %conv = uitofp i64 %9 to float
  %div = fdiv float %8, %conv
  %conv1 = fptoui float %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  i64 @__pgi_atomicDivldr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %9 = load i64* %assumed, align 8
  %conv = uitofp i64 %9 to double
  %div = fdiv double %8, %conv
  %conv1 = fptoui double %div to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv1, i64* %w.addr.i, align 8
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64* %v.addr.i, align 8
  %13 = load i64* %w.addr.i, align 8
  %14 = cmpxchg i64* %11, i64 %12, i64 %13 seq_cst
  store i64 %14, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64* %assumed, align 8
  %16 = load i64* %old, align 8
  %cmp = icmp ne i64 %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load i64* %old, align 8
  ret i64 %17
}

define  float @__pgi_atomicDivfdr_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %9 = load float* %assumed, align 4
  %conv = fpext float %9 to double
  %div = fdiv double %8, %conv
  %conv1 = fptrunc double %div to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv1, float* %w.addr.i, align 4
  %10 = load i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %13) nounwind
  %14 = cmpxchg i32* %11, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %14) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load float* %assumed, align 4
  %16 = load float* %old, align 4
  %cmp = fcmp une float %15, %16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %17 = load float* %old, align 4
  ret float %17
}

define  i32 @__pgi_atomicMaxif_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %conv = fptosi float %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i32* %assumed, align 4
  %conv2 = sitofp i32 %17 to float
  %cmp3 = fcmp ogt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i32 @__pgi_atomicMaxid_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %conv = fptosi double %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i32* %assumed, align 4
  %conv2 = sitofp i32 %17 to double
  %cmp3 = fcmp ogt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i64 @__pgi_atomicMaxkf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %conv = fptosi float %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i64* %assumed, align 8
  %conv2 = sitofp i64 %17 to float
  %cmp3 = fcmp ogt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  i64 @__pgi_atomicMaxkd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %conv = fptosi double %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i64* %assumed, align 8
  %conv2 = sitofp i64 %17 to double
  %cmp3 = fcmp ogt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  i32 @__pgi_atomicMaxuf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %conv = fptoui float %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i32* %assumed, align 4
  %conv2 = uitofp i32 %17 to float
  %cmp3 = fcmp ogt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i32 @__pgi_atomicMaxud_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %conv = fptoui double %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i32* %assumed, align 4
  %conv2 = uitofp i32 %17 to double
  %cmp3 = fcmp ogt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i64 @__pgi_atomicMaxlf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %conv = fptoui float %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i64* %assumed, align 8
  %conv2 = uitofp i64 %17 to float
  %cmp3 = fcmp ogt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  i64 @__pgi_atomicMaxld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %conv = fptoui double %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i64* %assumed, align 8
  %conv2 = uitofp i64 %17 to double
  %cmp3 = fcmp ogt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  float @__pgi_atomicMaxfd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %conv = fptrunc double %8 to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv, float* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %11) nounwind
  %12 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = cmpxchg i32* %10, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %13) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load float* %assumed, align 4
  %15 = load float* %old, align 4
  %cmp = fcmp une float %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load float* %assumed, align 4
  %conv2 = fpext float %17 to double
  %cmp3 = fcmp ogt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load float* %old, align 4
  ret float %19
}

define  i32 @__pgi_atomicMinif_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %conv = fptosi float %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i32* %assumed, align 4
  %conv2 = sitofp i32 %17 to float
  %cmp3 = fcmp olt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i32 @__pgi_atomicMinid_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_int = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_int, align 8
  %2 = load i32** %address_as_int, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_int, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %conv = fptosi double %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i32* %assumed, align 4
  %conv2 = sitofp i32 %17 to double
  %cmp3 = fcmp olt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i64 @__pgi_atomicMinkf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %conv = fptosi float %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i64* %assumed, align 8
  %conv2 = sitofp i64 %17 to float
  %cmp3 = fcmp olt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  i64 @__pgi_atomicMinkd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ll = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ll, align 8
  %2 = load i64** %address_as_ll, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ll, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %conv = fptosi double %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i64* %assumed, align 8
  %conv2 = sitofp i64 %17 to double
  %cmp3 = fcmp olt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  i32 @__pgi_atomicMinuf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load float* %val.addr, align 4
  %conv = fptoui float %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i32* %assumed, align 4
  %conv2 = uitofp i32 %17 to float
  %cmp3 = fcmp olt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i32 @__pgi_atomicMinud_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %w.addr.i = alloca i32, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_uint = alloca i32*, align 8
  %old = alloca i32, align 4
  %assumed = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %address_as_uint, align 8
  %2 = load i32** %address_as_uint, align 8
  %3 = load i32* %2, align 4
  store i32 %3, i32* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i32* %old, align 4
  store i32 %4, i32* %assumed, align 4
  %5 = load i32** %address_as_uint, align 8
  %6 = bitcast i32* %5 to i8*
  %7 = load i32* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %conv = fptoui double %8 to i32
  store i8* %6, i8** %p.addr.i, align 8
  store i32 %7, i32* %v.addr.i, align 4
  store i32 %conv, i32* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load i32* %v.addr.i, align 4
  %12 = load i32* %w.addr.i, align 4
  %13 = cmpxchg i32* %10, i32 %11, i32 %12 seq_cst
  store i32 %13, i32* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32* %assumed, align 4
  %15 = load i32* %old, align 4
  %cmp = icmp ne i32 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i32* %assumed, align 4
  %conv2 = uitofp i32 %17 to double
  %cmp3 = fcmp olt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32* %old, align 4
  ret i32 %19
}

define  i64 @__pgi_atomicMinlf_llvm(i8* %address, float %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store float %val, float* %val.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load float* %val.addr, align 4
  %conv = fptoui float %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load float* %val.addr, align 4
  %17 = load i64* %assumed, align 8
  %conv2 = uitofp i64 %17 to float
  %cmp3 = fcmp olt float %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  i64 @__pgi_atomicMinld_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = load i64** %address_as_ull, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = load i64* %assumed, align 8
  %8 = load double* %val.addr, align 8
  %conv = fptoui double %8 to i64
  store i8* %6, i8** %p.addr.i, align 8
  store i64 %7, i64* %v.addr.i, align 8
  store i64 %conv, i64* %w.addr.i, align 8
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64* %v.addr.i, align 8
  %12 = load i64* %w.addr.i, align 8
  %13 = cmpxchg i64* %10, i64 %11, i64 %12 seq_cst
  store i64 %13, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64* %assumed, align 8
  %15 = load i64* %old, align 8
  %cmp = icmp ne i64 %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load i64* %assumed, align 8
  %conv2 = uitofp i64 %17 to double
  %cmp3 = fcmp olt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i64* %old, align 8
  ret i64 %19
}

define  float @__pgi_atomicMinfd_llvm(i8* %address, double %val) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca float, align 4
  %w.addr.i = alloca float, align 4
  %address.addr = alloca i8*, align 8
  %val.addr = alloca double, align 8
  %address_as_float = alloca float*, align 8
  %old = alloca float, align 4
  %assumed = alloca float, align 4
  store i8* %address, i8** %address.addr, align 8
  store double %val, double* %val.addr, align 8
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to float*
  store float* %1, float** %address_as_float, align 8
  %2 = load float** %address_as_float, align 8
  %3 = load float* %2, align 4
  store float %3, float* %old, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %4 = load float* %old, align 4
  store float %4, float* %assumed, align 4
  %5 = load float** %address_as_float, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load float* %assumed, align 4
  %8 = load double* %val.addr, align 8
  %conv = fptrunc double %8 to float
  store i8* %6, i8** %p.addr.i, align 8
  store float %7, float* %v.addr.i, align 4
  store float %conv, float* %w.addr.i, align 4
  %9 = load i8** %p.addr.i, align 8
  %10 = bitcast i8* %9 to i32*
  %11 = load float* %v.addr.i, align 4
  %call.i = call  i32 @__nv_float_as_int(float %11) nounwind
  %12 = load float* %w.addr.i, align 4
  %call1.i = call  i32 @__nv_float_as_int(float %12) nounwind
  %13 = cmpxchg i32* %10, i32 %call.i, i32 %call1.i seq_cst
  %call2.i = call  float @__nv_int_as_float(i32 %13) nounwind
  store float %call2.i, float* %old, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load float* %assumed, align 4
  %15 = load float* %old, align 4
  %cmp = fcmp une float %14, %15
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %16 = load double* %val.addr, align 8
  %17 = load float* %assumed, align 4
  %conv2 = fpext float %17 to double
  %cmp3 = fcmp olt double %16, %conv2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp3, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load float* %old, align 4
  ret float %19
}

define  void @__pgi_atomicAddcmplx_llvm(i8* %address, float %realval, float %imgval) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %realval.addr = alloca float, align 4
  %imgval.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  %newval = alloca i64, align 8
  %rval = alloca %struct.cmplx2, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %realval, float* %realval.addr, align 4
  store float %imgval, float* %imgval.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = bitcast i64* %assumed to %struct.cmplx2*
  %6 = bitcast %struct.cmplx2* %rval to i8*
  %7 = bitcast %struct.cmplx2* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 8, i32 4, i1 false)
  %8 = load float* %realval.addr, align 4
  %r = getelementptr inbounds %struct.cmplx2* %rval, i32 0, i32 0
  %9 = load float* %r, align 4
  %add = fadd float %9, %8
  store float %add, float* %r, align 4
  %10 = load float* %imgval.addr, align 4
  %i = getelementptr inbounds %struct.cmplx2* %rval, i32 0, i32 1
  %11 = load float* %i, align 4
  %add1 = fadd float %11, %10
  store float %add1, float* %i, align 4
  %12 = bitcast %struct.cmplx2* %rval to i64*
  %13 = load i64* %12, align 8
  store i64 %13, i64* %newval, align 8
  %14 = load i64** %address_as_ull, align 8
  %15 = bitcast i64* %14 to i8*
  %16 = load i64* %assumed, align 8
  %17 = load i64* %newval, align 8
  store i8* %15, i8** %p.addr.i, align 8
  store i64 %16, i64* %v.addr.i, align 8
  store i64 %17, i64* %w.addr.i, align 8
  %18 = load i8** %p.addr.i, align 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64* %v.addr.i, align 8
  %21 = load i64* %w.addr.i, align 8
  %22 = cmpxchg i64* %19, i64 %20, i64 %21 seq_cst
  store i64 %22, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %23 = load i64* %assumed, align 8
  %24 = load i64* %old, align 8
  %cmp = icmp ne i64 %23, %24
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

define  void @__pgi_atomicSubcmplx_llvm(i8* %address, float %realval, float %imgval) nounwind alwaysinline {
entry:
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %w.addr.i = alloca i64, align 8
  %address.addr = alloca i8*, align 8
  %realval.addr = alloca float, align 4
  %imgval.addr = alloca float, align 4
  %address_as_ull = alloca i64*, align 8
  %old = alloca i64, align 8
  %assumed = alloca i64, align 8
  %newval = alloca i64, align 8
  %rval = alloca %struct.cmplx2, align 4
  store i8* %address, i8** %address.addr, align 8
  store float %realval, float* %realval.addr, align 4
  store float %imgval, float* %imgval.addr, align 4
  %0 = load i8** %address.addr, align 8
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %address_as_ull, align 8
  %2 = load i64** %address_as_ull, align 8
  %3 = load i64* %2, align 8
  store i64 %3, i64* %old, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %4 = load i64* %old, align 8
  store i64 %4, i64* %assumed, align 8
  %5 = bitcast i64* %assumed to %struct.cmplx2*
  %6 = bitcast %struct.cmplx2* %rval to i8*
  %7 = bitcast %struct.cmplx2* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 8, i32 4, i1 false)
  %8 = load float* %realval.addr, align 4
  %r = getelementptr inbounds %struct.cmplx2* %rval, i32 0, i32 0
  %9 = load float* %r, align 4
  %sub = fsub float %9, %8
  store float %sub, float* %r, align 4
  %10 = load float* %imgval.addr, align 4
  %i = getelementptr inbounds %struct.cmplx2* %rval, i32 0, i32 1
  %11 = load float* %i, align 4
  %sub1 = fsub float %11, %10
  store float %sub1, float* %i, align 4
  %12 = bitcast %struct.cmplx2* %rval to i64*
  %13 = load i64* %12, align 8
  store i64 %13, i64* %newval, align 8
  %14 = load i64** %address_as_ull, align 8
  %15 = bitcast i64* %14 to i8*
  %16 = load i64* %assumed, align 8
  %17 = load i64* %newval, align 8
  store i8* %15, i8** %p.addr.i, align 8
  store i64 %16, i64* %v.addr.i, align 8
  store i64 %17, i64* %w.addr.i, align 8
  %18 = load i8** %p.addr.i, align 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64* %v.addr.i, align 8
  %21 = load i64* %w.addr.i, align 8
  %22 = cmpxchg i64* %19, i64 %20, i64 %21 seq_cst
  store i64 %22, i64* %old, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %23 = load i64* %assumed, align 8
  %24 = load i64* %old, align 8
  %cmp = icmp ne i64 %23, %24
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

define  float @__pgi_ldg_float(float* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca float*, align 8
  %ret = alloca float, align 4
  %ptr = alloca float*, align 8
  store float* %p, float** %p.addr, align 8
  %0 = load float** %p.addr, align 8
  store float* %0, float** %ptr, align 8
  %1 = load float** %ptr, align 8
  %2 = call float asm sideeffect "ld.global.nc.f32 $0, [$1];", "=f,l"(float* %1) nounwind, !srcloc !204
  store float %2, float* %ret, align 4
  %3 = load float* %ret, align 4
  ret float %3
}

define  double @__pgi_ldg_double(double* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca double*, align 8
  %ret = alloca double, align 8
  %ptr = alloca double*, align 8
  store double* %p, double** %p.addr, align 8
  %0 = load double** %p.addr, align 8
  store double* %0, double** %ptr, align 8
  %1 = load double** %ptr, align 8
  %2 = call double asm sideeffect "ld.global.nc.f64 $0, [$1];", "=d,l"(double* %1) nounwind, !srcloc !205
  store double %2, double* %ret, align 8
  %3 = load double* %ret, align 8
  ret double %3
}

define  i64 @__pgi_ldg_ll(i64* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i64*, align 8
  %ret = alloca i64, align 8
  %ptr = alloca i64*, align 8
  store i64* %p, i64** %p.addr, align 8
  %0 = load i64** %p.addr, align 8
  store i64* %0, i64** %ptr, align 8
  %1 = load i64** %ptr, align 8
  %2 = call i64 asm sideeffect "ld.global.nc.s64 $0, [$1];", "=l,l"(i64* %1) nounwind, !srcloc !206
  store i64 %2, i64* %ret, align 8
  %3 = load i64* %ret, align 8
  ret i64 %3
}

define  i64 @__pgi_ldg_ull(i64* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i64*, align 8
  %ret = alloca i64, align 8
  %ptr = alloca i64*, align 8
  store i64* %p, i64** %p.addr, align 8
  %0 = load i64** %p.addr, align 8
  store i64* %0, i64** %ptr, align 8
  %1 = load i64** %ptr, align 8
  %2 = call i64 asm sideeffect "ld.global.nc.u64 $0, [$1];", "=l,l"(i64* %1) nounwind, !srcloc !207
  store i64 %2, i64* %ret, align 8
  %3 = load i64* %ret, align 8
  ret i64 %3
}

define  i32 @__pgi_ldg_int(i32* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %ptr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  %0 = load i32** %p.addr, align 8
  store i32* %0, i32** %ptr, align 8
  %1 = load i32** %ptr, align 8
  %2 = call i32 asm sideeffect "ld.global.nc.s32 $0, [$1];", "=r,l"(i32* %1) nounwind, !srcloc !208
  store i32 %2, i32* %ret, align 4
  %3 = load i32* %ret, align 4
  ret i32 %3
}

define  i32 @__pgi_ldg_uint(i32* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %ptr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  %0 = load i32** %p.addr, align 8
  store i32* %0, i32** %ptr, align 8
  %1 = load i32** %ptr, align 8
  %2 = call i32 asm sideeffect "ld.global.nc.u32 $0, [$1];", "=r,l"(i32* %1) nounwind, !srcloc !209
  store i32 %2, i32* %ret, align 4
  %3 = load i32* %ret, align 4
  ret i32 %3
}

define  i16 @__pgi_ldg_short(i16* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i16*, align 8
  %ret = alloca i16, align 2
  %ptr = alloca i16*, align 8
  store i16* %p, i16** %p.addr, align 8
  %0 = load i16** %p.addr, align 8
  store i16* %0, i16** %ptr, align 8
  %1 = load i16** %ptr, align 8
  %2 = call i16 asm sideeffect "ld.global.nc.s16 $0, [$1];", "=h,l"(i16* %1) nounwind, !srcloc !210
  store i16 %2, i16* %ret, align 2
  %3 = load i16* %ret, align 2
  ret i16 %3
}

define  i16 @__pgi_ldg_ushort(i16* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i16*, align 8
  %ret = alloca i16, align 2
  %ptr = alloca i16*, align 8
  store i16* %p, i16** %p.addr, align 8
  %0 = load i16** %p.addr, align 8
  store i16* %0, i16** %ptr, align 8
  %1 = load i16** %ptr, align 8
  %2 = call i16 asm sideeffect "ld.global.nc.u16 $0, [$1];", "=h,l"(i16* %1) nounwind, !srcloc !211
  store i16 %2, i16* %ret, align 2
  %3 = load i16* %ret, align 2
  ret i16 %3
}

define  i8 @__pgi_ldg_char(i8* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %ret = alloca i8, align 1
  %ptr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  store i8* %0, i8** %ptr, align 8
  %1 = load i8** %ptr, align 8
  %2 = call i8 asm sideeffect "ld.global.nc.s8 $0, [$1];", "=r,l"(i8* %1) nounwind, !srcloc !212
  store i8 %2, i8* %ret, align 1
  %3 = load i8* %ret, align 1
  ret i8 %3
}

define  i8 @__pgi_ldg_uchar(i8* %p) nounwind alwaysinline {
entry:
  %p.addr = alloca i8*, align 8
  %ret = alloca i8, align 1
  %ptr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8** %p.addr, align 8
  store i8* %0, i8** %ptr, align 8
  %1 = load i8** %ptr, align 8
  %2 = call i8 asm sideeffect "ld.global.nc.u8 $0, [$1];", "=r,l"(i8* %1) nounwind, !srcloc !213
  store i8 %2, i8* %ret, align 1
  %3 = load i8* %ret, align 1
  ret i8 %3
}

define  i64 @clock64() nounwind alwaysinline {
entry:
  %ret = alloca i64, align 8
  %0 = call i64 asm sideeffect "mov.u64 $0, %clock64;", "=l"() nounwind, !srcloc !214
  store i64 %0, i64* %ret, align 8
  %1 = load i64* %ret, align 8
  ret i64 %1
}

define  i64 @__pgi_fixuk(float %x) nounwind alwaysinline {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %conv = fptoui float %0 to i64
  ret i64 %conv
}

define  i64 @__pgi_kleadz(i64 %x) nounwind alwaysinline {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load i64* %x.addr, align 8
  %call = call  i32 @__nv_clzll(i64 %0)
  %conv = sext i32 %call to i64
  ret i64 %conv
}

declare  i32 @__nv_clzll(i64)

define  void @__cxa_vec_cctor(i8* %destination_array, i8* %source_array, i64 %element_count, i64 %element_size, void (i8*, i8*)* %constructor, void (i8*)* %destructor) nounwind alwaysinline {
entry:
  %destination_array.addr = alloca i8*, align 8
  %source_array.addr = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %constructor.addr = alloca void (i8*, i8*)*, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %source = alloca i8*, align 8
  %destination = alloca i8*, align 8
  %source_end = alloca i8*, align 8
  store i8* %destination_array, i8** %destination_array.addr, align 8
  store i8* %source_array, i8** %source_array.addr, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store void (i8*, i8*)* %constructor, void (i8*, i8*)** %constructor.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  %0 = load void (i8*, i8*)** %constructor.addr, align 8
  %tobool = icmp ne void (i8*, i8*)* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %source_array.addr, align 8
  store i8* %1, i8** %source, align 8
  %2 = load i8** %destination_array.addr, align 8
  store i8* %2, i8** %destination, align 8
  %3 = load i8** %source, align 8
  %4 = load i64* %element_count.addr, align 8
  %5 = load i64* %element_size.addr, align 8
  %mul = mul i64 %4, %5
  %add.ptr = getelementptr inbounds i8* %3, i64 %mul
  store i8* %add.ptr, i8** %source_end, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i8** %source, align 8
  %7 = load i8** %source_end, align 8
  %cmp = icmp ult i8* %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load void (i8*, i8*)** %constructor.addr, align 8
  %9 = load i8** %destination, align 8
  %10 = load i8** %source, align 8
  call  void %8(i8* %9, i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64* %element_size.addr, align 8
  %12 = load i8** %source, align 8
  %add.ptr1 = getelementptr inbounds i8* %12, i64 %11
  store i8* %add.ptr1, i8** %source, align 8
  %13 = load i64* %element_size.addr, align 8
  %14 = load i8** %destination, align 8
  %add.ptr2 = getelementptr inbounds i8* %14, i64 %13
  store i8* %add.ptr2, i8** %destination, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

define  void @__cxa_vec_dtor(i8* %array_address, i64 %element_count, i64 %element_size, void (i8*)* %destructor) nounwind alwaysinline {
entry:
  %array_address.addr = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %element = alloca i8*, align 8
  %beginning = alloca i8*, align 8
  store i8* %array_address, i8** %array_address.addr, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  %0 = load void (i8*)** %destructor.addr, align 8
  %tobool = icmp ne void (i8*)* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8** %array_address.addr, align 8
  %2 = load i64* %element_count.addr, align 8
  %3 = load i64* %element_size.addr, align 8
  %mul = mul i64 %2, %3
  %add.ptr = getelementptr inbounds i8* %1, i64 %mul
  store i8* %add.ptr, i8** %element, align 8
  %4 = load i8** %array_address.addr, align 8
  store i8* %4, i8** %beginning, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i8** %element, align 8
  %6 = load i8** %beginning, align 8
  %cmp = icmp ugt i8* %5, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64* %element_size.addr, align 8
  %8 = load i8** %element, align 8
  %idx.neg = sub i64 0, %7
  %add.ptr1 = getelementptr inbounds i8* %8, i64 %idx.neg
  store i8* %add.ptr1, i8** %element, align 8
  %9 = load void (i8*)** %destructor.addr, align 8
  %10 = load i8** %element, align 8
  call  void %9(i8* %10)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  ret void
}

define  i8* @__cxa_vec_new(i64 %element_count, i64 %element_size, i64 %padding_size, void (i8*)* %constructor, void (i8*)* %destructor) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %constructor.addr.i = alloca void (i8*)*, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %end.i = alloca i8*, align 8
  %retval = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %padding_size.addr = alloca i64, align 8
  %constructor.addr = alloca void (i8*)*, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %size = alloca i64, align 8
  %base = alloca i8*, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i64 %padding_size, i64* %padding_size.addr, align 8
  store void (i8*)* %constructor, void (i8*)** %constructor.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  %0 = load i64* %element_count.addr, align 8
  %1 = load i64* %element_size.addr, align 8
  %mul = mul i64 %0, %1
  %2 = load i64* %padding_size.addr, align 8
  %add = add i64 %mul, %2
  store i64 %add, i64* %size, align 8
  %3 = load i64* %size, align 8
  %call = call  i8* @malloc(i64 %3)
  store i8* %call, i8** %base, align 8
  %4 = load i8** %base, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64* %padding_size.addr, align 8
  %cmp = icmp uge i64 %5, 8
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %6 = load i64* %padding_size.addr, align 8
  %7 = load i8** %base, align 8
  %add.ptr = getelementptr inbounds i8* %7, i64 %6
  store i8* %add.ptr, i8** %base, align 8
  %8 = load i64* %element_count.addr, align 8
  %9 = load i8** %base, align 8
  %10 = bitcast i8* %9 to i64*
  %arrayidx = getelementptr inbounds i64* %10, i64 -1
  store i64 %8, i64* %arrayidx, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %11 = load i8** %base, align 8
  %12 = load i64* %element_count.addr, align 8
  %13 = load i64* %element_size.addr, align 8
  %14 = load void (i8*)** %constructor.addr, align 8
  %15 = load void (i8*)** %destructor.addr, align 8
  store i8* %11, i8** %array_address.addr.i, align 8
  store i64 %12, i64* %element_count.addr.i, align 8
  store i64 %13, i64* %element_size.addr.i, align 8
  store void (i8*)* %14, void (i8*)** %constructor.addr.i, align 8
  store void (i8*)* %15, void (i8*)** %destructor.addr.i, align 8
  %16 = load void (i8*)** %constructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %16, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_ctor.exit

if.then.i:                                        ; preds = %if.end2
  %17 = load i8** %array_address.addr.i, align 8
  store i8* %17, i8** %element.i, align 8
  %18 = load i8** %element.i, align 8
  %19 = load i64* %element_count.addr.i, align 8
  %20 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %19, %20
  %add.ptr.i = getelementptr inbounds i8* %18, i64 %mul.i
  store i8* %add.ptr.i, i8** %end.i, align 8
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.then.i
  %21 = load i8** %element.i, align 8
  %22 = load i8** %end.i, align 8
  %cmp.i = icmp ult i8* %21, %22
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %23 = load void (i8*)** %constructor.addr.i, align 8
  %24 = load i8** %element.i, align 8
  call  void %23(i8* %24) nounwind
  %25 = load i64* %element_size.addr.i, align 8
  %26 = load i8** %element.i, align 8
  %add.ptr1.i = getelementptr inbounds i8* %26, i64 %25
  store i8* %add.ptr1.i, i8** %element.i, align 8
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  br label %__cxa_vec_ctor.exit

__cxa_vec_ctor.exit:                              ; preds = %for.end.i, %if.end2
  %27 = load i8** %base, align 8
  store i8* %27, i8** %retval
  br label %return

return:                                           ; preds = %__cxa_vec_ctor.exit, %if.then
  %28 = load i8** %retval
  ret i8* %28
}

define  i8* @__cxa_vec_new2(i64 %element_count, i64 %element_size, i64 %padding_size, void (i8*)* %constructor, void (i8*)* %destructor, i8* (i64)* %allocator, void (i8*)* %deallocator) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %constructor.addr.i = alloca void (i8*)*, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %end.i = alloca i8*, align 8
  %retval = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %padding_size.addr = alloca i64, align 8
  %constructor.addr = alloca void (i8*)*, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %allocator.addr = alloca i8* (i64)*, align 8
  %deallocator.addr = alloca void (i8*)*, align 8
  %size = alloca i64, align 8
  %base = alloca i8*, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i64 %padding_size, i64* %padding_size.addr, align 8
  store void (i8*)* %constructor, void (i8*)** %constructor.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  store i8* (i64)* %allocator, i8* (i64)** %allocator.addr, align 8
  store void (i8*)* %deallocator, void (i8*)** %deallocator.addr, align 8
  %0 = load i8* (i64)** %allocator.addr, align 8
  %tobool = icmp ne i8* (i64)* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64* %element_count.addr, align 8
  %2 = load i64* %element_size.addr, align 8
  %mul = mul i64 %1, %2
  %3 = load i64* %padding_size.addr, align 8
  %add = add i64 %mul, %3
  store i64 %add, i64* %size, align 8
  %4 = load i8* (i64)** %allocator.addr, align 8
  %5 = load i64* %size, align 8
  %call = call  i8* %4(i64 %5)
  store i8* %call, i8** %base, align 8
  %6 = load i8** %base, align 8
  %tobool1 = icmp ne i8* %6, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %7 = load i64* %padding_size.addr, align 8
  %cmp = icmp uge i64 %7, 8
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end3
  %8 = load i64* %padding_size.addr, align 8
  %9 = load i8** %base, align 8
  %add.ptr = getelementptr inbounds i8* %9, i64 %8
  store i8* %add.ptr, i8** %base, align 8
  %10 = load i64* %element_count.addr, align 8
  %11 = load i8** %base, align 8
  %12 = bitcast i8* %11 to i64*
  %arrayidx = getelementptr inbounds i64* %12, i64 -1
  store i64 %10, i64* %arrayidx, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end3
  %13 = load i8** %base, align 8
  %14 = load i64* %element_count.addr, align 8
  %15 = load i64* %element_size.addr, align 8
  %16 = load void (i8*)** %constructor.addr, align 8
  %17 = load void (i8*)** %destructor.addr, align 8
  store i8* %13, i8** %array_address.addr.i, align 8
  store i64 %14, i64* %element_count.addr.i, align 8
  store i64 %15, i64* %element_size.addr.i, align 8
  store void (i8*)* %16, void (i8*)** %constructor.addr.i, align 8
  store void (i8*)* %17, void (i8*)** %destructor.addr.i, align 8
  %18 = load void (i8*)** %constructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %18, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_ctor.exit

if.then.i:                                        ; preds = %if.end5
  %19 = load i8** %array_address.addr.i, align 8
  store i8* %19, i8** %element.i, align 8
  %20 = load i8** %element.i, align 8
  %21 = load i64* %element_count.addr.i, align 8
  %22 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %21, %22
  %add.ptr.i = getelementptr inbounds i8* %20, i64 %mul.i
  store i8* %add.ptr.i, i8** %end.i, align 8
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.then.i
  %23 = load i8** %element.i, align 8
  %24 = load i8** %end.i, align 8
  %cmp.i = icmp ult i8* %23, %24
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %25 = load void (i8*)** %constructor.addr.i, align 8
  %26 = load i8** %element.i, align 8
  call  void %25(i8* %26) nounwind
  %27 = load i64* %element_size.addr.i, align 8
  %28 = load i8** %element.i, align 8
  %add.ptr1.i = getelementptr inbounds i8* %28, i64 %27
  store i8* %add.ptr1.i, i8** %element.i, align 8
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  br label %__cxa_vec_ctor.exit

__cxa_vec_ctor.exit:                              ; preds = %for.end.i, %if.end5
  %29 = load i8** %base, align 8
  store i8* %29, i8** %retval
  br label %return

return:                                           ; preds = %__cxa_vec_ctor.exit, %if.then2, %if.then
  %30 = load i8** %retval
  ret i8* %30
}

define  i8* @__cxa_vec_new3(i64 %element_count, i64 %element_size, i64 %padding_size, void (i8*)* %constructor, void (i8*)* %destructor, i8* (i64)* %allocator, void (i8*, i64)* %deallocator) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %constructor.addr.i = alloca void (i8*)*, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %end.i = alloca i8*, align 8
  %retval = alloca i8*, align 8
  %element_count.addr = alloca i64, align 8
  %element_size.addr = alloca i64, align 8
  %padding_size.addr = alloca i64, align 8
  %constructor.addr = alloca void (i8*)*, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %allocator.addr = alloca i8* (i64)*, align 8
  %deallocator.addr = alloca void (i8*, i64)*, align 8
  %size = alloca i64, align 8
  %base = alloca i8*, align 8
  store i64 %element_count, i64* %element_count.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i64 %padding_size, i64* %padding_size.addr, align 8
  store void (i8*)* %constructor, void (i8*)** %constructor.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  store i8* (i64)* %allocator, i8* (i64)** %allocator.addr, align 8
  store void (i8*, i64)* %deallocator, void (i8*, i64)** %deallocator.addr, align 8
  %0 = load i8* (i64)** %allocator.addr, align 8
  %tobool = icmp ne i8* (i64)* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64* %element_count.addr, align 8
  %2 = load i64* %element_size.addr, align 8
  %mul = mul i64 %1, %2
  %3 = load i64* %padding_size.addr, align 8
  %add = add i64 %mul, %3
  store i64 %add, i64* %size, align 8
  %4 = load i8* (i64)** %allocator.addr, align 8
  %5 = load i64* %size, align 8
  %call = call  i8* %4(i64 %5)
  store i8* %call, i8** %base, align 8
  %6 = load i8** %base, align 8
  %tobool1 = icmp ne i8* %6, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %7 = load i64* %padding_size.addr, align 8
  %cmp = icmp uge i64 %7, 8
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end3
  %8 = load i64* %padding_size.addr, align 8
  %9 = load i8** %base, align 8
  %add.ptr = getelementptr inbounds i8* %9, i64 %8
  store i8* %add.ptr, i8** %base, align 8
  %10 = load i64* %element_count.addr, align 8
  %11 = load i8** %base, align 8
  %12 = bitcast i8* %11 to i64*
  %arrayidx = getelementptr inbounds i64* %12, i64 -1
  store i64 %10, i64* %arrayidx, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end3
  %13 = load i8** %base, align 8
  %14 = load i64* %element_count.addr, align 8
  %15 = load i64* %element_size.addr, align 8
  %16 = load void (i8*)** %constructor.addr, align 8
  %17 = load void (i8*)** %destructor.addr, align 8
  store i8* %13, i8** %array_address.addr.i, align 8
  store i64 %14, i64* %element_count.addr.i, align 8
  store i64 %15, i64* %element_size.addr.i, align 8
  store void (i8*)* %16, void (i8*)** %constructor.addr.i, align 8
  store void (i8*)* %17, void (i8*)** %destructor.addr.i, align 8
  %18 = load void (i8*)** %constructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %18, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_ctor.exit

if.then.i:                                        ; preds = %if.end5
  %19 = load i8** %array_address.addr.i, align 8
  store i8* %19, i8** %element.i, align 8
  %20 = load i8** %element.i, align 8
  %21 = load i64* %element_count.addr.i, align 8
  %22 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %21, %22
  %add.ptr.i = getelementptr inbounds i8* %20, i64 %mul.i
  store i8* %add.ptr.i, i8** %end.i, align 8
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %if.then.i
  %23 = load i8** %element.i, align 8
  %24 = load i8** %end.i, align 8
  %cmp.i = icmp ult i8* %23, %24
  br i1 %cmp.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %25 = load void (i8*)** %constructor.addr.i, align 8
  %26 = load i8** %element.i, align 8
  call  void %25(i8* %26) nounwind
  %27 = load i64* %element_size.addr.i, align 8
  %28 = load i8** %element.i, align 8
  %add.ptr1.i = getelementptr inbounds i8* %28, i64 %27
  store i8* %add.ptr1.i, i8** %element.i, align 8
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  br label %__cxa_vec_ctor.exit

__cxa_vec_ctor.exit:                              ; preds = %for.end.i, %if.end5
  %29 = load i8** %base, align 8
  store i8* %29, i8** %retval
  br label %return

return:                                           ; preds = %__cxa_vec_ctor.exit, %if.then2, %if.then
  %30 = load i8** %retval
  ret i8* %30
}

define  void @__cxa_vec_delete(i8* %array_address, i64 %element_size, i64 %padding_size, void (i8*)* %destructor) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %beginning.i = alloca i8*, align 8
  %array_address.addr = alloca i8*, align 8
  %element_size.addr = alloca i64, align 8
  %padding_size.addr = alloca i64, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %base = alloca i8*, align 8
  %element_count = alloca i64, align 8
  store i8* %array_address, i8** %array_address.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i64 %padding_size, i64* %padding_size.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  %0 = load i8** %array_address.addr, align 8
  store i8* %0, i8** %base, align 8
  %1 = load i64* %padding_size.addr, align 8
  %cmp = icmp uge i64 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8** %array_address.addr, align 8
  %3 = bitcast i8* %2 to i64*
  %arrayidx = getelementptr inbounds i64* %3, i64 -1
  %4 = load i64* %arrayidx, align 8
  store i64 %4, i64* %element_count, align 8
  %5 = load i64* %padding_size.addr, align 8
  %6 = load i8** %base, align 8
  %idx.neg = sub i64 0, %5
  %add.ptr = getelementptr inbounds i8* %6, i64 %idx.neg
  store i8* %add.ptr, i8** %base, align 8
  %7 = load i8** %array_address.addr, align 8
  %8 = load i64* %element_count, align 8
  %9 = load i64* %element_size.addr, align 8
  %10 = load void (i8*)** %destructor.addr, align 8
  store i8* %7, i8** %array_address.addr.i, align 8
  store i64 %8, i64* %element_count.addr.i, align 8
  store i64 %9, i64* %element_size.addr.i, align 8
  store void (i8*)* %10, void (i8*)** %destructor.addr.i, align 8
  %11 = load void (i8*)** %destructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %11, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_dtor.exit

if.then.i:                                        ; preds = %if.then
  %12 = load i8** %array_address.addr.i, align 8
  %13 = load i64* %element_count.addr.i, align 8
  %14 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %13, %14
  %add.ptr.i = getelementptr inbounds i8* %12, i64 %mul.i
  store i8* %add.ptr.i, i8** %element.i, align 8
  %15 = load i8** %array_address.addr.i, align 8
  store i8* %15, i8** %beginning.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then.i
  %16 = load i8** %element.i, align 8
  %17 = load i8** %beginning.i, align 8
  %cmp.i = icmp ugt i8* %16, %17
  br i1 %cmp.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %18 = load i64* %element_size.addr.i, align 8
  %19 = load i8** %element.i, align 8
  %idx.neg.i = sub i64 0, %18
  %add.ptr1.i = getelementptr inbounds i8* %19, i64 %idx.neg.i
  store i8* %add.ptr1.i, i8** %element.i, align 8
  %20 = load void (i8*)** %destructor.addr.i, align 8
  %21 = load i8** %element.i, align 8
  call  void %20(i8* %21) nounwind
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  br label %__cxa_vec_dtor.exit

__cxa_vec_dtor.exit:                              ; preds = %while.end.i, %if.then
  br label %if.end

if.end:                                           ; preds = %__cxa_vec_dtor.exit, %entry
  %22 = load i8** %base, align 8
  call  void @free(i8* %22)
  ret void
}

define  void @__cxa_vec_delete2(i8* %array_address, i64 %element_size, i64 %padding_size, void (i8*)* %destructor, void (i8*)* %deallocator) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %beginning.i = alloca i8*, align 8
  %array_address.addr = alloca i8*, align 8
  %element_size.addr = alloca i64, align 8
  %padding_size.addr = alloca i64, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %deallocator.addr = alloca void (i8*)*, align 8
  %base = alloca i8*, align 8
  %element_count = alloca i64, align 8
  store i8* %array_address, i8** %array_address.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i64 %padding_size, i64* %padding_size.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  store void (i8*)* %deallocator, void (i8*)** %deallocator.addr, align 8
  %0 = load i8** %array_address.addr, align 8
  store i8* %0, i8** %base, align 8
  %1 = load i64* %padding_size.addr, align 8
  %cmp = icmp uge i64 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8** %base, align 8
  %3 = bitcast i8* %2 to i64*
  %arrayidx = getelementptr inbounds i64* %3, i64 -1
  %4 = load i64* %arrayidx, align 8
  store i64 %4, i64* %element_count, align 8
  %5 = load i64* %padding_size.addr, align 8
  %6 = load i8** %base, align 8
  %idx.neg = sub i64 0, %5
  %add.ptr = getelementptr inbounds i8* %6, i64 %idx.neg
  store i8* %add.ptr, i8** %base, align 8
  %7 = load i8** %array_address.addr, align 8
  %8 = load i64* %element_count, align 8
  %9 = load i64* %element_size.addr, align 8
  %10 = load void (i8*)** %destructor.addr, align 8
  store i8* %7, i8** %array_address.addr.i, align 8
  store i64 %8, i64* %element_count.addr.i, align 8
  store i64 %9, i64* %element_size.addr.i, align 8
  store void (i8*)* %10, void (i8*)** %destructor.addr.i, align 8
  %11 = load void (i8*)** %destructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %11, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_dtor.exit

if.then.i:                                        ; preds = %if.then
  %12 = load i8** %array_address.addr.i, align 8
  %13 = load i64* %element_count.addr.i, align 8
  %14 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %13, %14
  %add.ptr.i = getelementptr inbounds i8* %12, i64 %mul.i
  store i8* %add.ptr.i, i8** %element.i, align 8
  %15 = load i8** %array_address.addr.i, align 8
  store i8* %15, i8** %beginning.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then.i
  %16 = load i8** %element.i, align 8
  %17 = load i8** %beginning.i, align 8
  %cmp.i = icmp ugt i8* %16, %17
  br i1 %cmp.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %18 = load i64* %element_size.addr.i, align 8
  %19 = load i8** %element.i, align 8
  %idx.neg.i = sub i64 0, %18
  %add.ptr1.i = getelementptr inbounds i8* %19, i64 %idx.neg.i
  store i8* %add.ptr1.i, i8** %element.i, align 8
  %20 = load void (i8*)** %destructor.addr.i, align 8
  %21 = load i8** %element.i, align 8
  call  void %20(i8* %21) nounwind
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  br label %__cxa_vec_dtor.exit

__cxa_vec_dtor.exit:                              ; preds = %while.end.i, %if.then
  br label %if.end

if.end:                                           ; preds = %__cxa_vec_dtor.exit, %entry
  %22 = load void (i8*)** %deallocator.addr, align 8
  %tobool = icmp ne void (i8*)* %22, null
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  %23 = load void (i8*)** %deallocator.addr, align 8
  %24 = load i8** %base, align 8
  call  void %23(i8* %24)
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  ret void
}

define  void @__cxa_vec_delete3(i8* %array_address, i64 %element_size, i64 %padding_size, void (i8*)* %destructor, void (i8*, i64)* %deallocator) nounwind alwaysinline {
entry:
  %array_address.addr.i = alloca i8*, align 8
  %element_count.addr.i = alloca i64, align 8
  %element_size.addr.i = alloca i64, align 8
  %destructor.addr.i = alloca void (i8*)*, align 8
  %element.i = alloca i8*, align 8
  %beginning.i = alloca i8*, align 8
  %array_address.addr = alloca i8*, align 8
  %element_size.addr = alloca i64, align 8
  %padding_size.addr = alloca i64, align 8
  %destructor.addr = alloca void (i8*)*, align 8
  %deallocator.addr = alloca void (i8*, i64)*, align 8
  %base = alloca i8*, align 8
  %element_count = alloca i64, align 8
  store i8* %array_address, i8** %array_address.addr, align 8
  store i64 %element_size, i64* %element_size.addr, align 8
  store i64 %padding_size, i64* %padding_size.addr, align 8
  store void (i8*)* %destructor, void (i8*)** %destructor.addr, align 8
  store void (i8*, i64)* %deallocator, void (i8*, i64)** %deallocator.addr, align 8
  %0 = load i64* %padding_size.addr, align 8
  %cmp = icmp uge i64 %0, 8
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %1 = load i8** %array_address.addr, align 8
  store i8* %1, i8** %base, align 8
  %2 = load i8** %base, align 8
  %3 = bitcast i8* %2 to i64*
  %arrayidx = getelementptr inbounds i64* %3, i64 -1
  %4 = load i64* %arrayidx, align 8
  store i64 %4, i64* %element_count, align 8
  %5 = load i64* %padding_size.addr, align 8
  %6 = load i8** %base, align 8
  %idx.neg = sub i64 0, %5
  %add.ptr = getelementptr inbounds i8* %6, i64 %idx.neg
  store i8* %add.ptr, i8** %base, align 8
  %7 = load i8** %array_address.addr, align 8
  %8 = load i64* %element_count, align 8
  %9 = load i64* %element_size.addr, align 8
  %10 = load void (i8*)** %destructor.addr, align 8
  store i8* %7, i8** %array_address.addr.i, align 8
  store i64 %8, i64* %element_count.addr.i, align 8
  store i64 %9, i64* %element_size.addr.i, align 8
  store void (i8*)* %10, void (i8*)** %destructor.addr.i, align 8
  %11 = load void (i8*)** %destructor.addr.i, align 8
  %tobool.i = icmp ne void (i8*)* %11, null
  br i1 %tobool.i, label %if.then.i, label %__cxa_vec_dtor.exit

if.then.i:                                        ; preds = %if.then
  %12 = load i8** %array_address.addr.i, align 8
  %13 = load i64* %element_count.addr.i, align 8
  %14 = load i64* %element_size.addr.i, align 8
  %mul.i = mul i64 %13, %14
  %add.ptr.i = getelementptr inbounds i8* %12, i64 %mul.i
  store i8* %add.ptr.i, i8** %element.i, align 8
  %15 = load i8** %array_address.addr.i, align 8
  store i8* %15, i8** %beginning.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then.i
  %16 = load i8** %element.i, align 8
  %17 = load i8** %beginning.i, align 8
  %cmp.i = icmp ugt i8* %16, %17
  br i1 %cmp.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %18 = load i64* %element_size.addr.i, align 8
  %19 = load i8** %element.i, align 8
  %idx.neg.i = sub i64 0, %18
  %add.ptr1.i = getelementptr inbounds i8* %19, i64 %idx.neg.i
  store i8* %add.ptr1.i, i8** %element.i, align 8
  %20 = load void (i8*)** %destructor.addr.i, align 8
  %21 = load i8** %element.i, align 8
  call  void %20(i8* %21) nounwind
  br label %while.cond.i

while.end.i:                                      ; preds = %while.cond.i
  br label %__cxa_vec_dtor.exit

__cxa_vec_dtor.exit:                              ; preds = %while.end.i, %if.then
  %22 = load void (i8*, i64)** %deallocator.addr, align 8
  %tobool = icmp ne void (i8*, i64)* %22, null
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %__cxa_vec_dtor.exit
  %23 = load void (i8*, i64)** %deallocator.addr, align 8
  %24 = load i8** %base, align 8
  %25 = load i64* %element_count, align 8
  %26 = load i64* %element_size.addr, align 8
  %mul = mul i64 %25, %26
  %27 = load i64* %padding_size.addr, align 8
  %add = add i64 %mul, %27
  call  void %23(i8* %24, i64 %add)
  br label %if.end

if.end:                                           ; preds = %if.then1, %__cxa_vec_dtor.exit
  br label %if.end2

if.end2:                                          ; preds = %if.end, %entry
  ret void
}

declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.tid.y() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.tid.z() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.ntid.x() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.ntid.y() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.ntid.z() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() nounwind readnone

declare i32 @llvm.nvvm.read.ptx.sreg.nctaid.z() nounwind readnone

declare i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* nocapture) nounwind readnone

declare i8 addrspace(5)* @llvm.nvvm.ptr.gen.to.local.p5i8.p0i8(i8* nocapture) nounwind readnone

declare i32 @vprintf(i8*, i8*) nounwind

declare void @__assertfail(i8*, i8*, i32, i8*, i64) noreturn

declare void @llvm.nvvm.bar.warp.sync(i32) nounwind

define i32 @__pgi_threadidx(i32 %i) nounwind alwaysinline {
entry:
  %is_x = icmp eq i32 %i, 1
  br i1 %is_x, label %do_x, label %test_y

do_x:                                             ; preds = %entry
  %idx_x = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  ret i32 %idx_x

test_y:                                           ; preds = %entry
  %is_y = icmp eq i32 %i, 2
  br i1 %is_y, label %do_y, label %test_z

do_y:                                             ; preds = %test_y
  %idx_y = call i32 @llvm.nvvm.read.ptx.sreg.tid.y()
  ret i32 %idx_y

test_z:                                           ; preds = %test_y
  %is_z = icmp eq i32 %i, 3
  br i1 %is_z, label %do_z, label %fail

do_z:                                             ; preds = %test_z
  %idx_z = call i32 @llvm.nvvm.read.ptx.sreg.tid.z()
  ret i32 %idx_z

fail:                                             ; preds = %test_z
  ret i32 0
}

define i32 @__pgi_blockidx(i32 %i) nounwind alwaysinline {
entry:
  %is_x = icmp eq i32 %i, 1
  br i1 %is_x, label %do_x, label %test_y

do_x:                                             ; preds = %entry
  %idx_x = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  ret i32 %idx_x

test_y:                                           ; preds = %entry
  %is_y = icmp eq i32 %i, 2
  br i1 %is_y, label %do_y, label %test_z

do_y:                                             ; preds = %test_y
  %idx_y = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y()
  ret i32 %idx_y

test_z:                                           ; preds = %test_y
  %is_z = icmp eq i32 %i, 3
  br i1 %is_z, label %do_z, label %fail

do_z:                                             ; preds = %test_z
  %idx_z = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z()
  ret i32 %idx_z

fail:                                             ; preds = %test_z
  ret i32 0
}

define i32 @__pgi_numthreads(i32 %i) nounwind alwaysinline {
entry:
  %is_x = icmp eq i32 %i, 1
  br i1 %is_x, label %do_x, label %test_y

do_x:                                             ; preds = %entry
  %idx_x = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
  ret i32 %idx_x

test_y:                                           ; preds = %entry
  %is_y = icmp eq i32 %i, 2
  br i1 %is_y, label %do_y, label %test_z

do_y:                                             ; preds = %test_y
  %idx_y = call i32 @llvm.nvvm.read.ptx.sreg.ntid.y()
  ret i32 %idx_y

test_z:                                           ; preds = %test_y
  %is_z = icmp eq i32 %i, 3
  br i1 %is_z, label %do_z, label %fail

do_z:                                             ; preds = %test_z
  %idx_z = call i32 @llvm.nvvm.read.ptx.sreg.ntid.z()
  ret i32 %idx_z

fail:                                             ; preds = %test_z
  ret i32 0
}

define i32 @__pgi_numblocks(i32 %i) nounwind alwaysinline {
entry:
  %is_x = icmp eq i32 %i, 1
  br i1 %is_x, label %do_x, label %test_y

do_x:                                             ; preds = %entry
  %idx_x = call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x()
  ret i32 %idx_x

test_y:                                           ; preds = %entry
  %is_y = icmp eq i32 %i, 2
  br i1 %is_y, label %do_y, label %test_z

do_y:                                             ; preds = %test_y
  %idx_y = call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y()
  ret i32 %idx_y

test_z:                                           ; preds = %test_y
  %is_z = icmp eq i32 %i, 3
  br i1 %is_z, label %do_z, label %fail

do_z:                                             ; preds = %test_z
  %idx_z = call i32 @llvm.nvvm.read.ptx.sreg.nctaid.z()
  ret i32 %idx_z

fail:                                             ; preds = %test_z
  ret i32 0
}

define void @__pgi_print_string(i8* %str) nounwind alwaysinline {
entry:
  %r = call i32 @vprintf(i8* %str, i8* null)
  ret void
}

define void @pgf90_stop08a(i8* nocapture %exit_status, i8* %str, i64 %len) nounwind alwaysinline {
entry:
  %tmp91 = alloca [24 x i8], align 8
  %tmp91.0 = bitcast [24 x i8]* %tmp91 to i8*
  %tmp91.1 = call i8 addrspace(5)* @llvm.nvvm.ptr.gen.to.local.p5i8.p0i8(i8* %tmp91.0)
  %0 = bitcast i8 addrspace(5)* %tmp91.1 to [24 x i8] addrspace(5)*
  %tmp91.sub = getelementptr inbounds [24 x i8]* %tmp91, i64 0, i64 0
  %string.0 = bitcast [15 x i8] addrspace(1)* @"$str" to i8 addrspace(1)*
  %string = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string.0)
  %call = call i32 @vprintf(i8* %string, i8* null)
  %tobool = icmp eq i8* %str, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %tmp2 = load i8* %str, align 1
  %tobool3 = icmp eq i8 %tmp2, 0
  br i1 %tobool3, label %if.end18, label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then
  %tobool613 = icmp eq i64 %len, 0
  br i1 %tobool613, label %while.end, label %while.body.preheader

while.body.preheader:                             ; preds = %while.cond.preheader
  %bitCast.0 = bitcast [24 x i8]* %tmp91 to i8*
  %bitCast.1 = call i8 addrspace(5)* @llvm.nvvm.ptr.gen.to.local.p5i8.p0i8(i8* %bitCast.0)
  %bitCast = bitcast i8 addrspace(5)* %bitCast.1 to i32 addrspace(5)*
  br label %while.body

while.body:                                       ; preds = %while.body.while.body_crit_edge, %while.body.preheader
  %tmp8 = phi i8 [ %tmp8.pre, %while.body.while.body_crit_edge ], [ %tmp2, %while.body.preheader ]
  %len.addr.015 = phi i64 [ %dec, %while.body.while.body_crit_edge ], [ %len, %while.body.preheader ]
  %str.addr.014 = phi i8* [ %ptrincdec, %while.body.while.body_crit_edge ], [ %str, %while.body.preheader ]
  %dec = add i64 %len.addr.015, -1
  %ptrincdec = getelementptr inbounds i8* %str.addr.014, i64 1
  %conv = sext i8 %tmp8 to i32
  store i32 %conv, i32 addrspace(5)* %bitCast, align 8
  %string1.0 = bitcast [3 x i8] addrspace(1)* @"$str1" to i8 addrspace(1)*
  %string1 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string1.0)
  %call10 = call i32 @vprintf(i8* %string1, i8* %tmp91.sub)
  %tobool6 = icmp eq i64 %dec, 0
  br i1 %tobool6, label %while.end, label %while.body.while.body_crit_edge

while.body.while.body_crit_edge:                  ; preds = %while.body
  %tmp8.pre = load i8* %ptrincdec, align 1
  br label %while.body

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %string2.0 = bitcast [3 x i8] addrspace(1)* @"$str2" to i8 addrspace(1)*
  %string2 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string2.0)
  %call11 = call i32 @vprintf(i8* %string2, i8* null)
  br label %if.end18

if.else:                                          ; preds = %entry
  %conv13 = bitcast i8* %exit_status to i32*
  %tmp14 = load i32* %conv13, align 4
  %bitCast2.0 = bitcast [24 x i8]* %tmp91 to i8*
  %bitCast2.1 = call i8 addrspace(5)* @llvm.nvvm.ptr.gen.to.local.p5i8.p0i8(i8* %bitCast2.0)
  %bitCast2 = bitcast i8 addrspace(5)* %bitCast2.1 to i32 addrspace(5)*
  store i32 %tmp14, i32 addrspace(5)* %bitCast2, align 8
  %string3.0 = bitcast [5 x i8] addrspace(1)* @"$str3" to i8 addrspace(1)*
  %string3 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string3.0)
  %call17 = call i32 @vprintf(i8* %string3, i8* %tmp91.sub)
  br label %if.end18

if.end18:                                         ; preds = %if.else, %while.end, %if.then
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  %add = add i32 %1, 1
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y()
  %add22 = add i32 %2, 1
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z()
  %add25 = add i32 %3, 1
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %add28 = add i32 %4, 1
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.y()
  %add31 = add i32 %5, 1
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.z()
  %add34 = add i32 %6, 1
  %bitCast3.0 = bitcast [24 x i8]* %tmp91 to i8*
  %bitCast3.1 = call i8 addrspace(5)* @llvm.nvvm.ptr.gen.to.local.p5i8.p0i8(i8* %bitCast3.0)
  %bitCast3 = bitcast i8 addrspace(5)* %bitCast3.1 to i32 addrspace(5)*
  store i32 %add, i32 addrspace(5)* %bitCast3, align 8
  %getElem = getelementptr [24 x i8] addrspace(5)* %0, i64 0, i64 4
  %bitCast4 = bitcast i8 addrspace(5)* %getElem to i32 addrspace(5)*
  store i32 %add22, i32 addrspace(5)* %bitCast4, align 4
  %getElem5 = getelementptr [24 x i8] addrspace(5)* %0, i64 0, i64 8
  %bitCast6 = bitcast i8 addrspace(5)* %getElem5 to i32 addrspace(5)*
  store i32 %add25, i32 addrspace(5)* %bitCast6, align 8
  %getElem7 = getelementptr [24 x i8] addrspace(5)* %0, i64 0, i64 12
  %bitCast8 = bitcast i8 addrspace(5)* %getElem7 to i32 addrspace(5)*
  store i32 %add28, i32 addrspace(5)* %bitCast8, align 4
  %getElem9 = getelementptr [24 x i8] addrspace(5)* %0, i64 0, i64 16
  %bitCast10 = bitcast i8 addrspace(5)* %getElem9 to i32 addrspace(5)*
  store i32 %add31, i32 addrspace(5)* %bitCast10, align 8
  %getElem11 = getelementptr [24 x i8] addrspace(5)* %0, i64 0, i64 20
  %bitCast12 = bitcast i8 addrspace(5)* %getElem11 to i32 addrspace(5)*
  store i32 %add34, i32 addrspace(5)* %bitCast12, align 4
  %string4.0 = bitcast [37 x i8] addrspace(1)* @"$str4" to i8 addrspace(1)*
  %string4 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string4.0)
  %call45 = call i32 @vprintf(i8* %string4, i8* %tmp91.sub)
  %string5.0 = bitcast [23 x i8] addrspace(1)* @"$str5" to i8 addrspace(1)*
  %string5 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string5.0)
  %string6.0 = bitcast [10 x i8] addrspace(1)* @"$str6" to i8 addrspace(1)*
  %string6 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string6.0)
  %string7.0 = bitcast [14 x i8] addrspace(1)* @"$str7" to i8 addrspace(1)*
  %string7 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string7.0)
  call void @__assertfail(i8* %string5, i8* %string6, i32 28, i8* %string7, i64 1)
  ret void
}

define void @__pgi_fatal(i8* %str) nounwind alwaysinline {
entry:
  %tmp91 = alloca [24 x i8], align 8
  %tmp91.0 = bitcast [24 x i8]* %tmp91 to i8*
  %tmp91.1 = call i8 addrspace(5)* @llvm.nvvm.ptr.gen.to.local.p5i8.p0i8(i8* %tmp91.0)
  %0 = bitcast i8 addrspace(5)* %tmp91.1 to [24 x i8] addrspace(5)*
  %tmp91.sub = getelementptr inbounds [24 x i8]* %tmp91, i64 0, i64 0
  %string.0 = bitcast [52 x i8]* @"$strfatal" to i8 addrspace(1)*
  %string = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string.0)
  %call = call i32 @vprintf(i8* %string, i8* null)
  %string4.0 = bitcast [37 x i8] addrspace(1)* @"$str4" to i8 addrspace(1)*
  %string4 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string4.0)
  %call45 = call i32 @vprintf(i8* %string4, i8* %tmp91.sub)
  %string5.0 = bitcast [23 x i8] addrspace(1)* @"$str5" to i8 addrspace(1)*
  %string5 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string5.0)
  %string6.0 = bitcast [10 x i8] addrspace(1)* @"$str6" to i8 addrspace(1)*
  %string6 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string6.0)
  %string7.0 = bitcast [14 x i8] addrspace(1)* @"$str7" to i8 addrspace(1)*
  %string7 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %string7.0)
  call void @__assertfail(i8* %string5, i8* %string6, i32 28, i8* %string7, i64 1)
  ret void
}

define void @__pgi_syncwarp() nounwind alwaysinline {
  call void @llvm.nvvm.bar.warp.sync(i32 -1)
  ret void
}

define void @__pgi_assert_fail(i8* %assertion, i8* %filename, i32 %lineno, i8* %funcname) noreturn nounwind alwaysinline {
entry:
  call void @__assertfail(i8* %assertion, i8* %filename, i32 %lineno, i8* %funcname, i64 1)
  ret void
}

define void @__pgi_wassert(i8* %assertion, i8* %filename, i32 %lineno) noreturn nounwind alwaysinline {
entry:
  %nullstr1.0 = bitcast [1 x i8] addrspace(1)* @nullstr to i8 addrspace(1)*
  %nullstr1 = call i8* @llvm.nvvm.ptr.global.to.gen.p0i8.p1i8(i8 addrspace(1)* %nullstr1.0)
  call void @__assertfail(i8* %assertion, i8* %filename, i32 %lineno, i8* %nullstr1, i64 1)
  ret void
}

define  double @__pgi_atomicAddd_native_llvm(i8* %pgen, double %v) nounwind alwaysinline {
entry:
  %p = bitcast i8* %pgen to double*
  %r = call double @llvm.nvvm.atomic.load.add.f64.p0f64(double* %p, double %v)
  ret double %r
}

define  float @__pgi_atomicAddf_llvm(i8* %pgen, float %v) nounwind alwaysinline {
entry:
  %p = bitcast i8* %pgen to float*
  %r = call float @llvm.nvvm.atomic.load.add.f32.p0f32(float* %p, float %v)
  ret float %r
}

define  float @__pgi_atomicSubf_llvm(i8* %pgen, float %v) nounwind alwaysinline {
entry:
  %p = bitcast i8* %pgen to float*
  %neg_v = fsub float 0.000000e+00, %v
  %r = call float @llvm.nvvm.atomic.load.add.f32.p0f32(float* %p, float %neg_v)
  ret float %r
}

define  i32 @__pgi_atomicIncu_llvm(i8* %pgen, i32 %v) nounwind alwaysinline {
entry:
  %p = bitcast i8* %pgen to i32*
  %r = call i32 @llvm.nvvm.atomic.load.inc.32.p0i32(i32* %p, i32 %v)
  ret i32 %r
}

define  i32 @__pgi_atomicDecu_llvm(i8* %pgen, i32 %v) nounwind alwaysinline {
entry:
  %p = bitcast i8* %pgen to i32*
  %r = call i32 @llvm.nvvm.atomic.load.dec.32.p0i32(i32* %p, i32 %v)
  ret i32 %r
}

define  %struct.dcmplx2 @__pgi_atomicAddcd_llvm(i8* %p, %struct.dcmplx2 %x) nounwind alwaysinline {
  %xreal = extractvalue %struct.dcmplx2 %x, 0
  %ximag = extractvalue %struct.dcmplx2 %x, 1
  %rreal = tail call double @__pgi_atomicAddd_llvm(i8* %p, double %xreal)
  %pi = getelementptr i8* %p, i64 8
  %rimag = tail call double @__pgi_atomicAddd_llvm(i8* %pi, double %ximag)
  %retval = insertvalue %struct.dcmplx2 undef, double %rreal, 0
  %result = insertvalue %struct.dcmplx2 %retval, double %rimag, 1
  ret %struct.dcmplx2 %result
}

define  %struct.dcmplx2 @__pgi_atomicSubcd_llvm(i8* %p, %struct.dcmplx2 %x) nounwind alwaysinline {
  %xreal = extractvalue %struct.dcmplx2 %x, 0
  %ximag = extractvalue %struct.dcmplx2 %x, 1
  %rreal = tail call double @__pgi_atomicSubd_llvm(i8* %p, double %xreal)
  %pi = getelementptr i8* %p, i64 8
  %rimag = tail call double @__pgi_atomicSubd_llvm(i8* %pi, double %ximag)
  %retval = insertvalue %struct.dcmplx2 undef, double %rreal, 0
  %result = insertvalue %struct.dcmplx2 %retval, double %rimag, 1
  ret %struct.dcmplx2 %result
}

define  %struct.cmplx2 @__pgi_atomicAddcf_llvm(i8* %p, %struct.cmplx2 %x) nounwind alwaysinline {
  %xreal = extractvalue %struct.cmplx2 %x, 0
  %ximag = extractvalue %struct.cmplx2 %x, 1
  %rreal = tail call float @__pgi_atomicAddf_llvm(i8* %p, float %xreal)
  %pi = getelementptr i8* %p, i64 4
  %rimag = tail call float @__pgi_atomicAddf_llvm(i8* %pi, float %ximag)
  %retval = insertvalue %struct.cmplx2 undef, float %rreal, 0
  %result = insertvalue %struct.cmplx2 %retval, float %rimag, 1
  ret %struct.cmplx2 %result
}

define  %struct.cmplx2 @__pgi_atomicSubcf_llvm(i8* %p, %struct.cmplx2 %x) nounwind alwaysinline {
  %xreal = extractvalue %struct.cmplx2 %x, 0
  %ximag = extractvalue %struct.cmplx2 %x, 1
  %rreal = tail call float @__pgi_atomicSubf_llvm(i8* %p, float %xreal)
  %pi = getelementptr i8* %p, i64 4
  %rimag = tail call float @__pgi_atomicSubf_llvm(i8* %pi, float %ximag)
  %retval = insertvalue %struct.cmplx2 undef, float %rreal, 0
  %result = insertvalue %struct.cmplx2 %retval, float %rimag, 1
  ret %struct.cmplx2 %result
}

declare float @llvm.nvvm.atomic.load.add.f32.p0f32(float* nocapture, float) nounwind

declare double @llvm.nvvm.atomic.load.add.f64.p0f64(double*, double)

declare i32 @llvm.nvvm.atomic.load.inc.32.p0i32(i32* nocapture, i32) nounwind

declare i32 @llvm.nvvm.atomic.load.dec.32.p0i32(i32* nocapture, i32) nounwind

define  float @__pgi_texfetchf(i64 %text_desc, i32 %offset) nounwind alwaysinline {
entry:
  %0 = tail call { float, float, float, float } asm "tex.1d.v4.f32.s32 {$0, $1, $2, $3}, [$4, {$5}];", "=f,=f,=f,=f,N,r"(i64 %text_desc, i32 %offset) nounwind
  %r = extractvalue { float, float, float, float } %0, 0
  ret float %r
}

define  i32 @__pgi_texfetchu(i64 %text_desc, i32 %offset) nounwind alwaysinline {
entry:
  %0 = tail call { i32, i32, i32, i32 } asm "tex.1d.v4.u32.s32 {$0, $1, $2, $3}, [$4, {$5}];", "=r,=r,=r,=r,N,r"(i64 %text_desc, i32 %offset) nounwind
  %r = extractvalue { i32, i32, i32, i32 } %0, 0
  ret i32 %r
}

define  i32 @__pgi_texfetchi(i64 %text_desc, i32 %offset) nounwind alwaysinline {
entry:
  %0 = tail call { i32, i32, i32, i32 } asm "tex.1d.v4.s32.s32 {$0, $1, $2, $3}, [$4, {$5}];", "=r,=r,=r,=r,N,r"(i64 %text_desc, i32 %offset) nounwind
  %r = extractvalue { i32, i32, i32, i32 } %0, 0
  ret i32 %r
}

define  double @__pgi_texfetchd(i64 %text_desc, i32 %offset) nounwind alwaysinline {
entry:
  %0 = tail call { i32, i32, i32, i32 } asm "tex.1d.v4.u32.s32 {$0, $1, $2, $3}, [$4, {$5}];", "=r,=r,=r,=r,N,r"(i64 %text_desc, i32 %offset) nounwind
  %1 = extractvalue { i32, i32, i32, i32 } %0, 0
  %2 = extractvalue { i32, i32, i32, i32 } %0, 1
  %3 = zext i32 %1 to i64
  %4 = zext i32 %2 to i64
  %5 = shl nuw i64 %4, 32
  %6 = or i64 %5, %3
  %r = bitcast i64 %6 to double
  ret double %r
}

define %struct.dcmplx2 @__pgi_dcmplxadd_llvm(%struct.dcmplx2 %x, %struct.dcmplx2 %y) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.dcmplx2 %x, 0
  %ximag = extractvalue %struct.dcmplx2 %x, 1
  %yreal = extractvalue %struct.dcmplx2 %y, 0
  %yimag = extractvalue %struct.dcmplx2 %y, 1
  %rreal = fadd double %xreal, %yreal
  %rimag = fadd double %ximag, %yimag
  %retval = insertvalue %struct.dcmplx2 undef, double %rreal, 0
  %result = insertvalue %struct.dcmplx2 %retval, double %rimag, 1
  ret %struct.dcmplx2 %result
}

define %struct.dcmplx2 @__pgi_dcmplxsub_llvm(%struct.dcmplx2 %x, %struct.dcmplx2 %y) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.dcmplx2 %x, 0
  %ximag = extractvalue %struct.dcmplx2 %x, 1
  %yreal = extractvalue %struct.dcmplx2 %y, 0
  %yimag = extractvalue %struct.dcmplx2 %y, 1
  %rreal = fsub double %xreal, %yreal
  %rimag = fsub double %ximag, %yimag
  %retval = insertvalue %struct.dcmplx2 undef, double %rreal, 0
  %result = insertvalue %struct.dcmplx2 %retval, double %rimag, 1
  ret %struct.dcmplx2 %result
}

define %struct.dcmplx2 @__pgi_dcmplxmul_llvm(%struct.dcmplx2 %x, %struct.dcmplx2 %y) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.dcmplx2 %x, 0
  %ximag = extractvalue %struct.dcmplx2 %x, 1
  %yreal = extractvalue %struct.dcmplx2 %y, 0
  %yimag = extractvalue %struct.dcmplx2 %y, 1
  %rreala = fmul double %xreal, %yreal
  %rrealb = fmul double %ximag, %yimag
  %rreal = fsub double %rreala, %rrealb
  %rimaga = fmul double %xreal, %yimag
  %rimagb = fmul double %ximag, %yreal
  %rimag = fadd double %rimaga, %rimagb
  %retval = insertvalue %struct.dcmplx2 undef, double %rreal, 0
  %result = insertvalue %struct.dcmplx2 %retval, double %rimag, 1
  ret %struct.dcmplx2 %result
}

define %struct.cmplx2 @__pgi_scmplxadd_llvm(%struct.cmplx2 %x, %struct.cmplx2 %y) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.cmplx2 %x, 0
  %ximag = extractvalue %struct.cmplx2 %x, 1
  %yreal = extractvalue %struct.cmplx2 %y, 0
  %yimag = extractvalue %struct.cmplx2 %y, 1
  %rreal = fadd float %xreal, %yreal
  %rimag = fadd float %ximag, %yimag
  %retval = insertvalue %struct.cmplx2 undef, float %rreal, 0
  %result = insertvalue %struct.cmplx2 %retval, float %rimag, 1
  ret %struct.cmplx2 %result
}

define %struct.cmplx2 @__pgi_scmplxsub_llvm(%struct.cmplx2 %x, %struct.cmplx2 %y) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.cmplx2 %x, 0
  %ximag = extractvalue %struct.cmplx2 %x, 1
  %yreal = extractvalue %struct.cmplx2 %y, 0
  %yimag = extractvalue %struct.cmplx2 %y, 1
  %rreal = fsub float %xreal, %yreal
  %rimag = fsub float %ximag, %yimag
  %retval = insertvalue %struct.cmplx2 undef, float %rreal, 0
  %result = insertvalue %struct.cmplx2 %retval, float %rimag, 1
  ret %struct.cmplx2 %result
}

define %struct.cmplx2 @__pgi_scmplxmul_llvm(%struct.cmplx2 %x, %struct.cmplx2 %y) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.cmplx2 %x, 0
  %ximag = extractvalue %struct.cmplx2 %x, 1
  %yreal = extractvalue %struct.cmplx2 %y, 0
  %yimag = extractvalue %struct.cmplx2 %y, 1
  %rreala = fmul float %xreal, %yreal
  %rrealb = fmul float %ximag, %yimag
  %rreal = fsub float %rreala, %rrealb
  %rimaga = fmul float %xreal, %yimag
  %rimagb = fmul float %ximag, %yreal
  %rimag = fadd float %rimaga, %rimagb
  %retval = insertvalue %struct.cmplx2 undef, float %rreal, 0
  %result = insertvalue %struct.cmplx2 %retval, float %rimag, 1
  ret %struct.cmplx2 %result
}

define %struct.dcmplx2 @__pgi_shfl_downdc2(%struct.dcmplx2 %x, i32 %delta) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.dcmplx2 %x, 0
  %ximag = extractvalue %struct.dcmplx2 %x, 1
  %rreal = tail call double @__pgi_shfl_downd2(double %xreal, i32 %delta)
  %rimag = tail call double @__pgi_shfl_downd2(double %ximag, i32 %delta)
  %retval = insertvalue %struct.dcmplx2 undef, double %rreal, 0
  %result = insertvalue %struct.dcmplx2 %retval, double %rimag, 1
  ret %struct.dcmplx2 %result
}

define %struct.cmplx2 @__pgi_shfl_downsc2(%struct.cmplx2 %x, i32 %delta) nounwind alwaysinline {
entry:
  %xreal = extractvalue %struct.cmplx2 %x, 0
  %ximag = extractvalue %struct.cmplx2 %x, 1
  %rreal = tail call float @__pgi_shfl_downf2(float %xreal, i32 %delta)
  %rimag = tail call float @__pgi_shfl_downf2(float %ximag, i32 %delta)
  %retval = insertvalue %struct.cmplx2 undef, float %rreal, 0
  %result = insertvalue %struct.cmplx2 %retval, float %rimag, 1
  ret %struct.cmplx2 %result
}

!0 = metadata !{i32 775235}                       
!1 = metadata !{i32 775564}                       
!2 = metadata !{i32 781141}                       
!3 = metadata !{i32 781666}                       
!4 = metadata !{i32 782165}                       
!5 = metadata !{i32 782262}                       
!6 = metadata !{i32 782403}                       
!7 = metadata !{i32 782799}                       
!8 = metadata !{i32 783123}                       
!9 = metadata !{i32 783220}                       
!10 = metadata !{i32 783361}                      
!11 = metadata !{i32 783757}                      
!12 = metadata !{i32 784037}                      
!13 = metadata !{i32 784134}                      
!14 = metadata !{i32 784275}                      
!15 = metadata !{i32 784671}                      
!16 = metadata !{i32 784967}                      
!17 = metadata !{i32 785504}                      
!18 = metadata !{i32 785994}                      
!19 = metadata !{i32 786091}                      
!20 = metadata !{i32 786232}                      
!21 = metadata !{i32 786628}                      
!22 = metadata !{i32 786943}                      
!23 = metadata !{i32 787040}                      
!24 = metadata !{i32 787181}                      
!25 = metadata !{i32 787577}                      
!26 = metadata !{i32 787857}                      
!27 = metadata !{i32 788366}                      
!28 = metadata !{i32 788860}                      
!29 = metadata !{i32 789381}                      
!30 = metadata !{i32 789870}                      
!31 = metadata !{i32 789967}                      
!32 = metadata !{i32 790105}                      
!33 = metadata !{i32 790492}                      
!34 = metadata !{i32 790806}                      
!35 = metadata !{i32 790903}                      
!36 = metadata !{i32 791041}                      
!37 = metadata !{i32 791428}                      
!38 = metadata !{i32 791706}                      
!39 = metadata !{i32 791803}                      
!40 = metadata !{i32 791941}                      
!41 = metadata !{i32 792328}                      
!42 = metadata !{i32 792633}                      
!43 = metadata !{i32 792730}                      
!44 = metadata !{i32 792868}                      
!45 = metadata !{i32 793255}                      
!46 = metadata !{i32 793548}                      
!47 = metadata !{i32 794080}                      
!48 = metadata !{i32 794585}                      
!49 = metadata !{i32 795119}                      
!50 = metadata !{i32 795615}                      
!51 = metadata !{i32 795712}                      
!52 = metadata !{i32 795852}                      
!53 = metadata !{i32 796245}                      
!54 = metadata !{i32 796568}                      
!55 = metadata !{i32 796665}                      
!56 = metadata !{i32 796805}                      
!57 = metadata !{i32 797198}                      
!58 = metadata !{i32 797479}                      
!59 = metadata !{i32 797576}                      
!60 = metadata !{i32 797716}                      
!61 = metadata !{i32 798109}                      
!62 = metadata !{i32 798423}                      
!63 = metadata !{i32 798520}                      
!64 = metadata !{i32 798660}                      
!65 = metadata !{i32 799053}                      
!66 = metadata !{i32 799338}                      
!67 = metadata !{i32 799868}                      
!68 = metadata !{i32 800377}                      
!69 = metadata !{i32 800919}                      
!70 = metadata !{i32 801423}                      
!71 = metadata !{i32 801520}                      
!72 = metadata !{i32 801663}                      
!73 = metadata !{i32 802065}                      
!74 = metadata !{i32 802390}                      
!75 = metadata !{i32 802487}                      
!76 = metadata !{i32 802630}                      
!77 = metadata !{i32 803032}                      
!78 = metadata !{i32 803315}                      
!79 = metadata !{i32 803412}                      
!80 = metadata !{i32 803555}                      
!81 = metadata !{i32 803957}                      
!82 = metadata !{i32 804273}                      
!83 = metadata !{i32 804370}                      
!84 = metadata !{i32 804513}                      
!85 = metadata !{i32 804915}                      
!86 = metadata !{i32 805158}                      
!87 = metadata !{i32 805480}                      
!88 = metadata !{i32 805801}                      
!89 = metadata !{i32 805873}                      
!90 = metadata !{i32 806014}                      
!91 = metadata !{i32 806155}                      
!92 = metadata !{i32 806437}                      
!93 = metadata !{i32 806509}                      
!94 = metadata !{i32 806650}                      
!95 = metadata !{i32 806791}                      
!96 = metadata !{i32 807029}                      
!97 = metadata !{i32 807101}                      
!98 = metadata !{i32 807242}                      
!99 = metadata !{i32 807383}                      
!100 = metadata !{i32 807612}                     
!101 = metadata !{i32 807946}                     
!102 = metadata !{i32 808258}                     
!103 = metadata !{i32 808330}                     
!104 = metadata !{i32 808471}                     
!105 = metadata !{i32 808612}                     
!106 = metadata !{i32 808885}                     
!107 = metadata !{i32 808957}                     
!108 = metadata !{i32 809098}                     
!109 = metadata !{i32 809239}                     
!110 = metadata !{i32 809469}                     
!111 = metadata !{i32 809778}                     
!112 = metadata !{i32 810072}                     
!113 = metadata !{i32 810414}                     
!114 = metadata !{i32 810728}                     
!115 = metadata !{i32 810800}                     
!116 = metadata !{i32 810938}                     
!117 = metadata !{i32 811076}                     
!118 = metadata !{i32 811369}                     
!119 = metadata !{i32 811441}                     
!120 = metadata !{i32 811579}                     
!121 = metadata !{i32 811717}                     
!122 = metadata !{i32 811953}                     
!123 = metadata !{i32 812025}                     
!124 = metadata !{i32 812163}                     
!125 = metadata !{i32 812301}                     
!126 = metadata !{i32 812585}                     
!127 = metadata !{i32 812657}                     
!128 = metadata !{i32 812795}                     
!129 = metadata !{i32 812933}                     
!130 = metadata !{i32 813178}                     
!131 = metadata !{i32 813531}                     
!132 = metadata !{i32 813834}                     
!133 = metadata !{i32 814189}                     
!134 = metadata !{i32 814508}                     
!135 = metadata !{i32 814580}                     
!136 = metadata !{i32 814720}                     
!137 = metadata !{i32 814860}                     
!138 = metadata !{i32 815164}                     
!139 = metadata !{i32 815236}                     
!140 = metadata !{i32 815376}                     
!141 = metadata !{i32 815516}                     
!142 = metadata !{i32 815755}                     
!143 = metadata !{i32 815827}                     
!144 = metadata !{i32 815967}                     
!145 = metadata !{i32 816107}                     
!146 = metadata !{i32 816402}                     
!147 = metadata !{i32 816474}                     
!148 = metadata !{i32 816614}                     
!149 = metadata !{i32 816754}                     
!150 = metadata !{i32 816990}                     
!151 = metadata !{i32 817337}                     
!152 = metadata !{i32 817641}                     
!153 = metadata !{i32 818000}                     
!154 = metadata !{i32 818324}                     
!155 = metadata !{i32 818396}                     
!156 = metadata !{i32 818539}                     
!157 = metadata !{i32 818682}                     
!158 = metadata !{i32 818987}                     
!159 = metadata !{i32 819059}                     
!160 = metadata !{i32 819202}                     
!161 = metadata !{i32 819345}                     
!162 = metadata !{i32 819586}                     
!163 = metadata !{i32 819658}                     
!164 = metadata !{i32 819801}                     
!165 = metadata !{i32 819944}                     
!166 = metadata !{i32 820240}                     
!167 = metadata !{i32 820312}                     
!168 = metadata !{i32 820455}                     
!169 = metadata !{i32 820598}                     
!170 = metadata !{i32 824882}                     
!171 = metadata !{i32 988898}                     
!172 = metadata !{i32 988975}                     
!173 = metadata !{i32 989053}                     
!174 = metadata !{i32 989132}                     
!175 = metadata !{i32 989211}                     
!176 = metadata !{i32 989290}                     
!177 = metadata !{i32 989369}                     
!178 = metadata !{i32 989448}                     
!179 = metadata !{i32 989527}                     
!180 = metadata !{i32 989606}                     
!181 = metadata !{i32 989685}                     
!182 = metadata !{i32 989764}                     
!183 = metadata !{i32 989843}                     
!184 = metadata !{i32 989922}                     
!185 = metadata !{i32 990001}                     
!186 = metadata !{i32 990811}                     
!187 = metadata !{i32 990886}                     
!188 = metadata !{i32 991592}                     
!189 = metadata !{i32 991667}                     
!190 = metadata !{i32 991742}                     
!191 = metadata !{i32 991817}                     
!192 = metadata !{i32 992524}                     
!193 = metadata !{i32 992599}                     
!194 = metadata !{i32 992674}                     
!195 = metadata !{i32 992749}                     
!196 = metadata !{i32 992824}                     
!197 = metadata !{i32 992899}                     
!198 = metadata !{i32 992974}                     
!199 = metadata !{i32 993049}                     
!200 = metadata !{i32 993169, i32 993174, i32 993215, i32 993256, i32 993305, i32 993372, i32 993421} 
!201 = metadata !{i32 993601, i32 993606, i32 993647, i32 993688, i32 993737, i32 993804, i32 993853} 
!202 = metadata !{i32 994036, i32 994041, i32 994082, i32 994131, i32 994198} 
!203 = metadata !{i32 1002257}                    
!204 = metadata !{i32 53227}
!205 = metadata !{i32 53440}
!206 = metadata !{i32 53664}
!207 = metadata !{i32 53934}
!208 = metadata !{i32 54129}
!209 = metadata !{i32 54370}
!210 = metadata !{i32 54577}
!211 = metadata !{i32 54830}
!212 = metadata !{i32 55031}
!213 = metadata !{i32 55271}
!214 = metadata !{i32 55424}
